Search.setIndex({"docnames": ["ADMINISTRATA", "API", "CHANGELOG", "CONTACT", "CREDITS", "DISCLAIMER", "EFFICIENCY", "EXAMPLES", "FAQ", "GIT", "GUIDELINES", "INSTALLATION", "LICENSE", "NIX-README", "PUBLICATIONS", "README", "SOLVERS", "USAGE", "VIEWERS", "VKML", "contents", "design", "external_definitions", "generated/examples", "generated/examples.benchmarking", "generated/examples.benchmarking.benchmarker", "generated/examples.benchmarking.size", "generated/examples.benchmarking.steps", "generated/examples.benchmarking.utils", "generated/examples.benchmarking.versions", "generated/examples.cahnHilliard", "generated/examples.cahnHilliard.mesh2D", "generated/examples.cahnHilliard.mesh2DCoupled", "generated/examples.cahnHilliard.mesh3D", "generated/examples.cahnHilliard.sphere", "generated/examples.cahnHilliard.sphereDaemon", "generated/examples.cahnHilliard.tanh1D", "generated/examples.cahnHilliard.test", "generated/examples.chemotaxis", "generated/examples.chemotaxis.input", "generated/examples.chemotaxis.input2D", "generated/examples.chemotaxis.parameters", "generated/examples.chemotaxis.test", "generated/examples.convection", "generated/examples.convection.advection", "generated/examples.convection.advection.explicitUpwind", "generated/examples.convection.advection.implicitUpwind", "generated/examples.convection.advection.vanLeerUpwind", "generated/examples.convection.exponential1D", "generated/examples.convection.exponential1D.cylindricalMesh1D", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform", "generated/examples.convection.exponential1D.mesh1D", "generated/examples.convection.exponential1D.tri2D", "generated/examples.convection.exponential1DBack", "generated/examples.convection.exponential1DBack.mesh1D", "generated/examples.convection.exponential1DSource", "generated/examples.convection.exponential1DSource.mesh1D", "generated/examples.convection.exponential1DSource.tri2D", "generated/examples.convection.exponential2D", "generated/examples.convection.exponential2D.cylindricalMesh2D", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform", "generated/examples.convection.exponential2D.mesh2D", "generated/examples.convection.exponential2D.tri2D", "generated/examples.convection.peclet", "generated/examples.convection.powerLaw1D", "generated/examples.convection.powerLaw1D.mesh1D", "generated/examples.convection.powerLaw1D.tri2D", "generated/examples.convection.robin", "generated/examples.convection.source", "generated/examples.convection.test", "generated/examples.diffusion", "generated/examples.diffusion.anisotropy", "generated/examples.diffusion.circle", "generated/examples.diffusion.circleQuad", "generated/examples.diffusion.coupled", "generated/examples.diffusion.electrostatics", "generated/examples.diffusion.explicit", "generated/examples.diffusion.explicit.mesh1D", "generated/examples.diffusion.explicit.mixedelement", "generated/examples.diffusion.explicit.test", "generated/examples.diffusion.explicit.tri2D", "generated/examples.diffusion.mesh1D", "generated/examples.diffusion.mesh20x20", "generated/examples.diffusion.mesh20x20Coupled", "generated/examples.diffusion.nthOrder", "generated/examples.diffusion.nthOrder.input4thOrder1D", "generated/examples.diffusion.nthOrder.input4thOrder_line", "generated/examples.diffusion.nthOrder.test", "generated/examples.diffusion.steadyState", "generated/examples.diffusion.steadyState.mesh1D", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic", "generated/examples.diffusion.steadyState.mesh1D.tri2Dinput", "generated/examples.diffusion.steadyState.mesh20x20", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput", "generated/examples.diffusion.steadyState.mesh20x20.isotropy", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror", "generated/examples.diffusion.steadyState.mesh20x20.tri2Dinput", "generated/examples.diffusion.steadyState.mesh50x50", "generated/examples.diffusion.steadyState.mesh50x50.input", "generated/examples.diffusion.steadyState.mesh50x50.tri2Dinput", "generated/examples.diffusion.steadyState.otherMeshes", "generated/examples.diffusion.steadyState.otherMeshes.prism", "generated/examples.diffusion.steadyState.test", "generated/examples.diffusion.test", "generated/examples.diffusion.variable", "generated/examples.elphf", "generated/examples.elphf.diffusion", "generated/examples.elphf.diffusion.mesh1D", "generated/examples.elphf.diffusion.mesh1Ddimensional", "generated/examples.elphf.diffusion.mesh2D", "generated/examples.elphf.input", "generated/examples.elphf.phase", "generated/examples.elphf.phaseDiffusion", "generated/examples.elphf.poisson", "generated/examples.elphf.test", "generated/examples.flow", "generated/examples.flow.stokesCavity", "generated/examples.flow.test", "generated/examples.levelSet", "generated/examples.levelSet.advection", "generated/examples.levelSet.advection.circle", "generated/examples.levelSet.advection.mesh1D", "generated/examples.levelSet.advection.test", "generated/examples.levelSet.advection.trench", "generated/examples.levelSet.distanceFunction", "generated/examples.levelSet.distanceFunction.circle", "generated/examples.levelSet.distanceFunction.interior", "generated/examples.levelSet.distanceFunction.mesh1D", "generated/examples.levelSet.distanceFunction.square", "generated/examples.levelSet.distanceFunction.test", "generated/examples.levelSet.electroChem", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation", "generated/examples.levelSet.electroChem.adsorption", "generated/examples.levelSet.electroChem.gapFillDistanceVariable", "generated/examples.levelSet.electroChem.gapFillMesh", "generated/examples.levelSet.electroChem.gold", "generated/examples.levelSet.electroChem.howToWriteAScript", "generated/examples.levelSet.electroChem.leveler", "generated/examples.levelSet.electroChem.lines", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation", "generated/examples.levelSet.electroChem.simpleTrenchSystem", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "generated/examples.levelSet.electroChem.test", "generated/examples.levelSet.electroChem.trenchMesh", "generated/examples.levelSet.surfactant", "generated/examples.levelSet.surfactant.circle", "generated/examples.levelSet.surfactant.expandingCircle", "generated/examples.levelSet.surfactant.square", "generated/examples.levelSet.surfactant.test", "generated/examples.levelSet.test", "generated/examples.meshing", "generated/examples.meshing.gmshRefinement", "generated/examples.meshing.inputGrid2D", "generated/examples.meshing.sphere", "generated/examples.meshing.test", "generated/examples.parallel", "generated/examples.phase", "generated/examples.phase.anisotropy", "generated/examples.phase.anisotropyOLD", "generated/examples.phase.binary", "generated/examples.phase.binaryCoupled", "generated/examples.phase.impingement", "generated/examples.phase.impingement.mesh20x20", "generated/examples.phase.impingement.mesh40x1", "generated/examples.phase.impingement.test", "generated/examples.phase.missOrientation", "generated/examples.phase.missOrientation.circle", "generated/examples.phase.missOrientation.mesh1D", "generated/examples.phase.missOrientation.modCircle", "generated/examples.phase.missOrientation.test", "generated/examples.phase.polyxtal", "generated/examples.phase.polyxtalCoupled", "generated/examples.phase.quaternary", "generated/examples.phase.simple", "generated/examples.phase.symmetry", "generated/examples.phase.test", "generated/examples.reactiveWetting", "generated/examples.reactiveWetting.liquidVapor1D", "generated/examples.reactiveWetting.liquidVapor2D", "generated/examples.reactiveWetting.test", "generated/examples.riemann", "generated/examples.riemann.acoustics", "generated/examples.riemann.test", "generated/examples.test", "generated/examples.updating", "generated/examples.updating.update0_1to1_0", "generated/examples.updating.update1_0to2_0", "generated/examples.updating.update2_0to3_0", "generated/fipy", "generated/fipy.boundaryConditions", "generated/fipy.boundaryConditions.boundaryCondition", "generated/fipy.boundaryConditions.constraint", "generated/fipy.boundaryConditions.fixedFlux", "generated/fipy.boundaryConditions.fixedValue", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition", "generated/fipy.boundaryConditions.test", "generated/fipy.matrices", "generated/fipy.matrices.offsetSparseMatrix", "generated/fipy.matrices.petscMatrix", "generated/fipy.matrices.pysparseMatrix", "generated/fipy.matrices.scipyMatrix", "generated/fipy.matrices.sparseMatrix", "generated/fipy.matrices.test", "generated/fipy.matrices.trilinosMatrix", "generated/fipy.meshes", "generated/fipy.meshes.abstractMesh", "generated/fipy.meshes.builders", "generated/fipy.meshes.builders.abstractGridBuilder", "generated/fipy.meshes.builders.grid1DBuilder", "generated/fipy.meshes.builders.grid2DBuilder", "generated/fipy.meshes.builders.grid3DBuilder", "generated/fipy.meshes.builders.periodicGrid1DBuilder", "generated/fipy.meshes.builders.utilityClasses", "generated/fipy.meshes.cylindricalGrid1D", "generated/fipy.meshes.cylindricalGrid2D", "generated/fipy.meshes.cylindricalNonUniformGrid1D", "generated/fipy.meshes.cylindricalNonUniformGrid2D", "generated/fipy.meshes.cylindricalUniformGrid1D", "generated/fipy.meshes.cylindricalUniformGrid2D", "generated/fipy.meshes.factoryMeshes", "generated/fipy.meshes.gmshMesh", "generated/fipy.meshes.grid1D", "generated/fipy.meshes.grid2D", "generated/fipy.meshes.grid3D", "generated/fipy.meshes.mesh", "generated/fipy.meshes.mesh1D", "generated/fipy.meshes.mesh2D", "generated/fipy.meshes.nonUniformGrid1D", "generated/fipy.meshes.nonUniformGrid2D", "generated/fipy.meshes.nonUniformGrid3D", "generated/fipy.meshes.periodicGrid1D", "generated/fipy.meshes.periodicGrid2D", "generated/fipy.meshes.periodicGrid3D", "generated/fipy.meshes.representations", "generated/fipy.meshes.representations.abstractRepresentation", "generated/fipy.meshes.representations.gridRepresentation", "generated/fipy.meshes.representations.meshRepresentation", "generated/fipy.meshes.skewedGrid2D", "generated/fipy.meshes.sphericalNonUniformGrid1D", "generated/fipy.meshes.sphericalUniformGrid1D", "generated/fipy.meshes.test", "generated/fipy.meshes.topologies", "generated/fipy.meshes.topologies.abstractTopology", "generated/fipy.meshes.topologies.gridTopology", "generated/fipy.meshes.topologies.meshTopology", "generated/fipy.meshes.tri2D", "generated/fipy.meshes.uniformGrid", "generated/fipy.meshes.uniformGrid1D", "generated/fipy.meshes.uniformGrid2D", "generated/fipy.solvers", "generated/fipy.solvers.convergence", "generated/fipy.solvers.petsc", "generated/fipy.solvers.petsc.comms", "generated/fipy.solvers.petsc.comms.parallelPETScCommWrapper", "generated/fipy.solvers.petsc.comms.petscCommWrapper", "generated/fipy.solvers.petsc.comms.serialPETScCommWrapper", "generated/fipy.solvers.petsc.dummySolver", "generated/fipy.solvers.petsc.linearBicgSolver", "generated/fipy.solvers.petsc.linearCGSSolver", "generated/fipy.solvers.petsc.linearGMRESSolver", "generated/fipy.solvers.petsc.linearLUSolver", "generated/fipy.solvers.petsc.linearPCGSolver", "generated/fipy.solvers.petsc.petscConvergence", "generated/fipy.solvers.petsc.petscKrylovSolver", "generated/fipy.solvers.petsc.petscSolver", "generated/fipy.solvers.petsc.preconditioners", "generated/fipy.solvers.petsc.preconditioners.defaultPreconditioner", "generated/fipy.solvers.petsc.preconditioners.icPreconditioner", "generated/fipy.solvers.petsc.preconditioners.iluPreconditioner", "generated/fipy.solvers.petsc.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.petsc.preconditioners.luPreconditioner", "generated/fipy.solvers.petsc.preconditioners.petscPreconditioner", "generated/fipy.solvers.petsc.preconditioners.ssorPreconditioner", "generated/fipy.solvers.preconditioner", "generated/fipy.solvers.pyAMG", "generated/fipy.solvers.pyAMG.linearCGSSolver", "generated/fipy.solvers.pyAMG.linearGMRESSolver", "generated/fipy.solvers.pyAMG.linearGeneralSolver", "generated/fipy.solvers.pyAMG.linearLUSolver", "generated/fipy.solvers.pyAMG.linearPCGSolver", "generated/fipy.solvers.pyAMG.preconditioners", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "generated/fipy.solvers.pyamgx", "generated/fipy.solvers.pyamgx.aggregationAMGSolver", "generated/fipy.solvers.pyamgx.classicalAMGSolver", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver", "generated/fipy.solvers.pyamgx.linearFGMRESSolver", "generated/fipy.solvers.pyamgx.linearGMRESSolver", "generated/fipy.solvers.pyamgx.linearLUSolver", "generated/fipy.solvers.pyamgx.linearPCGSolver", "generated/fipy.solvers.pyamgx.preconditioners", "generated/fipy.solvers.pyamgx.pyAMGXSolver", "generated/fipy.solvers.pyamgx.pyamgxConvergence", "generated/fipy.solvers.pyamgx.smoothers", "generated/fipy.solvers.pysparse", "generated/fipy.solvers.pysparse.linearCGSSolver", "generated/fipy.solvers.pysparse.linearGMRESSolver", "generated/fipy.solvers.pysparse.linearInitialSolver", "generated/fipy.solvers.pysparse.linearJORSolver", "generated/fipy.solvers.pysparse.linearLUSolver", "generated/fipy.solvers.pysparse.linearPCGSolver", "generated/fipy.solvers.pysparse.linearRHSSolver", "generated/fipy.solvers.pysparse.preconditioners", "generated/fipy.solvers.pysparse.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.pysparse.preconditioners.pysparsePreconditioner", "generated/fipy.solvers.pysparse.preconditioners.ssorPreconditioner", "generated/fipy.solvers.pysparse.pysparseConvergence", "generated/fipy.solvers.pysparse.pysparseSolver", "generated/fipy.solvers.pysparseMatrixSolver", "generated/fipy.solvers.scipy", "generated/fipy.solvers.scipy.linearBicgstabSolver", "generated/fipy.solvers.scipy.linearCGSSolver", "generated/fipy.solvers.scipy.linearGMRESSolver", "generated/fipy.solvers.scipy.linearLUSolver", "generated/fipy.solvers.scipy.linearPCGSolver", "generated/fipy.solvers.scipy.preconditioners", "generated/fipy.solvers.scipy.preconditioners.iluPreconditioner", "generated/fipy.solvers.scipy.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.scipy.preconditioners.scipyPreconditioner", "generated/fipy.solvers.scipy.scipyConvergence", "generated/fipy.solvers.scipy.scipyKrylovSolver", "generated/fipy.solvers.scipy.scipySolver", "generated/fipy.solvers.solver", "generated/fipy.solvers.test", "generated/fipy.solvers.trilinos", "generated/fipy.solvers.trilinos.aztecConvergence", "generated/fipy.solvers.trilinos.comms", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper", "generated/fipy.solvers.trilinos.comms.parallelEpetraCommWrapper", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "generated/fipy.solvers.trilinos.linearBicgstabSolver", "generated/fipy.solvers.trilinos.linearCGSSolver", "generated/fipy.solvers.trilinos.linearGMRESSolver", "generated/fipy.solvers.trilinos.linearLUSolver", "generated/fipy.solvers.trilinos.linearPCGSolver", "generated/fipy.solvers.trilinos.preconditioners", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.iluPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.trilinosPreconditioner", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver", "generated/fipy.solvers.trilinos.trilinosMLTest", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver", "generated/fipy.solvers.trilinos.trilinosSolver", "generated/fipy.steppers", "generated/fipy.steppers.pidStepper", "generated/fipy.steppers.pseudoRKQSStepper", "generated/fipy.steppers.stepper", "generated/fipy.terms", "generated/fipy.terms.abstractBinaryTerm", "generated/fipy.terms.abstractConvectionTerm", "generated/fipy.terms.abstractDiffusionTerm", "generated/fipy.terms.abstractUpwindConvectionTerm", "generated/fipy.terms.advectionTerm", "generated/fipy.terms.asymmetricConvectionTerm", "generated/fipy.terms.binaryTerm", "generated/fipy.terms.cellTerm", "generated/fipy.terms.centralDiffConvectionTerm", "generated/fipy.terms.coupledBinaryTerm", "generated/fipy.terms.diffusionTerm", "generated/fipy.terms.diffusionTermCorrection", "generated/fipy.terms.diffusionTermNoCorrection", "generated/fipy.terms.explicitDiffusionTerm", "generated/fipy.terms.explicitSourceTerm", "generated/fipy.terms.explicitUpwindConvectionTerm", "generated/fipy.terms.exponentialConvectionTerm", "generated/fipy.terms.faceTerm", "generated/fipy.terms.firstOrderAdvectionTerm", "generated/fipy.terms.hybridConvectionTerm", "generated/fipy.terms.implicitDiffusionTerm", "generated/fipy.terms.implicitSourceTerm", "generated/fipy.terms.nonDiffusionTerm", "generated/fipy.terms.powerLawConvectionTerm", "generated/fipy.terms.residualTerm", "generated/fipy.terms.sourceTerm", "generated/fipy.terms.term", "generated/fipy.terms.test", "generated/fipy.terms.transientTerm", "generated/fipy.terms.unaryTerm", "generated/fipy.terms.upwindConvectionTerm", "generated/fipy.terms.vanLeerConvectionTerm", "generated/fipy.testFiPy", "generated/fipy.tests", "generated/fipy.tests.doctestPlus", "generated/fipy.tests.lateImportTest", "generated/fipy.tests.test", "generated/fipy.tests.testProgram", "generated/fipy.tools", "generated/fipy.tools.comms", "generated/fipy.tools.comms.commWrapper", "generated/fipy.tools.comms.dummyComm", "generated/fipy.tools.debug", "generated/fipy.tools.decorators", "generated/fipy.tools.dimensions", "generated/fipy.tools.dimensions.DictWithDefault", "generated/fipy.tools.dimensions.NumberDict", "generated/fipy.tools.dimensions.physicalField", "generated/fipy.tools.dump", "generated/fipy.tools.inline", "generated/fipy.tools.logging", "generated/fipy.tools.logging.environment", "generated/fipy.tools.numerix", "generated/fipy.tools.parser", "generated/fipy.tools.sharedtempfile", "generated/fipy.tools.test", "generated/fipy.tools.vector", "generated/fipy.tools.version", "generated/fipy.variables", "generated/fipy.variables.addOverFacesVariable", "generated/fipy.variables.arithmeticCellToFaceVariable", "generated/fipy.variables.betaNoiseVariable", "generated/fipy.variables.binaryOperatorVariable", "generated/fipy.variables.cellToFaceVariable", "generated/fipy.variables.cellVariable", "generated/fipy.variables.constant", "generated/fipy.variables.constraintMask", "generated/fipy.variables.coupledCellVariable", "generated/fipy.variables.distanceVariable", "generated/fipy.variables.exponentialNoiseVariable", "generated/fipy.variables.faceGradContributionsVariable", "generated/fipy.variables.faceGradVariable", "generated/fipy.variables.faceVariable", "generated/fipy.variables.gammaNoiseVariable", "generated/fipy.variables.gaussCellGradVariable", "generated/fipy.variables.gaussianNoiseVariable", "generated/fipy.variables.harmonicCellToFaceVariable", "generated/fipy.variables.histogramVariable", "generated/fipy.variables.interfaceAreaVariable", "generated/fipy.variables.interfaceFlagVariable", "generated/fipy.variables.leastSquaresCellGradVariable", "generated/fipy.variables.levelSetDiffusionVariable", "generated/fipy.variables.meshVariable", "generated/fipy.variables.minmodCellToFaceVariable", "generated/fipy.variables.modCellGradVariable", "generated/fipy.variables.modCellToFaceVariable", "generated/fipy.variables.modFaceGradVariable", "generated/fipy.variables.modPhysicalField", "generated/fipy.variables.modularVariable", "generated/fipy.variables.noiseVariable", "generated/fipy.variables.operatorVariable", "generated/fipy.variables.scharfetterGummelFaceVariable", "generated/fipy.variables.surfactantConvectionVariable", "generated/fipy.variables.surfactantVariable", "generated/fipy.variables.test", "generated/fipy.variables.unaryOperatorVariable", "generated/fipy.variables.uniformNoiseVariable", "generated/fipy.variables.variable", "generated/fipy.viewers", "generated/fipy.viewers.matplotlibViewer", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlibViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib1DViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DContourViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibStreamViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibVectorViewer", "generated/fipy.viewers.matplotlibViewer.test", "generated/fipy.viewers.mayaviViewer", "generated/fipy.viewers.mayaviViewer.mayaviClient", "generated/fipy.viewers.mayaviViewer.mayaviDaemon", "generated/fipy.viewers.mayaviViewer.test", "generated/fipy.viewers.multiViewer", "generated/fipy.viewers.test", "generated/fipy.viewers.testinteractive", "generated/fipy.viewers.tsvViewer", "generated/fipy.viewers.viewer", "generated/fipy.viewers.vtkViewer", "generated/fipy.viewers.vtkViewer.test", "generated/fipy.viewers.vtkViewer.vtkCellViewer", "generated/fipy.viewers.vtkViewer.vtkFaceViewer", "generated/fipy.viewers.vtkViewer.vtkViewer", "glossary", "introduction", "manual", "numerical/discret", "numerical/equation", "numerical/index", "numerical/scheme", "references", "tutorial/generated/package", "tutorial/generated/package.subpackage", "tutorial/generated/package.subpackage.base", "tutorial/generated/package.subpackage.object", "tutorial/index"], "filenames": ["ADMINISTRATA.rst", "API.rst", "CHANGELOG.rst", "CONTACT.rst", "CREDITS.rst", "DISCLAIMER.rst", "EFFICIENCY.rst", "EXAMPLES.rst", "FAQ.rst", "GIT.rst", "GUIDELINES.rst", "INSTALLATION.rst", "LICENSE.rst", "NIX-README.rst", "PUBLICATIONS.rst", "README.rst", "SOLVERS.rst", "USAGE.rst", "VIEWERS.rst", "VKML.rst", "contents.rst", "design.rst", "external_definitions.rst", "generated/examples.rst", "generated/examples.benchmarking.rst", "generated/examples.benchmarking.benchmarker.rst", "generated/examples.benchmarking.size.rst", "generated/examples.benchmarking.steps.rst", "generated/examples.benchmarking.utils.rst", "generated/examples.benchmarking.versions.rst", "generated/examples.cahnHilliard.rst", "generated/examples.cahnHilliard.mesh2D.rst", "generated/examples.cahnHilliard.mesh2DCoupled.rst", "generated/examples.cahnHilliard.mesh3D.rst", "generated/examples.cahnHilliard.sphere.rst", "generated/examples.cahnHilliard.sphereDaemon.rst", "generated/examples.cahnHilliard.tanh1D.rst", "generated/examples.cahnHilliard.test.rst", "generated/examples.chemotaxis.rst", "generated/examples.chemotaxis.input.rst", "generated/examples.chemotaxis.input2D.rst", "generated/examples.chemotaxis.parameters.rst", "generated/examples.chemotaxis.test.rst", "generated/examples.convection.rst", "generated/examples.convection.advection.rst", "generated/examples.convection.advection.explicitUpwind.rst", "generated/examples.convection.advection.implicitUpwind.rst", "generated/examples.convection.advection.vanLeerUpwind.rst", "generated/examples.convection.exponential1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform.rst", "generated/examples.convection.exponential1D.mesh1D.rst", "generated/examples.convection.exponential1D.tri2D.rst", "generated/examples.convection.exponential1DBack.rst", "generated/examples.convection.exponential1DBack.mesh1D.rst", "generated/examples.convection.exponential1DSource.rst", "generated/examples.convection.exponential1DSource.mesh1D.rst", "generated/examples.convection.exponential1DSource.tri2D.rst", "generated/examples.convection.exponential2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform.rst", "generated/examples.convection.exponential2D.mesh2D.rst", "generated/examples.convection.exponential2D.tri2D.rst", "generated/examples.convection.peclet.rst", "generated/examples.convection.powerLaw1D.rst", "generated/examples.convection.powerLaw1D.mesh1D.rst", "generated/examples.convection.powerLaw1D.tri2D.rst", "generated/examples.convection.robin.rst", "generated/examples.convection.source.rst", "generated/examples.convection.test.rst", "generated/examples.diffusion.rst", "generated/examples.diffusion.anisotropy.rst", "generated/examples.diffusion.circle.rst", "generated/examples.diffusion.circleQuad.rst", "generated/examples.diffusion.coupled.rst", "generated/examples.diffusion.electrostatics.rst", "generated/examples.diffusion.explicit.rst", "generated/examples.diffusion.explicit.mesh1D.rst", "generated/examples.diffusion.explicit.mixedelement.rst", "generated/examples.diffusion.explicit.test.rst", "generated/examples.diffusion.explicit.tri2D.rst", "generated/examples.diffusion.mesh1D.rst", "generated/examples.diffusion.mesh20x20.rst", "generated/examples.diffusion.mesh20x20Coupled.rst", "generated/examples.diffusion.nthOrder.rst", "generated/examples.diffusion.nthOrder.input4thOrder1D.rst", "generated/examples.diffusion.nthOrder.input4thOrder_line.rst", "generated/examples.diffusion.nthOrder.test.rst", "generated/examples.diffusion.steadyState.rst", "generated/examples.diffusion.steadyState.mesh1D.rst", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic.rst", "generated/examples.diffusion.steadyState.mesh1D.tri2Dinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.rst", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.isotropy.rst", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput.rst", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror.rst", "generated/examples.diffusion.steadyState.mesh20x20.tri2Dinput.rst", "generated/examples.diffusion.steadyState.mesh50x50.rst", "generated/examples.diffusion.steadyState.mesh50x50.input.rst", "generated/examples.diffusion.steadyState.mesh50x50.tri2Dinput.rst", "generated/examples.diffusion.steadyState.otherMeshes.rst", "generated/examples.diffusion.steadyState.otherMeshes.prism.rst", "generated/examples.diffusion.steadyState.test.rst", "generated/examples.diffusion.test.rst", "generated/examples.diffusion.variable.rst", "generated/examples.elphf.rst", "generated/examples.elphf.diffusion.rst", "generated/examples.elphf.diffusion.mesh1D.rst", "generated/examples.elphf.diffusion.mesh1Ddimensional.rst", "generated/examples.elphf.diffusion.mesh2D.rst", "generated/examples.elphf.input.rst", "generated/examples.elphf.phase.rst", "generated/examples.elphf.phaseDiffusion.rst", "generated/examples.elphf.poisson.rst", "generated/examples.elphf.test.rst", "generated/examples.flow.rst", "generated/examples.flow.stokesCavity.rst", "generated/examples.flow.test.rst", "generated/examples.levelSet.rst", "generated/examples.levelSet.advection.rst", "generated/examples.levelSet.advection.circle.rst", "generated/examples.levelSet.advection.mesh1D.rst", "generated/examples.levelSet.advection.test.rst", "generated/examples.levelSet.advection.trench.rst", "generated/examples.levelSet.distanceFunction.rst", "generated/examples.levelSet.distanceFunction.circle.rst", "generated/examples.levelSet.distanceFunction.interior.rst", "generated/examples.levelSet.distanceFunction.mesh1D.rst", "generated/examples.levelSet.distanceFunction.square.rst", "generated/examples.levelSet.distanceFunction.test.rst", "generated/examples.levelSet.electroChem.rst", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation.rst", "generated/examples.levelSet.electroChem.adsorption.rst", "generated/examples.levelSet.electroChem.gapFillDistanceVariable.rst", "generated/examples.levelSet.electroChem.gapFillMesh.rst", "generated/examples.levelSet.electroChem.gold.rst", "generated/examples.levelSet.electroChem.howToWriteAScript.rst", "generated/examples.levelSet.electroChem.leveler.rst", "generated/examples.levelSet.electroChem.lines.rst", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer.rst", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer.rst", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation.rst", "generated/examples.levelSet.electroChem.simpleTrenchSystem.rst", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation.rst", "generated/examples.levelSet.electroChem.test.rst", "generated/examples.levelSet.electroChem.trenchMesh.rst", "generated/examples.levelSet.surfactant.rst", "generated/examples.levelSet.surfactant.circle.rst", "generated/examples.levelSet.surfactant.expandingCircle.rst", "generated/examples.levelSet.surfactant.square.rst", "generated/examples.levelSet.surfactant.test.rst", "generated/examples.levelSet.test.rst", "generated/examples.meshing.rst", "generated/examples.meshing.gmshRefinement.rst", "generated/examples.meshing.inputGrid2D.rst", "generated/examples.meshing.sphere.rst", "generated/examples.meshing.test.rst", "generated/examples.parallel.rst", "generated/examples.phase.rst", "generated/examples.phase.anisotropy.rst", "generated/examples.phase.anisotropyOLD.rst", "generated/examples.phase.binary.rst", "generated/examples.phase.binaryCoupled.rst", "generated/examples.phase.impingement.rst", "generated/examples.phase.impingement.mesh20x20.rst", "generated/examples.phase.impingement.mesh40x1.rst", "generated/examples.phase.impingement.test.rst", "generated/examples.phase.missOrientation.rst", "generated/examples.phase.missOrientation.circle.rst", "generated/examples.phase.missOrientation.mesh1D.rst", "generated/examples.phase.missOrientation.modCircle.rst", "generated/examples.phase.missOrientation.test.rst", "generated/examples.phase.polyxtal.rst", "generated/examples.phase.polyxtalCoupled.rst", "generated/examples.phase.quaternary.rst", "generated/examples.phase.simple.rst", "generated/examples.phase.symmetry.rst", "generated/examples.phase.test.rst", "generated/examples.reactiveWetting.rst", "generated/examples.reactiveWetting.liquidVapor1D.rst", "generated/examples.reactiveWetting.liquidVapor2D.rst", "generated/examples.reactiveWetting.test.rst", "generated/examples.riemann.rst", "generated/examples.riemann.acoustics.rst", "generated/examples.riemann.test.rst", "generated/examples.test.rst", "generated/examples.updating.rst", "generated/examples.updating.update0_1to1_0.rst", "generated/examples.updating.update1_0to2_0.rst", "generated/examples.updating.update2_0to3_0.rst", "generated/fipy.rst", "generated/fipy.boundaryConditions.rst", "generated/fipy.boundaryConditions.boundaryCondition.rst", "generated/fipy.boundaryConditions.constraint.rst", "generated/fipy.boundaryConditions.fixedFlux.rst", "generated/fipy.boundaryConditions.fixedValue.rst", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition.rst", "generated/fipy.boundaryConditions.test.rst", "generated/fipy.matrices.rst", "generated/fipy.matrices.offsetSparseMatrix.rst", "generated/fipy.matrices.petscMatrix.rst", "generated/fipy.matrices.pysparseMatrix.rst", "generated/fipy.matrices.scipyMatrix.rst", "generated/fipy.matrices.sparseMatrix.rst", "generated/fipy.matrices.test.rst", "generated/fipy.matrices.trilinosMatrix.rst", "generated/fipy.meshes.rst", "generated/fipy.meshes.abstractMesh.rst", "generated/fipy.meshes.builders.rst", "generated/fipy.meshes.builders.abstractGridBuilder.rst", "generated/fipy.meshes.builders.grid1DBuilder.rst", "generated/fipy.meshes.builders.grid2DBuilder.rst", "generated/fipy.meshes.builders.grid3DBuilder.rst", "generated/fipy.meshes.builders.periodicGrid1DBuilder.rst", "generated/fipy.meshes.builders.utilityClasses.rst", "generated/fipy.meshes.cylindricalGrid1D.rst", "generated/fipy.meshes.cylindricalGrid2D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid1D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid2D.rst", "generated/fipy.meshes.cylindricalUniformGrid1D.rst", "generated/fipy.meshes.cylindricalUniformGrid2D.rst", "generated/fipy.meshes.factoryMeshes.rst", "generated/fipy.meshes.gmshMesh.rst", "generated/fipy.meshes.grid1D.rst", "generated/fipy.meshes.grid2D.rst", "generated/fipy.meshes.grid3D.rst", "generated/fipy.meshes.mesh.rst", "generated/fipy.meshes.mesh1D.rst", "generated/fipy.meshes.mesh2D.rst", "generated/fipy.meshes.nonUniformGrid1D.rst", "generated/fipy.meshes.nonUniformGrid2D.rst", "generated/fipy.meshes.nonUniformGrid3D.rst", "generated/fipy.meshes.periodicGrid1D.rst", "generated/fipy.meshes.periodicGrid2D.rst", "generated/fipy.meshes.periodicGrid3D.rst", "generated/fipy.meshes.representations.rst", "generated/fipy.meshes.representations.abstractRepresentation.rst", "generated/fipy.meshes.representations.gridRepresentation.rst", "generated/fipy.meshes.representations.meshRepresentation.rst", "generated/fipy.meshes.skewedGrid2D.rst", "generated/fipy.meshes.sphericalNonUniformGrid1D.rst", "generated/fipy.meshes.sphericalUniformGrid1D.rst", "generated/fipy.meshes.test.rst", "generated/fipy.meshes.topologies.rst", "generated/fipy.meshes.topologies.abstractTopology.rst", "generated/fipy.meshes.topologies.gridTopology.rst", "generated/fipy.meshes.topologies.meshTopology.rst", "generated/fipy.meshes.tri2D.rst", "generated/fipy.meshes.uniformGrid.rst", "generated/fipy.meshes.uniformGrid1D.rst", "generated/fipy.meshes.uniformGrid2D.rst", "generated/fipy.solvers.rst", "generated/fipy.solvers.convergence.rst", "generated/fipy.solvers.petsc.rst", "generated/fipy.solvers.petsc.comms.rst", "generated/fipy.solvers.petsc.comms.parallelPETScCommWrapper.rst", "generated/fipy.solvers.petsc.comms.petscCommWrapper.rst", "generated/fipy.solvers.petsc.comms.serialPETScCommWrapper.rst", "generated/fipy.solvers.petsc.dummySolver.rst", "generated/fipy.solvers.petsc.linearBicgSolver.rst", "generated/fipy.solvers.petsc.linearCGSSolver.rst", "generated/fipy.solvers.petsc.linearGMRESSolver.rst", "generated/fipy.solvers.petsc.linearLUSolver.rst", "generated/fipy.solvers.petsc.linearPCGSolver.rst", "generated/fipy.solvers.petsc.petscConvergence.rst", "generated/fipy.solvers.petsc.petscKrylovSolver.rst", "generated/fipy.solvers.petsc.petscSolver.rst", "generated/fipy.solvers.petsc.preconditioners.rst", "generated/fipy.solvers.petsc.preconditioners.defaultPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.icPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.iluPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.luPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.petscPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.ssorPreconditioner.rst", "generated/fipy.solvers.preconditioner.rst", "generated/fipy.solvers.pyAMG.rst", "generated/fipy.solvers.pyAMG.linearCGSSolver.rst", "generated/fipy.solvers.pyAMG.linearGMRESSolver.rst", "generated/fipy.solvers.pyAMG.linearGeneralSolver.rst", "generated/fipy.solvers.pyAMG.linearLUSolver.rst", "generated/fipy.solvers.pyAMG.linearPCGSolver.rst", "generated/fipy.solvers.pyAMG.preconditioners.rst", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.rst", "generated/fipy.solvers.pyamgx.rst", "generated/fipy.solvers.pyamgx.aggregationAMGSolver.rst", "generated/fipy.solvers.pyamgx.classicalAMGSolver.rst", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver.rst", "generated/fipy.solvers.pyamgx.linearFGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearLUSolver.rst", "generated/fipy.solvers.pyamgx.linearPCGSolver.rst", "generated/fipy.solvers.pyamgx.preconditioners.rst", "generated/fipy.solvers.pyamgx.pyAMGXSolver.rst", "generated/fipy.solvers.pyamgx.pyamgxConvergence.rst", "generated/fipy.solvers.pyamgx.smoothers.rst", "generated/fipy.solvers.pysparse.rst", "generated/fipy.solvers.pysparse.linearCGSSolver.rst", "generated/fipy.solvers.pysparse.linearGMRESSolver.rst", "generated/fipy.solvers.pysparse.linearInitialSolver.rst", "generated/fipy.solvers.pysparse.linearJORSolver.rst", "generated/fipy.solvers.pysparse.linearLUSolver.rst", "generated/fipy.solvers.pysparse.linearPCGSolver.rst", "generated/fipy.solvers.pysparse.linearRHSSolver.rst", "generated/fipy.solvers.pysparse.preconditioners.rst", "generated/fipy.solvers.pysparse.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.pysparse.preconditioners.pysparsePreconditioner.rst", "generated/fipy.solvers.pysparse.preconditioners.ssorPreconditioner.rst", "generated/fipy.solvers.pysparse.pysparseConvergence.rst", "generated/fipy.solvers.pysparse.pysparseSolver.rst", "generated/fipy.solvers.pysparseMatrixSolver.rst", "generated/fipy.solvers.scipy.rst", "generated/fipy.solvers.scipy.linearBicgstabSolver.rst", "generated/fipy.solvers.scipy.linearCGSSolver.rst", "generated/fipy.solvers.scipy.linearGMRESSolver.rst", "generated/fipy.solvers.scipy.linearLUSolver.rst", "generated/fipy.solvers.scipy.linearPCGSolver.rst", "generated/fipy.solvers.scipy.preconditioners.rst", "generated/fipy.solvers.scipy.preconditioners.iluPreconditioner.rst", "generated/fipy.solvers.scipy.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.scipy.preconditioners.scipyPreconditioner.rst", "generated/fipy.solvers.scipy.scipyConvergence.rst", "generated/fipy.solvers.scipy.scipyKrylovSolver.rst", "generated/fipy.solvers.scipy.scipySolver.rst", "generated/fipy.solvers.solver.rst", "generated/fipy.solvers.test.rst", "generated/fipy.solvers.trilinos.rst", "generated/fipy.solvers.trilinos.aztecConvergence.rst", "generated/fipy.solvers.trilinos.comms.rst", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.linearBicgstabSolver.rst", "generated/fipy.solvers.trilinos.linearCGSSolver.rst", "generated/fipy.solvers.trilinos.linearGMRESSolver.rst", "generated/fipy.solvers.trilinos.linearLUSolver.rst", "generated/fipy.solvers.trilinos.linearPCGSolver.rst", "generated/fipy.solvers.trilinos.preconditioners.rst", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.iluPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.trilinosPreconditioner.rst", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver.rst", "generated/fipy.solvers.trilinos.trilinosMLTest.rst", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver.rst", "generated/fipy.solvers.trilinos.trilinosSolver.rst", "generated/fipy.steppers.rst", "generated/fipy.steppers.pidStepper.rst", "generated/fipy.steppers.pseudoRKQSStepper.rst", "generated/fipy.steppers.stepper.rst", "generated/fipy.terms.rst", "generated/fipy.terms.abstractBinaryTerm.rst", "generated/fipy.terms.abstractConvectionTerm.rst", "generated/fipy.terms.abstractDiffusionTerm.rst", "generated/fipy.terms.abstractUpwindConvectionTerm.rst", "generated/fipy.terms.advectionTerm.rst", "generated/fipy.terms.asymmetricConvectionTerm.rst", "generated/fipy.terms.binaryTerm.rst", "generated/fipy.terms.cellTerm.rst", "generated/fipy.terms.centralDiffConvectionTerm.rst", "generated/fipy.terms.coupledBinaryTerm.rst", "generated/fipy.terms.diffusionTerm.rst", "generated/fipy.terms.diffusionTermCorrection.rst", "generated/fipy.terms.diffusionTermNoCorrection.rst", "generated/fipy.terms.explicitDiffusionTerm.rst", "generated/fipy.terms.explicitSourceTerm.rst", "generated/fipy.terms.explicitUpwindConvectionTerm.rst", "generated/fipy.terms.exponentialConvectionTerm.rst", "generated/fipy.terms.faceTerm.rst", "generated/fipy.terms.firstOrderAdvectionTerm.rst", "generated/fipy.terms.hybridConvectionTerm.rst", "generated/fipy.terms.implicitDiffusionTerm.rst", "generated/fipy.terms.implicitSourceTerm.rst", "generated/fipy.terms.nonDiffusionTerm.rst", "generated/fipy.terms.powerLawConvectionTerm.rst", "generated/fipy.terms.residualTerm.rst", "generated/fipy.terms.sourceTerm.rst", "generated/fipy.terms.term.rst", "generated/fipy.terms.test.rst", "generated/fipy.terms.transientTerm.rst", "generated/fipy.terms.unaryTerm.rst", "generated/fipy.terms.upwindConvectionTerm.rst", "generated/fipy.terms.vanLeerConvectionTerm.rst", "generated/fipy.testFiPy.rst", "generated/fipy.tests.rst", "generated/fipy.tests.doctestPlus.rst", "generated/fipy.tests.lateImportTest.rst", "generated/fipy.tests.test.rst", "generated/fipy.tests.testProgram.rst", "generated/fipy.tools.rst", "generated/fipy.tools.comms.rst", "generated/fipy.tools.comms.commWrapper.rst", "generated/fipy.tools.comms.dummyComm.rst", "generated/fipy.tools.debug.rst", "generated/fipy.tools.decorators.rst", "generated/fipy.tools.dimensions.rst", "generated/fipy.tools.dimensions.DictWithDefault.rst", "generated/fipy.tools.dimensions.NumberDict.rst", "generated/fipy.tools.dimensions.physicalField.rst", "generated/fipy.tools.dump.rst", "generated/fipy.tools.inline.rst", "generated/fipy.tools.logging.rst", "generated/fipy.tools.logging.environment.rst", "generated/fipy.tools.numerix.rst", "generated/fipy.tools.parser.rst", "generated/fipy.tools.sharedtempfile.rst", "generated/fipy.tools.test.rst", "generated/fipy.tools.vector.rst", "generated/fipy.tools.version.rst", "generated/fipy.variables.rst", "generated/fipy.variables.addOverFacesVariable.rst", "generated/fipy.variables.arithmeticCellToFaceVariable.rst", "generated/fipy.variables.betaNoiseVariable.rst", "generated/fipy.variables.binaryOperatorVariable.rst", "generated/fipy.variables.cellToFaceVariable.rst", "generated/fipy.variables.cellVariable.rst", "generated/fipy.variables.constant.rst", "generated/fipy.variables.constraintMask.rst", "generated/fipy.variables.coupledCellVariable.rst", "generated/fipy.variables.distanceVariable.rst", "generated/fipy.variables.exponentialNoiseVariable.rst", "generated/fipy.variables.faceGradContributionsVariable.rst", "generated/fipy.variables.faceGradVariable.rst", "generated/fipy.variables.faceVariable.rst", "generated/fipy.variables.gammaNoiseVariable.rst", "generated/fipy.variables.gaussCellGradVariable.rst", "generated/fipy.variables.gaussianNoiseVariable.rst", "generated/fipy.variables.harmonicCellToFaceVariable.rst", "generated/fipy.variables.histogramVariable.rst", "generated/fipy.variables.interfaceAreaVariable.rst", "generated/fipy.variables.interfaceFlagVariable.rst", "generated/fipy.variables.leastSquaresCellGradVariable.rst", "generated/fipy.variables.levelSetDiffusionVariable.rst", "generated/fipy.variables.meshVariable.rst", "generated/fipy.variables.minmodCellToFaceVariable.rst", "generated/fipy.variables.modCellGradVariable.rst", "generated/fipy.variables.modCellToFaceVariable.rst", "generated/fipy.variables.modFaceGradVariable.rst", "generated/fipy.variables.modPhysicalField.rst", "generated/fipy.variables.modularVariable.rst", "generated/fipy.variables.noiseVariable.rst", "generated/fipy.variables.operatorVariable.rst", "generated/fipy.variables.scharfetterGummelFaceVariable.rst", "generated/fipy.variables.surfactantConvectionVariable.rst", "generated/fipy.variables.surfactantVariable.rst", "generated/fipy.variables.test.rst", "generated/fipy.variables.unaryOperatorVariable.rst", "generated/fipy.variables.uniformNoiseVariable.rst", "generated/fipy.variables.variable.rst", "generated/fipy.viewers.rst", "generated/fipy.viewers.matplotlibViewer.rst", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.rst", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib1DViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibStreamViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibVectorViewer.rst", "generated/fipy.viewers.matplotlibViewer.test.rst", "generated/fipy.viewers.mayaviViewer.rst", "generated/fipy.viewers.mayaviViewer.mayaviClient.rst", "generated/fipy.viewers.mayaviViewer.mayaviDaemon.rst", "generated/fipy.viewers.mayaviViewer.test.rst", "generated/fipy.viewers.multiViewer.rst", "generated/fipy.viewers.test.rst", "generated/fipy.viewers.testinteractive.rst", "generated/fipy.viewers.tsvViewer.rst", "generated/fipy.viewers.viewer.rst", "generated/fipy.viewers.vtkViewer.rst", "generated/fipy.viewers.vtkViewer.test.rst", "generated/fipy.viewers.vtkViewer.vtkCellViewer.rst", "generated/fipy.viewers.vtkViewer.vtkFaceViewer.rst", "generated/fipy.viewers.vtkViewer.vtkViewer.rst", "glossary.rst", "introduction.rst", "manual.rst", "numerical/discret.rst", "numerical/equation.rst", "numerical/index.rst", "numerical/scheme.rst", "references.rst", "tutorial/generated/package.rst", "tutorial/generated/package.subpackage.rst", "tutorial/generated/package.subpackage.base.rst", "tutorial/generated/package.subpackage.object.rst", "tutorial/index.rst"], "titles": ["Git practices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fipy</span></code> Package Documentation", "Change Log", "Contact", "Contributors", "Disclaimer", "Efficiency", "Examples", "Frequently Asked Questions", "Git usage", "Development Guidelines", "Installation", "Terms of Use", "Nix Installation", "Publications", "Overview", "Solvers", "Using FiPy", "Viewers", "Virtual Kinetics of Materials Laboratory", "FiPy Contents", "Design and Implementation", "External Command-line Flags", "examples", "examples.benchmarking", "examples.benchmarking.benchmarker", "examples.benchmarking.size", "examples.benchmarking.steps", "examples.benchmarking.utils", "examples.benchmarking.versions", "examples.cahnHilliard", "examples.cahnHilliard.mesh2D", "examples.cahnHilliard.mesh2DCoupled", "examples.cahnHilliard.mesh3D", "examples.cahnHilliard.sphere", "examples.cahnHilliard.sphereDaemon", "examples.cahnHilliard.tanh1D", "examples.cahnHilliard.test", "examples.chemotaxis", "examples.chemotaxis.input", "examples.chemotaxis.input2D", "examples.chemotaxis.parameters", "examples.chemotaxis.test", "examples.convection", "examples.convection.advection", "examples.convection.advection.explicitUpwind", "examples.convection.advection.implicitUpwind", "examples.convection.advection.vanLeerUpwind", "examples.convection.exponential1D", "examples.convection.exponential1D.cylindricalMesh1D", "examples.convection.exponential1D.cylindricalMesh1DNonUniform", "examples.convection.exponential1D.mesh1D", "examples.convection.exponential1D.tri2D", "examples.convection.exponential1DBack", "examples.convection.exponential1DBack.mesh1D", "examples.convection.exponential1DSource", "examples.convection.exponential1DSource.mesh1D", "examples.convection.exponential1DSource.tri2D", "examples.convection.exponential2D", "examples.convection.exponential2D.cylindricalMesh2D", "examples.convection.exponential2D.cylindricalMesh2DNonUniform", "examples.convection.exponential2D.mesh2D", "examples.convection.exponential2D.tri2D", "examples.convection.peclet", "examples.convection.powerLaw1D", "examples.convection.powerLaw1D.mesh1D", "examples.convection.powerLaw1D.tri2D", "examples.convection.robin", "examples.convection.source", "examples.convection.test", "examples.diffusion", "examples.diffusion.anisotropy", "examples.diffusion.circle", "examples.diffusion.circleQuad", "examples.diffusion.coupled", "examples.diffusion.electrostatics", "examples.diffusion.explicit", "examples.diffusion.explicit.mesh1D", "examples.diffusion.explicit.mixedelement", "examples.diffusion.explicit.test", "examples.diffusion.explicit.tri2D", "examples.diffusion.mesh1D", "examples.diffusion.mesh20x20", "examples.diffusion.mesh20x20Coupled", "examples.diffusion.nthOrder", "examples.diffusion.nthOrder.input4thOrder1D", "examples.diffusion.nthOrder.input4thOrder_line", "examples.diffusion.nthOrder.test", "examples.diffusion.steadyState", "examples.diffusion.steadyState.mesh1D", "examples.diffusion.steadyState.mesh1D.inputPeriodic", "examples.diffusion.steadyState.mesh1D.tri2Dinput", "examples.diffusion.steadyState.mesh20x20", "examples.diffusion.steadyState.mesh20x20.gmshinput", "examples.diffusion.steadyState.mesh20x20.isotropy", "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "examples.diffusion.steadyState.mesh20x20.orthoerror", "examples.diffusion.steadyState.mesh20x20.tri2Dinput", "examples.diffusion.steadyState.mesh50x50", "examples.diffusion.steadyState.mesh50x50.input", "examples.diffusion.steadyState.mesh50x50.tri2Dinput", "examples.diffusion.steadyState.otherMeshes", "examples.diffusion.steadyState.otherMeshes.prism", "examples.diffusion.steadyState.test", "examples.diffusion.test", "examples.diffusion.variable", "examples.elphf", "examples.elphf.diffusion", "examples.elphf.diffusion.mesh1D", "examples.elphf.diffusion.mesh1Ddimensional", "examples.elphf.diffusion.mesh2D", "examples.elphf.input", "examples.elphf.phase", "examples.elphf.phaseDiffusion", "examples.elphf.poisson", "examples.elphf.test", "examples.flow", "examples.flow.stokesCavity", "examples.flow.test", "examples.levelSet", "examples.levelSet.advection", "examples.levelSet.advection.circle", "examples.levelSet.advection.mesh1D", "examples.levelSet.advection.test", "examples.levelSet.advection.trench", "examples.levelSet.distanceFunction", "examples.levelSet.distanceFunction.circle", "examples.levelSet.distanceFunction.interior", "examples.levelSet.distanceFunction.mesh1D", "examples.levelSet.distanceFunction.square", "examples.levelSet.distanceFunction.test", "examples.levelSet.electroChem", "examples.levelSet.electroChem.adsorbingSurfactantEquation", "examples.levelSet.electroChem.adsorption", "examples.levelSet.electroChem.gapFillDistanceVariable", "examples.levelSet.electroChem.gapFillMesh", "examples.levelSet.electroChem.gold", "examples.levelSet.electroChem.howToWriteAScript", "examples.levelSet.electroChem.leveler", "examples.levelSet.electroChem.lines", "examples.levelSet.electroChem.matplotlibSurfactantViewer", "examples.levelSet.electroChem.mayaviSurfactantViewer", "examples.levelSet.electroChem.metalIonDiffusionEquation", "examples.levelSet.electroChem.simpleTrenchSystem", "examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "examples.levelSet.electroChem.test", "examples.levelSet.electroChem.trenchMesh", "examples.levelSet.surfactant", "examples.levelSet.surfactant.circle", "examples.levelSet.surfactant.expandingCircle", "examples.levelSet.surfactant.square", "examples.levelSet.surfactant.test", "examples.levelSet.test", "examples.meshing", "examples.meshing.gmshRefinement", "examples.meshing.inputGrid2D", "examples.meshing.sphere", "examples.meshing.test", "examples.parallel", "examples.phase", "examples.phase.anisotropy", "examples.phase.anisotropyOLD", "examples.phase.binary", "examples.phase.binaryCoupled", "examples.phase.impingement", "examples.phase.impingement.mesh20x20", "examples.phase.impingement.mesh40x1", "examples.phase.impingement.test", "examples.phase.missOrientation", "examples.phase.missOrientation.circle", "examples.phase.missOrientation.mesh1D", "examples.phase.missOrientation.modCircle", "examples.phase.missOrientation.test", "examples.phase.polyxtal", "examples.phase.polyxtalCoupled", "examples.phase.quaternary", "examples.phase.simple", "examples.phase.symmetry", "examples.phase.test", "examples.reactiveWetting", "examples.reactiveWetting.liquidVapor1D", "examples.reactiveWetting.liquidVapor2D", "examples.reactiveWetting.test", "examples.riemann", "examples.riemann.acoustics", "examples.riemann.test", "examples.test", "examples.updating", "examples.updating.update0_1to1_0", "examples.updating.update1_0to2_0", "examples.updating.update2_0to3_0", "fipy", "fipy.boundaryConditions", "fipy.boundaryConditions.boundaryCondition", "fipy.boundaryConditions.constraint", "fipy.boundaryConditions.fixedFlux", "fipy.boundaryConditions.fixedValue", "fipy.boundaryConditions.nthOrderBoundaryCondition", "fipy.boundaryConditions.test", "fipy.matrices", "fipy.matrices.offsetSparseMatrix", "fipy.matrices.petscMatrix", "fipy.matrices.pysparseMatrix", "fipy.matrices.scipyMatrix", "fipy.matrices.sparseMatrix", "fipy.matrices.test", "fipy.matrices.trilinosMatrix", "fipy.meshes", "fipy.meshes.abstractMesh", "fipy.meshes.builders", "fipy.meshes.builders.abstractGridBuilder", "fipy.meshes.builders.grid1DBuilder", "fipy.meshes.builders.grid2DBuilder", "fipy.meshes.builders.grid3DBuilder", "fipy.meshes.builders.periodicGrid1DBuilder", "fipy.meshes.builders.utilityClasses", "fipy.meshes.cylindricalGrid1D", "fipy.meshes.cylindricalGrid2D", "fipy.meshes.cylindricalNonUniformGrid1D", "fipy.meshes.cylindricalNonUniformGrid2D", "fipy.meshes.cylindricalUniformGrid1D", "fipy.meshes.cylindricalUniformGrid2D", "fipy.meshes.factoryMeshes", "fipy.meshes.gmshMesh", "fipy.meshes.grid1D", "fipy.meshes.grid2D", "fipy.meshes.grid3D", "fipy.meshes.mesh", "fipy.meshes.mesh1D", "fipy.meshes.mesh2D", "fipy.meshes.nonUniformGrid1D", "fipy.meshes.nonUniformGrid2D", "fipy.meshes.nonUniformGrid3D", "fipy.meshes.periodicGrid1D", "fipy.meshes.periodicGrid2D", "fipy.meshes.periodicGrid3D", "fipy.meshes.representations", "fipy.meshes.representations.abstractRepresentation", "fipy.meshes.representations.gridRepresentation", "fipy.meshes.representations.meshRepresentation", "fipy.meshes.skewedGrid2D", "fipy.meshes.sphericalNonUniformGrid1D", "fipy.meshes.sphericalUniformGrid1D", "fipy.meshes.test", "fipy.meshes.topologies", "fipy.meshes.topologies.abstractTopology", "fipy.meshes.topologies.gridTopology", "fipy.meshes.topologies.meshTopology", "fipy.meshes.tri2D", "fipy.meshes.uniformGrid", "fipy.meshes.uniformGrid1D", "fipy.meshes.uniformGrid2D", "fipy.solvers", "fipy.solvers.convergence", "fipy.solvers.petsc", "fipy.solvers.petsc.comms", "fipy.solvers.petsc.comms.parallelPETScCommWrapper", "fipy.solvers.petsc.comms.petscCommWrapper", "fipy.solvers.petsc.comms.serialPETScCommWrapper", "fipy.solvers.petsc.dummySolver", "fipy.solvers.petsc.linearBicgSolver", "fipy.solvers.petsc.linearCGSSolver", "fipy.solvers.petsc.linearGMRESSolver", "fipy.solvers.petsc.linearLUSolver", "fipy.solvers.petsc.linearPCGSolver", "fipy.solvers.petsc.petscConvergence", "fipy.solvers.petsc.petscKrylovSolver", "fipy.solvers.petsc.petscSolver", "fipy.solvers.petsc.preconditioners", "fipy.solvers.petsc.preconditioners.defaultPreconditioner", "fipy.solvers.petsc.preconditioners.icPreconditioner", "fipy.solvers.petsc.preconditioners.iluPreconditioner", "fipy.solvers.petsc.preconditioners.jacobiPreconditioner", "fipy.solvers.petsc.preconditioners.luPreconditioner", "fipy.solvers.petsc.preconditioners.petscPreconditioner", "fipy.solvers.petsc.preconditioners.ssorPreconditioner", "fipy.solvers.preconditioner", "fipy.solvers.pyAMG", "fipy.solvers.pyAMG.linearCGSSolver", "fipy.solvers.pyAMG.linearGMRESSolver", "fipy.solvers.pyAMG.linearGeneralSolver", "fipy.solvers.pyAMG.linearLUSolver", "fipy.solvers.pyAMG.linearPCGSolver", "fipy.solvers.pyAMG.preconditioners", "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "fipy.solvers.pyamgx", "fipy.solvers.pyamgx.aggregationAMGSolver", "fipy.solvers.pyamgx.classicalAMGSolver", "fipy.solvers.pyamgx.linearBiCGStabSolver", "fipy.solvers.pyamgx.linearFGMRESSolver", "fipy.solvers.pyamgx.linearGMRESSolver", "fipy.solvers.pyamgx.linearLUSolver", "fipy.solvers.pyamgx.linearPCGSolver", "fipy.solvers.pyamgx.preconditioners", "fipy.solvers.pyamgx.pyAMGXSolver", "fipy.solvers.pyamgx.pyamgxConvergence", "fipy.solvers.pyamgx.smoothers", "fipy.solvers.pysparse", "fipy.solvers.pysparse.linearCGSSolver", "fipy.solvers.pysparse.linearGMRESSolver", "fipy.solvers.pysparse.linearInitialSolver", "fipy.solvers.pysparse.linearJORSolver", "fipy.solvers.pysparse.linearLUSolver", "fipy.solvers.pysparse.linearPCGSolver", "fipy.solvers.pysparse.linearRHSSolver", "fipy.solvers.pysparse.preconditioners", "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner", "fipy.solvers.pysparse.preconditioners.pysparsePreconditioner", "fipy.solvers.pysparse.preconditioners.ssorPreconditioner", "fipy.solvers.pysparse.pysparseConvergence", "fipy.solvers.pysparse.pysparseSolver", "fipy.solvers.pysparseMatrixSolver", "fipy.solvers.scipy", "fipy.solvers.scipy.linearBicgstabSolver", "fipy.solvers.scipy.linearCGSSolver", "fipy.solvers.scipy.linearGMRESSolver", "fipy.solvers.scipy.linearLUSolver", "fipy.solvers.scipy.linearPCGSolver", "fipy.solvers.scipy.preconditioners", "fipy.solvers.scipy.preconditioners.iluPreconditioner", "fipy.solvers.scipy.preconditioners.jacobiPreconditioner", "fipy.solvers.scipy.preconditioners.scipyPreconditioner", "fipy.solvers.scipy.scipyConvergence", "fipy.solvers.scipy.scipyKrylovSolver", "fipy.solvers.scipy.scipySolver", "fipy.solvers.solver", "fipy.solvers.test", "fipy.solvers.trilinos", "fipy.solvers.trilinos.aztecConvergence", "fipy.solvers.trilinos.comms", "fipy.solvers.trilinos.comms.epetraCommWrapper", "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper", "fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "fipy.solvers.trilinos.linearBicgstabSolver", "fipy.solvers.trilinos.linearCGSSolver", "fipy.solvers.trilinos.linearGMRESSolver", "fipy.solvers.trilinos.linearLUSolver", "fipy.solvers.trilinos.linearPCGSolver", "fipy.solvers.trilinos.preconditioners", "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "fipy.solvers.trilinos.preconditioners.icPreconditioner", "fipy.solvers.trilinos.preconditioners.iluPreconditioner", "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner", "fipy.solvers.trilinos.trilinosAztecOOSolver", "fipy.solvers.trilinos.trilinosMLTest", "fipy.solvers.trilinos.trilinosNonlinearSolver", "fipy.solvers.trilinos.trilinosSolver", "fipy.steppers", "fipy.steppers.pidStepper", "fipy.steppers.pseudoRKQSStepper", "fipy.steppers.stepper", "fipy.terms", "fipy.terms.abstractBinaryTerm", "fipy.terms.abstractConvectionTerm", "fipy.terms.abstractDiffusionTerm", "fipy.terms.abstractUpwindConvectionTerm", "fipy.terms.advectionTerm", "fipy.terms.asymmetricConvectionTerm", "fipy.terms.binaryTerm", "fipy.terms.cellTerm", "fipy.terms.centralDiffConvectionTerm", "fipy.terms.coupledBinaryTerm", "fipy.terms.diffusionTerm", "fipy.terms.diffusionTermCorrection", "fipy.terms.diffusionTermNoCorrection", "fipy.terms.explicitDiffusionTerm", "fipy.terms.explicitSourceTerm", "fipy.terms.explicitUpwindConvectionTerm", "fipy.terms.exponentialConvectionTerm", "fipy.terms.faceTerm", "fipy.terms.firstOrderAdvectionTerm", "fipy.terms.hybridConvectionTerm", "fipy.terms.implicitDiffusionTerm", "fipy.terms.implicitSourceTerm", "fipy.terms.nonDiffusionTerm", "fipy.terms.powerLawConvectionTerm", "fipy.terms.residualTerm", "fipy.terms.sourceTerm", "fipy.terms.term", "fipy.terms.test", "fipy.terms.transientTerm", "fipy.terms.unaryTerm", "fipy.terms.upwindConvectionTerm", "fipy.terms.vanLeerConvectionTerm", "fipy.testFiPy", "fipy.tests", "fipy.tests.doctestPlus", "fipy.tests.lateImportTest", "fipy.tests.test", "fipy.tests.testProgram", "fipy.tools", "fipy.tools.comms", "fipy.tools.comms.commWrapper", "fipy.tools.comms.dummyComm", "fipy.tools.debug", "fipy.tools.decorators", "fipy.tools.dimensions", "fipy.tools.dimensions.DictWithDefault", "fipy.tools.dimensions.NumberDict", "fipy.tools.dimensions.physicalField", "fipy.tools.dump", "fipy.tools.inline", "fipy.tools.logging", "fipy.tools.logging.environment", "fipy.tools.numerix", "fipy.tools.parser", "fipy.tools.sharedtempfile", "fipy.tools.test", "fipy.tools.vector", "fipy.tools.version", "fipy.variables", "fipy.variables.addOverFacesVariable", "fipy.variables.arithmeticCellToFaceVariable", "fipy.variables.betaNoiseVariable", "fipy.variables.binaryOperatorVariable", "fipy.variables.cellToFaceVariable", "fipy.variables.cellVariable", "fipy.variables.constant", "fipy.variables.constraintMask", "fipy.variables.coupledCellVariable", "fipy.variables.distanceVariable", "fipy.variables.exponentialNoiseVariable", "fipy.variables.faceGradContributionsVariable", "fipy.variables.faceGradVariable", "fipy.variables.faceVariable", "fipy.variables.gammaNoiseVariable", "fipy.variables.gaussCellGradVariable", "fipy.variables.gaussianNoiseVariable", "fipy.variables.harmonicCellToFaceVariable", "fipy.variables.histogramVariable", "fipy.variables.interfaceAreaVariable", "fipy.variables.interfaceFlagVariable", "fipy.variables.leastSquaresCellGradVariable", "fipy.variables.levelSetDiffusionVariable", "fipy.variables.meshVariable", "fipy.variables.minmodCellToFaceVariable", "fipy.variables.modCellGradVariable", "fipy.variables.modCellToFaceVariable", "fipy.variables.modFaceGradVariable", "fipy.variables.modPhysicalField", "fipy.variables.modularVariable", "fipy.variables.noiseVariable", "fipy.variables.operatorVariable", "fipy.variables.scharfetterGummelFaceVariable", "fipy.variables.surfactantConvectionVariable", "fipy.variables.surfactantVariable", "fipy.variables.test", "fipy.variables.unaryOperatorVariable", "fipy.variables.uniformNoiseVariable", "fipy.variables.variable", "fipy.viewers", "fipy.viewers.matplotlibViewer", "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer", "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer", "fipy.viewers.matplotlibViewer.matplotlib1DViewer", "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer", "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer", "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer", "fipy.viewers.matplotlibViewer.matplotlib2DViewer", "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer", "fipy.viewers.matplotlibViewer.matplotlibStreamViewer", "fipy.viewers.matplotlibViewer.matplotlibVectorViewer", "fipy.viewers.matplotlibViewer.test", "fipy.viewers.mayaviViewer", "fipy.viewers.mayaviViewer.mayaviClient", "fipy.viewers.mayaviViewer.mayaviDaemon", "fipy.viewers.mayaviViewer.test", "fipy.viewers.multiViewer", "fipy.viewers.test", "fipy.viewers.testinteractive", "fipy.viewers.tsvViewer", "fipy.viewers.viewer", "fipy.viewers.vtkViewer", "fipy.viewers.vtkViewer.test", "fipy.viewers.vtkViewer.vtkCellViewer", "fipy.viewers.vtkViewer.vtkFaceViewer", "fipy.viewers.vtkViewer.vtkViewer", "Glossary", "Introduction", "FiPy Manual", "Finite Volume Method", "General Conservation Equation", "Theoretical and Numerical Background", "Numerical Schemes", "References", "package", "package.subpackage", "package.subpackage.base", "package.subpackage.object", "How to Read the Modules Documentation"], "terms": {"refer": [0, 2, 8, 15, 16, 20, 21, 71, 81, 117, 176, 180, 190, 233, 248, 293, 487, 495, 496], "usag": [0, 5, 6, 20, 486], "current": [0, 2, 8, 9, 11, 13, 15, 16, 17, 19, 47, 136, 137, 138, 143, 180, 189, 191, 352, 355, 394, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "convent": [0, 20, 486, 489], "whether": [0, 8, 10, 12, 19, 21, 74, 133, 138, 140, 141, 143, 253, 394, 398, 407, 408, 412, 414, 428, 457, 460, 461, 462, 463, 464, 465, 466, 468, 469], "fix": [0, 8, 9, 11, 20, 72, 73, 75, 81, 90, 114, 160, 173, 174, 176, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 486], "bug": [0, 2, 3, 8, 21, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "ad": [0, 2, 4, 9, 11, 17, 21, 112, 117, 165, 166, 173, 174, 176, 188, 195, 196, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 373, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 495], "featur": [0, 3, 8, 21, 117, 485, 492], "all": [0, 2, 3, 6, 8, 9, 10, 11, 12, 15, 16, 17, 18, 20, 21, 31, 32, 75, 81, 96, 104, 108, 114, 137, 140, 141, 143, 152, 155, 157, 160, 162, 163, 173, 174, 180, 182, 186, 188, 189, 190, 208, 223, 259, 266, 267, 280, 281, 291, 299, 300, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 331, 333, 334, 335, 337, 351, 353, 354, 364, 394, 396, 398, 402, 407, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485, 488, 489, 491, 495, 496], "work": [0, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 47, 63, 74, 81, 117, 161, 162, 163, 176, 180, 188, 189, 191, 352, 357, 388, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485, 486, 488, 495], "fipi": [0, 2, 3, 4, 6, 9, 10, 13, 14, 15, 16, 18, 19, 21, 23, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 91, 94, 95, 102, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 136, 137, 138, 140, 141, 143, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 189, 190, 485, 486, 488, 489, 490, 491, 493, 494, 495, 497], "should": [0, 2, 6, 8, 9, 10, 11, 15, 17, 47, 72, 73, 74, 81, 91, 136, 143, 162, 163, 176, 180, 188, 189, 190, 223, 252, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 403, 407, 412, 413, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 495, 496], "conduct": [0, 8, 81, 488, 491], "pull": [0, 20, 486], "request": [0, 2, 3, 16, 253, 265], "If": [0, 3, 7, 8, 11, 14, 16, 17, 21, 34, 36, 49, 50, 51, 56, 59, 60, 65, 72, 73, 74, 75, 77, 78, 81, 85, 108, 109, 110, 111, 112, 113, 114, 121, 136, 137, 138, 140, 141, 143, 161, 162, 163, 165, 166, 175, 176, 188, 189, 190, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 325, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 402, 403, 407, 408, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 488, 495, 496], "i": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 56, 57, 59, 60, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 93, 94, 95, 97, 99, 100, 102, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 129, 133, 135, 136, 137, 138, 143, 148, 149, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 188, 189, 190, 191, 193, 195, 197, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 274, 276, 278, 279, 280, 282, 286, 287, 288, 289, 290, 291, 292, 298, 299, 300, 302, 303, 304, 307, 309, 310, 313, 314, 315, 316, 317, 321, 323, 324, 325, 331, 333, 334, 335, 336, 337, 350, 351, 352, 354, 355, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 396, 397, 398, 402, 403, 407, 408, 411, 412, 413, 414, 416, 417, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 460, 461, 463, 465, 466, 468, 469, 473, 478, 479, 485, 486, 488, 489, 490, 491, 492, 495, 496], "alreadi": [0, 3, 10, 188, 398, 407], "report": [0, 2, 3, 17, 20, 394, 486], "github": [0, 2, 8, 9, 11, 13, 15, 16, 20, 173, 174, 485], "issu": [0, 2, 8, 9, 11, 15, 17, 20, 21, 162, 163, 189, 190, 403, 428, 468], "name": [0, 2, 5, 8, 10, 11, 17, 20, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 102, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 140, 141, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 190, 208, 223, 227, 252, 325, 359, 394, 398, 403, 407, 408, 411, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 495, 496], "accordingli": 0, "issue12345": 0, "summary_of_what_branch_address": 0, "checkout": [0, 9, 11], "b": [0, 2, 14, 16, 17, 21, 31, 32, 138, 162, 163, 165, 176, 223, 253, 280, 309, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 488, 492], "edit": [0, 2, 137, 357, 492], "add": [0, 2, 11, 14, 17, 20, 56, 111, 112, 176, 195, 196, 197, 208, 223, 227, 252, 325, 359, 384, 398, 407, 458, 473], "emac": 0, "commit": 0, "m": [0, 11, 13, 14, 17, 20, 74, 109, 111, 133, 138, 140, 143, 160, 161, 173, 174, 175, 176, 180, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 356, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 478, 486, 492], "refactoring_stage_a": 0, "refactoring_stage_b": 0, "sure": [0, 9, 11, 16, 17, 133, 189], "up": [0, 2, 3, 6, 8, 11, 13, 14, 16, 17, 18, 21, 31, 32, 72, 73, 117, 137, 161, 175, 223, 458, 473, 488], "date": [0, 2], "fetch": [0, 9, 11], "origin": [0, 2, 21, 165, 173, 174, 218, 219, 220, 221, 222, 241, 242, 250, 251, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "state": [0, 2, 8, 9, 11, 12, 31, 32, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 72, 73, 75, 81, 82, 83, 85, 91, 94, 105, 112, 137, 143, 176, 180, 188, 489, 490], "diff": [0, 36, 189, 190], "resolv": [0, 2, 8, 11, 188, 364], "ani": [0, 2, 7, 8, 9, 10, 11, 12, 15, 16, 17, 20, 21, 31, 32, 75, 114, 137, 138, 140, 141, 143, 176, 188, 189, 190, 197, 223, 233, 252, 265, 309, 364, 396, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 485, 488, 489, 495, 496], "conflict": [0, 2, 11], "test": [0, 2, 4, 6, 7, 8, 9, 11, 13, 16, 20, 23, 32, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 72, 73, 77, 78, 80, 81, 82, 83, 91, 93, 95, 96, 97, 99, 100, 102, 105, 108, 112, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 148, 149, 161, 162, 163, 165, 166, 169, 170, 171, 177, 184, 188, 191, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 265, 352, 364, 367, 368, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 392, 398, 407, 408, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 462, 464, 465, 466, 468, 469, 471, 472, 477, 485, 486], "python": [0, 2, 3, 6, 7, 8, 13, 14, 15, 16, 18, 20, 22, 81, 91, 136, 137, 138, 140, 141, 143, 155, 160, 173, 174, 175, 176, 180, 189, 191, 325, 398, 407, 411, 413, 417, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 471, 472, 473, 485, 486, 488, 492, 495, 496], "setup": [0, 2, 7, 11, 13, 17, 81, 106, 108, 112, 114, 121, 122, 126, 128, 137, 191, 396], "py": [0, 2, 6, 7, 10, 11, 13, 15, 16, 17, 34, 78, 80, 81, 90, 91, 93, 94, 95, 100, 102, 105, 109, 111, 136, 137, 138, 143, 155, 173, 174, 176, 188, 191, 325, 471, 472, 473, 495], "necessari": [0, 2, 8, 11, 16, 17, 21, 67, 77, 80, 81, 160, 161, 162, 163, 166, 173, 174, 180, 188, 189, 190, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 489, 495], "fork": 0, "repositori": [0, 2, 8, 9, 11, 21, 485], "remot": 0, "link": [0, 2, 3, 9, 11, 21], "your": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 17, 19, 74, 81, 188, 189, 190, 325, 407, 412, 485, 495], "myfork": 0, "myforkurl": 0, "push": 0, "now": [0, 2, 3, 8, 9, 11, 13, 17, 32, 63, 72, 73, 75, 81, 108, 109, 110, 114, 117, 137, 161, 162, 163, 176, 188, 189, 190, 485, 488], "creat": [0, 2, 6, 8, 12, 17, 20, 34, 36, 49, 50, 51, 59, 60, 71, 72, 73, 77, 81, 82, 83, 85, 108, 109, 110, 111, 112, 113, 124, 128, 137, 140, 141, 156, 160, 161, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 188, 189, 193, 197, 218, 219, 220, 221, 222, 223, 230, 231, 233, 234, 235, 240, 241, 242, 248, 250, 251, 259, 266, 267, 274, 276, 280, 281, 291, 298, 299, 300, 301, 302, 303, 304, 307, 310, 313, 314, 315, 316, 317, 321, 323, 324, 325, 331, 333, 334, 335, 337, 350, 351, 353, 354, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 383, 385, 386, 388, 390, 391, 394, 398, 407, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 471, 472, 473, 478, 479, 480, 482, 483, 484, 485, 486, 488, 495, 496], "against": [0, 6, 17, 49, 50, 51, 54, 56, 59, 60, 61, 65, 68, 77, 78, 81, 161, 162, 163, 165, 176, 188, 398, 407, 459], "usnistgov": [0, 3, 8, 9, 11], "The": [0, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 31, 32, 33, 34, 36, 47, 49, 50, 51, 52, 56, 57, 59, 60, 62, 66, 67, 68, 72, 73, 74, 75, 77, 78, 80, 81, 85, 90, 91, 94, 95, 97, 99, 100, 102, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 135, 136, 137, 138, 140, 141, 143, 148, 149, 150, 155, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 188, 189, 190, 191, 195, 196, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 253, 260, 261, 262, 263, 264, 268, 269, 278, 279, 280, 282, 286, 287, 288, 289, 290, 291, 292, 298, 299, 301, 302, 303, 309, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 355, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 403, 407, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 497], "initi": [0, 2, 8, 11, 16, 17, 21, 31, 32, 49, 50, 51, 56, 59, 60, 71, 77, 81, 82, 83, 85, 90, 110, 117, 121, 124, 128, 136, 137, 140, 141, 143, 149, 150, 161, 162, 163, 165, 166, 169, 170, 171, 175, 176, 180, 188, 189, 223, 259, 260, 261, 262, 263, 264, 265, 266, 267, 280, 281, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 353, 354, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 424, 428, 432, 442, 448, 449, 451, 453], "autom": [0, 2, 4, 6, 21, 189, 485], "check": [0, 2, 9, 10, 11, 17, 21, 47, 78, 81, 109, 124, 150, 223, 408, 417, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "statu": [0, 9, 11, 253], "absolut": [0, 8, 16, 95, 109, 124, 253, 260, 261, 262, 264, 266, 280, 281, 291, 313, 314, 315, 316, 317, 323, 324, 398, 407, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "document": [0, 2, 3, 5, 7, 9, 11, 12, 16, 17, 20, 21, 81, 352, 412, 413, 485, 487, 495], "failur": [0, 2, 8, 45, 46, 81, 265, 394, 395], "still": [0, 2, 6, 8, 11, 16, 74, 112, 176, 188, 189, 253, 265, 396, 412, 488], "an": [0, 2, 3, 6, 7, 9, 11, 12, 14, 15, 16, 17, 19, 20, 21, 31, 32, 36, 49, 50, 59, 60, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 91, 106, 108, 109, 110, 111, 112, 113, 114, 117, 127, 133, 136, 137, 149, 156, 160, 161, 162, 163, 166, 169, 170, 171, 173, 174, 176, 180, 188, 189, 191, 197, 223, 260, 261, 262, 263, 264, 266, 278, 279, 280, 282, 286, 287, 288, 289, 290, 292, 309, 313, 314, 315, 317, 333, 334, 335, 336, 337, 364, 394, 398, 407, 408, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 463, 464, 465, 480, 485, 486, 488, 489, 491, 492, 495, 496], "experiment": [0, 2, 81, 136, 137, 138, 143, 160, 173, 174], "you": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 31, 32, 33, 34, 74, 81, 136, 138, 143, 160, 161, 173, 174, 188, 189, 190, 223, 265, 325, 412, 486, 495, 496], "would": [0, 10, 11, 15, 16, 17, 31, 33, 34, 81, 117, 162, 163, 176, 189, 191, 398, 414, 488], "like": [0, 6, 8, 11, 15, 17, 19, 21, 56, 81, 117, 176, 188, 197, 265, 398, 407, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 473, 485, 488, 489, 495, 496], "its": [0, 2, 6, 11, 12, 16, 17, 19, 21, 47, 81, 128, 137, 160, 173, 174, 189, 193, 197, 223, 266, 267, 274, 276, 300, 304, 307, 310, 321, 323, 324, 325, 350, 351, 354, 355, 367, 377, 385, 386, 398, 407, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 461, 468, 479, 488, 495], "impact": 0, "mai": [0, 3, 6, 8, 9, 11, 12, 14, 15, 16, 17, 21, 47, 81, 162, 163, 189, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 325, 396, 403, 412, 488, 496], "prepend": 0, "wip": 0, "titl": [0, 2, 12, 20, 39, 40, 140, 141, 160, 173, 174, 356, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "thi": [0, 2, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 31, 32, 34, 36, 45, 46, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 91, 93, 94, 95, 96, 97, 99, 100, 102, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 133, 135, 136, 137, 138, 143, 148, 149, 150, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 188, 189, 190, 191, 193, 195, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 265, 266, 267, 274, 276, 300, 301, 302, 304, 307, 310, 321, 323, 324, 325, 350, 351, 352, 354, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 396, 397, 398, 403, 407, 412, 413, 414, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 473, 479, 485, 486, 488, 490, 491, 495, 496], "prevent": [0, 6, 16, 138, 180, 395, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 495], "being": [0, 9, 11, 12, 17, 49, 50, 51, 59, 60, 77, 81, 94, 95, 99, 100, 102, 176, 188, 248, 428, 485, 488, 495, 496], "befor": [0, 2, 8, 9, 10, 11, 16, 17, 22, 31, 32, 81, 162, 163, 175, 188, 189, 200, 265, 309, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 402, 496], "": [0, 2, 3, 4, 6, 7, 10, 11, 14, 16, 17, 20, 21, 31, 32, 39, 67, 72, 73, 81, 106, 109, 111, 114, 137, 138, 140, 143, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 188, 189, 196, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 268, 269, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 460, 461, 463, 464, 465, 466, 468, 469, 485, 486, 490, 492, 495], "allow": [0, 2, 6, 8, 11, 16, 17, 19, 21, 86, 96, 114, 169, 170, 171, 176, 394, 407, 413, 485, 491], "run": [0, 2, 6, 7, 9, 10, 11, 16, 18, 19, 20, 21, 36, 49, 50, 51, 56, 59, 60, 65, 72, 73, 75, 77, 81, 85, 91, 96, 104, 108, 109, 110, 111, 112, 113, 114, 136, 137, 138, 143, 152, 155, 157, 161, 165, 166, 175, 176, 182, 186, 188, 191, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 265, 394, 397, 398, 411, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 471, 472, 473, 485, 486], "pleas": [0, 2, 3, 7, 8, 11, 14, 15, 188, 189, 190], "respect": [0, 2, 106, 111, 113, 161, 162, 163, 166, 175, 180, 197, 488, 489], "resourc": [0, 2, 3, 11, 17, 191], "do": [0, 2, 3, 7, 9, 10, 11, 17, 20, 21, 47, 81, 127, 129, 137, 138, 176, 180, 188, 189, 190, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 259, 357, 398, 414, 416, 458, 473, 478, 486, 495, 496], "bulk": [0, 133, 136, 137, 143, 162, 163], "local": [0, 11, 13, 19, 72, 73, 81, 95, 149, 223, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 485], "machin": [0, 16, 17, 19, 21], "own": [0, 7, 9, 11, 13, 16, 17, 21, 81, 188, 189, 407, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 493, 494, 497], "account": [0, 3, 11, 17, 136, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "have": [0, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 32, 68, 71, 77, 78, 80, 81, 86, 106, 108, 109, 110, 111, 112, 113, 117, 128, 136, 138, 143, 160, 162, 163, 173, 174, 175, 176, 188, 189, 190, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 259, 364, 396, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 468, 478, 488, 489, 495], "lot": [0, 96, 394], "enabl": [0, 2, 15, 16, 17, 20, 21, 191, 395, 486], "servic": [0, 12], "can": [0, 2, 3, 6, 7, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 31, 32, 34, 36, 49, 50, 51, 56, 59, 60, 65, 68, 71, 72, 73, 74, 77, 81, 82, 83, 85, 90, 105, 106, 108, 109, 110, 112, 113, 117, 121, 122, 124, 126, 128, 138, 143, 148, 149, 155, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 188, 189, 190, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 265, 303, 325, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 468, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497], "avoid": [0, 2, 11, 117, 188, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "individu": [0, 2, 7, 8, 21, 190], "skip": [0, 17, 394], "ci": [0, 2, 485], "messag": [0, 3, 16, 17, 20, 81, 403, 485, 486], "when": [0, 2, 6, 7, 8, 9, 11, 13, 15, 16, 17, 19, 21, 81, 108, 117, 124, 137, 138, 162, 163, 176, 188, 189, 190, 208, 222, 223, 253, 265, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 413, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 488, 489, 496], "readi": [0, 9, 11, 223], "successfulli": [0, 9, 11], "pass": [0, 2, 9, 11, 16, 17, 51, 117, 188, 189, 190, 191, 352, 394, 398, 407, 463, 464, 468, 485, 495], "send": [0, 3], "mail": [0, 2, 8, 15, 17, 20, 189, 190], "list": [0, 2, 8, 9, 10, 11, 13, 14, 15, 20, 21, 22, 72, 73, 81, 108, 109, 110, 140, 141, 189, 190, 191, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 331, 407, 421, 424, 428, 429, 432, 433, 435, 437, 448, 449, 451, 452, 453, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 485, 488, 496], "about": [0, 2, 3, 6, 7, 8, 9, 11, 13, 14, 16, 17, 21, 31, 32, 33, 34, 36, 81, 155, 160, 162, 163, 176, 188, 189, 191, 253, 293, 325, 352, 364, 411], "develop": [0, 2, 3, 4, 9, 12, 14, 15, 17, 19, 20, 191, 486, 492], "automat": [0, 2, 7, 8, 11, 17, 21, 31, 32, 33, 34, 81, 82, 83, 162, 163, 180, 188, 189, 398, 408, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 463, 464, 473, 495, 496], "see": [0, 2, 3, 6, 7, 11, 16, 17, 18, 19, 20, 21, 22, 36, 72, 73, 81, 82, 83, 108, 109, 110, 117, 136, 138, 143, 160, 161, 162, 163, 165, 166, 173, 174, 176, 188, 189, 190, 194, 259, 260, 261, 262, 263, 264, 266, 267, 280, 281, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 368, 375, 376, 379, 383, 390, 394, 413, 468, 473, 485, 486, 488, 490], "respond": 0, "without": [0, 2, 6, 11, 12, 17, 19, 21, 68, 81, 165, 166, 173, 174, 180, 189, 394, 395, 398, 407, 414, 448, 468, 495], "further": [0, 2, 3, 10, 11, 17, 21, 47, 117, 143, 368, 375, 376, 379, 383, 390], "action": [0, 21, 137, 155, 165, 413, 485, 495], "part": [0, 8, 9, 11, 13, 19, 21, 36, 81, 106, 136, 180, 223, 248, 488], "administr": [0, 14], "onli": [0, 2, 6, 7, 9, 10, 11, 16, 17, 18, 19, 20, 21, 33, 34, 74, 75, 81, 110, 112, 114, 117, 135, 136, 138, 140, 141, 161, 162, 163, 176, 180, 188, 195, 196, 223, 240, 364, 367, 370, 371, 372, 373, 377, 378, 386, 388, 394, 398, 407, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 452, 453, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485, 488, 491], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 14, 15, 16, 18, 20, 21, 31, 32, 33, 34, 36, 47, 51, 52, 57, 65, 66, 68, 71, 72, 73, 74, 78, 80, 81, 82, 83, 85, 86, 90, 93, 94, 95, 102, 105, 109, 117, 121, 122, 128, 135, 136, 137, 138, 140, 141, 143, 160, 161, 162, 163, 165, 166, 175, 176, 180, 188, 189, 190, 191, 197, 200, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 259, 265, 267, 278, 279, 280, 281, 282, 291, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 337, 338, 348, 349, 351, 353, 354, 355, 356, 358, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 403, 407, 408, 411, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496], "interfac": [0, 2, 4, 7, 8, 11, 14, 16, 17, 19, 21, 106, 124, 133, 136, 137, 148, 149, 150, 160, 162, 163, 173, 174, 176, 260, 261, 262, 263, 264, 278, 279, 280, 282, 286, 287, 288, 289, 290, 292, 293, 296, 313, 314, 315, 317, 333, 334, 335, 336, 337, 414, 428, 453, 485, 492], "particularli": [0, 9, 11, 72, 73, 81], "long": [0, 2, 17, 47, 109, 162, 163, 189, 396, 398, 407, 412, 496], "histori": 0, "consid": [0, 2, 8, 11, 68, 75, 81, 117, 160, 173, 174, 175, 189, 325, 488], "squash": 0, "we": [0, 2, 3, 6, 8, 9, 10, 11, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 47, 49, 50, 51, 54, 56, 59, 60, 61, 65, 67, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 108, 109, 110, 111, 112, 113, 114, 117, 127, 129, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 188, 189, 190, 223, 233, 357, 388, 407, 412, 416, 421, 428, 429, 433, 435, 456, 488, 495, 496], "azur": [0, 2, 485], "cloud": [0, 2, 485], "These": [0, 2, 6, 7, 8, 10, 11, 17, 19, 21, 31, 32, 72, 73, 113, 117, 489, 493, 494, 495, 497], "ar": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 21, 32, 36, 39, 40, 47, 52, 57, 68, 72, 73, 74, 75, 81, 82, 83, 91, 106, 108, 109, 110, 111, 112, 113, 114, 117, 133, 136, 137, 138, 143, 149, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 188, 189, 190, 191, 196, 223, 234, 235, 240, 248, 252, 257, 325, 330, 352, 364, 367, 370, 371, 372, 373, 377, 378, 386, 388, 394, 396, 398, 400, 407, 412, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 462, 468, 485, 488, 489, 490, 491, 495, 496], "configur": [0, 2, 3, 16, 17, 293, 296], "fipysourc": [0, 17], "pipelin": [0, 2, 4, 473], "yml": [0, 11], "workflow": 0, "nistthedocs2death": 0, "nix": [0, 2, 20, 486], "lock": [0, 11, 17], "environ": [0, 2, 8, 14, 16, 20, 21, 190, 458, 485, 486, 490], "solver": [0, 2, 4, 6, 8, 11, 14, 17, 20, 21, 31, 33, 34, 36, 47, 52, 54, 56, 57, 61, 66, 80, 81, 82, 83, 85, 86, 90, 108, 109, 111, 117, 137, 162, 163, 165, 175, 176, 188, 189, 191, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 485, 486, 487, 488], "petsc": [0, 2, 17, 20, 32, 108, 485, 486], "pyspars": [0, 2, 11, 17, 20, 21, 32, 36, 85, 86, 189, 485, 486, 488], "scipi": [0, 2, 8, 10, 17, 20, 21, 49, 50, 59, 60, 72, 73, 77, 78, 81, 162, 163, 176, 278, 279, 282, 291, 394, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 485, 486, 488], "trilino": [0, 2, 4, 11, 13, 17, 20, 32, 86, 191, 485, 486], "file": [0, 2, 7, 9, 10, 11, 13, 15, 17, 20, 21, 39, 40, 41, 72, 73, 77, 78, 80, 93, 94, 95, 96, 97, 99, 100, 102, 136, 137, 138, 140, 141, 143, 161, 165, 166, 169, 170, 171, 223, 396, 398, 408, 414, 421, 429, 433, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 495], "render": [0, 2, 8, 15, 21, 81, 191, 453, 480, 482, 483, 484], "filenam": [0, 8, 17, 72, 73, 111, 140, 141, 165, 223, 408, 424, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "templat": [0, 7], "platform": [0, 2, 8, 9, 11, 17, 18, 411, 485], "done": [0, 8, 9, 11, 17, 189, 396], "new": [0, 2, 6, 8, 11, 13, 16, 21, 71, 81, 112, 113, 137, 143, 166, 176, 189, 190, 219, 223, 229, 231, 234, 240, 248, 394, 398, 403, 407, 408, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485, 496], "valid": [0, 2, 17, 485], "everyth": [0, 11, 189], "log": [0, 20, 113, 140, 162, 163, 175, 180, 181, 398, 407, 460, 461, 462, 463, 464, 465, 466, 468, 469, 486, 487], "changelog": [0, 2], "txt": [0, 2, 398, 414], "rel": [0, 2, 16, 17, 21, 31, 32, 109, 180, 253, 260, 261, 262, 264, 266, 280, 281, 291, 313, 314, 315, 316, 317, 323, 324, 398, 407, 412], "after": [0, 2, 10, 11, 13, 16, 17, 21, 32, 47, 111, 113, 117, 176, 189, 265, 396, 398, 403, 407, 412, 428], "x": [0, 2, 7, 8, 9, 11, 13, 15, 16, 17, 18, 20, 22, 36, 40, 51, 54, 56, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 94, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 140, 141, 148, 149, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 188, 189, 190, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 253, 309, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 462, 464, 465, 466, 468, 469, 471, 472, 473, 478, 485], "y": [0, 7, 8, 9, 11, 14, 15, 17, 18, 20, 40, 52, 57, 71, 72, 73, 82, 83, 94, 110, 117, 121, 124, 126, 127, 129, 137, 140, 141, 148, 149, 156, 160, 161, 165, 169, 171, 173, 174, 176, 177, 189, 190, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 462, 464, 465, 466, 468, 469, 471, 472, 478, 485], "mileston": 0, "z": [0, 9, 11, 20, 156, 160, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 407, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 471, 472], "obtain": [0, 2, 7, 8, 9, 17, 20, 31, 33, 34, 75, 81, 114, 117, 137, 138, 155, 161, 162, 163, 176, 188, 190, 223, 435, 448, 486, 488, 490, 491], "rest": [0, 137], "format": [0, 2, 16, 17, 32, 36, 398, 407, 408, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 478, 480, 482, 483, 484, 485], "everi": [0, 19, 21, 81, 136, 143, 331, 398, 407, 412], "close": [0, 2, 11, 13, 19, 21, 74, 81, 117, 180, 223, 398, 414, 468], "sinc": [0, 2, 6, 21, 108, 109, 110, 112, 114, 176, 189, 190, 233, 357, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 491], "last": [0, 2, 8, 117, 180, 188, 189, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 368, 375, 376, 379, 383, 390, 391, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "major": [0, 2, 8, 180], "curat": [0, 7], "output": [0, 2, 15, 16, 19, 31, 32, 33, 34, 36, 117, 223, 325, 352, 412, 478], "so": [0, 3, 6, 10, 11, 13, 16, 17, 19, 20, 21, 31, 33, 34, 67, 74, 111, 113, 117, 137, 140, 141, 160, 162, 163, 165, 173, 174, 176, 180, 188, 189, 223, 253, 309, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 407, 412, 428, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 486, 488, 491, 496], "clear": [0, 2, 17, 21], "what": [0, 2, 10, 16, 17, 20, 21, 81, 180, 189, 352, 412, 416, 486, 495], "big": 0, "deal": [0, 10, 11, 17, 21, 135], "sometim": [0, 2, 8, 72, 73], "redund": [0, 21], "e": [0, 2, 8, 10, 11, 14, 15, 17, 19, 54, 56, 57, 61, 66, 74, 75, 81, 106, 111, 112, 114, 137, 162, 163, 166, 176, 180, 181, 188, 190, 252, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 463, 464, 478, 488, 489, 490, 492, 493, 494, 497], "g": [0, 8, 10, 11, 14, 15, 17, 19, 39, 72, 73, 81, 95, 106, 111, 112, 162, 163, 175, 176, 190, 223, 252, 356, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 463, 464, 478, 488, 490, 492, 493, 494, 497], "issue123": 0, "blah": 0, "prefer": [0, 2, 8, 10, 11, 17, 72, 73, 488], "given": [0, 2, 6, 7, 11, 15, 17, 21, 36, 49, 50, 51, 52, 57, 59, 60, 62, 66, 67, 71, 75, 77, 78, 81, 100, 106, 113, 117, 126, 127, 129, 133, 136, 137, 138, 143, 149, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 188, 189, 195, 196, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 394, 398, 403, 407, 408, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 473, 488, 489, 493, 494, 497], "correspond": [0, 15, 67, 81, 138, 143, 195, 196, 197, 223, 398, 407, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "under": [0, 2, 14, 16, 20, 21, 31, 32, 81, 160, 173, 174, 175, 180, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 486, 496], "altern": [0, 7, 11, 17, 140, 141, 222, 303, 412, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 495], "item": [0, 189, 190], "remov": [0, 2, 8, 9, 11, 19, 117, 138, 160, 408, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468], "appropri": [0, 2, 8, 11, 17, 81, 85, 111, 113, 165, 175, 176, 188, 197, 221, 357, 398, 407, 488, 495], "move": [0, 2, 7, 8, 11, 14, 81, 93, 117, 140, 141, 162, 163, 176, 188], "thank": [0, 2, 17, 117], "mention": [0, 11, 81, 491], "recogn": 0, "outsid": [0, 156, 233, 478], "contributor": [0, 20, 486, 487], "requir": [0, 2, 6, 8, 15, 16, 17, 18, 19, 20, 21, 32, 49, 50, 59, 60, 68, 74, 77, 80, 81, 91, 117, 136, 137, 138, 143, 156, 162, 163, 165, 166, 173, 174, 176, 180, 189, 190, 222, 223, 233, 259, 260, 261, 262, 263, 264, 265, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485, 486, 488, 496], "pygithub": 0, "panda": [0, 17, 485], "doesn": [0, 2, 3, 17, 20, 31, 32, 33, 34, 180, 223, 259, 458, 486], "t": [0, 2, 3, 9, 10, 11, 14, 16, 17, 20, 21, 31, 32, 33, 34, 36, 71, 72, 73, 74, 77, 78, 81, 106, 108, 112, 121, 122, 133, 137, 138, 143, 148, 149, 160, 161, 162, 163, 166, 169, 170, 171, 173, 174, 175, 176, 180, 189, 190, 223, 252, 259, 309, 359, 364, 378, 388, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 486, 489, 490, 492, 495, 496], "show": [0, 2, 3, 6, 17, 45, 46, 117, 138, 140, 141, 143, 165, 448], "green": [0, 2], "box": [0, 2, 19, 81, 160, 173, 174, 177, 188, 248, 280], "note": [0, 3, 11, 13, 21, 31, 32, 67, 81, 160, 176, 208, 223, 227, 252, 268, 269, 325, 359, 396, 435, 458], "readm": [0, 2], "instal": [0, 2, 5, 8, 9, 10, 16, 17, 19, 20, 21, 22, 136, 143, 160, 173, 174, 411, 485, 486, 487, 492], "tag": [0, 2, 3, 9, 11], "abov": [0, 6, 8, 10, 15, 17, 21, 36, 81, 117, 137, 138, 143, 176, 177, 248, 364, 398, 407, 495], "annot": [0, 402], "upon": [0, 12, 17, 21, 72, 73], "success": [0, 6, 8, 9, 11, 74, 303], "system": [0, 2, 9, 11, 13, 15, 16, 17, 74, 81, 108, 109, 110, 113, 133, 136, 160, 161, 165, 166, 173, 174, 175, 176, 180, 195, 196, 197, 232, 252, 253, 280, 291, 298, 299, 301, 302, 303, 309, 316, 338, 347, 352, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485, 488, 489, 490, 492], "build": [0, 2, 6, 9, 11, 16, 17, 18, 21, 77, 117, 137, 155, 161, 165, 175, 176, 223, 252, 265, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "product": [0, 2, 5, 11, 16, 17, 21, 309, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "artifact": 0, "place": [0, 2, 8, 10, 11, 21, 32, 357, 396, 398, 407, 408, 412, 462], "dist": [0, 2, 396], "linux": [0, 2, 11, 13, 19, 22, 108, 485], "none": [0, 2, 10, 33, 34, 72, 73, 85, 108, 109, 110, 111, 113, 114, 137, 140, 141, 160, 163, 173, 174, 180, 181, 194, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 295, 298, 300, 301, 302, 304, 309, 310, 313, 314, 315, 316, 317, 322, 323, 324, 325, 328, 336, 352, 353, 354, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 396, 397, 398, 403, 407, 408, 412, 413, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 496], "whl": 0, "tar": 0, "gz": [0, 137, 161, 165, 166, 169, 170, 171, 408, 424], "windows_nt": 0, "zip": [0, 173, 174, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "doc": [0, 2, 16, 17, 394, 413, 485, 492], "pdf": [0, 2, 14, 16, 17, 492], "html": [0, 3, 8, 11, 13, 17, 352, 413], "directori": [0, 6, 7, 8, 9, 11, 13, 15, 17, 22, 81, 91, 136, 137, 138, 143, 155, 176, 493, 494, 497], "unpack": [0, 2, 11, 17], "xzf": 0, "c": [0, 2, 6, 11, 14, 16, 17, 21, 67, 81, 133, 137, 138, 143, 160, 161, 162, 163, 173, 174, 180, 357, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485, 492], "attach": [0, 2, 495], "associ": [0, 17, 21, 136, 137, 162, 163], "pypi": [0, 2, 485], "twine": 0, "fipy_vers": 0, "web": [0, 2, 11, 19], "site": [0, 3, 11, 137, 138, 143], "ctcm": [0, 8, 191, 485], "export": [0, 2, 4, 17, 20, 72, 73, 223, 411, 486], "fipy_wwwhost": 0, "bunter": [0, 2], "u": [0, 2, 3, 7, 8, 14, 17, 20, 21, 49, 50, 51, 52, 54, 56, 57, 59, 60, 81, 117, 121, 122, 148, 162, 163, 176, 180, 181, 188, 189, 190, 364, 368, 375, 376, 378, 379, 383, 390, 428, 432, 451, 452, 486, 489, 490, 495], "www": [0, 3, 8, 11, 16, 17, 34, 47, 485, 492], "wd15": [0, 11, 13], "fipy_wwwactiv": 0, "updatewww": 0, "upload_product": 0, "some": [0, 2, 6, 8, 9, 10, 11, 15, 16, 17, 21, 31, 32, 33, 34, 39, 40, 72, 73, 81, 90, 117, 137, 165, 180, 189, 190, 252, 257, 325, 330, 364, 378, 400, 485, 492], "version": [0, 6, 7, 9, 10, 11, 13, 15, 16, 17, 19, 20, 21, 81, 117, 181, 188, 189, 190, 223, 233, 411, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 486], "rsync": 0, "mac": [0, 2, 11, 13, 19, 22], "o": [0, 2, 4, 11, 13, 17, 22, 71, 72, 73, 137, 161, 165, 166, 169, 170, 171], "caus": [0, 2, 8, 15, 16, 17, 117, 160, 173, 174, 188, 189, 208, 223, 227, 252, 325, 359, 458], "problem": [0, 2, 4, 6, 7, 8, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 49, 50, 51, 52, 56, 57, 59, 60, 62, 65, 66, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 93, 94, 95, 96, 97, 99, 100, 102, 108, 109, 110, 111, 112, 113, 114, 121, 122, 126, 128, 137, 156, 160, 162, 163, 166, 173, 174, 175, 176, 180, 188, 189, 191, 253, 325, 338, 345, 364, 378, 428, 485, 489], "thei": [0, 3, 8, 10, 11, 15, 16, 17, 21, 74, 81, 162, 163, 189, 190, 191, 364, 394, 407, 496], "try": [0, 2, 9, 11, 16, 34, 49, 50, 59, 60, 72, 73, 78, 81, 117, 137, 160, 162, 163, 173, 174, 176, 189, 265, 398, 407], "erron": 0, "rsrc": 0, "2": [0, 6, 8, 10, 11, 14, 15, 16, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 59, 60, 63, 65, 66, 67, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 95, 102, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 138, 140, 141, 143, 148, 149, 150, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 188, 189, 190, 191, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 265, 309, 338, 344, 355, 357, 364, 367, 368, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 394, 398, 407, 408, 412, 413, 416, 417, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 462, 464, 466, 468, 469, 471, 472, 478, 486, 488, 489, 491, 492], "6": [0, 2, 6, 8, 14, 15, 16, 17, 31, 32, 33, 34, 36, 47, 52, 72, 73, 81, 85, 95, 108, 109, 110, 111, 113, 117, 124, 137, 138, 140, 141, 143, 148, 160, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 189, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 378, 398, 407, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 478, 491, 492], "doe": [0, 2, 9, 11, 16, 17, 18, 20, 21, 63, 81, 111, 113, 117, 176, 188, 197, 223, 248, 309, 352, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 412, 413, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 485, 486, 488, 495], "onc": [0, 3, 6, 11, 13, 75, 81, 111, 113, 128, 155, 175, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407], "receiv": [0, 2, 17], "amend": 0, "ask": [0, 2, 3, 10, 15, 20, 189, 190, 486, 487], "maintain": [0, 17, 108, 109, 110, 189, 190, 428, 453], "process": [0, 2, 6, 11, 14, 15, 17, 19, 20, 21, 31, 32, 160, 173, 174, 175, 191, 223, 268, 269, 331, 356, 407, 471, 472, 485, 486, 489, 490], "hour": [0, 17, 19, 21, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "don": [0, 2, 10, 17, 20, 160, 173, 174, 176, 189, 190, 252, 364, 486, 495, 496], "wish": [0, 7, 8, 11, 17, 67, 71, 136, 138, 143, 161, 177, 189], "wait": [0, 21, 162, 163], "trigger": [0, 457], "reason": [0, 2, 8, 11, 16, 17, 21, 32, 78, 81, 117, 137, 176, 189, 325, 398, 407, 478, 488], "manual": [0, 2, 7, 8, 11, 16, 19, 20, 31, 32, 33, 34, 72, 73, 188, 435, 486, 492, 496], "gener": [0, 2, 6, 9, 11, 14, 16, 17, 20, 21, 81, 96, 114, 137, 162, 163, 176, 188, 189, 190, 193, 197, 222, 223, 227, 228, 229, 265, 280, 293, 298, 299, 301, 302, 396, 403, 407, 414, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 458, 459, 480, 485, 486, 488, 490, 491, 495], "revis": [0, 2, 9, 11], "number": [0, 2, 8, 9, 11, 13, 16, 17, 21, 51, 63, 75, 78, 80, 81, 86, 105, 108, 109, 110, 113, 114, 117, 133, 136, 137, 138, 140, 143, 155, 175, 176, 188, 189, 219, 222, 223, 229, 231, 232, 234, 235, 240, 248, 251, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 359, 370, 388, 398, 402, 407, 412, 421, 424, 429, 432, 433, 435, 437, 442, 448, 449, 451, 456, 460, 461, 462, 463, 464, 465, 466, 468, 469, 488, 489, 491], "sha256": 0, "openssl": 0, "dgst": 0, "path": [0, 10, 15, 17, 71, 137, 161, 165, 166, 169, 170, 171, 223, 471, 472], "reset": [0, 81, 143, 161, 165], "0": [0, 6, 8, 10, 11, 16, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 138, 140, 141, 143, 148, 149, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 184, 188, 189, 190, 196, 197, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 253, 265, 268, 269, 280, 281, 291, 301, 309, 313, 314, 315, 316, 317, 323, 324, 356, 357, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 407, 412, 414, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 478, 486, 488, 491], "nist": [0, 2, 3, 6, 8, 11, 12, 17, 191, 407, 485], "gov": [0, 3, 8, 11, 16, 17, 352, 485], "how": [1, 2, 3, 7, 11, 17, 20, 21, 31, 32, 67, 72, 73, 81, 137, 155, 156, 162, 163, 165, 188, 189, 190, 394, 448, 486, 487, 495], "read": [1, 2, 3, 11, 20, 21, 165, 188, 189, 190, 223, 398, 408, 414, 424, 486, 487], "modul": [1, 2, 4, 7, 8, 10, 11, 15, 16, 17, 19, 20, 21, 23, 24, 30, 38, 43, 44, 48, 53, 55, 58, 64, 70, 76, 84, 88, 89, 92, 98, 101, 106, 107, 116, 119, 120, 125, 131, 147, 153, 159, 164, 168, 179, 183, 187, 188, 189, 190, 191, 192, 199, 207, 209, 236, 244, 252, 254, 255, 268, 277, 283, 285, 291, 297, 305, 312, 316, 318, 327, 329, 338, 355, 359, 392, 393, 394, 396, 397, 398, 399, 404, 407, 410, 412, 413, 414, 418, 421, 429, 433, 435, 449, 458, 459, 471, 480, 487, 488, 492, 493, 494, 495], "mainten": 2, "releas": [2, 6, 9, 11, 16, 17, 20, 21, 160, 173, 174, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 486, 487], "compat": [2, 17, 109, 189, 190, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "recent": [2, 6, 9, 11, 21, 188, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 368, 375, 376, 379, 383, 390, 391, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "numpi": [2, 16, 20, 21, 31, 32, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485, 486, 488], "25": [2, 17, 31, 32, 33, 117, 121, 160, 161, 173, 174, 175, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 357, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 478, 492], "930": 2, "get": [2, 3, 8, 17, 18, 20, 21, 117, 162, 163, 412, 428], "again": [2, 72, 73, 75, 77, 78, 80, 81, 93, 95, 97, 99, 100, 102, 109, 110, 111, 113, 114, 117, 162, 163, 175, 176, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 378], "925": 2, "discourag": 2, "stackoverflow": [2, 15, 20, 318, 319, 320], "876": 2, "875": [2, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "791": 2, "896": 2, "poor": [2, 17, 113, 489], "garbag": 2, "collect": [2, 11, 20, 160, 411, 418, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 462, 466, 475, 485], "petsc4pi": [2, 11, 16, 17, 257, 485], "18": [2, 81, 105, 173, 174, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 407, 452, 489, 492], "wa": [2, 4, 6, 8, 10, 12, 16, 17, 21, 63, 81, 161, 162, 163, 165, 166, 169, 170, 171, 188, 189, 253, 265, 309, 394, 396, 398, 407, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485], "memori": [2, 6, 32, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "leak": 2, "term": [2, 15, 17, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 59, 60, 68, 74, 78, 86, 111, 112, 117, 136, 137, 138, 162, 163, 165, 166, 173, 174, 176, 180, 188, 189, 191, 196, 197, 200, 486, 489, 490, 491], "justerrorvector": [2, 20, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "isn": [2, 11, 20, 486], "strictli": 2, "exampl": [2, 3, 6, 8, 10, 11, 13, 15, 16, 17, 19, 20, 21, 191, 394, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 473, 487, 488, 489, 496], "contribut": [2, 4, 17, 21, 74, 195, 196, 197, 364, 373, 378], "jon83carvalho": 2, "clarifi": 2, "mani": [2, 7, 8, 9, 11, 17, 19, 21, 77, 78, 80, 81, 117, 162, 163, 176, 188, 189, 191, 394, 485, 490, 495], "point": [2, 7, 8, 10, 17, 21, 34, 71, 72, 73, 75, 81, 90, 95, 114, 117, 137, 156, 160, 162, 163, 173, 174, 176, 189, 223, 240, 407, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "migrat": [2, 3, 7], "continu": [2, 8, 9, 11, 15, 16, 17, 20, 68, 75, 90, 111, 114, 117, 189, 309, 485, 486, 487, 488], "integr": [2, 7, 9, 11, 17, 20, 21, 162, 163, 356, 398, 407, 485, 486, 487, 488], "updat": [2, 4, 8, 11, 16, 20, 36, 81, 117, 136, 140, 141, 143, 180, 301, 396, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 485, 486], "wheel": 2, "distribut": [2, 11, 12, 15, 17, 19, 21, 75, 114, 421, 429, 433, 435, 437, 449, 456, 473, 485], "substanti": [2, 6], "refactor": [2, 4, 20, 223, 486], "matric": [2, 17, 20, 21, 191, 197, 252, 268, 269, 488], "more": [2, 3, 6, 7, 9, 10, 11, 16, 17, 20, 21, 31, 33, 34, 49, 50, 51, 59, 60, 72, 73, 74, 81, 86, 111, 113, 121, 136, 138, 143, 162, 163, 176, 180, 188, 189, 190, 222, 223, 253, 259, 260, 261, 262, 263, 264, 266, 267, 280, 281, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 353, 354, 364, 378, 398, 407, 413, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 462, 463, 464, 478, 486, 488, 495], "consist": [2, 7, 8, 11, 16, 113, 135, 223, 488, 490], "across": [2, 331, 468, 488], "863": 2, "refin": [2, 8, 223], "851": 2, "debug": [2, 17, 20, 21, 394], "848": 2, "contact": [2, 7, 14, 15, 20, 188, 486, 492], "inform": [2, 11, 16, 17, 155, 173, 174, 188, 253, 259, 260, 261, 262, 263, 264, 266, 267, 280, 281, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 411, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485], "singl": [2, 8, 10, 17, 19, 21, 31, 32, 33, 34, 74, 75, 108, 112, 114, 162, 163, 176, 180, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 265, 355, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 475], "page": [2, 11, 13, 17, 356], "847": 2, "set": [2, 4, 8, 13, 15, 16, 17, 19, 20, 21, 32, 68, 71, 72, 73, 75, 81, 83, 105, 106, 114, 117, 121, 122, 124, 126, 127, 128, 129, 137, 138, 140, 141, 149, 155, 161, 162, 163, 165, 166, 176, 177, 189, 190, 191, 200, 208, 223, 227, 250, 252, 265, 325, 352, 359, 396, 397, 398, 407, 408, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 485, 486, 488, 490, 492, 495], "822": 2, "replac": [2, 17, 81, 117, 176, 189, 190, 191, 223, 412, 416, 478], "deprec": [2, 3, 8, 17, 20, 140, 141, 403, 417, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "type": [2, 7, 8, 11, 15, 17, 18, 21, 49, 50, 51, 59, 60, 81, 91, 136, 137, 138, 143, 155, 165, 176, 188, 196, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 253, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 403, 407, 408, 411, 412, 413, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 485], "798": 2, "py3k": [2, 485], "797": 2, "7": [2, 6, 11, 15, 17, 31, 34, 72, 73, 95, 100, 108, 109, 110, 113, 117, 137, 138, 143, 156, 162, 163, 165, 180, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 378, 398, 407, 412, 416, 417, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 492], "conda": [2, 17, 20, 411, 485, 486, 487], "795": 2, "stop": [2, 16, 395], "divid": [2, 17, 20, 248, 398, 407, 412, 453, 468, 488, 490], "zero": [2, 8, 17, 67, 68, 81, 82, 83, 124, 128, 136, 176, 177, 180, 252, 259, 265, 364, 378, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 463, 464], "warn": [2, 8, 16, 17, 109, 189, 325, 396, 397, 403], "lu": [2, 6, 16, 263, 268, 273, 291, 302, 316, 488], "790": 2, "introduc": [2, 21, 63, 67, 109, 110, 117, 160, 173, 174, 189, 190], "sharedtemporaryfil": [2, 20, 398, 414], "bi": 2, "769": 2, "rais": [2, 10, 11, 111, 208, 223, 394, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "importerror": [2, 49, 50, 59, 60, 72, 73, 78, 81, 160, 162, 163, 173, 174, 176, 188], "768": 2, "disabl": 2, "tvtk": [2, 10, 17, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 394], "prerequisit": [2, 9, 11, 16, 17], "aren": 2, "met": [2, 16], "764": 2, "tabul": 2, "depend": [2, 6, 9, 11, 17, 19, 20, 21, 72, 73, 81, 113, 117, 137, 149, 162, 163, 176, 189, 196, 223, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 396, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 457, 485, 486, 488, 491, 495], "763": 2, "749": 2, "stoke": [2, 117], "caviti": [2, 117], "non": [2, 8, 11, 12, 16, 17, 31, 32, 33, 34, 36, 47, 50, 60, 72, 73, 81, 93, 95, 96, 136, 160, 162, 163, 173, 174, 180, 227, 228, 229, 298, 299, 301, 302, 338, 345, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 408, 435, 488], "newtonian": 2, "748": 2, "721": 2, "862": 2, "could": [2, 6, 8, 15, 17, 72, 73, 114, 162, 163, 175, 180, 188, 189, 428], "load": [2, 95, 102, 408, 485], "qt": [2, 407], "plugin": 2, "xcb": 2, "858": 2, "856": 2, "facevari": [2, 17, 20, 67, 81, 108, 109, 110, 111, 113, 117, 189, 193, 195, 196, 197, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 383, 386, 388, 390, 391, 421, 424, 428, 429, 433, 435, 437, 448, 449, 452, 453, 456, 468, 469, 478, 480, 482, 483, 484, 486, 488], "accumul": [2, 136, 395], "properli": [2, 8, 11, 17, 180, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "parallel": [2, 4, 10, 11, 16, 20, 191, 222, 223, 257, 268, 269, 330, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 400, 485, 486], "850": 2, "switch": [2, 6, 117, 191, 485], "849": 2, "py27": 2, "fail": [2, 10, 16, 17, 188, 398, 407, 428], "841": 2, "matplotlib2dview": [2, 20, 464, 469], "accept": [2, 8, 9, 11, 16, 189, 364, 367, 370, 371, 372, 373, 377, 378, 386, 388, 407], "color": [2, 10, 173, 174, 459, 460, 461, 463, 464, 465, 466, 468], "map": [2, 17, 166, 223, 394], "string": [2, 16, 223, 394, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 496], "836": 2, "coupl": [2, 7, 8, 14, 15, 20, 21, 32, 83, 106, 117, 160, 161, 162, 163, 166, 173, 174, 180, 191, 356, 486, 488, 490], "high": [2, 4, 20, 23, 86, 117, 414, 485, 486], "order": [2, 3, 5, 8, 9, 11, 16, 17, 20, 21, 31, 32, 33, 34, 36, 45, 46, 72, 73, 74, 81, 85, 86, 93, 117, 126, 127, 129, 137, 143, 160, 162, 163, 176, 180, 188, 189, 195, 196, 197, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 253, 364, 370, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 463, 464, 489, 490, 496], "diffus": [2, 4, 14, 15, 17, 19, 20, 31, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 106, 111, 113, 114, 117, 133, 135, 137, 138, 143, 156, 160, 162, 163, 173, 174, 175, 176, 188, 191, 356, 364, 367, 370, 371, 372, 373, 377, 378, 386, 388, 486, 489, 490, 491], "incompat": [2, 11, 188, 189, 190, 398, 407], "833": 2, "tool": [2, 3, 11, 14, 17, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 77, 78, 81, 82, 83, 95, 109, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 189, 190, 191, 223, 388, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 485, 488], "dump": [2, 8, 20, 165, 424], "undocu": 2, "alwai": [2, 7, 8, 9, 11, 15, 17, 31, 32, 33, 34, 81, 193, 222, 266, 267, 274, 276, 300, 304, 307, 310, 321, 323, 324, 325, 350, 351, 354, 367, 377, 385, 386, 396, 412, 442, 449, 457, 461, 479, 488, 495], "gzip": [2, 408], "828": [2, 6], "colorbar": [2, 20, 117, 140, 173, 174, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469], "true": [2, 8, 17, 21, 31, 32, 63, 67, 68, 71, 74, 81, 95, 108, 111, 126, 133, 136, 138, 143, 156, 160, 162, 163, 173, 174, 175, 176, 180, 181, 184, 188, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 396, 397, 398, 402, 407, 408, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 462, 464, 465, 466, 468, 469], "longer": [2, 6, 9, 11, 18, 21, 81, 176, 188, 189, 355, 485], "flow": [2, 8, 17, 20, 176, 180, 338, 345, 356, 489, 492], "826": 2, "gmsh": [2, 4, 10, 20, 71, 72, 73, 102, 136, 138, 143, 190, 223, 394, 485, 486], "818": 2, "gridnd": 2, "mesh": [2, 4, 8, 10, 11, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 96, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 135, 136, 137, 138, 140, 141, 143, 148, 149, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 189, 190, 196, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 408, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 478, 479, 480, 481, 482, 483, 484, 486, 488, 492], "cartesian": [2, 160, 173, 174, 222, 248, 421, 429, 433, 435, 456, 490], "811": [2, 407], "In": [2, 3, 7, 8, 9, 11, 13, 15, 16, 17, 19, 21, 47, 71, 72, 73, 74, 77, 78, 80, 81, 86, 93, 106, 109, 117, 136, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 176, 180, 188, 394, 428, 449, 488, 489, 493, 494, 495, 497], "9": [2, 6, 8, 9, 11, 14, 72, 73, 81, 82, 83, 95, 99, 105, 109, 111, 137, 138, 143, 160, 161, 162, 163, 173, 174, 180, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 357, 398, 407, 412, 416, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 459, 464, 465, 466, 471, 472, 492], "__repr__": [2, 20, 193, 194, 195, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 351, 352, 353, 354, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 400, 401, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458], "throw": [2, 8, 72, 73, 396], "except": [2, 10, 34, 49, 50, 59, 60, 72, 73, 78, 81, 137, 160, 162, 163, 173, 174, 176, 208, 223, 227, 252, 253, 325, 359, 394, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 495], "ab": [2, 36, 71, 81, 95, 117, 122, 126, 127, 129, 162, 163, 176, 180, 181, 223, 364, 378, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "801": 2, "circleci": [2, 485], "36": 2, "serial": [2, 10, 11, 16, 17, 222, 223, 240, 394, 398], "extrem": [2, 17, 189, 325], "slow": [2, 8, 11, 17, 31, 32, 33, 34, 162, 163, 189, 491], "800": [2, 137, 160], "conda2_env": 2, "realli": [2, 8, 11, 19, 357], "end": [2, 3, 7, 17, 36, 49, 51, 56, 59, 60, 71, 74, 75, 81, 111, 113, 114, 127, 129, 136, 137, 138, 143, 160, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 188, 394, 408, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 491, 496], "796": 2, "phase": [2, 4, 6, 8, 14, 15, 17, 19, 20, 21, 31, 32, 36, 106, 108, 110, 111, 113, 180, 189, 191, 489, 492], "polyxt": [2, 7, 8, 20], "freez": [2, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "792": 2, "circlequad": [2, 20], "781": 2, "matplolibview": 2, "ax": [2, 8, 20, 52, 57, 140, 160, 161, 173, 174, 280, 412, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 475], "properti": [2, 4, 12, 16, 21, 31, 32, 136, 137, 138, 140, 141, 143, 173, 174, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "778": 2, "binder": [2, 20, 486], "762": 2, "equat": [2, 14, 16, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 126, 127, 128, 129, 133, 136, 137, 138, 143, 148, 149, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 188, 190, 191, 195, 196, 197, 222, 223, 291, 298, 299, 301, 302, 303, 316, 353, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 485, 486, 490, 491], "websit": [2, 9, 11], "right": [2, 8, 16, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 68, 71, 75, 81, 82, 83, 85, 106, 112, 114, 117, 121, 124, 127, 129, 133, 136, 137, 138, 148, 160, 161, 162, 163, 166, 173, 174, 175, 176, 180, 188, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 265, 304, 309, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 486, 489, 490], "742": 2, "No": [2, 11, 81, 188, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 485], "variabl": [2, 4, 6, 7, 11, 16, 20, 21, 32, 36, 49, 50, 51, 56, 59, 60, 63, 72, 73, 81, 82, 83, 85, 90, 94, 95, 102, 109, 117, 121, 122, 124, 126, 128, 137, 140, 141, 148, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 176, 180, 188, 189, 190, 194, 355, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 412, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485, 486, 488, 489, 490], "mag": [2, 20, 165, 166, 173, 174, 180, 181, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "735": 2, "pip": [2, 17, 20, 485], "734": 2, "residu": [2, 8, 20, 81, 111, 117, 162, 163, 176, 180, 181, 253, 259, 265, 267, 293, 295, 299, 300, 303, 304, 309, 310, 322, 325, 328, 333, 334, 335, 337, 351, 353, 354, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "688": [2, 492], "need": [2, 3, 8, 9, 10, 11, 17, 19, 21, 31, 32, 33, 34, 47, 51, 74, 81, 110, 117, 137, 160, 162, 163, 173, 174, 176, 180, 188, 189, 190, 200, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 256, 257, 330, 331, 359, 400, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 473, 492, 495, 496], "circl": [2, 7, 8, 17, 20, 34, 73, 156, 165, 166, 173, 174, 223, 428, 448], "viewer": [2, 11, 17, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 138, 140, 141, 143, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 189, 421, 429, 433, 435, 456, 485, 486, 487], "676": 2, "default": [2, 6, 11, 13, 19, 20, 22, 63, 67, 81, 82, 83, 136, 137, 140, 141, 155, 162, 165, 173, 174, 188, 189, 222, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 396, 398, 403, 407, 411, 412, 413, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 486, 496], "flux": [2, 8, 20, 31, 33, 34, 67, 81, 117, 160, 162, 163, 173, 174, 176, 180, 486, 488], "condit": [2, 10, 16, 20, 21, 31, 32, 36, 49, 50, 51, 56, 59, 60, 67, 68, 72, 73, 74, 77, 81, 82, 83, 85, 86, 90, 110, 117, 126, 128, 137, 140, 141, 162, 163, 165, 166, 169, 170, 171, 176, 180, 188, 189, 190, 192, 193, 195, 196, 197, 198, 223, 253, 309, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 414, 428, 486, 489, 490], "explicitli": [2, 8, 16, 77, 81, 114, 160, 162, 163, 173, 174, 176, 188, 412], "609": 2, "clearli": [2, 8, 21, 162, 163], "400": [2, 6, 108, 112, 113, 162, 163, 165, 175, 176], "globalvalu": [2, 17, 20, 31, 47, 117, 176, 184, 364, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 452, 453, 456], "method": [2, 6, 8, 10, 16, 17, 19, 20, 21, 74, 80, 81, 117, 128, 155, 162, 163, 176, 180, 188, 189, 190, 191, 253, 265, 298, 299, 301, 302, 303, 309, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 396, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 486, 489, 490, 492, 495, 496], "assort": 2, "convect": [2, 15, 17, 20, 106, 162, 163, 175, 188, 191, 338, 345, 356, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 383, 386, 388, 390, 391, 452, 486, 489, 490, 491], "boundari": [2, 20, 21, 36, 49, 50, 51, 56, 59, 60, 67, 68, 72, 73, 74, 77, 81, 82, 83, 85, 90, 111, 113, 117, 126, 128, 135, 136, 137, 138, 140, 141, 143, 162, 163, 165, 166, 169, 170, 171, 175, 176, 180, 188, 189, 190, 192, 193, 195, 196, 197, 198, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 486, 490], "spheric": [2, 222, 241, 242], "There": [2, 11, 13, 17, 133, 136, 162, 163, 176, 189, 428], "known": [2, 7, 8, 17, 21, 31, 32, 160, 162, 163, 173, 174, 428, 488, 490], "vtk": [2, 18, 458, 473, 480, 482, 483, 484], "bitrot": 2, "ha": [2, 6, 7, 8, 11, 13, 16, 17, 18, 19, 21, 31, 32, 33, 34, 47, 50, 60, 63, 72, 73, 74, 75, 81, 90, 110, 111, 112, 113, 114, 117, 136, 137, 138, 140, 155, 165, 166, 175, 176, 189, 190, 191, 197, 265, 325, 396, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 460, 461, 462, 463, 464, 465, 466, 468, 469, 485, 488], "start": [2, 9, 17, 20, 31, 32, 33, 34, 111, 113, 117, 133, 160, 161, 162, 163, 173, 174, 175, 177, 189, 248, 394, 416, 473], "demis": 2, "also": [2, 3, 4, 6, 8, 11, 13, 16, 17, 18, 19, 21, 31, 32, 72, 73, 74, 81, 82, 83, 117, 136, 138, 140, 141, 143, 148, 162, 163, 180, 189, 265, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 403, 407, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485, 488, 489], "nonuniformgrid1d": [2, 20, 218, 222, 233, 241], "figur": [2, 6, 17, 140, 160, 173, 174, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 488], "out": [2, 11, 12, 17, 67, 160, 162, 173, 174, 180, 248, 265, 280, 309, 394, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 488], "747": 2, "spherical1d": 2, "uniform": [2, 75, 81, 108, 109, 110, 112, 113, 114, 160, 162, 163, 165, 173, 174, 175, 408, 421, 429, 433, 435, 456], "nonuniform": [2, 492], "732": 2, "klkuhlm": 2, "neumann": [2, 20, 82, 83, 195, 486], "bc": [2, 36, 85, 86], "constraint": [2, 11, 17, 20, 68, 137, 175, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "719": 2, "atism": 2, "vertex": [2, 20, 93, 219, 223, 229, 231, 234, 240, 248, 486, 490], "index": [2, 8, 11, 162, 163, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485], "invers": [2, 398, 407, 433], "716": 2, "726": 2, "mayavicli": [2, 20, 34, 156, 471], "663": 2, "datamin": [2, 31, 32, 33, 34, 36, 40, 71, 72, 73, 81, 82, 83, 90, 108, 109, 110, 111, 113, 121, 122, 124, 126, 128, 137, 140, 141, 160, 161, 162, 163, 165, 166, 173, 174, 175, 177, 189, 421, 429, 433, 435, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "datamax": [2, 31, 32, 33, 34, 36, 40, 71, 72, 73, 81, 82, 83, 90, 108, 109, 110, 111, 113, 121, 122, 124, 126, 128, 137, 140, 141, 160, 161, 162, 163, 165, 166, 173, 174, 175, 177, 189, 421, 429, 433, 435, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "argument": [2, 8, 16, 117, 136, 138, 140, 141, 143, 155, 189, 190, 293, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 413, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 495, 496], "ignor": [2, 17, 162, 163, 175, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 263, 302, 336, 355, 364, 413], "662": 2, "scale": [2, 16, 17, 21, 109, 111, 117, 140, 162, 163, 249, 253, 433, 460, 461, 462, 463, 464, 465, 466, 468, 469], "arg": [2, 176, 191, 218, 219, 220, 221, 223, 233, 234, 235, 240, 241, 242, 355, 394, 402, 403, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 460, 461, 463, 465, 466, 468, 469, 473], "primarili": [2, 7, 17, 81, 397, 488], "711": 2, "broken": [2, 9, 11, 16, 21, 137], "plm_rsh_agent": 2, "error": [2, 11, 12, 16, 17, 20, 21, 36, 72, 73, 81, 93, 95, 96, 112, 117, 148, 149, 188, 223, 260, 261, 262, 263, 264, 266, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 301, 302, 313, 314, 315, 316, 317, 323, 324, 336, 352, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 396, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 486, 488], "710": 2, "708": 2, "703": [2, 492], "fortran": [2, 6, 21, 160, 161, 165, 166, 169, 170, 171, 485], "arrai": [2, 6, 8, 17, 21, 36, 52, 71, 91, 121, 126, 127, 129, 137, 162, 163, 173, 174, 181, 191, 355, 364, 367, 368, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 398, 407, 412, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485], "support": [2, 4, 8, 11, 16, 17, 18, 20, 180, 188, 189, 223, 259, 267, 280, 281, 291, 299, 300, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 337, 351, 352, 353, 354, 396, 407, 418, 458, 486, 488, 496], "solv": [2, 6, 14, 16, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 93, 94, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 148, 149, 150, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 188, 189, 190, 252, 253, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 485, 486, 488, 489, 490], "701": 2, "while": [2, 4, 6, 8, 16, 17, 21, 31, 32, 33, 34, 63, 67, 71, 74, 81, 111, 137, 162, 163, 173, 174, 176, 180, 181, 265, 398, 407, 488, 491], "700": 2, "print": [2, 15, 16, 17, 20, 21, 31, 32, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 105, 108, 109, 111, 113, 114, 117, 122, 124, 126, 127, 128, 129, 137, 148, 149, 150, 161, 162, 163, 165, 166, 169, 170, 171, 175, 176, 180, 181, 184, 188, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 394, 398, 402, 407, 408, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "statement": [2, 188], "processor": [2, 10, 17, 108, 398, 414, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 485], "write": [2, 8, 20, 21, 72, 73, 74, 81, 117, 137, 143, 162, 163, 165, 180, 188, 189, 223, 398, 408, 414, 424], "timetest": 2, "forg": [2, 11, 17, 20, 486], "upload": [2, 20, 486], "option": [2, 6, 8, 10, 16, 17, 20, 22, 140, 141, 191, 259, 260, 261, 262, 264, 266, 267, 278, 279, 282, 286, 287, 288, 289, 290, 292, 293, 294, 299, 300, 303, 304, 310, 325, 333, 334, 335, 337, 351, 352, 353, 354, 394, 396, 398, 403, 407, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 486, 496], "fipy_display_matrix": [2, 17], "legaci": [2, 9, 11, 17, 20, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 486], "matplotlib": [2, 8, 11, 17, 20, 140, 173, 174, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 485, 486], "built": [2, 9, 11, 21, 121, 137, 155, 161, 165, 166, 173, 174, 227, 228, 229], "symlog": 2, "clean": [2, 223, 394], "benchmark": [2, 20], "8": [2, 6, 10, 11, 16, 34, 72, 73, 80, 81, 90, 95, 97, 105, 117, 137, 138, 143, 156, 160, 162, 163, 175, 176, 180, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 388, 398, 407, 412, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 492], "699": [2, 492], "stipul": 2, "forc": [2, 16, 17], "miniconda": 2, "url": [2, 492], "_cellvolumeaveragevari": 2, "class": [2, 4, 8, 10, 16, 17, 21, 85, 108, 109, 110, 111, 112, 113, 114, 117, 140, 141, 160, 173, 174, 188, 189, 190, 193, 194, 195, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 395, 396, 397, 398, 400, 401, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 495, 496], "express": [2, 6, 8, 11, 12, 13, 17, 21, 32, 36, 108, 117, 160, 162, 163, 173, 174, 176, 180, 223, 359, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 488], "bad": [2, 3], "call": [2, 15, 16, 17, 21, 81, 137, 180, 188, 189, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 265, 266, 351, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 396, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 495, 496], "stack": [2, 11], "make": [2, 6, 7, 10, 11, 13, 16, 17, 20, 21, 31, 33, 34, 36, 71, 106, 113, 117, 133, 162, 163, 173, 174, 175, 176, 180, 188, 189, 190, 223, 253, 373, 397, 398, 407, 424, 428, 432, 435, 437, 442, 448, 451, 452, 453, 457, 485, 486, 487, 488, 495], "698": 2, "nick": [2, 490], "croft": [2, 490, 492], "thesi": [2, 490, 492], "681": 2, "header": 2, "footer": 2, "680": 2, "nixpkg": [2, 11, 13], "661": 2, "recip": [2, 11, 13, 357, 492], "658": 2, "692": 2, "copi": [2, 3, 7, 9, 11, 12, 17, 20, 81, 108, 109, 110, 111, 112, 113, 114, 180, 181, 331, 394, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485], "script": [2, 7, 15, 17, 20, 23, 31, 32, 72, 73, 81, 121, 122, 126, 128, 137, 143, 175, 180, 188, 189, 190, 223, 393, 396, 471, 472, 473, 485, 486, 495], "command": [2, 7, 8, 9, 11, 13, 15, 16, 20, 81, 91, 121, 126, 128, 136, 137, 138, 143, 155, 176, 191, 396, 397, 413, 473, 486], "line": [2, 8, 10, 11, 15, 16, 20, 21, 34, 72, 73, 78, 81, 90, 91, 95, 136, 137, 138, 143, 155, 156, 160, 176, 191, 223, 248, 396, 397, 412, 413, 458, 462, 463, 464, 468, 473, 486, 488], "669": 2, "input": [2, 7, 8, 15, 16, 19, 20, 21, 32, 40, 41, 63, 68, 72, 73, 75, 77, 78, 80, 81, 82, 83, 90, 93, 94, 95, 97, 100, 102, 105, 114, 136, 137, 138, 143, 162, 163, 176, 180, 181, 188, 398, 407, 412], "deadlock": 2, "643": 2, "bring": 2, "from": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 94, 95, 102, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 133, 135, 136, 137, 138, 140, 141, 143, 148, 149, 150, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 188, 189, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 265, 266, 309, 318, 319, 320, 331, 338, 340, 351, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 395, 396, 398, 407, 408, 411, 412, 413, 414, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 471, 472, 478, 486, 488, 491, 492, 495, 496], "same": [2, 8, 16, 17, 19, 32, 74, 80, 81, 90, 95, 97, 99, 100, 102, 109, 110, 111, 112, 113, 137, 138, 162, 163, 165, 175, 176, 188, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 396, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 478, 488], "sourc": [2, 7, 9, 11, 14, 15, 17, 18, 20, 32, 56, 57, 67, 71, 74, 106, 111, 112, 117, 137, 160, 162, 163, 165, 166, 173, 174, 175, 176, 189, 191, 384, 385, 449, 473, 485, 486, 489, 490], "translat": [2, 6, 21, 162, 163, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "pya": [2, 17], "woodscn": [2, 17], "thing": [2, 3, 8, 10, 11, 16, 17, 188, 189, 253, 488, 495, 496], "spell": [2, 17], "657": 2, "window": [2, 11, 17, 19, 140, 141, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 478, 479, 480, 482, 483, 484, 485], "648": 2, "sphinx": [2, 17, 485], "647": 2, "645": 2, "gmshmesh": [2, 20], "644": 2, "xfong": 2, "655": 2, "mayavi": [2, 8, 11, 17, 20, 136, 141, 143, 458, 471, 472, 473, 485, 486], "wont": 2, "hendrik410": 2, "646": 2, "branch": [2, 20, 160, 173, 174, 486], "601": 2, "content": [2, 223, 478, 493, 494, 497], "rst": 2, "recurs": [2, 16, 488], "mess": 2, "597": 2, "compress": [2, 11, 408, 492], "archiv": [2, 9, 11, 15, 17, 20], "557": 2, "facegradaverag": [2, 20, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "stupid": 2, "552": 2, "458": 2, "wrong": [2, 8, 189], "preced": [2, 16, 17], "lx": [2, 74, 77, 80, 90, 91, 94, 95, 97, 99, 100, 102, 124, 126, 140, 141, 166, 180, 181, 189, 222, 407], "dx": [2, 17, 31, 32, 33, 36, 39, 40, 51, 52, 54, 56, 57, 63, 65, 66, 67, 68, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 97, 99, 100, 102, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 137, 140, 141, 149, 155, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 189, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 368, 375, 376, 378, 379, 383, 390, 391, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 459, 464, 465, 466, 468, 469, 471, 472, 478], "nonuniformgrid": 2, "457": 2, "special": [2, 12, 17, 21, 49, 50, 59, 60, 72, 73, 77, 78, 81, 160, 162, 163, 173, 174, 384, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 495, 496], "includ": [2, 4, 7, 11, 12, 13, 15, 16, 17, 19, 68, 117, 136, 160, 162, 163, 173, 174, 175, 189, 190, 191, 223, 478, 488, 489, 495], "432": 2, "340": 2, "packag": [2, 8, 10, 16, 17, 18, 20, 21, 23, 72, 73, 140, 141, 160, 173, 174, 266, 351, 352, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 411, 417, 428, 461, 471, 472, 485, 486, 487, 497], "just": [2, 7, 8, 16, 17, 21, 78, 81, 162, 163, 175, 176, 253, 396, 398, 407, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 463, 464, 490], "master": [2, 9, 11, 13, 20, 486], "predominantli": 2, "devop": 2, "focu": [2, 175], "been": [2, 6, 7, 8, 11, 13, 15, 17, 21, 63, 75, 81, 128, 136, 137, 138, 143, 155, 175, 188, 189, 190, 191, 223, 396, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 488], "easier": [2, 8, 21, 180, 188, 189, 190, 223], "It": [2, 3, 6, 8, 11, 16, 17, 18, 19, 31, 32, 49, 50, 59, 60, 74, 81, 96, 117, 137, 138, 162, 163, 176, 188, 189, 197, 223, 248, 265, 266, 351, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 473, 478, 485], "possibl": [2, 8, 10, 16, 17, 21, 74, 81, 109, 162, 163, 176, 223, 265, 293, 352, 394, 396, 398, 407, 459, 468, 489], "minim": [2, 3, 6, 8, 299, 338, 345, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "base": [2, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 81, 91, 117, 136, 137, 138, 140, 141, 143, 155, 161, 176, 191, 193, 194, 195, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 396, 397, 398, 400, 401, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 485, 486, 488, 492, 496], "maco": [2, 108, 485], "travisci": [2, 485], "appveyor": [2, 485], "badg": 2, "636": 2, "robin": [2, 7, 20, 486], "615": 2, "issue555": 2, "inclus": [2, 17, 456], "licens": [2, 11, 21], "613": [2, 492], "607": 2, "600": [2, 435], "explain": [2, 7, 8, 11, 17, 137], "where": [2, 10, 15, 17, 19, 20, 21, 31, 32, 33, 34, 36, 63, 67, 71, 75, 78, 81, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 136, 137, 138, 140, 141, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 181, 188, 189, 193, 194, 195, 196, 197, 355, 364, 368, 373, 375, 376, 379, 381, 383, 388, 390, 398, 407, 412, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 486, 488, 489, 491], "596": 2, "correct": [2, 8, 10, 17, 36, 75, 81, 110, 112, 114, 117, 149, 165, 166, 173, 174, 180, 223, 407, 408, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 459, 480, 488], "en_u": [2, 17], "dictionari": [2, 17, 394], "594": 2, "smoothedaggregationsolv": 2, "593": 2, "585": 2, "tarbal": 2, "582": 2, "navier": [2, 117], "viscou": [2, 117], "limit": [2, 8, 12, 16, 17, 81, 117, 133, 140, 141, 160, 162, 163, 173, 174, 176, 180, 189, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "580": 2, "stokescav": [2, 7, 8, 20], "579": 2, "rowin": 2, "inlin": [2, 4, 6, 8, 11, 17, 20, 191, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485], "578": 2, "577": 2, "epetra": [2, 330, 331], "vector": [2, 8, 20, 32, 72, 73, 74, 117, 188, 189, 196, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 355, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 412, 428, 469, 486, 488], "numarrai": [2, 485], "574": 2, "codaci": 2, "572": 2, "pytrilino": [2, 16, 17, 485, 488], "unavail": [2, 11, 13, 49, 50, 59, 60, 176, 417], "570": 2, "shwina": 2, "569": 2, "gpu": [2, 16, 485], "via": [2, 8, 11, 14, 17, 135, 488], "pyamgx": [2, 17, 20, 36, 485, 486], "567": 2, "dedic": 2, "public": [2, 8, 12, 18, 20, 21, 407, 485, 486, 487, 492], "domain": [2, 17, 21, 31, 32, 36, 71, 72, 73, 75, 78, 81, 82, 90, 91, 108, 109, 110, 114, 117, 128, 137, 160, 161, 162, 163, 165, 166, 169, 173, 174, 176, 177, 180, 207, 222, 223, 338, 339, 341, 343, 344, 468, 488, 490], "556": 2, "550": 2, "546": 2, "ensur": [2, 81, 398, 402, 407], "dtype": 2, "float": [2, 10, 21, 50, 60, 71, 140, 141, 189, 193, 195, 196, 197, 222, 248, 253, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 355, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "matrix": [2, 6, 8, 11, 16, 17, 20, 21, 71, 74, 81, 86, 117, 160, 162, 163, 173, 174, 176, 180, 181, 189, 196, 252, 253, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 309, 310, 313, 314, 315, 316, 317, 318, 320, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 485, 488, 489], "multipli": [2, 20, 21, 253, 359, 364, 367, 368, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 398, 407], "544": 2, "revert": [2, 223], "issue534": 2, "physic": [2, 8, 14, 19, 21, 74, 109, 137, 176, 180, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 489, 491, 492], "field": [2, 4, 6, 8, 14, 15, 17, 19, 20, 21, 36, 68, 74, 81, 106, 110, 111, 112, 113, 117, 137, 138, 143, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 189, 191, 364, 398, 407, 412, 424, 468, 489, 492], "mishandl": 2, "compound": 2, "unit": [2, 12, 20, 21, 109, 117, 124, 137, 138, 143, 162, 163, 393, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "536": 2, "532": 2, "race": [2, 414], "524": 2, "max": [2, 4, 16, 20, 31, 47, 71, 74, 95, 111, 117, 127, 137, 149, 156, 180, 181, 184, 189, 331, 364, 378, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468], "min": [2, 20, 31, 32, 33, 34, 36, 111, 126, 156, 180, 181, 189, 331, 364, 378, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468], "global": [2, 14, 17, 21, 149, 150, 394], "520": 2, "gitter": 2, "chat": 2, "516": 2, "badger": 2, "489": 2, "631": 2, "628": 2, "627": 2, "omp_num_thread": [2, 17], "625": [2, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "import": [2, 4, 8, 10, 16, 17, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 94, 95, 102, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 133, 137, 140, 141, 148, 149, 150, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 188, 189, 190, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 331, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 395, 398, 407, 408, 411, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 462, 464, 465, 466, 468, 469, 471, 472, 478, 495], "623": 2, "621": 2, "plot": [2, 17, 18, 20, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 91, 94, 95, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 136, 137, 138, 140, 141, 143, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 421, 429, 433, 435, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485, 486], "617": 2, "pick": [2, 11], "1st": 2, "valu": [2, 6, 7, 8, 10, 19, 20, 21, 31, 32, 36, 39, 40, 52, 54, 57, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 136, 137, 138, 140, 141, 143, 149, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 189, 193, 194, 195, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 260, 261, 262, 264, 266, 300, 325, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 396, 398, 407, 412, 413, 418, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 486, 488, 491, 496], "1d": [2, 18, 36, 49, 50, 51, 56, 59, 60, 77, 78, 80, 81, 85, 93, 94, 95, 96, 99, 100, 102, 105, 108, 109, 111, 112, 113, 114, 133, 140, 141, 155, 162, 163, 175, 176, 181, 188, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 428, 453, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485], "cellvari": [2, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 102, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 140, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 189, 223, 233, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 412, 421, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 478, 479, 480, 482, 483, 484, 486], "611": 2, "coeffici": [2, 4, 17, 20, 32, 36, 49, 50, 51, 59, 60, 67, 71, 77, 81, 94, 106, 108, 112, 117, 136, 137, 138, 143, 160, 161, 162, 163, 173, 174, 176, 188, 196, 197, 298, 299, 301, 302, 303, 355, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 452, 486, 488, 489, 491], "cannot": [2, 6, 8, 9, 11, 16, 17, 21, 32, 74, 117, 162, 189, 208, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 359, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 485, 488], "610": 2, "anisotropi": [2, 6, 7, 8, 17, 19, 20, 161, 173, 174], "contour": [2, 18, 91, 138, 140, 141, 160, 463, 464, 466, 485], "displai": [2, 17, 18, 20, 21, 36, 72, 73, 81, 96, 111, 113, 136, 137, 138, 140, 141, 143, 160, 173, 174, 402, 403, 412, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485], "legend": [2, 17, 459, 462], "608": 2, "var": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 137, 140, 141, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 189, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 396, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "object": [2, 4, 6, 8, 14, 16, 17, 20, 68, 72, 73, 81, 91, 95, 121, 122, 126, 128, 135, 137, 140, 141, 155, 160, 173, 174, 176, 177, 188, 189, 191, 193, 194, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 253, 259, 267, 276, 278, 279, 280, 281, 282, 286, 287, 291, 296, 298, 299, 300, 301, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 331, 333, 334, 335, 337, 351, 352, 353, 354, 358, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 396, 397, 398, 400, 407, 408, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 485, 486, 488, 495], "callabl": 2, "603": 2, "basic": [2, 8, 11, 16, 17, 19, 21, 155, 223, 413], "602": 2, "592": 2, "590": 2, "pyamgsolv": 2, "584": 2, "anim": [2, 140, 141], "jupyt": [2, 11], "notebook": [2, 11], "566": 2, "565": 2, "empti": [2, 173, 174, 394], "env": [2, 11, 411], "564": 2, "board": 2, "561": 2, "cast": [2, 8, 398, 407, 488, 492], "data": [2, 16, 18, 20, 21, 36, 137, 140, 141, 161, 165, 166, 169, 170, 171, 191, 223, 407, 408, 411, 412, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 485, 486, 495], "int64": 2, "int32": 2, "accord": [2, 176], "rule": [2, 34, 156, 162, 163], "safe": [2, 67, 396], "555": 2, "551": 2, "spew": 2, "545": 2, "543": 2, "integ": [2, 81, 189, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "539": 2, "explicit": [2, 8, 11, 17, 20, 32, 45, 74, 81, 137, 161, 162, 163, 166, 169, 170, 171, 176, 180, 189, 190, 359, 368, 375, 376, 379, 383, 384, 390, 391, 488, 491], "mixedel": [2, 20], "538": 2, "534": 2, "physicalfield": [2, 20, 109, 111, 398, 457], "533": 2, "531": 2, "drop_tol": 2, "spars": [2, 11, 16, 176, 191, 199, 252, 268, 269, 291, 316, 318, 319, 320, 485, 488], "linalg": [2, 16, 291, 316, 318, 319, 320], "splu": [2, 291, 316], "gone": 2, "530": 2, "instruct": [2, 7, 9, 11, 17, 495, 496], "528": 2, "525": [2, 110], "guyer": [2, 4, 14, 106, 492], "osx": 2, "513": 2, "give": [2, 8, 11, 16, 17, 21, 111, 113, 143, 175, 176, 223, 364, 394, 428], "510": 2, "weav": [2, 8, 11, 17, 21, 485], "509": 2, "unabl": 2, "506": 2, "spatial": [2, 8, 20, 31, 33, 34, 81, 117, 486], "vari": [2, 8, 20, 21, 72, 73, 81, 90, 165, 468, 486], "anisotrop": [2, 4, 19, 20, 71, 160, 173, 174, 486], "488": 2, "break": [2, 10, 17, 31, 111, 180, 181], "gmshgrid": 2, "435": 2, "fatal": 2, "spmatrix": 2, "h": [2, 14, 17, 173, 174, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 489, 492], "found": [2, 7, 9, 11, 16, 17, 21, 49, 50, 51, 59, 60, 81, 91, 117, 138, 160, 162, 163, 173, 174, 176, 188, 189, 190, 253, 485, 493, 494, 495, 497], "434": 2, "ez_setup": 2, "502": 2, "gmane": [2, 3, 8], "defunct": [2, 3, 485], "recvobj": 2, "allgath": [2, 20, 331], "sendobj": [2, 331], "492": 2, "restor": [2, 16], "trail": 2, "whitespac": 2, "expect": [2, 7, 8, 17, 77, 78, 81, 162, 163, 176, 412, 488], "485": 2, "pep": [2, 10, 485], "440": 2, "483": 2, "provid": [2, 3, 6, 8, 9, 11, 12, 15, 16, 17, 19, 21, 86, 90, 108, 109, 110, 133, 137, 191, 223, 266, 351, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 412, 414, 478, 485, 488, 495, 496], "_facetocelldistanceratio": [2, 17], "why": [2, 16, 17, 20, 253, 394, 486], "scalar": [2, 16, 17, 189, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 309, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "481": 2, "strip": 2, "white": 2, "space": [2, 21, 50, 60, 81, 138, 143, 156, 162, 163, 176, 189, 221, 222, 251, 435, 489], "eof": 2, "r": [2, 14, 19, 31, 32, 33, 34, 39, 40, 49, 50, 59, 60, 68, 71, 81, 117, 137, 138, 140, 143, 149, 156, 160, 162, 163, 173, 174, 175, 180, 181, 223, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 471, 472, 492], "479": 2, "uniformgrid3d": [2, 222], "_celltocellid": 2, "concaten": [2, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "478": 2, "pkgw": 2, "incorrect": [2, 81, 359, 412], "axi": [2, 8, 19, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 124, 188, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407, 412, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 462], "477": 2, "472": 2, "471": 2, "sort": 2, "entri": [2, 17, 195, 196, 407], "469": 2, "syntax": [2, 11, 15, 17, 21, 162, 163, 188, 189, 190], "466": 2, "465": 2, "implement": [2, 6, 11, 14, 15, 16, 17, 20, 117, 143, 161, 162, 163, 191, 195, 196, 197, 208, 223, 227, 243, 252, 325, 352, 359, 396, 454, 458, 470, 474, 476, 481, 486, 487], "cahnhilliard": [2, 6, 7, 8, 17, 20], "mesh2dcoupl": [2, 7, 8, 17, 20], "463": [2, 14], "typeset": 2, "analyt": [2, 8, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 81, 85, 91, 105, 111, 112, 113, 114, 133, 176, 188, 388], "solut": [2, 6, 8, 15, 16, 17, 21, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 102, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 126, 128, 133, 149, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 176, 188, 189, 191, 197, 253, 259, 267, 299, 300, 303, 304, 309, 310, 325, 333, 334, 335, 337, 351, 353, 354, 355, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 485, 488, 490, 491], "460": 2, "pdflatex": 2, "head": [2, 6], "459": [2, 407], "purg": 2, "gist": 2, "456": [2, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391], "duplic": [2, 3, 394, 398, 407, 424, 428, 432, 437, 442, 448, 451, 452, 453, 457], "ufunc": [2, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "454": 2, "452": 2, "getter": [2, 190], "setter": [2, 190], "450": 2, "448": 2, "ipython": [2, 17, 485], "447": 2, "proper": [2, 117, 223], "446": 2, "robust": [2, 252], "distutil": [2, 417], "strictvers": 2, "442": 2, "compar": [2, 6, 11, 17, 36, 47, 71, 81, 91, 133, 138, 160, 161, 165, 166, 169, 170, 171, 176, 223, 388, 398, 407, 412, 421, 429, 433, 435], "tupl": [2, 8, 108, 109, 110, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 408, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 488], "441": 2, "two": [2, 8, 10, 11, 16, 17, 19, 21, 31, 32, 74, 82, 83, 99, 108, 109, 110, 111, 113, 117, 126, 127, 129, 160, 162, 163, 165, 166, 169, 173, 174, 175, 180, 188, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407, 412, 428, 452, 488, 492, 495], "439": 2, "alfrenardi": 2, "issue426": 2, "typo": 2, "431": 2, "raybsmith": 2, "429": 2, "matplotlibview": [2, 8, 20, 173, 174], "428": 2, "period": [2, 47, 90, 166, 233, 234, 235], "3d": [2, 18, 33, 111, 156, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 485], "424": 2, "419": 2, "498": 2, "nonlinear": [2, 8], "496": 2, "linearbicgstabsolv": [2, 20], "take": [2, 6, 16, 17, 20, 21, 77, 81, 111, 124, 160, 162, 163, 173, 174, 175, 176, 180, 189, 190, 219, 223, 229, 231, 234, 240, 248, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 486], "494": 2, "493": 2, "review": [2, 14, 20, 486, 492], "io": [2, 11, 13, 16, 398, 414, 485], "access": [2, 17, 19, 21, 160, 173, 174, 189, 398, 414, 495], "leav": [2, 11, 19, 81, 117, 162, 163], "comment": [2, 11, 17, 21], "491": 2, "mpi4pi": [2, 11, 16, 17, 331, 485], "484": 2, "482": 2, "compliant": 2, "476": 2, "setuptool": 2, "suit": [2, 3, 11, 16, 17, 137, 191, 259, 267, 280, 281, 291, 299, 300, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 337, 351, 353, 354, 392, 485, 488], "475": 2, "grid3d": [2, 20, 33, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 471, 472], "470": 2, "mesh3d": [2, 20], "celltocellid": 2, "467": 2, "sequenc": [2, 21, 398, 407, 412], "462": 2, "incorrectli": 2, "455": 2, "445": 2, "dendriteview": [2, 160], "put": [2, 17, 20, 31, 33, 34, 189, 398, 407, 412, 416, 486], "over": [2, 10, 17, 21, 31, 32, 33, 34, 36, 63, 81, 90, 108, 117, 128, 160, 162, 163, 175, 176, 189, 190, 301, 303, 412, 449, 463, 464, 488, 490, 491], "bar": [2, 173, 174, 175, 180, 396, 407, 459, 460, 461, 463, 464, 465, 466], "443": 2, "api": [2, 8, 16], "nice": [2, 463, 464, 485], "438": 2, "437": 2, "mislead": 2, "433": 2, "430": 2, "427": 2, "425": [2, 173, 174], "warren": [2, 4, 14, 106, 160, 161, 165, 166, 173, 174, 492], "421": 2, "matplotlib2dgridview": [2, 20, 160, 173, 174], "function": [2, 8, 10, 11, 17, 19, 21, 31, 32, 36, 72, 73, 81, 106, 110, 121, 122, 128, 135, 137, 138, 143, 148, 162, 163, 165, 175, 176, 180, 189, 190, 191, 200, 219, 222, 223, 229, 231, 234, 240, 248, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 402, 403, 407, 408, 411, 412, 413, 414, 416, 428, 449, 458, 459, 473, 480, 488, 489, 490, 495], "416": 2, "reflect": [2, 398, 407, 424, 428, 432, 437, 442, 448, 451, 452, 453, 457], "415": 2, "matplotlibgrid2dview": 2, "414": 2, "periodicgrid3d": [2, 20], "413": 2, "remind": 2, "user": [2, 3, 8, 9, 11, 13, 15, 16, 17, 19, 21, 31, 32, 33, 34, 81, 160, 173, 174, 176, 188, 189, 190, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 453, 456, 457, 491], "differ": [2, 8, 9, 11, 16, 17, 19, 21, 31, 32, 33, 34, 47, 72, 73, 77, 80, 81, 94, 95, 96, 99, 100, 102, 106, 108, 109, 110, 113, 136, 138, 143, 162, 163, 165, 166, 176, 177, 188, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 265, 359, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 468, 475, 488, 490, 492], "conserv": [2, 8, 17, 20, 31, 32, 74, 81, 137, 149, 150, 160, 162, 163, 173, 174, 180, 449, 453, 486, 490], "412": 2, "pickl": [2, 8, 165, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 256, 257, 258, 325, 330, 331, 332, 359, 400, 401, 408, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458], "commun": [2, 3, 15, 16, 17, 21, 71, 122, 124, 126, 128, 137, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 256, 257, 330, 331, 398, 400, 408, 414, 428], "unnecessari": 2, "grid": [2, 17, 81, 117, 162, 163, 166, 176, 218, 219, 220, 221, 222, 230, 231, 233, 234, 235, 240, 241, 242, 250, 251, 452, 468, 485, 490], "408": 2, "407": 2, "strang": 2, "loop": [2, 34, 72, 73, 77, 80, 81, 82, 83, 95, 117, 137, 156, 175, 223], "reshap": [2, 20, 160, 173, 174, 398, 407, 412], "404": 2, "never": [2, 9, 11, 176, 495], "401": 2, "sweep": [2, 16, 17, 20, 67, 71, 74, 81, 111, 112, 117, 162, 163, 176, 180, 181, 189, 190, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 486], "instead": [2, 3, 8, 9, 11, 17, 19, 21, 81, 117, 136, 162, 163, 166, 176, 188, 189, 190, 355, 358, 403, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485, 495], "295": 2, "must": [2, 6, 10, 16, 17, 21, 31, 32, 51, 75, 81, 109, 112, 114, 117, 160, 162, 163, 165, 166, 173, 174, 176, 188, 189, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 359, 368, 375, 376, 379, 383, 390, 391, 396, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 463, 464, 468, 478, 488, 491, 496], "zizou": 2, "signific": [2, 6, 9, 11, 16, 191], "level": [2, 4, 15, 16, 17, 20, 23, 121, 122, 124, 126, 127, 128, 129, 191, 265, 338, 343, 344, 345, 346, 347, 348, 349, 414, 428, 463, 464, 485, 486, 492], "handl": [2, 11, 21, 49, 50, 51, 59, 60, 162, 163, 188, 223], "lsmlib": [2, 10, 17, 20, 428, 486], "scikit": [2, 17, 20, 428, 486], "fmm": [2, 17, 20, 428, 486], "librari": [2, 11, 16, 17, 21, 22, 49, 50, 59, 60, 72, 73, 78, 81, 162, 163, 176, 413, 485, 488], "magnitud": [2, 17, 31, 32, 81, 106, 364, 378, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 469], "faster": [2, 6, 17, 21, 176, 491], "than": [2, 3, 6, 8, 10, 11, 15, 16, 17, 21, 47, 65, 66, 81, 91, 138, 162, 163, 165, 176, 188, 189, 190, 223, 265, 309, 364, 378, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 463, 464, 488, 495], "prototyp": 2, "streamplot": [2, 468], "control": [2, 14, 19, 31, 32, 33, 34, 137, 138, 143, 155, 180, 356, 357, 468, 488], "git": [2, 20, 189, 190, 486, 487, 492], "much": [2, 3, 7, 8, 17, 21, 31, 32, 81, 162, 163, 176, 188, 189, 253, 495], "particip": 2, "398": [2, 492], "home": [2, 22], "redirect": [2, 8], "397": 2, "sphinxcontrib": [2, 17], "bibtex": [2, 17], "396": 2, "googl": [2, 3, 16, 485], "395": 2, "ubuntu": 2, "393": 2, "cylindricalnonuniformgrid2d": [2, 20, 222], "exteriorfac": [2, 17, 20, 72, 73, 102, 117, 180, 181, 189, 220, 233, 234, 235, 242, 250], "392": 2, "exit_nist": 2, "cgi": 2, "391": 2, "p\u00e9clet": [2, 51, 63, 188, 189], "inequ": [2, 491], "sign": [2, 3, 20, 189, 398, 407, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "388": 2, "64": 2, "int": [2, 121, 124, 137, 155, 165, 180, 197, 219, 222, 223, 229, 231, 234, 240, 248, 253, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 356, 359, 398, 412, 414, 424, 432, 437, 442, 448, 449, 451, 457, 463, 464, 469], "384": 2, "382": 2, "381": 2, "377": 2, "vanleerconvectionterm": [2, 20, 47, 180, 181, 488, 491], "minmod": 2, "slope": 2, "376": 2, "committicketupdat": 2, "375": [2, 110, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 492], "_formatinteg": 2, "373": 2, "372": 2, "cylindr": [2, 49, 50, 59, 60, 218, 219, 220, 221, 222], "371": 2, "binari": [2, 6, 7, 9, 10, 11, 14, 20, 21, 113, 163, 175, 200, 223, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 492], "370": 2, "368": 2, "well": [2, 3, 8, 9, 11, 15, 17, 21, 31, 32, 106, 162, 163, 175, 176, 188, 189, 191, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 489], "367": 2, "promot": 2, "366": 2, "unop": [2, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "365": 2, "renam": [2, 188, 189], "instanc": [2, 7, 17, 51, 189, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 480], "364": 2, "factori": [2, 81, 175, 188, 222, 458, 459, 480], "360": 2, "css": 2, "356": 2, "353": 2, "ohloh": 2, "repo": 2, "352": 2, "getvers": 2, "350": 2, "element": [2, 6, 15, 36, 72, 73, 78, 106, 135, 155, 223, 227, 228, 229, 356, 364, 386, 398, 407, 412, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485, 488, 490, 492], "347": 2, "activ": [2, 9, 11, 17, 21, 411], "frame": [2, 8, 471, 472], "front": [2, 160, 173, 174, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 453], "339": 2, "loki": 2, "337": 2, "interact": [2, 3, 7, 11, 15, 17, 19, 21, 36, 49, 50, 51, 56, 59, 60, 65, 75, 77, 81, 85, 108, 109, 110, 111, 112, 113, 114, 137, 161, 162, 163, 165, 166, 175, 176, 188, 398, 407, 477], "between": [2, 11, 17, 20, 21, 31, 32, 81, 106, 108, 136, 138, 160, 162, 163, 166, 169, 173, 174, 176, 180, 188, 189, 222, 240, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 396, 407, 412, 428, 448, 485, 486, 488, 491], "336": 2, "clash": 2, "334": 2, "citat": [2, 17], "go": [2, 21, 108, 109, 110, 160, 161, 162, 163, 165, 166, 173, 174], "doi": [2, 14, 492], "333": 2, "seem": [2, 16, 17, 188, 468, 495], "331": 2, "330": 2, "facevalu": [2, 20, 162, 163, 175, 180, 181, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "facecent": [2, 17, 72, 73, 81, 82, 83, 102, 117, 162, 163, 175, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "329": 2, "background": [2, 8, 20, 21, 223, 486, 487], "326": 2, "gmsh2d": [2, 17, 20, 71, 72, 73, 95, 135, 190, 223], "323": 2, "getfacecent": [2, 189], "return": [2, 17, 32, 72, 73, 81, 82, 83, 108, 109, 110, 111, 112, 113, 114, 126, 127, 129, 162, 163, 165, 173, 174, 175, 176, 180, 181, 188, 189, 193, 194, 195, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 295, 298, 299, 300, 301, 302, 303, 304, 309, 310, 313, 314, 315, 316, 317, 322, 323, 324, 325, 328, 330, 331, 332, 333, 334, 335, 336, 337, 351, 352, 353, 354, 355, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 400, 401, 403, 407, 408, 411, 412, 413, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 473, 480], "319": 2, "transientterm": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 63, 71, 72, 73, 74, 77, 78, 81, 82, 83, 90, 108, 109, 110, 111, 112, 113, 121, 122, 124, 126, 128, 137, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 189, 190, 359, 368, 375, 376, 379, 383, 390, 391, 488], "dt": [2, 8, 17, 31, 32, 33, 34, 36, 39, 40, 47, 63, 71, 72, 73, 74, 77, 78, 80, 81, 82, 83, 90, 108, 109, 110, 111, 112, 113, 121, 122, 124, 133, 137, 148, 149, 150, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 181, 190, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 421, 433], "318": 2, "311": 2, "305": 2, "mpirun": [2, 17], "np": [2, 17], "wd": 2, "hang": 2, "sandbox": 2, "buildbot": [2, 4, 485], "297": 2, "gnuplot": 2, "291": [2, 364, 367, 368, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391], "efficiency_test": 2, "choke": 2, "liquidvapor2d": [2, 20], "289": [2, 492], "diffusionterm": [2, 8, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 81, 82, 83, 85, 90, 91, 94, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 188, 189, 364, 367, 368, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 390, 391, 488], "_test": 2, "287": 2, "275": 2, "274": 2, "norm2": 2, "272": 2, "269": 2, "gridxd": 2, "255": 2, "5": [2, 6, 8, 11, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 57, 67, 71, 72, 73, 74, 75, 81, 90, 95, 111, 112, 113, 114, 117, 122, 124, 126, 128, 137, 138, 143, 149, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 184, 191, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 352, 364, 367, 368, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 398, 407, 412, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 466, 468, 469, 471, 472, 478, 488, 491, 492], "mask": [2, 8, 17, 126, 189, 193, 195, 196, 197, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "253": 2, "promin": 2, "245": [2, 143], "_binaryterm": 2, "228": 2, "attempt": [2, 11, 17, 18, 21, 81, 188, 191, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 471, 472], "mpi": [2, 16, 20, 222, 256, 257, 330, 331, 398, 400, 402, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 485, 486], "225": 2, "mostli": [2, 222, 223], "209": [2, 117], "rhie": [2, 117], "chow": [2, 117], "180": [2, 173, 174], "arithmet": [2, 8, 21, 166, 173, 174, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 485], "face": [2, 8, 17, 21, 31, 33, 34, 36, 68, 72, 73, 81, 85, 117, 155, 162, 163, 165, 166, 173, 174, 180, 188, 189, 193, 195, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 469, 488], "cell": [2, 6, 8, 14, 17, 19, 20, 21, 31, 33, 34, 50, 60, 67, 71, 72, 73, 81, 82, 83, 105, 117, 138, 143, 155, 162, 163, 180, 189, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 466, 468, 469, 478, 486, 490, 492], "distanc": [2, 17, 121, 122, 128, 137, 148, 180, 428, 488], "calcul": [2, 6, 8, 11, 13, 16, 17, 18, 19, 21, 31, 33, 34, 51, 72, 73, 81, 90, 91, 117, 128, 137, 162, 163, 180, 188, 189, 191, 227, 228, 229, 253, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "128": 2, "123": [2, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 412], "numerix": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 77, 78, 81, 82, 83, 95, 105, 109, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 148, 149, 150, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 188, 189, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 462, 464, 465, 466, 468, 469, 471, 472, 488], "dot": [2, 17, 20, 71, 111, 112, 113, 117, 136, 137, 138, 149, 161, 189, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "tensor": [2, 20, 94, 160, 173, 174, 486], "103": 2, "subscrib": [2, 3], "_markstal": 2, "attributeerror": [2, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "61": 2, "implicitdiffusionterm": [2, 20, 188, 189, 197, 488], "simpl": [2, 7, 8, 17, 19, 20, 21, 31, 32, 72, 73, 81, 105, 108, 111, 112, 114, 117, 138, 162, 163, 165, 166, 175, 364, 378, 407, 428, 452, 453, 473, 490], "mesh1d": [2, 7, 8, 15, 17, 20, 52, 57, 61, 62, 66, 78, 80, 93, 94, 95, 99, 100, 102, 109, 110, 113, 162, 163, 230, 488], "346": 2, "text": [2, 7, 8, 15, 17, 21, 32, 36, 49, 51, 56, 59, 60, 75, 81, 85, 106, 108, 112, 113, 114, 124, 127, 129, 133, 137, 140, 141, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 188, 195, 196, 197, 253, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 414, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485, 488, 489, 491], "trunk": 2, "342": 2, "transient": [2, 15, 17, 20, 72, 73, 77, 78, 81, 82, 83, 106, 161, 175, 176, 191, 486, 489, 490], "implicit": [2, 8, 11, 17, 32, 46, 81, 82, 83, 85, 161, 162, 163, 165, 166, 175, 176, 188, 359, 381, 384, 385, 488], "338": 2, "svntogit": 2, "bump": [2, 14], "increas": [2, 8, 16, 21, 31, 32, 33, 34, 63, 74, 81, 180, 223, 253, 265, 463, 464, 488, 491], "capabl": [2, 6, 8, 11, 16, 17, 18, 21, 256, 257, 330, 331, 400, 488], "eas": 2, "few": [2, 17, 19, 21, 75, 136, 428, 493, 494, 495, 497], "exist": [2, 3, 9, 10, 11, 21, 137, 143, 160, 173, 174, 188, 189, 191, 223, 394, 398, 407, 448, 485, 489, 495], "A": [2, 8, 9, 11, 12, 14, 16, 17, 18, 21, 31, 32, 67, 71, 77, 80, 90, 91, 105, 108, 112, 114, 117, 137, 138, 140, 141, 143, 155, 160, 161, 162, 163, 165, 166, 173, 174, 176, 181, 189, 190, 191, 208, 223, 253, 260, 261, 262, 263, 264, 266, 309, 355, 356, 364, 388, 394, 397, 398, 407, 408, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 485, 488, 489, 490, 492], "mechan": [2, 8, 14, 17, 21, 136, 143, 165, 485, 492], "specifi": [2, 5, 10, 17, 19, 78, 80, 81, 189, 190, 195, 196, 197, 222, 223, 303, 359, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 485, 488, 495, 496], "most": [2, 6, 7, 8, 9, 11, 16, 17, 18, 21, 49, 50, 51, 59, 60, 71, 81, 136, 188, 189, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 368, 375, 376, 379, 383, 390, 391, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 485, 488, 495], "partit": [2, 4, 17, 189, 223], "pyamg": [2, 17, 20, 485, 486], "pervas": [2, 4, 10], "full": [2, 4, 11, 21, 106, 138, 175, 188, 191, 495], "namespac": [2, 17, 189, 190], "update2_0to3_0": [2, 7, 20], "detail": [2, 8, 11, 15, 16, 17, 21, 49, 50, 51, 59, 60, 72, 73, 117, 162, 163, 165, 166, 173, 174, 188, 280, 352, 368, 375, 376, 379, 383, 390, 394, 413], "contain": [2, 7, 8, 11, 21, 22, 113, 117, 137, 177, 189, 190, 227, 228, 229, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 493, 494, 497], "timestep": [2, 20, 81, 85, 111, 160, 162, 163, 173, 174, 176, 180, 181, 188, 189, 190, 356, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 435, 486], "brought": 2, "unavoid": 2, "guidanc": [2, 8], "332": 2, "x86_64": 2, "324": 2, "constrain": [2, 17, 20, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 94, 95, 102, 111, 114, 117, 137, 175, 180, 181, 190, 194, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458], "implicitsourceterm": [2, 17, 20, 31, 32, 39, 40, 67, 68, 111, 112, 113, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 189, 388, 488], "317": [2, 14], "gmshimport": [2, 10], "due": [2, 6, 8, 16, 67, 72, 73, 86, 138, 160, 162, 163, 173, 174, 180, 265, 394, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 488], "share": [2, 19, 398, 414], "316": 2, "313": 2, "307": 2, "306": [2, 492], "302": 2, "301": 2, "pycomm": 2, "debian": 2, "300": [2, 117, 433], "mesh2d": [2, 6, 20, 33, 34, 219, 223, 231, 234, 240, 248], "299": 2, "298": [2, 111, 137, 138, 143], "consumpt": [2, 136, 138], "growth": [2, 6, 19, 21, 161, 173, 174, 492], "repeat": [2, 176], "especi": [2, 19, 21, 491], "294": 2, "293": 2, "sphere": [2, 7, 8, 20], "segfault": 2, "292": 2, "290": 2, "improv": [2, 4, 6, 11, 16, 17, 74, 117, 176, 188, 190, 412, 485, 488, 491], "inconsequenti": 2, "288": 2, "themselv": 2, "286": 2, "285": 2, "284": 2, "transpos": [2, 71], "281": 2, "nthorderdiffusionterm": 2, "280": 2, "convectionterm": [2, 8, 17, 63, 68, 162, 180, 181, 188, 189], "277": 2, "step": [2, 6, 8, 11, 13, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 72, 73, 74, 77, 78, 80, 81, 82, 83, 91, 110, 111, 112, 121, 122, 124, 133, 136, 137, 138, 143, 148, 149, 150, 160, 161, 162, 163, 165, 166, 169, 170, 171, 176, 180, 181, 188, 189, 223, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 355, 357, 358, 388, 428, 435, 488], "273": 2, "diffusiontermnocorrect": [2, 20, 370], "270": [2, 173, 174], "too": [2, 8, 11, 16, 17, 31, 33, 34, 253, 309], "267": [2, 492], "reduc": [2, 6, 21, 81, 112, 162, 163, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 488, 490], "time": [2, 6, 8, 9, 11, 15, 17, 19, 21, 22, 31, 32, 33, 34, 71, 74, 77, 78, 80, 81, 82, 83, 91, 108, 112, 121, 122, 133, 136, 137, 138, 143, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 176, 180, 181, 189, 196, 219, 223, 229, 231, 234, 240, 248, 355, 358, 388, 435, 458, 488, 489, 491], "chemotaxi": [2, 20], "264": 2, "input2d": [2, 20], "261": 2, "260": 2, "259": 2, "shorthand": [2, 495], "cellcent": [2, 8, 20, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 80, 81, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 121, 122, 124, 126, 128, 137, 140, 141, 149, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 189, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 462, 464, 465, 466, 468, 469, 471, 472], "etc": [2, 189, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "258": [2, 492], "gmshexport": 2, "252": 2, "benni": [2, 117], "interpol": [2, 31, 33, 34, 117, 138, 162, 163, 176, 180, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 468, 488, 490], "patch": [2, 3, 8, 82, 83, 468], "250": [2, 137, 138, 143], "tex": 2, "quaternari": [2, 7, 20, 113], "247": 2, "var1": [2, 17, 47, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "var0": [2, 17, 478], "sensibli": 2, "243": [2, 408], "reconstrain": 2, "242": 2, "240": 2, "profil": [2, 39, 75, 77, 78, 81, 114], "merg": [2, 9, 11, 20, 394, 486], "237": 2, "236": 2, "mix": [2, 227, 228, 229, 359, 485], "235": 2, "propag": 2, "231": [2, 356], "factorymesh": [2, 20], "keyword": [2, 8, 138, 140, 141, 143, 394, 396, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "223": [2, 459], "218": 2, "absenc": [2, 16], "enthought": [2, 10, 18, 485], "216": 2, "fresh": [2, 9, 11, 17], "213": 2, "206": 2, "gnuplot1d": 2, "205": 2, "normal": [2, 17, 137, 234, 235, 300, 304, 355, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 468, 488], "203": 2, "help": [2, 3, 7, 8, 11, 16, 17, 188, 189, 190, 191, 394, 473], "202": 2, "manipul": [2, 7, 189, 495], "lead": [2, 17, 136, 160, 173, 174, 488, 491], "201": [2, 356], "veloc": [2, 8, 14, 68, 117, 121, 122, 124, 137, 149, 162, 163, 176, 180, 488], "faq": [2, 3, 8, 189], "200": [2, 63, 75, 81, 111, 114, 124, 138, 140, 173, 174], "195": 2, "multipl": [2, 6, 8, 10, 11, 17, 21, 72, 73, 81, 114, 175, 197, 407, 458, 485, 488], "result": [2, 6, 7, 8, 10, 12, 16, 17, 18, 31, 32, 33, 34, 36, 47, 49, 50, 51, 54, 56, 59, 60, 61, 65, 68, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 113, 114, 117, 121, 122, 126, 128, 133, 136, 137, 138, 143, 148, 160, 162, 163, 173, 174, 176, 177, 180, 188, 189, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 265, 364, 388, 398, 407, 411, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 468, 485, 488, 491], "163": [2, 492], "infinit": [2, 8, 36, 75, 78, 81, 114, 176], "162": [2, 117], "ones": [2, 8, 11, 155, 173, 174, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "130": 2, "86": 2, "ly": [2, 124, 126, 140, 141, 189, 222], "lz": [2, 222], "77": [2, 6, 47, 412], "hasold": [2, 8, 39, 40, 71, 74, 81, 111, 113, 121, 122, 124, 126, 128, 137, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 388, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "self": [2, 10, 11, 106, 108, 109, 110, 111, 112, 113, 114, 140, 141, 160, 173, 174, 193, 194, 195, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 295, 298, 299, 300, 301, 302, 303, 304, 309, 310, 313, 314, 315, 316, 317, 322, 323, 324, 325, 328, 330, 331, 332, 333, 334, 335, 336, 337, 351, 352, 353, 354, 359, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 396, 398, 400, 401, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 495, 496], "old": [2, 8, 17, 20, 32, 81, 160, 161, 162, 163, 165, 166, 173, 176, 180, 181, 189, 190, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 408, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "44": [2, 398, 407], "282": 2, "279": 2, "nummesh": [2, 190], "submodul": 2, "278": 2, "form": [2, 15, 16, 17, 20, 21, 31, 32, 33, 34, 36, 71, 74, 81, 90, 112, 117, 135, 138, 162, 163, 166, 175, 176, 180, 189, 190, 309, 370, 384, 398, 407, 486, 488, 489, 491, 495], "268": 2, "slave": 2, "262": 2, "256": 2, "grid1d": [2, 17, 20, 36, 39, 51, 54, 56, 63, 65, 67, 68, 74, 75, 77, 81, 85, 91, 108, 109, 111, 112, 113, 114, 122, 128, 162, 163, 166, 175, 176, 180, 188, 189, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 408, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 462, 471, 472, 478], "251": 2, "241": 2, "238": 2, "predict": [2, 14, 117, 162, 163, 491, 492], "233": 2, "treat": [2, 8, 21, 176, 475], "upwind": [2, 17, 45, 46, 364, 375, 378, 390, 491], "224": [2, 459], "align": [2, 8, 17, 36, 74, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "222": 2, "__add__": [2, 20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407], "221": [2, 459], "219": 2, "matforg": 2, "hammer": 2, "208": 2, "207": 2, "ndarrai": [2, 355, 412, 457], "196": 2, "won": [2, 9, 11, 17, 160, 173, 174, 496], "152": 2, "re": [2, 8, 11, 21, 67, 71, 81, 113, 114, 163, 175, 176, 357, 398, 407], "138": 2, "100": [2, 6, 10, 19, 31, 32, 33, 34, 36, 39, 40, 49, 50, 59, 60, 67, 74, 77, 78, 81, 111, 117, 133, 140, 155, 156, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 180, 181, 398, 407, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 459, 462, 464, 465, 468, 469, 471, 472], "80": [2, 117], "idl": [2, 17], "46": [2, 492], "45": [2, 108, 109, 110, 137, 143, 398, 407, 478, 492], "slice": [2, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "produc": [2, 8, 17, 413, 437, 485], "effici": [2, 16, 17, 20, 21, 49, 50, 51, 59, 60, 188, 486, 487, 488], "diagnost": [2, 17], "232": 2, "becaus": [2, 8, 10, 11, 17, 21, 31, 32, 33, 34, 63, 75, 81, 113, 114, 117, 160, 162, 163, 166, 173, 174, 176, 180, 188, 189, 364, 394, 428], "sighup": 2, "230": 2, "226": 2, "backend": [2, 8], "flush_ev": 2, "217": 2, "unpickl": [2, 408], "191": 2, "spheredaemon": [2, 20, 34], "miss": [2, 10, 11], "187": 2, "garbl": 2, "complet": [2, 11, 16, 17, 20, 21, 138, 189, 190, 253, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 486, 488], "independ": [2, 8, 11, 17, 21, 162, 163, 180, 488], "199": 2, "dummi": [2, 17, 113], "notimplementederror": [2, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 359], "instanti": [2, 16, 17, 21, 66, 137, 188, 200, 359, 407, 421, 424, 428, 429, 433, 435, 437, 449, 453, 456], "abstract": [2, 8, 21, 188, 193, 266, 267, 274, 276, 300, 304, 307, 310, 321, 323, 324, 325, 350, 351, 354, 359, 367, 377, 385, 386, 442, 449, 461, 479, 495], "198": 2, "cylindricalgrid1d": [2, 20, 49, 50, 222], "197": 2, "tell": [2, 20, 31, 32, 33, 34, 137, 188, 486], "194": [2, 492], "larg": [2, 6, 8, 11, 16, 17, 21, 81, 133, 135, 162, 163, 253, 309, 364, 394, 413, 435], "valueerror": [2, 8, 10, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "193": 2, "192": 2, "typeerror": [2, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 359, 398, 407], "small": [2, 8, 16, 31, 32, 81, 137, 143, 160, 161, 173, 174, 180, 253, 309, 398, 407, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "beli": 2, "advanc": [2, 8, 81], "did": [2, 160, 173, 174], "increment": [2, 188], "er": 2, "older": [2, 3, 7, 8], "simul": [2, 6, 11, 14, 17, 19, 31, 32, 33, 34, 90, 136, 137, 138, 143, 160, 165, 166, 173, 174, 191, 222, 223, 356, 435, 492], "entir": [2, 17, 34, 156, 160, 173, 174, 180], "avail": [2, 5, 9, 11, 12, 13, 16, 17, 18, 34, 72, 73, 78, 81, 137, 162, 163, 176, 191, 473, 485, 488, 491, 495], "our": [2, 3, 8, 9, 11, 16, 17, 81, 176, 188, 189, 190, 191], "itself": [2, 17, 188, 189, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "190": 2, "rang": [2, 8, 36, 39, 40, 47, 71, 72, 73, 74, 77, 78, 80, 81, 82, 83, 108, 109, 110, 111, 112, 113, 117, 121, 122, 124, 133, 137, 140, 141, 148, 149, 150, 160, 161, 162, 163, 165, 166, 169, 170, 171, 175, 176, 177, 223, 331, 388, 432, 435, 451, 452, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485, 489], "182": 2, "binop": [2, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "2_0": [2, 189], "179": [2, 117], "easy_instal": 2, "177": 2, "169": 2, "webpag": 2, "internet": 2, "explor": [2, 11, 21], "156": 2, "153": [2, 14, 492], "math": [2, 3, 161], "direct": [2, 10, 12, 16, 17, 31, 32, 33, 34, 93, 189, 197, 221, 222, 223, 240, 248, 263, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 468, 485, 495], "symmetri": [2, 19, 20, 160, 173, 174, 221, 265], "getcel": [2, 189], "enforc": 2, "both": [2, 7, 8, 11, 13, 16, 17, 18, 21, 49, 50, 51, 59, 60, 78, 81, 113, 117, 133, 138, 162, 163, 188, 189, 252, 265, 331, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485, 489], "clearer": [2, 8, 188, 189], "levelset": [2, 6, 7, 8, 20], "distancefunct": [2, 7, 20, 140, 141], "comparison": [2, 20, 117, 161, 162, 163, 486], "subtl": 2, "unlik": [2, 81, 188, 495], "affect": [2, 8, 17], "veri": [2, 6, 8, 9, 11, 16, 17, 21, 135, 162, 163, 173, 174, 175, 176, 189, 190, 309, 394, 428, 495], "188": 2, "smtpsenderrefus": 2, "553": 2, "trac": [2, 485], "matdl": 2, "osi": 2, "org": [2, 3, 8, 11, 16, 17, 72, 73, 268, 269, 413, 485, 492], "sender": 2, "address": [2, 3, 11, 21], "184": [2, 407], "exportasmesh": 2, "183": 2, "linearjorsolv": [2, 20], "__init__": [2, 10, 108, 109, 110, 111, 113, 114, 160, 173, 174, 496], "rather": [2, 8, 10, 17, 21, 65, 66, 81, 91, 165, 176, 188, 189, 398, 407, 453, 488, 493, 494, 495, 497], "pysparsesolv": [2, 20, 300, 301, 302, 304, 305, 306, 307, 308], "181": 2, "151": [2, 492], "mayavi2": [2, 473], "13": [2, 6, 108, 160, 161, 166, 173, 174, 176, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407, 492], "176": 2, "win32": 2, "175": [2, 356], "offset": [2, 189, 398, 407, 435, 437, 456], "170": 2, "__invert__": [2, 20, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "154": [2, 14], "update1_0to2_0": [2, 7, 20], "hold": [2, 12, 17, 81, 137, 194, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "rank": [2, 8, 20, 71, 117, 181, 189, 331, 368, 375, 376, 379, 383, 390, 391, 398, 402, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 468, 469, 478, 480, 486, 488], "simpler": [2, 21, 188], "determin": [2, 8, 21, 31, 32, 176, 180, 223, 355, 370, 407, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 460, 461, 463, 464, 465, 466, 468, 469, 488, 489], "diagon": [2, 8, 17, 117, 176, 180, 189, 248, 252, 259, 318, 320], "hand": [2, 8, 21, 31, 32, 68, 81, 112, 189, 265, 304, 309, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "side": [2, 17, 19, 68, 75, 81, 112, 114, 162, 163, 223, 265, 304, 309, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "simplifi": [2, 10, 114, 162, 163, 175, 189, 190], "167": 2, "166": 2, "vectorcel": 2, "vectorfac": 2, "165": 2, "section": [2, 6, 8, 11, 12, 17, 72, 73, 81, 161, 180, 188, 357, 488], "149": 2, "143": 2, "141": 2, "toolset": 2, "140": [2, 492], "136": 2, "135": 2, "127": 2, "fragil": [2, 11], "54": [2, 398, 407], "161": 2, "160": 2, "157": 2, "temp": 2, "widow": 2, "155": 2, "appear": [2, 3, 8, 12, 15, 16, 17, 81, 91, 136, 140, 141, 143, 176, 265, 309, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 488], "150": [2, 492], "pythonxi": 2, "148": 2, "147": 2, "cg": [2, 16, 264, 278, 298, 314, 317, 334, 337], "145": [2, 14, 492], "144": 2, "intermitt": 2, "142": [2, 398, 407], "139": 2, "bitten": 2, "137": [2, 14], "backport": 2, "manuscript": 2, "131": [2, 17], "extens": [2, 8, 11, 16, 137, 165, 191, 408, 424, 428, 485], "126": 2, "125": [2, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "emb": [2, 21], "obsolet": [2, 11, 355], "124": 2, "121": [2, 173, 174], "simpletrenchsystem": [2, 6, 20, 136, 137, 138], "120": [2, 456], "118": [2, 180, 181], "117": 2, "getfacesbottom": [2, 188], "getfacestop": [2, 188], "lack": [2, 16], "descript": [2, 138, 143, 223], "115": 2, "view": [2, 8, 11, 15, 17, 18, 34, 49, 50, 51, 56, 59, 60, 65, 75, 77, 81, 85, 114, 140, 155, 160, 165, 188, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485], "cahn": [2, 17, 19, 20, 31, 32, 33, 34, 36, 160, 173, 174, 176, 370, 488, 489, 492], "hilliard": [2, 17, 20, 31, 32, 33, 34, 36, 160, 173, 174, 370, 488, 489, 492], "113": [2, 492], "macbook": 2, "pro": [2, 9, 11, 492], "intel": 2, "112": 2, "111": [2, 111], "grid2d": [2, 20, 31, 32, 40, 61, 66, 78, 82, 83, 93, 94, 110, 117, 121, 124, 126, 135, 137, 140, 141, 155, 160, 161, 165, 173, 174, 177, 181, 188, 189, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 368, 375, 376, 378, 379, 383, 390, 391, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 464, 465, 466, 468, 469, 471, 472, 478], "110": 2, "numer": [2, 4, 6, 8, 10, 14, 16, 20, 36, 49, 50, 51, 59, 60, 74, 81, 91, 133, 161, 176, 180, 188, 189, 191, 253, 328, 356, 357, 368, 375, 376, 379, 383, 390, 398, 407, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 454, 456, 457, 470, 474, 481, 485, 486, 487, 488, 492], "dimensionless": [2, 75, 109, 114, 133, 160, 173, 174, 398, 407], "elphf": [2, 20], "109": [2, 492], "doctest": [2, 7, 10, 15, 17, 21, 81, 191, 394], "__array__": [2, 20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "108": 2, "107": [2, 492], "106": [2, 14], "105": [2, 12], "useless": 2, "102": 2, "dict": [2, 140, 141, 293, 352, 394, 411, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485], "99": [2, 223, 398, 407], "97": 2, "nan": [2, 72, 73, 478], "correctli": [2, 32, 47, 117, 364, 388], "96": [2, 117], "95": 2, "code": [2, 4, 6, 7, 9, 10, 11, 12, 17, 18, 20, 21, 68, 72, 73, 74, 81, 117, 122, 148, 155, 160, 161, 162, 163, 165, 166, 169, 170, 171, 177, 188, 266, 351, 396, 398, 407, 412, 468, 485, 486], "92": 2, "pygist": 2, "dead": 2, "offici": [2, 9, 11], "84": 2, "83": 2, "zerodivisionerror": 2, "cellterm": [2, 20, 385, 388], "getold": 2, "79": [2, 6, 14, 412], "67": [2, 407], "unstructur": [2, 18, 485, 488, 492], "43": [2, 6, 492], "tsvviewer": [2, 8, 20, 72, 73, 111], "shape": [2, 20, 21, 32, 47, 160, 173, 174, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "34": [2, 407], "infin": [2, 8, 412], "122": [2, 173, 174], "119": 2, "116": 2, "104": 2, "matplotlibvectorview": [2, 20], "_plot": [2, 160, 173, 174], "101": 2, "autoscal": [2, 140, 141, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "93": 2, "91": [2, 492], "76": [2, 137, 143], "75": [2, 17, 398, 407, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 452, 453, 456, 478], "auto": [2, 460, 461, 463, 464, 465, 466, 468, 469], "docstr": [2, 394, 403], "74": [2, 14], "combin": [2, 8, 11, 15, 17, 21, 113, 180, 191, 398, 407, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488, 489], "51": [2, 95, 492], "__pos__": 2, "50": [2, 14, 39, 40, 81, 90, 100, 117, 160, 459, 464, 465, 468, 469, 471, 472], "39": [2, 162, 163], "72": [2, 478], "19": [2, 6, 81, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 407, 489, 492], "98": [2, 14], "case": [2, 6, 8, 10, 11, 13, 15, 17, 21, 39, 40, 47, 49, 50, 51, 56, 59, 60, 63, 71, 74, 75, 77, 78, 80, 81, 104, 105, 113, 114, 127, 129, 133, 137, 138, 152, 157, 160, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 182, 186, 188, 189, 190, 222, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 403, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 491, 493, 494, 495, 496, 497], "94": [2, 241], "90": [2, 81, 117, 173, 174, 459, 462, 471, 472], "87": [2, 6, 492], "length": [2, 10, 21, 72, 73, 81, 85, 91, 161, 176, 222, 223, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 468, 469], "convert": [2, 8, 21, 160, 173, 174, 188, 398, 407, 412, 413, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468], "needless": 2, "rebuild": [2, 17], "66": 2, "guid": [2, 6, 16], "variou": [2, 9, 11, 17, 21, 106, 137, 491], "62": [2, 6, 138], "unrecogn": 2, "token": 2, "13c": 2, "55": [2, 111, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "intern": [2, 20, 21, 189, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 486], "52": [2, 14, 492], "facevectorvari": 2, "48": 2, "inherit": [2, 10, 21, 189, 495], "hidden": [2, 21], "42": [2, 17, 162, 163], "model": [2, 4, 6, 7, 9, 11, 14, 15, 16, 19, 20, 21, 31, 32, 39, 40, 106, 113, 136, 137, 138, 140, 141, 143, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 191, 485, 486, 489, 492], "addoverfacesvari": [2, 20], "gross": 2, "41": [2, 478], "iter": [2, 6, 16, 20, 21, 36, 47, 52, 54, 56, 57, 61, 66, 81, 82, 83, 108, 109, 110, 111, 113, 117, 160, 161, 165, 166, 173, 174, 175, 176, 188, 189, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 295, 298, 299, 300, 301, 302, 303, 304, 309, 310, 313, 314, 315, 316, 317, 322, 323, 324, 325, 328, 333, 334, 335, 336, 337, 351, 352, 353, 354, 355, 358, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 435, 485, 486, 488], "norm": [2, 16, 253, 265, 309, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 412, 468], "21": [2, 111, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 407, 489, 492], "dimens": [2, 11, 20, 21, 32, 51, 72, 73, 75, 81, 83, 109, 117, 122, 126, 127, 128, 129, 160, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 412, 424, 428, 432, 435, 442, 448, 449, 451, 452, 457, 458, 459, 480, 488, 491], "wai": [2, 7, 11, 12, 17, 19, 20, 21, 36, 74, 80, 81, 95, 97, 99, 100, 102, 111, 112, 137, 155, 160, 161, 162, 163, 165, 166, 173, 174, 176, 189, 191, 232, 234, 235, 248, 364, 398, 407, 486, 488, 495], "significantli": [2, 6, 8, 11, 189], "cach": [2, 17, 20, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 457, 486], "intermedi": [2, 6, 8, 16, 31, 32, 117], "uniformgrid": [2, 20, 250, 251, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "geometr": [2, 31, 33, 34, 196, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 234, 235, 240, 241, 242, 248, 249, 250, 251], "fly": [2, 21], "present": [2, 6, 7, 8, 11, 17, 19, 20, 109, 136, 138, 148, 162, 163, 170, 171, 412, 486, 487, 491], "made": [2, 8, 11, 12, 13, 15, 21, 117, 124, 176, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407, 424, 428, 432, 437, 442, 448, 451, 452, 453, 457], "consider": [2, 3, 17, 188, 191], "construct": [2, 7, 16, 17, 21, 72, 73, 121, 122, 126, 128, 136, 138, 160, 161, 162, 163, 166, 173, 174, 175, 223, 364, 378, 396, 398, 407, 428, 485, 488], "execut": [2, 6, 9, 10, 11, 16, 17, 21, 22, 77, 80, 91, 121, 122, 128, 394, 395, 397, 411], "subclass": [2, 8, 34, 193, 266, 267, 274, 276, 300, 304, 307, 310, 321, 323, 324, 325, 350, 351, 354, 367, 377, 385, 386, 442, 449, 461, 479, 495], "sensibl": [2, 17], "answer": [2, 3, 20, 36, 78, 80, 81, 86, 105, 121, 122, 124, 148, 149, 176, 364, 378, 421, 424, 428, 429, 433, 435, 437, 448, 449, 452, 453, 456, 486], "For": [2, 7, 8, 9, 11, 16, 17, 21, 31, 33, 34, 63, 72, 73, 81, 85, 106, 143, 155, 162, 163, 175, 176, 189, 191, 352, 364, 368, 375, 376, 379, 383, 390, 412, 435, 458, 468, 485, 488, 489, 490, 495], "vectorcellvari": [2, 189], "periodicgrid": 2, "howev": [2, 6, 8, 17, 81, 91, 117, 488, 491], "rewritten": [2, 36, 180], "serv": [2, 7, 21, 223], "tutori": [2, 11, 13, 17, 137, 188, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 492], "sever": [2, 11, 15, 16, 17, 21, 112, 189, 190, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "elabor": [2, 8], "multicompon": [2, 108], "multidimension": 2, "superfil": [2, 14, 136, 137, 138, 143, 492], "better": [2, 3, 8, 17, 18, 21, 47, 161, 162, 163, 175, 176, 188, 190, 428, 485, 489], "fluid": [2, 20, 21, 117, 338, 345, 356, 489, 490, 492], "classic": [2, 162, 163, 175, 180, 287, 338, 344, 347], "lid": [2, 117], "distinct": [2, 20, 21, 31, 32, 189, 486], "linear": [2, 8, 16, 17, 20, 21, 31, 32, 33, 34, 36, 81, 111, 112, 117, 138, 160, 162, 163, 165, 166, 173, 174, 176, 180, 189, 252, 253, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 485, 486, 490], "explan": [2, 8, 17, 137, 143, 394, 403], "concept": [2, 17, 492, 495], "involv": [2, 6, 16, 20, 21, 81, 165, 166, 173, 174, 176, 309, 486, 489, 495], "frequent": [2, 6, 15, 16, 20, 162, 163, 176, 412, 485, 486, 487], "question": [2, 3, 15, 20, 113, 355, 486, 487], "multiview": [2, 20, 137, 160, 173, 174, 459], "group": [2, 3, 4, 8, 16], "togeth": [2, 8, 17, 135, 180, 394, 407, 475], "couldn": 2, "abbrevi": 2, "promis": 2, "actual": [2, 8, 16, 21, 81, 117, 176, 188, 252, 253, 352, 394, 453, 495], "fulli": [2, 17, 21, 81, 176, 180, 490], "qualifi": 2, "cv": [2, 368, 375, 376, 379, 383, 390, 391, 488], "subvers": 2, "sourceforg": [2, 8, 16, 18, 485], "materi": [2, 4, 14, 20, 21, 81, 106, 117, 136, 138, 143, 160, 173, 174, 191, 486, 487, 492], "digit": [2, 412], "pathwai": 2, "pde": [2, 8, 11, 14, 15, 21, 32, 160, 173, 174, 176, 189, 191, 489, 490], "subtract": [2, 6, 20, 112, 166, 188, 398, 407, 448], "job": [2, 10, 47, 117], "suppli": [2, 8, 15, 16, 21, 162, 163, 188, 189, 223, 394, 398, 407, 437, 488, 495, 496], "fipy_view": [2, 17, 458], "them": [2, 3, 8, 10, 11, 13, 17, 21, 32, 74, 81, 96, 110, 112, 165, 188, 189, 190, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 395, 496], "choic": [2, 8, 16, 17, 18, 162, 163, 176, 180, 280], "noisevari": [2, 20, 421, 429, 433, 435, 456], "pyx": 2, "layout": 2, "getlaplacian": 2, "effect": [2, 3, 6, 17, 31, 32, 81, 160, 173, 174, 175, 176, 197, 388, 492], "getfacegrad": [2, 189], "getdiverg": 2, "which": [2, 3, 6, 8, 9, 10, 11, 13, 15, 16, 17, 18, 21, 22, 75, 78, 81, 93, 111, 112, 114, 117, 137, 162, 163, 165, 176, 180, 188, 189, 196, 222, 280, 394, 398, 403, 407, 412, 413, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 468, 485, 488, 490, 495, 496], "deepli": 2, "nest": [2, 8, 265], "find": [2, 8, 9, 11, 16, 17, 81, 91, 162, 163, 189, 190, 412, 458, 459, 480], "situat": 2, "earlier": [2, 11, 72, 73, 162, 163, 188, 412], "update0_1to1_0": [2, 7, 8, 20], "49": [2, 111], "47": [2, 356], "coeff": [2, 8, 17, 31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 105, 108, 109, 110, 111, 112, 113, 114, 117, 138, 162, 163, 174, 175, 176, 180, 181, 188, 189, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 488], "40": [2, 36, 108, 109, 110, 138, 161, 166], "38": 2, "one": [2, 3, 8, 10, 11, 14, 16, 17, 19, 21, 47, 51, 72, 73, 75, 81, 85, 91, 108, 109, 110, 111, 112, 113, 114, 122, 128, 160, 162, 163, 166, 169, 171, 173, 174, 175, 176, 189, 193, 223, 266, 267, 268, 269, 274, 276, 300, 304, 307, 310, 321, 323, 324, 325, 350, 354, 367, 377, 384, 385, 386, 395, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 461, 462, 468, 478, 479, 485, 488, 493, 494, 495, 496, 497], "37": [2, 6], "electrochem": [2, 4, 6, 8, 14, 15, 20, 21, 106, 191, 492], "35": [2, 113, 117, 478], "33": [2, 162, 163, 176, 492], "32": [2, 17, 22, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 492], "conflict_handl": 2, "31": [2, 176, 407, 492], "notat": [2, 8, 17, 20, 117, 180, 485, 486, 495], "29": [2, 143, 492], "invok": [2, 7, 8, 15, 17, 21, 155, 253, 325, 495, 496], "26": [2, 117, 137, 143, 398, 407, 492], "extract": [2, 72, 73, 81, 161, 165, 166, 169, 170, 171, 223, 411], "distancevari": [2, 20, 121, 122, 124, 126, 128, 137, 140, 141, 148, 149, 150, 452, 453], "reconcil": 2, "crystal": [2, 14, 21, 489, 492], "surfact": [2, 20, 137, 138, 143, 453], "depositionratevar": 2, "extensionveloc": 2, "axisymmetr": 2, "2d": [2, 17, 18, 19, 59, 60, 61, 97, 110, 112, 126, 140, 141, 156, 160, 161, 165, 173, 174, 181, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 428, 453, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485, 488], "wizard": 2, "xp": 2, "other": [3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 31, 32, 81, 111, 137, 138, 162, 163, 175, 177, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 286, 287, 288, 289, 290, 292, 294, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 395, 396, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485, 489], "encourag": 3, "follow": [3, 6, 7, 9, 10, 11, 15, 16, 17, 36, 68, 72, 73, 74, 106, 110, 114, 121, 122, 124, 126, 128, 136, 137, 138, 143, 148, 149, 155, 161, 165, 166, 169, 170, 171, 173, 174, 177, 180, 188, 189, 190, 364, 388, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 489], "mode": [3, 11, 15, 223, 394, 398, 414], "monitor": 3, "post": [3, 8, 223, 485], "want": [3, 9, 11, 17, 19, 20, 72, 73, 81, 162, 163, 176, 486], "http": [3, 8, 9, 11, 13, 16, 17, 18, 34, 47, 72, 73, 173, 174, 268, 269, 318, 319, 320, 352, 407, 413, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 485, 492], "catb": 3, "esr": 3, "smart": 3, "troubl": [3, 16], "abl": [3, 160, 223, 252], "offer": [3, 15, 16, 21], "reproduc": [3, 11, 13], "com": [3, 8, 9, 11, 13, 16, 17, 18, 34, 173, 174, 318, 319, 320, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 485, 492], "suitabl": [3, 17, 81, 188, 338, 345, 347, 398, 407, 485], "open": [3, 10, 11, 14, 17, 20, 117, 161, 165, 166, 169, 170, 171, 223, 398, 414, 485, 486], "convers": [3, 16, 17, 21, 189, 398, 407], "troubleshoot": 3, "off": [3, 8, 117], "highlight": [3, 10, 117], "easi": [3, 16, 18, 31, 33, 34, 81, 485], "submiss": 3, "probabl": [3, 8, 10, 11, 17, 18, 67, 189, 421, 429, 433, 435, 485, 489, 495], "definit": [3, 10, 16, 32, 189, 265, 303, 309, 338, 347, 496], "back": [3, 9, 11, 17, 19, 21, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 448, 492], "forth": 3, "tend": [3, 21, 31, 32, 81], "delet": [3, 81, 223, 398, 414], "mean": [3, 17, 20, 21, 31, 32, 33, 34, 81, 260, 261, 262, 264, 266, 398, 407, 412, 429, 435, 468, 486], "d": [3, 14, 17, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 72, 73, 77, 78, 81, 82, 83, 112, 124, 126, 127, 133, 137, 138, 143, 148, 160, 161, 162, 163, 173, 174, 176, 177, 180, 188, 222, 364, 378, 394, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 488, 492], "expend": 3, "effort": [3, 8, 15, 16, 17], "inferior": 3, "ve": [3, 81, 162, 163], "written": [3, 6, 7, 8, 10, 11, 17, 21, 74, 81, 117, 126, 160, 161, 162, 163, 165, 166, 169, 170, 171, 175, 180, 188, 189, 190, 485, 488], "serious": 3, "subscript": 3, "email": 3, "mailto": 3, "simpli": [3, 8, 11, 16, 17, 81, 108, 109, 110, 162, 163, 180, 188, 495], "To": [3, 7, 8, 10, 11, 13, 17, 81, 91, 117, 136, 137, 138, 143, 155, 160, 162, 163, 173, 174, 176, 180, 189, 488, 491], "unsubscrib": 3, "learn": [3, 9, 11, 17], "chang": [3, 10, 11, 17, 20, 21, 31, 32, 81, 136, 137, 138, 143, 162, 163, 188, 189, 190, 232, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 462, 464, 465, 466, 468, 469, 473, 485, 486, 487], "host": 3, "sent": 3, "store": [3, 32, 137, 155, 165, 223, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 413, 485, 488], "histor": [3, 9, 11, 74], "dir": [3, 398, 414], "comp": [3, 8], "jon": 4, "member": [4, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "research": [4, 14, 21, 492], "staff": 4, "scienc": [4, 14, 17, 21, 81, 191], "engin": [4, 14, 191, 485], "divis": [4, 39, 40, 191, 412], "measur": [4, 6, 21, 81, 162, 163, 191], "laboratori": [4, 20, 191, 486, 487], "nation": [4, 5, 12, 21, 191], "institut": [4, 5, 12, 21, 191], "standard": [4, 5, 11, 12, 15, 16, 21, 72, 73, 106, 175, 180, 191, 248, 364, 396, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485], "technologi": [4, 5, 12, 21, 191], "comput": [4, 8, 11, 14, 16, 17, 19, 21, 96, 138, 143, 188, 191, 309, 485, 491, 492], "interest": [4, 8, 9, 11, 15, 21, 31, 32, 33, 34, 81, 108, 110, 112, 114, 156, 176, 223, 325, 488, 489], "orient": [4, 14, 19, 20, 71, 160, 165, 166, 173, 174, 191, 412, 459, 460, 461, 463, 465, 466, 486, 495], "design": [4, 6, 7, 8, 9, 11, 17, 20, 108, 109, 110, 486, 487], "electrochemistri": [4, 492], "daniel": [4, 492], "wheeler": [4, 14, 180, 492], "guest": 4, "finit": [4, 11, 14, 20, 21, 67, 81, 162, 163, 176, 191, 356, 485, 486, 490, 492], "volum": [4, 11, 14, 20, 21, 67, 117, 137, 138, 143, 155, 162, 163, 175, 180, 191, 223, 356, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 469, 486, 490, 492], "techniqu": [4, 8, 21, 161, 166, 169, 170, 171, 490], "treatment": [4, 15, 17, 175, 191], "jim": 4, "leader": 4, "thermodynam": [4, 31, 32, 111, 113, 162, 163, 180], "kinet": [4, 8, 20, 133, 176, 486, 487], "director": 4, "center": [4, 8, 14, 17, 20, 21, 31, 33, 34, 67, 71, 72, 73, 81, 111, 117, 140, 141, 160, 161, 173, 174, 180, 189, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 486, 490], "theoret": [4, 8, 20, 21, 191, 486, 487], "varieti": [4, 8, 9, 11, 17, 21, 162, 163, 191], "solidif": [4, 19, 160, 161, 165, 173, 174, 176, 492], "polycrystallin": [4, 15, 19, 191, 492], "solid": [4, 19, 111, 113, 160, 161, 162, 163, 165, 166, 169, 173, 174, 175], "alex": 4, "mont": 4, "pyxview": [4, 485], "he": [4, 19], "student": 4, "montgomeri": 4, "blair": 4, "school": 4, "kati": 4, "travi": [4, 485], "optim": [4, 17, 21, 81, 162, 163, 176], "she": [4, 19], "surf": 4, "smith": 4, "colleg": 4, "gibianski": 4, "harvei": 4, "mudd": 4, "andrew": 4, "reev": 4, "sabbat": 4, "univers": [4, 14, 19, 489, 492], "main": [4, 9, 11, 16, 17, 20, 21, 165, 166, 173, 174, 268, 269, 397, 473, 488, 493, 494, 495, 497], "olivia": 4, "buzek": 4, "maryland": 4, "stile": 4, "jame": [4, 492], "beirn": 4, "greatli": [4, 6, 11, 16], "deploy": 4, "server": 4, "certain": [5, 7, 21, 223, 495, 496], "commerci": [5, 8, 11, 21], "firm": 5, "trade": 5, "identifi": [5, 17, 21], "procedur": [5, 21, 175], "adequ": [5, 16, 222, 223], "Such": 5, "identif": 5, "intend": [5, 15, 17, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252], "impli": [5, 12], "recommend": [5, 16, 17, 20, 189, 190, 407, 486, 488, 496], "endors": [5, 11], "nor": [5, 8], "relat": [5, 17, 21, 162, 163, 176, 428], "necessarili": [5, 11], "best": [5, 8, 11, 16, 17, 18, 176, 189, 280, 352], "purpos": [5, 8, 9, 11, 12, 49, 50, 59, 60, 222, 223, 488], "evalu": [6, 17, 21, 117, 162, 163, 165, 166, 173, 174, 176, 180, 364, 412, 418, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "program": [6, 20, 81, 188, 397, 485, 486, 490, 495], "greater": [6, 10, 223, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "intrins": [6, 16, 21, 162, 163, 166], "ineffici": [6, 21], "dure": [6, 11, 17, 21, 137, 492], "languag": [6, 11, 20, 175, 191, 485, 486, 495], "hous": 6, "grain": [6, 19, 165, 166, 173, 174], "subsequ": [6, 17, 19, 133, 173, 174], "imping": [6, 7, 8, 19, 20, 173, 174], "mesh20x20": [6, 7, 8, 17, 20], "numberofel": [6, 137, 155, 165], "10000": [6, 47, 52, 54, 56, 57, 61, 78, 108, 110, 113, 137, 160, 161, 175, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "numberofstep": [6, 136, 137, 138, 143, 165], "1000": [6, 31, 33, 34, 36, 52, 54, 56, 57, 63, 65, 66, 85, 109, 126, 175, 188, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 464, 465, 466, 471, 472], "ryo": [6, 161, 165, 166, 169, 170, 171, 176, 492], "kobayashi": [6, 160, 161, 165, 166, 169, 170, 171, 173, 174, 176, 492], "raw": [6, 165], "cpu": [6, 17], "10": [6, 14, 17, 20, 31, 32, 33, 36, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 78, 80, 81, 82, 83, 86, 91, 95, 105, 111, 112, 117, 121, 122, 127, 128, 136, 137, 138, 140, 143, 148, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 338, 345, 346, 347, 348, 349, 351, 352, 353, 354, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 412, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 462, 464, 465, 466, 468, 469, 471, 472, 478, 486, 491, 492], "tabl": [6, 16, 117, 138, 143, 407], "second": [6, 8, 117, 135, 162, 163, 180, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 471, 472], "kilobyt": 6, "kib": 6, "30": [6, 17, 20, 106, 110, 111, 112, 113, 140, 162, 163, 175, 176, 398, 407, 433, 435, 486, 492], "0009": 6, "39316": 6, "772": 6, "0031": 6, "39664": 6, "1600": 6, "1": [6, 8, 9, 10, 11, 14, 15, 16, 17, 18, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 136, 137, 138, 140, 141, 143, 148, 149, 150, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 188, 189, 190, 191, 195, 197, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 268, 269, 301, 309, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 396, 397, 398, 407, 412, 414, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 486, 488, 489, 491, 492], "4": [6, 8, 11, 14, 15, 16, 17, 20, 21, 34, 36, 47, 56, 63, 67, 71, 72, 73, 74, 81, 85, 95, 105, 108, 110, 111, 112, 113, 117, 121, 124, 126, 127, 129, 133, 137, 138, 140, 141, 143, 148, 156, 160, 161, 162, 163, 169, 171, 173, 174, 175, 176, 177, 180, 184, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 378, 394, 398, 407, 412, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 462, 464, 465, 466, 471, 472, 478, 486, 488, 492], "65": 6, "017": 6, "40656": 6, "1044": 6, "6400": 6, "3": [6, 8, 9, 11, 13, 14, 15, 16, 17, 20, 21, 31, 34, 36, 47, 49, 50, 59, 60, 63, 67, 68, 72, 73, 74, 77, 81, 85, 95, 105, 108, 109, 110, 111, 113, 117, 121, 124, 126, 127, 129, 135, 137, 138, 140, 141, 143, 148, 149, 156, 162, 163, 165, 171, 173, 174, 175, 176, 180, 181, 189, 190, 191, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 338, 343, 364, 378, 394, 398, 407, 412, 416, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 462, 471, 472, 478, 485, 486, 488, 489, 491, 492], "46124": 6, "1880": 6, "25600": 6, "60840": 6, "5188": 6, "102400": 6, "145820": 6, "18436": 6, "plain": [6, 17, 81, 137], "oper": [6, 9, 10, 11, 17, 21, 160, 165, 166, 173, 174, 189, 240, 265, 398, 400, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485, 488], "around": [6, 10, 21, 47, 81, 135, 448, 488], "17": [6, 12, 20, 235, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 486, 490, 492], "slower": [6, 21, 189], "penalti": 6, "hope": [6, 189, 190], "futur": [6, 9, 11, 17, 161, 165, 166, 169, 170, 171, 188, 485], "gain": [6, 17], "particular": [6, 7, 8, 9, 11, 12, 16, 17, 21, 75, 81, 86, 188], "analysi": [6, 8, 17, 485, 492], "shown": [6, 7, 8, 19, 106, 162, 163, 176, 188], "As": [6, 7, 8, 10, 17, 21, 72, 73, 74, 81, 143, 162, 163, 175, 180, 188, 189, 191, 398, 407, 414, 496], "record": 6, "each": [6, 7, 8, 17, 21, 31, 33, 34, 49, 50, 51, 59, 60, 72, 73, 78, 80, 81, 93, 96, 108, 109, 110, 138, 162, 163, 165, 175, 177, 188, 189, 232, 248, 331, 388, 394, 398, 402, 407, 412, 424, 432, 442, 448, 449, 451, 468, 478, 488, 490, 493, 494, 497], "approxim": [6, 8, 17, 78, 117, 175, 176, 488, 490], "maximum": [6, 10, 16, 36, 137, 162, 163, 253, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 364, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "spike": 6, "hard": [6, 21, 160, 173, 174, 189, 485], "dynam": [6, 11, 22, 176, 490, 492], "alloc": [6, 21], "rough": [6, 162, 163], "exact": [6, 16, 81, 117, 161, 176, 253, 309, 491], "complex": [6, 16, 17, 21, 136, 143, 162, 163, 398, 407, 485, 489], "largest": [6, 81, 398, 407, 458], "mainli": [6, 21, 47], "below": [6, 8, 11, 17, 117, 136, 143, 160, 173, 174, 188], "per": [6, 11, 17, 81, 162, 163, 176, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 471, 472], "multigrid": [6, 16, 86, 293], "benefici": 6, "overhead": [6, 17], "cost": 6, "perform": [6, 8, 11, 17, 19, 21, 31, 32, 33, 34, 85, 149, 162, 163, 176, 252, 253, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 398, 407, 412, 485], "equival": [6, 15, 16, 17, 21, 81, 191, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407, 488, 490], "precondit": [6, 16, 17, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 292, 299, 300, 303, 304, 309, 310, 313, 314, 315, 317, 325, 333, 334, 335, 337, 351, 353, 354, 485], "enough": [6, 17, 133, 160, 173, 174, 223], "speedup": [6, 17], "specif": [6, 8, 12, 16, 21, 32, 72, 73, 190, 191, 449, 458, 468, 485, 495], "someth": [7, 8, 15, 17, 19, 81, 137, 160, 173, 174, 189, 190, 407, 473, 478, 496], "least": [7, 8, 11, 17, 176, 190, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "four": [7, 17, 19, 111, 165, 175, 177, 248], "demonstr": [7, 17, 21, 23, 47, 67, 72, 73, 82, 83, 106, 109, 121, 122, 126, 128, 136, 137, 138, 143, 155, 156, 165, 166, 488], "applic": [7, 9, 11, 16, 19, 21, 72, 73, 473, 485, 488, 490], "finish": [7, 39, 40, 68, 78, 91, 95, 136, 137, 138, 143, 165, 176, 180, 181], "left": [7, 8, 15, 16, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 68, 71, 75, 81, 82, 83, 85, 106, 112, 114, 117, 121, 124, 127, 129, 133, 136, 137, 138, 148, 155, 160, 161, 162, 163, 166, 173, 174, 175, 176, 177, 180, 188, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 370, 378, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 462, 486, 489, 490], "shell": [7, 11, 13, 15, 17, 34, 156, 485], "At": [7, 11, 17, 21, 78, 137, 191], "enter": [7, 15], "queri": [7, 449], "session": [7, 14, 15, 17, 21], "directli": [7, 8, 11, 17, 19, 21, 72, 73, 81, 82, 83, 180, 188, 189, 190, 394, 495, 496], "block": [7, 15, 74, 81, 180, 268, 269, 293], "final": [7, 8, 75, 81, 91, 111, 113, 114, 162, 163, 166, 180, 223, 388, 396], "importantli": 7, "emphasi": [7, 10], "comprehens": [7, 21], "framework": [7, 15, 21, 191, 495], "steadyst": [7, 15, 20, 77, 80], "succinct": [7, 8, 11, 13], "prompt": [7, 15, 17, 81, 176, 191], "copy_script": [7, 81, 137], "addit": [7, 16, 17, 20, 74, 81, 138, 403, 407, 412, 485], "those": [7, 8, 9, 11, 17, 21, 81, 86, 136, 137, 138, 143, 162, 163, 188, 485, 495, 496], "dozen": 7, "understand": [7, 8, 17, 138, 189], "illustr": [7, 8, 21, 81, 488], "electrostat": [7, 20, 106, 110, 111, 112, 113, 114], "nthorder": [7, 20], "input4thorder1d": [7, 20], "exponential1d": [7, 20, 54, 56, 57, 61, 62, 65, 66, 188], "exponential1dsourc": [7, 20], "allen": [7, 17, 160, 173, 174, 176], "binarycoupl": [7, 8, 17, 20], "mesh40x1": [7, 8, 20, 165], "polyxtalcoupl": [7, 17, 20], "advect": [7, 20, 67, 137, 148, 150, 162, 163, 364, 378], "spinod": [7, 19, 31, 32, 33, 34], "decomposit": [7, 19, 31, 32, 338, 339, 341, 343, 344, 488], "multi": [7, 485], "evolut": [7, 8, 21, 31, 32, 33, 34, 81, 136, 160, 163, 173, 174, 175, 489, 492], "reactivewet": [7, 20], "liquidvapor1d": [7, 20], "canon": [8, 31, 32, 33, 34, 162, 163, 175, 253, 412], "govern": [8, 12, 74, 81, 112, 133, 136, 137, 138, 143, 148, 149, 160, 161, 162, 163, 173, 174, 180], "underbrac": [8, 106, 175, 489], "frac": [8, 17, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 68, 71, 74, 75, 77, 81, 85, 106, 108, 112, 114, 117, 121, 122, 128, 133, 136, 137, 138, 148, 149, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 188, 355, 364, 373, 378, 388, 421, 424, 428, 429, 432, 433, 435, 437, 448, 449, 451, 452, 453, 456, 488, 489, 491], "partial": [8, 14, 16, 17, 20, 31, 32, 33, 34, 36, 67, 68, 71, 74, 77, 81, 85, 106, 108, 112, 121, 122, 128, 137, 148, 160, 161, 162, 163, 166, 169, 170, 171, 173, 174, 175, 176, 180, 191, 302, 359, 364, 378, 386, 388, 485, 486, 489, 490], "rho": [8, 20, 75, 81, 114, 175, 180, 181, 388, 486, 489, 490], "_": [8, 16, 17, 32, 71, 74, 81, 106, 117, 162, 163, 175, 176, 195, 196, 197, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 412, 414, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 489], "vphantom": [8, 106, 175, 489], "nabla": [8, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 74, 75, 77, 81, 106, 108, 112, 114, 117, 121, 122, 126, 127, 129, 137, 148, 160, 161, 162, 163, 166, 169, 170, 171, 173, 174, 175, 176, 188, 197, 364, 368, 370, 373, 375, 376, 378, 379, 383, 390, 421, 424, 428, 429, 432, 433, 435, 437, 448, 449, 451, 452, 453, 456, 486, 489, 490], "cdot": [8, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 75, 77, 81, 106, 108, 114, 117, 121, 122, 137, 148, 160, 161, 162, 163, 166, 173, 174, 175, 188, 195, 197, 368, 370, 373, 375, 376, 379, 383, 390, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 486, 489, 490], "vec": [8, 16, 17, 20, 49, 50, 51, 52, 54, 56, 57, 59, 60, 81, 117, 121, 122, 148, 162, 163, 176, 181, 188, 195, 253, 309, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 486, 489, 490], "gamma_i": [8, 488, 489], "n": [8, 14, 17, 19, 75, 81, 106, 108, 109, 112, 114, 117, 121, 137, 138, 143, 155, 160, 161, 162, 163, 165, 173, 174, 175, 177, 195, 197, 222, 368, 375, 376, 379, 383, 390, 398, 407, 412, 416, 421, 424, 428, 429, 432, 433, 435, 437, 448, 449, 451, 452, 453, 456, 463, 464, 488, 489, 492], "s_": [8, 176, 488, 489], "discuss": [8, 10, 11, 15, 20, 21, 32, 486, 491], "discret": [8, 17, 20, 47, 81, 117, 160, 165, 166, 173, 174, 180, 222, 223, 359, 373, 375, 376, 379, 383, 390, 486, 490], "pose": [8, 74], "ratio": [8, 71, 138, 143, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 460, 461, 463, 464, 465, 466, 468, 469, 491], "along": [8, 11, 17, 21, 31, 32, 81, 143, 160, 173, 174, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "coordin": [8, 72, 73, 91, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 234, 235, 240, 241, 242, 248, 249, 250, 251, 468, 478], "partial_x": 8, "notic": [8, 12, 15, 189, 495], "within": [8, 11, 13, 16, 17, 21, 71, 117, 180, 223, 232, 248, 253, 412, 488, 493, 494, 497], "first": [8, 11, 16, 17, 21, 36, 45, 46, 72, 73, 74, 75, 81, 112, 113, 114, 117, 121, 122, 135, 137, 148, 149, 161, 162, 163, 165, 176, 177, 180, 188, 189, 190, 219, 223, 231, 232, 234, 235, 240, 248, 251, 357, 364, 394, 398, 407, 408, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 458, 459, 480, 488, 496], "higher": [8, 16, 17, 20, 117, 162, 163, 180, 197, 222, 223, 364, 370, 489, 490, 491], "although": [8, 9, 11, 16, 17, 21, 31, 32, 81, 106, 110, 112, 161, 162, 163, 176, 188, 189, 428, 488, 489], "confus": [8, 485], "interpret": [8, 15, 17, 21, 259, 260, 261, 262, 263, 264, 266, 267, 280, 281, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 353, 354, 495, 496], "examin": [8, 21, 75, 114, 162, 163, 488], "short": [8, 137], "represent": [8, 20, 81, 136, 140, 141, 176, 208, 227, 228, 229, 230, 231, 232, 248, 249, 250, 251, 253, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "assum": [8, 15, 16, 117, 138, 160, 162, 163, 173, 174, 180, 398, 407, 412, 428, 488], "fourth": [8, 85], "isotrop": [8, 94], "nomin": 8, "anomal": 8, "equiv": [8, 17, 162, 163, 175, 176, 491], "conveni": [8, 397, 398, 407], "appli": [8, 14, 16, 20, 21, 67, 81, 82, 83, 117, 137, 162, 163, 176, 190, 193, 195, 196, 197, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 300, 301, 302, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 336, 352, 353, 354, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 486, 492], "rotat": [8, 34, 71, 156, 161], "realiz": [8, 188], "even": [8, 10, 16, 17, 20, 21, 31, 33, 34, 94, 112, 163, 175, 188, 197, 364, 378, 394, 486, 489], "though": [8, 94, 112, 163, 176], "superfici": 8, "resembl": [8, 74, 136, 143], "d_1": [8, 370], "d_2": [8, 370], "xi": [8, 106, 110, 111, 112, 113, 161, 175, 355], "third": [8, 11, 16, 19, 135, 398, 407, 485], "d2": [8, 370], "facegrad": [8, 17, 20, 67, 68, 74, 81, 85, 108, 109, 110, 111, 113, 160, 161, 162, 163, 165, 166, 173, 174, 175, 180, 181, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 468, 469, 488], "diverg": [8, 17, 20, 67, 74, 117, 161, 162, 163, 165, 166, 173, 253, 260, 261, 262, 264, 266, 328, 421, 429, 432, 433, 435, 449, 451, 452, 488], "grad": [8, 20, 72, 73, 111, 112, 113, 117, 165, 166, 173, 174, 180, 181, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 468, 469, 478], "arithmeticfacevalu": [8, 20, 31, 33, 34, 36, 117, 162, 163, 165, 166, 173, 174, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "rate": [8, 31, 32, 137, 138, 143, 149, 160, 173, 174, 176, 421, 433], "rho_1": 8, "rho_2": 8, "manner": [8, 17, 21, 165, 166, 175, 180, 488], "rho1": 8, "rho2": 8, "perspect": 8, "might": [8, 19, 21, 162, 163, 488], "mobil": [8, 106, 111, 112, 113, 162, 163, 175, 435], "counter": [8, 106, 175], "eq": [8, 31, 32, 33, 34, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 77, 80, 81, 82, 83, 85, 86, 90, 112, 162, 163, 174, 176, 180, 188, 189, 388], "d1": [8, 370], "With": [8, 21, 81, 160, 162, 163, 173, 174, 189, 468, 495], "advent": 8, "gamma_1": [8, 20, 486, 489, 490], "gamma_0": [8, 133], "diffterm": [8, 188, 189], "gamma0": [8, 17], "converg": [8, 17, 20, 74, 81, 162, 163, 165, 176, 259, 260, 261, 262, 263, 264, 265, 266, 267, 280, 281, 286, 287, 288, 289, 290, 291, 292, 294, 295, 298, 299, 300, 301, 302, 303, 304, 309, 310, 313, 314, 315, 316, 317, 322, 323, 324, 325, 328, 333, 334, 335, 336, 337, 351, 353, 354, 388, 486], "plan": 8, "restart": [8, 165], "stage": [8, 9, 11, 14, 21, 81, 435, 492], "ll": [8, 11, 17, 81, 112, 133, 138, 143, 160, 162, 163, 173, 174, 175, 176, 189, 190], "howtowriteascript": [8, 20], "On": [8, 11, 21, 22, 162, 163, 176, 488], "littl": [8, 21, 162, 163, 189, 495], "anyth": [8, 17, 21, 31, 32, 33, 34, 259, 458], "besid": 8, "anoth": [8, 11, 13, 21, 72, 73, 81, 111, 135, 162, 163, 166, 176, 364, 378, 384, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 495], "piec": [8, 17, 21], "softwar": [8, 11, 12, 16, 19, 21, 136, 143, 485], "qualiti": [8, 18, 357, 485], "graph": [8, 96], "multiscal": 8, "ascii": 8, "tab": [8, 11, 72, 73, 478], "separ": [8, 11, 15, 17, 21, 22, 31, 32, 72, 73, 74, 108, 109, 110, 111, 112, 113, 175, 176, 180, 398, 407, 412, 471, 472, 478, 488], "button": 8, "myimag": 8, "ext": [8, 137, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "ep": [8, 165, 166, 173, 174], "jpg": 8, "joint": 8, "photograph": 8, "expert": 8, "png": [8, 17], "portabl": [8, 16, 485], "network": 8, "graphic": [8, 17, 19], "chosen": [8, 17, 21, 111, 113, 463, 464, 469, 491], "yet": [8, 165, 485], "knowledg": [8, 17, 21, 495], "agg": 8, "cairo": 8, "net": [8, 16, 18, 485], "facil": [8, 109, 162, 163, 485], "previou": [8, 17, 32, 81, 160, 162, 163, 173, 174, 176, 188, 398, 407, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "stitch": 8, "free": [8, 12, 18, 19, 21, 31, 32, 36, 106, 162, 163, 175, 176, 180, 181, 189, 190, 485, 492], "sharewar": 8, "adapt": [8, 16, 21, 160, 173, 174, 293, 318, 319, 320, 356, 357, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 485], "utilitarian": [8, 160, 173, 174], "let": [8, 17, 81, 117, 160, 162, 163, 173, 174, 176, 188, 388], "minimum": [8, 11, 17, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 457, 468], "tri": [8, 17, 81, 463, 464, 478], "plotter": 8, "common": [8, 17, 18, 21, 136, 176, 208, 485, 488, 495], "often": [8, 11, 17, 81, 137, 160, 173, 174, 435, 489], "supplement": 8, "underli": [8, 74, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "come": [8, 11, 17, 19, 21, 189, 407], "closest": [8, 412, 428], "overrid": [8, 16, 17, 396, 473], "wan": 8, "heavi": [8, 17], "lift": 8, "custom": [8, 17, 21, 34, 160, 191, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "differenti": [8, 14, 16, 191, 359, 386, 485, 490], "benefit": [8, 17, 21, 31, 33, 34, 49, 50, 51, 59, 60, 176, 188], "repetit": 8, "achiev": [8, 11, 17, 81, 85, 108, 110, 180, 253, 491], "similar": [8, 81, 91], "three": [8, 10, 11, 17, 19, 21, 109, 110, 113, 138, 177, 180, 189, 223, 492], "layer": [8, 135, 136, 137, 138, 143, 219, 223, 229, 231, 234, 240, 248], "lowest": 8, "spend": [8, 191], "think": [8, 10, 17, 21, 162, 163], "practic": [8, 10, 11, 17, 20, 74, 162, 163, 176, 189, 485, 486, 487, 495], "exactli": [8, 15, 17, 67, 162, 163, 176, 398, 407], "thu": [8, 21, 51, 81, 136, 138, 166, 176, 396, 488, 491], "emploi": [8, 11, 16, 17, 176, 490], "until": [8, 17, 21, 81, 355], "satisfactorili": [8, 75], "choos": [8, 11, 16, 17, 71, 81, 162, 163, 176, 463, 464], "toler": [8, 9, 11, 16, 17, 36, 47, 54, 56, 57, 61, 66, 81, 91, 108, 109, 111, 162, 163, 165, 175, 180, 181, 188, 253, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 398, 407, 412], "desir": [8, 9, 11, 21, 162, 163, 175, 176, 188, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407, 460, 461, 463, 464, 465, 466, 468, 469], "mysolv": 8, "linearpcgsolv": [8, 20, 162, 188, 189, 364], "1234": 8, "5e": [8, 32, 137, 160, 161, 162, 163, 173, 174, 176, 180, 181, 421, 429, 433, 435], "favor": 8, "role": [8, 21], "middl": [8, 162, 163, 223], "concentr": [8, 52, 54, 57, 61, 62, 65, 66, 74, 75, 77, 78, 106, 108, 109, 110, 111, 113, 114, 137, 138, 143, 162, 163, 175, 188, 453, 489], "temperatur": [8, 14, 81, 137, 138, 143, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 435, 489], "thermal": [8, 19, 81, 160, 173, 174, 435], "perfect": 8, "good": [8, 47, 59, 60, 81, 117, 176, 490], "elaps": [8, 31, 32, 33, 34, 111, 173, 174, 176], "despit": [8, 17], "evolv": [8, 10, 169, 170, 171], "quasi": 8, "static": [8, 200, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "steadi": [8, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 72, 73, 75, 81, 82, 83, 85, 91, 94, 105, 112, 176, 188], "distinguish": [8, 17], "cycl": [8, 21, 485], "modifi": [8, 11, 12, 13, 15, 21, 143, 180, 276, 495], "myvar": 8, "updateold": [8, 20, 39, 40, 71, 74, 81, 109, 111, 113, 121, 122, 124, 137, 148, 149, 150, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 388, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "repeatedli": [8, 81, 82, 83, 191, 355], "stabl": [8, 9, 11, 21, 81, 162, 163, 176, 491], "truli": 8, "desiredresidu": 8, "outermost": 8, "goal": [8, 21], "studi": [8, 14, 21, 106, 114], "moreov": [8, 17, 19], "equilibrium": [8, 36, 75, 77, 78, 80, 81, 108, 109, 110, 111, 112, 113, 114, 162, 163, 175, 176, 180, 188], "fundament": [8, 21, 407], "becom": [8, 11, 17, 90, 108, 109, 110, 138, 160, 173, 174, 180, 428, 488, 489], "either": [8, 9, 11, 12, 16, 17, 21, 74, 81, 156, 162, 163, 176, 189, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 428, 435, 458, 488, 495, 496], "unstabl": [8, 90, 160, 173, 174], "inaccur": [8, 86, 488], "stabil": [8, 9, 11, 74, 81, 176, 293, 333, 488], "accuraci": [8, 16, 17, 39, 40, 71, 81, 137, 364, 428], "distinctli": 8, "said": 8, "blow": 8, "radic": 8, "perfectli": [8, 81, 188], "disagre": 8, "smaller": [8, 162, 163], "larger": [8, 81, 176, 435, 452, 488], "interv": 8, "234e": 8, "elapsedtim": 8, "totalelapsedtim": 8, "somefunctionofvariablesandtim": 8, "myvar1": 8, "myvar2": 8, "notabl": 8, "interfaci": [8, 112, 176], "gradual": 8, "down": [8, 16, 17, 31, 32, 81, 176, 253], "describ": [8, 17, 21, 31, 32, 52, 54, 57, 61, 62, 65, 66, 72, 73, 81, 113, 117, 138, 160, 173, 174, 176, 180, 398, 414, 488, 490, 493, 494, 496, 497], "substitut": [8, 17, 106, 108, 109, 110, 111, 112, 113, 114, 117, 175, 180, 458], "undesir": 8, "consequ": [8, 11, 117], "averag": [8, 81, 90, 117, 162, 163, 175, 180, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "f": [8, 17, 31, 32, 33, 34, 36, 81, 137, 138, 143, 160, 162, 163, 165, 175, 176, 180, 181, 356, 368, 375, 376, 379, 383, 390, 398, 407, 408, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "neq": [8, 106, 108, 175], "smoothli": 8, "dramat": [8, 74, 81], "sharp": [8, 31, 32, 111, 113, 162, 163, 175], "drop": [8, 11, 13, 17, 81, 117, 223], "harmon": [8, 16, 31, 33, 34, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "experi": [8, 14, 16, 17, 137, 492], "excess": [8, 491], "vice": 8, "versa": 8, "ma": [8, 412], "maerror": 8, "locat": [8, 17, 22, 223, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 488, 493, 494, 497], "pm": [8, 173, 174], "infti": [8, 16, 17, 112, 133, 136, 137, 138, 143, 355, 412, 421, 433, 491], "repair": 8, "catalog": 8, "kei": [8, 63, 68, 75, 90, 111, 114], "flag": [8, 11, 16, 20, 160, 161, 173, 174, 265, 394, 486], "mailinglist": 8, "mailman": 8, "fn": [8, 355, 495], "dev": [8, 485], "2005": [8, 14, 20, 356, 486], "june": [8, 14], "003010": 8, "23": [8, 17, 20, 47, 106, 175, 407, 412, 486, 492], "neither": [8, 398, 407], "sloppi": 8, "thread": [8, 20, 486], "scientif": [8, 11, 14, 16, 18, 21, 485, 492], "4349": 8, "experienc": 8, "upgrad": [8, 11], "brows": [9, 11, 17], "through": [9, 11, 17, 19, 72, 73, 81, 162, 163, 165, 176, 188, 303, 352, 435], "download": [9, 11, 20, 486], "Be": [9, 11, 16, 17, 189], "pre": [9, 20, 117, 486], "scm": [9, 11, 492], "latest": [9, 11, 17], "subject": [9, 11, 12, 17, 74, 188, 398, 407, 412], "behav": [9, 11, 81, 197], "degre": [9, 11, 17, 117, 161, 162, 163], "indic": [9, 11, 15, 16, 17, 189, 190, 398, 407, 412, 416, 488], "decid": [9, 11], "risk": [9, 11, 407], "track": [9, 11, 21], "clone": [9, 11], "shift": [9, 11, 39, 40, 162, 163, 416], "past": [9, 11], "1051": [9, 11, 14, 16, 20, 486], "g36bff3800": [9, 11, 16, 20, 486], "x_y_z": [9, 11], "retain": [9, 11, 17, 81, 162, 163], "guarante": [9, 11, 407, 491], "kept": [9, 11], "synchron": [9, 11], "altogeth": [9, 11, 81], "who": [9, 11, 21], "wide": [9, 11, 16, 18, 485, 489], "onlin": [9, 11, 17], "book": [9, 11, 492], "cours": [10, 17, 135, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "strai": 10, "peril": 10, "forbidden": 10, "greatest": 10, "extent": [10, 12], "had": [10, 81, 176, 188, 189], "great": [10, 19, 162, 163, 189], "knew": [10, 21], "rectangl": 10, "blob": [10, 11, 13, 16, 173, 174], "def": [10, 108, 109, 110, 111, 112, 113, 114, 126, 127, 129, 160, 162, 163, 165, 173, 174, 175, 176, 180, 181, 189], "width": [10, 173, 174, 468, 488], "height": [10, 47, 124, 162, 163, 176], "black": [10, 188], "red": 10, "strong": 10, "sorri": 10, "lose": 10, "mixedcas": 10, "lowercas": 10, "lower_case_with_underscor": 10, "deviat": [10, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 491], "unsur": 10, "anybodi": 10, "willing": 10, "seen": [10, 81, 162, 163], "unittest": [10, 21, 396, 397], "heavili": [10, 473], "care": [10, 15, 17, 81, 176, 188], "taken": [10, 15, 21, 77, 78, 80, 81, 160, 173, 174, 407, 413], "defin": [10, 21, 47, 49, 50, 51, 56, 59, 60, 67, 72, 73, 81, 111, 136, 137, 160, 162, 163, 165, 166, 173, 174, 180, 188, 223, 233, 412, 421, 424, 428, 429, 432, 433, 435, 442, 448, 449, 451, 456, 468, 488, 491, 495, 496], "parallel_2": 10, "processor_0": [10, 394], "id": [10, 17, 20, 36, 140, 189, 412, 416, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 460, 461, 462, 463, 464, 465, 466, 468, 469, 492], "processor_0_of_2": [10, 394], "processor_1_of_2": [10, 394], "processor_0_of_3": [10, 394], "processor_1_of_3": [10, 394], "processor_2_of_3": [10, 394], "register_skipp": [10, 20, 394], "pertain": 10, "reli": [11, 72, 73, 468, 488, 495], "parti": [11, 19, 485], "begin": [11, 15, 17, 21, 36, 49, 51, 56, 59, 60, 71, 74, 75, 81, 113, 114, 127, 129, 137, 138, 143, 160, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 188, 223, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 491, 496], "By": [11, 17, 117, 176, 394, 428], "select": [11, 20, 21, 222, 223, 356, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 412, 487, 491], "webspac": 11, "infer": 11, "drawn": 11, "referenc": 11, "concur": 11, "fact": [11, 81, 188, 189, 394, 428], "rudimentari": [11, 18, 117, 358], "introduct": [11, 20, 487, 490, 492], "expedi": [11, 21], "manag": [11, 13, 17, 485], "virtual": [11, 20, 486, 487], "keep": [11, 31, 32, 33, 34, 137, 161], "suffici": [11, 162, 163, 189, 190, 398, 408, 414], "privileg": 11, "channel": [11, 17], "dai": [11, 21], "micromamba": 11, "popul": 11, "anaconda": 11, "merit": 11, "relationship": [11, 21, 96, 176], "myfipyenv": 11, "awar": [11, 16, 17], "restrict": [11, 16, 17, 194, 407, 488], "unpredict": 11, "later": [11, 17, 19, 110, 165, 424], "unfortun": [11, 21, 189, 413], "prove": [11, 21], "Then": 11, "mymergedenviron": 11, "lockfil": [11, 20, 486, 487], "pin": 11, "safest": 11, "obviat": 11, "flexibl": [11, 293, 485], "highest": 11, "mpich": 11, "traitsui": 11, "bit": [11, 72, 73, 162, 163, 176], "rot": 11, "One": [11, 17, 81, 90, 108, 110, 155, 162, 163, 176, 180, 188, 468, 488], "vtkviewer": [11, 20], "henc": [11, 162, 163, 176], "batteri": [11, 21], "bare": 11, "quit": [11, 489], "mamba": 11, "speed": [11, 117], "pretti": 11, "visual": [11, 18, 473, 485], "fewer": [11, 176], "amongst": 11, "freeli": [11, 15, 21, 191], "mind": [11, 17], "preserv": [11, 47, 121, 122, 412], "courag": 11, "impati": 11, "quickli": [11, 18, 138, 232, 485], "formal": 11, "confid": [11, 117], "requisit": 11, "alter": [11, 17, 21], "admin": 11, "termin": [11, 16, 17, 81, 91, 136, 137, 138, 143, 176], "15": [11, 14, 20, 36, 54, 56, 57, 61, 66, 67, 81, 111, 113, 162, 163, 165, 173, 174, 175, 176, 188, 235, 278, 279, 282, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 478, 486, 490, 492], "copyright": [11, 12], "credit": 11, "geuz": [11, 485], "creation": [11, 72, 73, 188, 495], "irregular": [11, 72, 73, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459], "analyz": [11, 72, 73], "judici": [11, 17], "compon": [11, 19, 31, 32, 74, 75, 108, 109, 110, 111, 112, 113, 114, 162, 163, 175, 180, 492], "fast": [11, 16, 21, 428, 492], "march": [11, 14, 428, 492], "ktchu": 11, "serendipityresearch": 11, "surfac": [11, 17, 19, 34, 72, 73, 95, 138, 156, 160, 173, 174, 176, 223, 488], "curv": [11, 176], "addition": [11, 19, 117], "pylsmlib": 11, "tree": [11, 458, 459, 480], "violat": 11, "tamper": 11, "util": [11, 20, 161, 165, 166, 169, 170, 171, 223, 355, 358, 398, 416, 485], "stow": 11, "virtualenv": 11, "buildout": 11, "cd": [11, 407], "power": [11, 13, 17, 21, 175, 191, 383, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 491, 495], "unix": [11, 13, 17], "reliabl": [11, 13, 189], "blog": [11, 13], "hpc": [11, 13], "team": [11, 13], "gricad": [11, 13], "tuto": [11, 13], "2017": [11, 13, 16, 20, 486], "07": [11, 13, 407], "04": [11, 13, 20, 149, 486, 492], "my": [11, 13, 17, 20, 189, 486], "md": [11, 13], "pure": [11, 13, 17, 74, 106, 162, 163, 175], "nativebuildinput": [11, 13], "know": [11, 13, 17, 21, 112, 188, 189], "toolz": [11, 13], "persist": [11, 13, 19, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "employe": 12, "agenc": 12, "feder": [12, 21], "pursuant": 12, "protect": 12, "foreign": 12, "permiss": 12, "countri": 12, "deriv": [12, 15, 17, 31, 32, 33, 34, 68, 74, 81, 162, 163, 175, 180, 197, 356, 407, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488, 489, 490, 491, 495, 496], "fee": 12, "herebi": 12, "grant": [12, 19], "exclus": [12, 17], "basi": [12, 492], "disclaim": 12, "warranti": 12, "THE": 12, "AS": 12, "OF": 12, "kind": 12, "OR": 12, "statutori": 12, "BUT": 12, "NOT": 12, "TO": 12, "THAT": 12, "WILL": 12, "conform": 12, "merchant": 12, "fit": [12, 21, 176], "FOR": 12, "AND": [12, 412], "freedom": 12, "infring": 12, "BE": 12, "IN": 12, "NO": 12, "event": [12, 162, 163, 449], "shall": 12, "liabl": 12, "damag": 12, "indirect": 12, "consequenti": 12, "aris": 12, "connect": [12, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "WITH": 12, "contract": 12, "tort": 12, "otherwis": [12, 16, 90, 140, 141, 160, 173, 174, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "injuri": 12, "sustain": 12, "BY": 12, "person": 12, "loss": [12, 16, 253, 328], "aros": 12, "hereund": 12, "cite": 14, "j": [14, 21, 75, 81, 106, 108, 111, 112, 114, 136, 137, 138, 143, 148, 162, 163, 165, 166, 173, 174, 175, 176, 177, 195, 356, 398, 407, 412, 492], "11": [14, 17, 20, 47, 71, 72, 73, 95, 111, 117, 126, 140, 141, 180, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407, 412, 486, 492], "pp": [14, 364], "2009": [14, 20, 486, 492], "1109": 14, "mcse": 14, "w": [14, 112, 138, 143, 162, 163, 166, 173, 174, 176, 223, 398, 407, 414, 492], "boetting": [14, 106, 492], "earli": [14, 21, 78, 492], "reactiv": [14, 15, 20, 191, 492], "wet": [14, 15, 20, 165, 166, 191, 492], "82": [14, 180, 181, 492], "051601": [14, 492], "2010": [14, 20, 486, 492], "1103": [14, 492], "physrev": [14, 492], "mohanti": 14, "sohn": 14, "gradient": [14, 20, 31, 32, 39, 82, 83, 106, 112, 117, 160, 162, 163, 165, 166, 173, 174, 176, 180, 260, 261, 293, 298, 303, 333, 364, 378, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 486, 488], "journal": [14, 356, 492], "034912": 14, "1063": [14, 492], "3190607": 14, "pusztai": 14, "l": [14, 16, 17, 36, 39, 40, 51, 52, 54, 56, 57, 61, 62, 63, 65, 66, 68, 75, 78, 81, 82, 83, 85, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 126, 127, 128, 129, 133, 138, 143, 148, 149, 162, 163, 165, 169, 170, 171, 175, 176, 177, 180, 188, 222, 355, 356, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 492], "k": [14, 17, 21, 81, 106, 108, 111, 133, 137, 138, 143, 149, 162, 163, 175, 176, 309, 388, 407, 459, 462, 464, 465, 466, 468, 469, 471, 472, 492], "\u00f6": [14, 489], "rnyei": 14, "gr": 14, "\u00e1": 14, "sy": [14, 394, 412, 421, 429, 433, 435], "approach": [14, 16, 19, 20, 81, 162, 163, 176, 191, 223, 486, 488, 489], "heterogen": 14, "nucleat": [14, 31, 32], "alloi": [14, 31, 32, 162, 163, 492], "014204": 14, "physrevb": 14, "p": [14, 16, 17, 67, 106, 111, 112, 117, 162, 163, 166, 173, 174, 175, 176, 180, 356, 388, 398, 407, 485, 488, 491, 492], "moffat": [14, 492], "kim": [14, 492], "josel": [14, 492], "curvatur": [14, 137, 138, 492], "enhanc": [14, 485, 492], "adsorb": [14, 138, 492], "coverag": [14, 136, 137, 138, 143, 148, 149, 492], "bottom": [14, 82, 83, 117, 173, 174, 177, 188, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "damascen": 14, "electrochimica": 14, "acta": [14, 492], "53": 14, "2007": [14, 16, 20, 486], "1016": [14, 492], "electacta": 14, "03": [14, 20, 72, 78, 462, 471, 472, 486, 492], "025": [14, 94, 95, 112, 113, 160, 173, 174, 176], "campbel": 14, "mcfadden": [14, 106, 492], "kirkendal": [14, 492], "displac": [14, 176, 219, 223, 229, 231, 234, 240, 248, 407], "dimension": [14, 19, 81, 82, 99, 109, 166, 176, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 331, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 492], "proceed": [14, 402], "royal": 14, "societi": [14, 492], "mathemat": [14, 17, 457, 485, 488, 492], "2088": 14, "3347": 14, "3373": 14, "1098": 14, "rspa": 14, "1904": 14, "cickovski": 14, "ara": 14, "swat": 14, "merk": 14, "glimm": 14, "hentschel": 14, "alber": 14, "glazier": 14, "newman": 14, "izaguirr": 14, "gene": 14, "organ": 14, "multicellular": 14, "60": [14, 111, 112, 113, 138, 176, 398, 407], "saylor": [14, 492], "theori": [14, 47], "letter": [14, 492], "035703": 14, "physrevlett": [14, 492], "mazur": 14, "soil": 14, "solar": [14, 492], "radiat": 14, "de": 14, "physiqu": 14, "iv": 14, "franc": 14, "320": 14, "2006": [14, 20, 486, 492], "jp4": 14, "2006137061": 14, "electrodeposit": [14, 15, 143, 175, 191, 492], "c127": [14, 492], "c132": [14, 492], "1149": [14, 492], "2165580": [14, 492], "gold": [14, 20, 492], "submicromet": [14, 492], "trench": [14, 20, 135, 136, 137, 138, 143, 492], "c11": [14, 492], "c18": [14, 492], "2128765": [14, 492], "were": [14, 17, 21, 394, 412], "honor": 14, "invit": 14, "deliv": 14, "keynot": 14, "confer": 14, "caltech": 14, "august": [14, 16], "talk": 14, "georg": 14, "mason": 14, "depart": 14, "octob": [14, 16], "devic": 14, "radiolog": 14, "health": 14, "food": 14, "drug": [14, 15, 191, 492], "ge": [14, 124, 364], "siam": 14, "tm": [14, 39, 40, 176], "annual": [14, 492], "meet": [14, 137], "februari": 14, "educ": 14, "luncheon": 14, "roundtabl": 14, "transform": [14, 15, 106, 162, 163, 175, 176, 191, 488], "microstructologi": 14, "iii": [14, 223, 492], "birmingham": 14, "al": [14, 165, 166, 173, 174, 180], "2004": [14, 20, 111, 486, 492], "mr": 14, "fall": [14, 117], "novemb": 14, "arbitrari": [15, 17, 19, 108, 109, 110, 189, 191, 280, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 489], "ellipt": [15, 191], "hyperbol": [15, 176, 191, 398, 407], "parabol": [15, 191], "dendrit": [15, 19, 21, 160, 161, 173, 174, 191, 492], "elut": [15, 191, 492], "stent": [15, 191], "photovolta": [15, 191], "redistribut": 15, "bear": 15, "welcom": [15, 21], "collabor": [15, 19], "project": [15, 18, 72, 73, 485], "driven": 15, "editor": 15, "tcsh": 15, "bash": 15, "throughout": [15, 137, 161], "keyboard": 15, "denot": [15, 106, 117, 165, 180, 488], "12": [15, 17, 20, 21, 47, 81, 111, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 407, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 457, 486, 492], "twelv": 15, "primari": [15, 21], "secondari": 15, "remain": [15, 17, 34, 81, 111, 113, 117, 156, 161, 162, 163, 175, 189, 190, 412, 491], "margin": [15, 17], "sensit": 15, "indent": 15, "posix": 15, "seriou": [15, 16, 32, 121, 122], "less": [16, 81, 162, 163, 265, 309, 364, 378, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 488], "popular": [16, 490], "hardwar": 16, "trivial": [16, 32, 364, 378], "defaultsolv": [16, 20, 33, 34, 36, 252], "lineargmressolv": [16, 20, 31, 63], "fipy_solv": [16, 17], "linearlusolv": [16, 20, 31, 36, 63, 109, 111, 163, 188, 378], "regardless": [16, 160, 173, 174, 222], "mc": [16, 162, 163, 485], "anl": [16, 485], "toolkit": [16, 485], "structur": [16, 18, 20, 81, 485, 486, 488, 492], "routin": [16, 176, 191, 265, 485], "scalabl": [16, 485], "precodition": 16, "pctype": 16, "precon": [16, 31, 33, 34, 108, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 302, 303, 304, 305, 306, 308, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 353, 354], "declar": [16, 33, 34, 81, 117, 162, 163, 435, 495], "storag": [16, 160, 173, 174, 223, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 485, 488], "precondition": [16, 17, 20, 86, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 294, 298, 299, 300, 301, 302, 303, 304, 309, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 485], "factor": [16, 17, 32, 117, 162, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 265, 291, 302, 309, 316, 407, 468, 488], "archaic": [16, 485], "krylov": [16, 265, 266], "conjunct": [16, 17, 21, 197], "readthedoc": [16, 485], "nvidia": [16, 485], "amgx": [16, 286, 287, 288, 289, 290, 292, 294, 485], "sandia": [16, 352, 485], "difficult": [16, 18, 81, 189, 191, 485], "alongsid": 16, "compil": [16, 17, 21, 485], "suppress": [16, 412], "commonli": [16, 189], "encount": [16, 413], "gen_prolong": 16, "eigen": 16, "aztec": [16, 338, 349, 352], "az_loss": 16, "precis": [16, 253, 328, 398, 407, 412], "difficulti": 16, "usual": [16, 21, 176, 180, 188, 232, 234, 235, 248, 265, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 412], "az_ill_cond": 16, "gmre": [16, 253, 262, 279, 290, 299, 315, 335], "hessenberg": [16, 253], "ill": [16, 253, 309], "accur": [16, 31, 33, 34, 81, 86, 121, 176, 364], "az_breakdown": 16, "breakdown": [16, 253, 265], "reach": [16, 17, 21, 77, 78, 80, 138, 162, 163, 176, 265, 309], "endeavor": [16, 17], "behavior": [16, 17, 20, 21, 138, 190, 412, 486, 495, 496], "criterion": [16, 17, 20, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 295, 298, 299, 300, 301, 302, 303, 304, 309, 310, 313, 314, 315, 316, 317, 322, 323, 324, 325, 328, 333, 334, 335, 336, 337, 351, 352, 353, 354], "column": [16, 17, 72, 73], "detect": 16, "unscal": [16, 17, 253, 259, 260, 261, 262, 263, 264, 266, 267, 280, 281, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 353, 354], "mathsf": [16, 160, 173, 174, 176, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "_2": [16, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 412], "az_nosc": 16, "rh": [16, 17, 36, 117, 196, 259, 260, 261, 262, 263, 264, 266, 267, 280, 281, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 353, 354, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "ksp_norm_unprecondit": 16, "pcg": [16, 282, 292, 303], "qmre": 16, "az_rh": 16, "az_anorm": 16, "relative_ini_cor": 16, "bicgstab": [16, 313], "minr": 16, "az_r0": 16, "_1": [16, 355, 412], "az_sol": 16, "ksp_norm_precondit": 16, "natur": [16, 17, 74, 138, 189, 259, 260, 261, 262, 264, 266, 267, 299, 300, 303, 304, 310, 325, 333, 334, 335, 337, 351, 353, 354, 398, 407, 488], "sqrt": [16, 20, 36, 40, 67, 71, 72, 73, 77, 78, 81, 112, 121, 124, 126, 127, 129, 137, 148, 149, 155, 156, 165, 176, 223, 364, 378, 388, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "ksp_norm_natur": 16, "ksp_norm_default": 16, "top": [16, 82, 83, 137, 140, 141, 188, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 428, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "prior": [16, 355], "row": 16, "happen": [16, 21, 47, 81], "ksptype": 16, "discern": 16, "burn": 16, "bowl": 16, "chicken": 16, "entrail": 16, "sai": 16, "weird": [16, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "paramet": [16, 17, 20, 21, 31, 32, 39, 40, 72, 73, 78, 80, 81, 111, 113, 117, 121, 122, 126, 128, 133, 136, 137, 138, 140, 141, 143, 161, 162, 163, 165, 166, 176, 180, 188, 193, 195, 196, 197, 219, 222, 223, 229, 231, 234, 240, 248, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 338, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 396, 398, 403, 407, 408, 411, 412, 413, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484, 489, 491, 495, 496], "succ": 16, "captur": 16, "amgx_solve_success": 16, "az_norm": 16, "iterationconverg": [16, 20, 253, 265], "ksp_converged_it": 16, "absolutetoleranceconverg": [16, 20, 253, 265, 309], "ksp_converged_atol": 16, "rhszeroconverg": [16, 20, 253, 309], "mathbf": [16, 309], "relativetoleranceconverg": [16, 20, 253, 265, 309], "ksp_converged_rtol": 16, "happybreakdownconverg": [16, 20, 253, 265], "wors": [16, 17, 253], "ksp_converged_happy_breakdown": 16, "lossofaccuracyconverg": [16, 20, 253, 328], "round": [16, 398, 407], "iteratingconverg": [16, 20, 253, 265], "progress": [16, 36, 253, 435], "ksp_converged_iter": 16, "breakdowndiverg": [16, 20, 253, 265, 295, 322, 328], "illeg": [16, 398, 407], "ksp_diverged_breakdown": 16, "amgx_solve_fail": 16, "iterationdiverg": [16, 20, 253, 265, 295, 309, 322, 328], "ksp_diverged_it": 16, "amgx_solve_diverg": 16, "az_maxit": 16, "preconditioningdiverg": [16, 20, 253, 265, 309], "ksp_diverged_pc_fail": 16, "illconditionedpreconditionerdiverg": [16, 20, 253, 265], "inner": [16, 34, 81, 156, 223, 309], "posit": [16, 17, 72, 73, 81, 124, 128, 137, 149, 150, 189, 265, 303, 309, 338, 347, 437, 462, 463, 464, 491], "ksp_diverged_indefinite_pc": 16, "illconditioneddiverg": [16, 20, 253, 265, 309, 328], "ksp_diverged_indefinite_mat": 16, "stagnateddiverg": [16, 20, 253, 309], "stagnat": [16, 253, 309], "outofrangediverg": [16, 20, 253, 265, 309], "quantiti": [16, 21, 72, 73, 106, 109, 136, 176, 309, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 489], "becam": [16, 253, 265, 309], "ksp_diverged_nanorinf": 16, "nulldiverg": [16, 20, 253, 265], "ksp_diverged_nul": 16, "tolerancediverg": [16, 20, 253, 265], "divtol": [16, 265], "ksp_diverged_dtol": 16, "ksp": [16, 265], "sec": 16, "convergencetest": 16, "amgx_refer": 16, "2d1d5b042a09e131ffe191726aa6829b33590970": 16, "_isolv": 16, "l30": 16, "aztecoo": [16, 351], "az_conv": 16, "sand": 16, "sand2004": 16, "3796": 16, "aztecoouserguid": 16, "ksp_diverged_breakdown_bicg": 16, "ksp_diverged_nonsymmetr": 16, "sens": 17, "strongli": [17, 188], "proce": [17, 32, 72, 73, 81, 82, 83, 162, 163, 176, 180], "assumpt": [17, 138, 162, 163], "seri": 17, "familiar": 17, "yourself": [17, 495, 496], "excel": 17, "dive": [17, 492], "Into": [17, 492], "deeper": [17, 428], "insight": 17, "getlogg": 17, "consol": 17, "streamhandl": 17, "setlevel": 17, "info": [17, 411], "addhandl": 17, "verbos": [17, 394, 396, 397], "save": [17, 20, 137, 140, 141, 165, 408, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 485, 486], "logfil": 17, "filehandl": 17, "filter": [17, 189, 325], "addfilt": 17, "fipy_log_config": 17, "mpilog": 17, "mpiscatteredfilehandl": 17, "filepattern": 17, "mpirank": 17, "d_of_": 17, "mpisiz": 17, "uniqu": [17, 21], "egg_info": 17, "investig": [17, 96], "tracker": 17, "dashboard": 17, "core": [17, 21], "insensit": 17, "myfipyscript": 17, "someflag": 17, "lazili": [17, 457], "recalcul": [17, 128, 180, 181, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 457], "skfmm": 17, "compos": [17, 21, 162, 163, 495], "fipy_inlin": 17, "fipy_inline_com": 17, "context": [17, 208, 223, 227, 252, 325, 359, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458], "json": [17, 485], "config": [17, 396], "dictconfig": 17, "fipy_verbose_solv": 17, "lineargeneralsolv": [17, 20], "fipy_default_criterion": 17, "admittedli": 17, "circular": [17, 71, 72, 73, 121, 148, 149, 160, 161, 165, 173, 174, 364], "fipy_include_numerix_al": [17, 190], "fipy_cach": 17, "petsc_opt": 17, "tri2d": [17, 20, 78, 91, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 249, 250, 251, 459, 466, 468, 469, 471, 472], "skewedgrid2d": [17, 20, 93, 96], "advis": 17, "myscript": [17, 137, 325], "slurm": 17, "task": [17, 21], "manufactur": 17, "hire": 17, "bigger": 17, "versu": 17, "style": [17, 468], "observ": [17, 161], "exhibit": [17, 106, 435, 489], "law": [17, 21, 162, 163, 180, 383, 491], "slab": 17, "compact": 17, "carri": 17, "fairli": [17, 160, 165, 166, 173, 174], "lag": 17, "discrep": 17, "obviou": [17, 162, 176], "20": [17, 20, 21, 31, 32, 47, 71, 82, 83, 94, 95, 102, 110, 111, 143, 160, 161, 163, 173, 174, 177, 180, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407, 428, 457, 486, 489, 492], "modest": 17, "caveat": 17, "architectur": [17, 485], "easiest": 17, "confirm": [17, 81, 111, 113, 165, 175, 252], "half": [17, 165, 190], "look": [17, 20, 81, 162, 163, 486], "69815": 17, "freed": 17, "69814": 17, "69813": 17, "essenti": [17, 49, 50, 51, 59, 60, 81, 137, 162, 163, 188, 398, 407, 412, 488, 490], "sub": [17, 248, 488, 493, 494, 497], "somewhat": [17, 21, 31, 33, 34, 364, 378], "xterm": 17, "ipdb": 17, "spawn": 17, "intent": 17, "node": [17, 223], "cluster": 17, "child": 17, "compet": [17, 31, 32, 162, 163], "ghost": [17, 223], "exchang": [17, 137, 138, 143], "gil": 17, "bind": [17, 475, 485, 495], "parent": 17, "suffer": 17, "launch": [17, 81], "minut": [17, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "unrestrict": [17, 21], "degrad": 17, "conceiv": 17, "unfett": 17, "slot": 17, "msg03393": 17, "notfun": 17, "polygon": 17, "wrapper": [17, 223, 256, 257, 291, 298, 299, 300, 302, 303, 304, 305, 306, 308, 316, 318, 319, 320, 330, 331, 400, 408, 413, 485], "gmsh3d": [17, 20, 190, 223], "geometri": [17, 21, 72, 73, 136, 137, 138, 143, 156, 188, 196, 207, 223, 233, 249, 250, 424, 428, 432, 442, 448, 449, 451], "geo": [17, 223], "msh": [17, 71, 223], "occur": [17, 34, 165, 176, 180, 188, 253, 328, 398, 407, 428], "whenev": [17, 325, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "compromis": [17, 81], "highli": [17, 21, 338, 345], "orthogon": [17, 21, 93, 95, 96, 248, 265, 488], "tighter": 17, "tempor": 17, "eqn0": [17, 74], "eqn1": [17, 74], "coupledeqn": [17, 180, 181], "quadrant": [17, 177], "act": [17, 21], "term00": 17, "term01": 17, "source0": 17, "term10": 17, "term11": 17, "source1": 17, "ttfamili": 17, "hline": [17, 138, 143], "decis": 17, "regard": 17, "upper": [17, 458, 462], "revers": [17, 52, 57, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "decompos": [17, 31, 33, 34, 74], "2nd": [17, 32, 357, 370, 492], "pair": [17, 74, 106, 412], "4th": [17, 86, 370], "phi": [17, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 68, 71, 72, 73, 75, 77, 78, 81, 82, 83, 85, 106, 110, 111, 112, 113, 114, 121, 122, 124, 126, 127, 128, 129, 137, 148, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 188, 189, 196, 197, 364, 368, 370, 373, 375, 376, 378, 379, 381, 383, 384, 385, 388, 390, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 486, 489, 490], "kappa_c": [17, 162, 163], "kappa_": [17, 106, 112, 162, 163, 175, 176], "mu": [17, 117, 165, 166, 173, 174, 175, 180, 181, 407, 429, 435], "hat": [17, 51, 81, 137, 195, 197, 432, 451, 452, 488], "qquad": [17, 36, 67, 106, 112, 129, 133, 162, 163, 169, 170, 171, 175, 364], "facestop": [17, 20, 52, 57, 82, 83, 117, 137, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "fixedvalu": [17, 20, 188, 189, 190, 197], "facenorm": [17, 233, 234, 235], "exterior": [17, 68, 72, 73, 81, 155, 223], "firstli": [17, 72, 73, 121, 122, 126, 128, 155, 180, 428], "diffcoeff": [17, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 105, 188, 189], "convcoeff": [17, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 188, 189], "extra": [17, 293, 394], "eqn": [17, 39, 40, 71, 74, 78], "diffusioncoeff": [17, 36, 39, 40, 67, 77, 137, 165, 166, 188], "exteriorflux": 17, "fixedflux": [17, 20, 188, 190, 197], "unless": [17, 19, 31, 32, 33, 34, 222, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 398, 414], "xy": [17, 232, 364], "quad": [17, 85, 176], "elsewher": 17, "repres": [17, 20, 21, 31, 32, 49, 50, 59, 60, 68, 74, 77, 81, 108, 110, 111, 112, 113, 128, 137, 138, 149, 160, 161, 173, 174, 176, 188, 196, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 368, 370, 381, 388, 407, 421, 424, 429, 433, 435, 456, 462, 466, 486, 488, 489], "portion": [17, 21], "s_r": 17, "int_v": [17, 368, 373, 375, 376, 379, 381, 383, 388, 390, 488], "dv": [17, 162, 163, 180, 368, 373, 375, 376, 379, 381, 383, 388, 390, 488], "int_": [17, 162, 163, 488], "notin": 17, "setvalu": [17, 20, 21, 31, 33, 34, 67, 72, 73, 75, 81, 85, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 140, 141, 149, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 462, 464, 465, 466, 468, 469, 471, 472], "powerlawconvectionterm": [17, 20, 49, 50, 51, 59, 60, 63, 65, 66, 67, 68, 108, 109, 110, 111, 113, 162, 174, 175, 188, 189, 364, 367, 368, 375, 376, 377, 378, 379, 381, 384, 385, 388, 390, 391, 488], "onto": [17, 31, 33, 34, 133, 189], "interven": [17, 81], "neighbor": [17, 364, 428, 488, 491], "phi_f": [17, 368, 375, 376, 379, 383, 390, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "approx": [17, 162, 163, 176, 432, 451, 452], "phi_p": [17, 364, 368, 373, 375, 376, 378, 379, 381, 383, 388, 390, 488, 491], "pf": [17, 111], "_f": [17, 117, 180, 368, 375, 376, 379, 383, 390, 432, 451, 452, 488], "adjoin": 17, "g_f": 17, "b_f": 17, "turn": [17, 188], "gamma": [17, 71, 133, 143, 165, 166, 173, 174, 189, 373, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 488, 489], "sum_f": [17, 117, 373, 421, 424, 428, 429, 432, 433, 435, 437, 448, 449, 451, 452, 453, 456, 488], "gamma_f": [17, 373, 488], "a_f": [17, 117, 180, 181, 368, 373, 375, 376, 379, 383, 390, 421, 424, 428, 429, 432, 433, 435, 437, 448, 449, 451, 452, 453, 456, 488], "sum_": [17, 75, 106, 108, 112, 114, 138, 175, 368, 375, 376, 379, 383, 390, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "modif": 17, "dpf": 17, "celldistancevector": 17, "robincoeff": 17, "similarli": [17, 138], "heat": [17, 81, 160, 162, 163, 173, 174, 176, 492], "t_": 17, "largevalu": 17, "domin": 17, "typic": [17, 117, 162, 163, 370], "boolean": [17, 176, 398, 407], "noth": [17, 108, 109, 110, 156, 394], "believ": [17, 188], "intuit": 17, "pathologi": 17, "attent": [17, 223], "implicitli": [17, 91, 176, 180], "nx": [17, 31, 32, 33, 36, 39, 40, 47, 51, 52, 54, 56, 57, 61, 62, 63, 65, 66, 67, 68, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 94, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 140, 141, 155, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 408, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 462, 464, 465, 466, 468, 469, 471, 472, 478], "rvert_": [17, 81, 176], "facesright": [17, 20, 36, 49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 67, 68, 74, 78, 81, 82, 83, 85, 94, 95, 111, 117, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "1e": [17, 33, 34, 36, 39, 40, 47, 49, 50, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 74, 80, 81, 82, 83, 85, 90, 91, 97, 99, 100, 105, 108, 109, 110, 111, 112, 113, 124, 127, 133, 137, 148, 149, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 189, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 364, 378, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "unexpect": [17, 394], "everywher": [17, 110, 112, 137, 165, 166, 176], "januari": [17, 111], "2020": [17, 20, 486], "pledg": 17, "priorit": 17, "rapidli": [17, 21], "impract": 17, "hopefulli": 17, "latexpdf": 17, "plu": [17, 81, 488], "v7": 17, "bibliograph": 17, "numpydoc": 17, "embed": [17, 19, 21, 156], "imagemagick": 17, "siunit": 17, "sty": 17, "texliv": 17, "pyspel": 17, "hunspel": 17, "libreoffic": 17, "wget": 17, "aff": 17, "cgit": 17, "freedesktop": 17, "en": [17, 485], "a4473e06b56bfe35187e302754f6baaa8d75e54f": 17, "dic": 17, "far": [18, 81, 111, 113, 137, 138, 143, 175, 428], "vkml": 19, "aspect": [19, 117, 138, 143, 166, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 460, 461, 463, 464, 465, 466, 468, 469], "semin": 19, "michael": 19, "water": 19, "prof": 19, "edwin": 19, "garcia": 19, "purdu": 19, "coarsen": 19, "random": [19, 31, 32, 33, 34, 93, 160, 173, 174, 180, 181, 240, 421, 429, 433, 435, 449, 456], "crystallograph": 19, "nuclei": [19, 173, 174], "radiu": [19, 34, 72, 73, 121, 149, 156, 160, 161, 173, 174, 223], "size": [19, 20, 32, 78, 80, 100, 111, 137, 138, 143, 180, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 414, 437, 468, 488], "homogen": [19, 31, 32], "dispers": 19, "wall": [19, 117], "seed": [19, 160, 161, 173, 174, 180, 181, 421, 429, 433, 435, 449], "fold": 19, "undercool": [19, 160, 173, 174, 176], "liquid": [19, 111, 113, 160, 161, 162, 163, 165, 173, 174, 175, 180], "strength": [19, 488, 491], "tension": 19, "segreg": [19, 31, 32, 75, 111, 113, 114, 175], "chemic": [19, 106, 162, 163, 175, 180, 489, 492], "john": [19, 492], "browser": 19, "assess": 19, "potenti": [19, 75, 106, 110, 111, 112, 113, 114, 162, 163, 175, 180, 181, 489], "word": [19, 91, 136, 137, 138, 143, 176], "michigan": 19, "boston": 19, "japan": 19, "england": 19, "wherev": 19, "cowork": 19, "planet": 19, "him": 19, "temporari": [19, 398, 408, 414, 416], "travel": 19, "privat": [19, 394], "publicli": 19, "peopl": 19, "world": 19, "regist": 19, "registr": 19, "nanohub": 19, "overview": [20, 21, 394, 486, 487], "client": [20, 486], "submit": [20, 486], "feedstock": [20, 486], "announc": [20, 486], "absolute_toler": [20, 260, 261, 262, 264, 266, 280, 281, 291, 313, 314, 315, 316, 317, 323, 324, 486], "divergence_toler": [20, 260, 261, 262, 264, 266, 486], "openmp": [20, 485, 486], "v": [20, 34, 74, 117, 136, 137, 138, 140, 143, 148, 162, 163, 175, 176, 180, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 462, 478, 486, 492], "dirichlet": [20, 82, 83, 196, 486], "outlet": [20, 486], "inlet": [20, 486], "partial_i": [20, 71, 180, 486], "gamma_": [20, 71, 486], "ij": [20, 71, 486], "partial_j": [20, 71, 180, 486], "imag": [20, 136, 138, 140, 141, 143, 173, 174, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484, 486], "screen": [20, 136, 138, 143, 412], "movi": [20, 486], "oh": [20, 189, 486], "anymor": [20, 486], "here": [20, 21, 39, 40, 52, 57, 81, 91, 117, 127, 129, 133, 136, 138, 161, 165, 166, 169, 170, 171, 189, 190, 223, 364, 378, 412, 428, 486, 491], "fvm": [20, 21, 486, 490], "cc": [20, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 126, 127, 129, 188, 486, 490], "vc": [20, 486, 490], "scheme": [20, 45, 46, 49, 50, 51, 59, 60, 81, 121, 122, 173, 174, 176, 180, 368, 375, 376, 379, 383, 390, 428, 486, 488, 490], "2022": [20, 486], "06": [20, 407, 486], "08": [20, 71, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 486], "01": [20, 31, 32, 33, 34, 74, 75, 78, 108, 111, 112, 113, 114, 124, 165, 166, 173, 174, 175, 180, 181, 223, 356, 398, 407, 421, 456, 459, 464, 465, 468, 469, 471, 472, 486], "02": [20, 80, 149, 160, 161, 165, 166, 173, 174, 223, 486, 492], "14": [20, 180, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 478, 486, 488, 490, 492], "2019": [20, 486], "28": [20, 39, 138, 162, 163, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 407, 486, 492], "22": [20, 106, 175, 486, 492], "2016": [20, 486], "24": [20, 81, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 407, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 486, 492], "2015": [20, 486], "2013": [20, 486], "09": [20, 407, 486, 492], "2012": [20, 181, 486], "16": [20, 180, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 357, 486, 490, 492], "2011": [20, 180, 486, 492], "05": [20, 72, 73, 111, 160, 173, 174, 180, 181, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 478, 486], "2008": [20, 486], "glossari": [20, 486, 487], "subpackag": [20, 493, 497], "method1": [20, 495, 496], "method2": [20, 495, 496], "doctest_raw_input": [20, 191], "boundarycondit": [20, 21, 36, 85, 86, 188, 189, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 432, 442, 452, 457], "nthorderboundarycondit": [20, 36, 85], "offsetsparsematrix": 20, "petscmatrix": 20, "pysparsematrix": 20, "scipymatrix": 20, "sparsematrix": [20, 200, 276, 364, 378], "trilinosmatrix": 20, "abstractmesh": [20, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "vtkcelldataset": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "vtkfacedataset": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "__div__": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407], "__getstate__": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 256, 257, 258, 330, 331, 332, 400, 401, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__radd__": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407], "__sub__": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407], "__truediv__": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407], "aspect2d": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "cellfaceid": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "facesback": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "facesbottom": [20, 52, 57, 82, 83, 117, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "facesdown": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "facesfront": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "facesleft": [20, 36, 49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 67, 68, 74, 75, 77, 78, 81, 82, 83, 85, 94, 95, 111, 114, 117, 155, 181, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "facesup": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "meshadditionerror": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "__cause__": [20, 208, 223, 227, 252, 325, 359, 458], "__context__": [20, 208, 223, 227, 252, 325, 359, 458], "__delattr__": [20, 208, 223, 227, 252, 325, 359, 458], "__getattribute__": [20, 208, 223, 227, 252, 325, 359, 458], "__reduce__": [20, 208, 223, 227, 252, 325, 359, 458], "__setattr__": [20, 208, 223, 227, 252, 325, 359, 458], "__str__": [20, 208, 223, 227, 252, 253, 265, 295, 309, 322, 325, 328, 359, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458], "add_not": [20, 208, 223, 227, 252, 325, 359, 458], "with_traceback": [20, 208, 223, 227, 252, 325, 359, 458], "builder": [20, 230], "abstractgridbuild": 20, "grid1dbuild": [20, 230], "grid2dbuild": 20, "grid3dbuild": 20, "periodicgrid1dbuild": 20, "utilityclass": 20, "cylindricalgrid2d": [20, 59, 60, 222], "cylindricalnonuniformgrid1d": [20, 222], "__mul__": [20, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 364, 367, 368, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 398, 407], "__rmul__": [20, 218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 364, 367, 368, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 398, 407], "extrud": [20, 34, 156, 219, 223, 229, 231, 234, 240, 248], "cylindricaluniformgrid1d": [20, 222], "cylindricaluniformgrid2d": [20, 222], "sphericalgrid1d": [20, 222], "gmsh2din3dspac": [20, 34, 156, 190, 223], "gmshexcept": [20, 223], "gmshfile": [20, 223], "gmshgrid2d": [20, 223], "gmshgrid3d": [20, 102, 223], "mshfile": [20, 223], "makemapvari": [20, 223], "meshexporterror": [20, 223], "posfil": [20, 223], "gmshversion": [20, 223], "openmshfil": [20, 223], "openposfil": [20, 223], "nonuniformgrid2d": [20, 219, 222, 223, 229, 234, 240, 248], "nonuniformgrid3d": [20, 222], "periodicgrid1d": [20, 90], "periodicgrid2d": 20, "periodicgrid2dleftright": [20, 234], "periodicgrid2dtopbottom": [20, 234], "periodicgrid3dfrontback": [20, 235], "periodicgrid3dleftright": [20, 235], "periodicgrid3dleftrightfrontback": [20, 235], "periodicgrid3dleftrighttopbottom": [20, 235], "periodicgrid3dtopbottom": [20, 235], "periodicgrid3dtopbottomfrontback": [20, 235], "abstractrepresent": [20, 208, 249], "gridrepresent": [20, 230, 231, 232, 248, 250, 251], "meshrepresent": [20, 227, 228, 229], "physicalshap": [20, 240, 248], "sphericalnonuniformgrid1d": [20, 222], "sphericaluniformgrid1d": [20, 222], "topologi": [20, 207, 208, 227, 228, 229, 230, 231, 232, 248, 249, 250, 251, 488, 492], "abstracttopologi": [20, 208, 249], "gridtopologi": [20, 230, 231, 232, 250, 251], "meshtopologi": [20, 227, 228, 229, 248], "uniformgrid1d": [20, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 251, 368, 375, 376, 379, 383, 390, 391], "uniformgrid2d": [20, 221, 222, 368, 375, 376, 379, 383, 390, 391], "defaultasymmetricsolv": [20, 47, 52, 54, 56, 57, 61, 66, 108, 162, 175, 252], "dummysolv": [20, 176, 252, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "generalsolv": [20, 85, 137, 165, 166, 252], "serialsolvererror": [20, 252], "convergencebas": [20, 253], "tolerance_scal": [20, 253], "status_cod": [20, 253], "status_nam": [20, 253], "actual_cod": [20, 253, 265, 295, 309, 322, 328], "comm": 20, "parallelpetsccommwrapp": 20, "petsccommwrapp": [20, 256, 258], "serialpetsccommwrapp": 20, "default_iter": [20, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354], "default_precondition": [20, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354], "default_toler": [20, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354], "legacy_toler": [20, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 336, 337, 351, 352, 353, 354], "linearbicgsolv": 20, "linearcgssolv": [20, 63], "petscconverg": 20, "ksp_absolutetoleranceconverg": [20, 265], "ksp_breakdownbicgdiverg": [20, 265], "ksp_breakdowndiverg": [20, 265], "ksp_happybreakdownconverg": [20, 265], "ksp_indefinitematrixdiverg": [20, 265], "ksp_indefinitepreconditionerdiverg": [20, 265], "ksp_iteratingconverg": [20, 265], "ksp_iterationconverg": [20, 265], "ksp_iterationdiverg": [20, 265], "ksp_nanorinfdiverg": [20, 265], "ksp_nonsymmetricdiverg": [20, 265], "ksp_normalabsolutetoleranceconverg": [20, 265], "ksp_normalrelativetoleranceconverg": [20, 265], "ksp_nulldiverg": [20, 265], "ksp_preconditioningdiverg": [20, 265], "ksp_relativetoleranceconverg": [20, 265], "ksp_tolerancediverg": [20, 265], "petsckrylovsolv": [20, 260, 261, 262, 264], "petscsolv": [20, 259, 263, 266, 268, 269, 270, 271, 272, 273, 274, 275], "defaultprecondition": [20, 260, 261, 262, 264, 266, 268], "icprecondition": [20, 268, 338], "iluprecondition": [20, 268, 293, 318, 338], "jacobiprecondition": [20, 31, 268, 288, 289, 290, 292, 293, 299, 305, 318, 333, 338, 351], "luprecondition": [20, 268], "ssorprecondition": [20, 268, 303, 305], "petscprecondition": [20, 260, 261, 262, 264, 266, 268, 269, 270, 271, 272, 273, 275], "matrixmodifyingprecondition": [20, 276, 307, 321], "solvermodifyingprecondition": [20, 274, 276, 293, 350], "smoothedaggregationprecondition": [20, 278, 279, 282], "aggregationamgsolv": 20, "default_smooth": [20, 286, 287, 288, 289, 290, 292, 294], "classicalamgsolv": 20, "linearfgmressolv": 20, "amgprecondition": [20, 293], "aggregationamgprecondition": [20, 293], "bicgstabprecondition": [20, 293], "cgprecondition": [20, 293], "diluprecondition": [20, 293], "fgmresprecondition": [20, 293], "gaussseidelprecondition": [20, 293], "polynomialprecondition": [20, 293], "pyamgxprecondition": [20, 286, 287, 288, 289, 290, 292, 293, 294], "pyamgxsolv": [20, 286, 287, 288, 289, 290, 292, 293], "pyamgxconverg": 20, "pyamgx_breakdowndiverg": [20, 295], "pyamgx_converg": [20, 295], "pyamgx_iterationdiverg": [20, 295], "smoother": [20, 286, 287, 288, 289, 290, 292, 294, 338, 349, 352], "linearinitialsolv": [20, 299], "linearrhssolv": [20, 298, 303], "pysparseprecondition": [20, 298, 305, 306, 308], "pysparseconverg": 20, "pysparse_absolutetoleranceconverg": [20, 309], "pysparse_illconditioneddiverg": [20, 309], "pysparse_illconditionedpreconditionerdiverg": [20, 309], "pysparse_iterationdiverg": [20, 309], "pysparse_nonposdefpreconditioningdiverg": [20, 309], "pysparse_outofrangediverg": [20, 309], "pysparse_rhszeroconverg": [20, 309], "pysparse_relativetoleranceconverg": [20, 309], "pysparse_stagnateddiverg": [20, 309], "pysparsematrixsolv": [20, 310], "scipyprecondition": [20, 284, 318, 319, 320], "scipyconverg": 20, "scipy_breakdowndiverg": [20, 322], "scipy_converg": [20, 322], "scipy_iterationdiverg": [20, 322], "scipykrylovsolv": [20, 313, 314, 315, 317], "scipysolv": [20, 280, 284, 291, 316, 318, 319, 320, 321, 323], "breakdownwarn": [20, 325], "illconditionedpreconditionerwarn": [20, 325], "illegalinputorbreakdownwarn": [20, 325], "lossofprecisionwarn": [20, 325], "matrixillconditionedwarn": [20, 325], "maximumiterationwarn": [20, 325], "normalconverg": [20, 325], "parameterwarn": [20, 325], "preconditionernotpositivedefinitewarn": [20, 325], "preconditionerwarn": [20, 325], "scalarquantityoutofrangewarn": [20, 325], "solverconvergencewarn": [20, 325], "stagnatedsolverwarn": [20, 325], "aztecconverg": 20, "az_breakdowndiverg": [20, 328], "az_illconditioneddiverg": [20, 328], "az_iterationdiverg": [20, 328], "az_lossofaccuracyconverg": [20, 328], "az_normalconverg": [20, 328], "az_parameterdiverg": [20, 328], "epetracommwrapp": [20, 331, 332], "parallelepetracommwrapp": 20, "maxal": [20, 331], "minal": [20, 331], "serialepetracommwrapp": 20, "domdecompprecondition": [20, 338, 341], "multilevelddmlprecondition": [20, 338], "multilevelddprecondition": [20, 334, 335, 337, 338], "multilevelnssaprecondition": [20, 338], "multilevelsaprecondition": [20, 338], "multilevelsgsprecondition": [20, 334, 337, 338], "multilevelsolversmootherprecondition": [20, 338], "multilevelprecondition": [20, 338, 343, 344, 345, 347, 348, 349], "trilinosprecondition": [20, 338, 339, 340, 342, 346], "trilinosaztecoosolv": [20, 333, 334, 335, 337], "trilinosmltest": 20, "trilinosnonlinearsolv": 20, "trilinossolv": [20, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "stepper": 20, "l1error": [20, 355], "l2error": [20, 355], "linferror": [20, 355], "sweepmonoton": [20, 355], "pidstepp": 20, "pseudorkqsstepp": 20, "abstractbaseclasserror": [20, 359], "explicitvariableerror": [20, 359], "incorrectsolutionvari": [20, 359], "solutionvariablenumbererror": [20, 359], "solutionvariablerequirederror": [20, 359], "termmultiplyerror": [20, 359], "transienttermerror": [20, 359, 368, 375, 376, 379, 383, 390, 391], "vectorcoefferror": [20, 359, 368, 375, 376, 379, 383, 390, 391], "abstractbinaryterm": 20, "abstractconvectionterm": 20, "abstractdiffusionterm": 20, "abstractupwindconvectionterm": 20, "advectionterm": [20, 121, 122, 124, 126, 128, 137], "rhsvector": [20, 117, 355, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "__eq__": [20, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__hash__": [20, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__neg__": [20, 364, 367, 368, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 398, 407], "cachematrix": [20, 117, 180, 181, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "cacherhsvector": [20, 117, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "justresidualvector": [20, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "residualvectorandnorm": [20, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "asymmetricconvectionterm": 20, "binaryterm": 20, "centraldiffconvectionterm": 20, "centraldifferenceconvectionterm": [20, 180, 181, 368, 488], "coupledbinaryterm": 20, "diffusiontermcorrect": [20, 71], "explicitdiffusionterm": [20, 77, 78, 81, 161, 165, 166, 488], "explicitsourceterm": 20, "explicitupwindconvectionterm": [20, 368, 376, 379, 383, 390, 391, 488], "exponentialconvectionterm": [20, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 188, 488], "faceterm": 20, "firstorderadvectionterm": [20, 121, 122, 124, 126, 128, 364], "hybridconvectionterm": [20, 488], "nondiffusionterm": 20, "residualterm": 20, "sourceterm": [20, 381, 384], "unaryterm": 20, "upwindconvectionterm": [20, 488], "testfipi": 20, "doctestplu": 20, "execbutnotest": [20, 394], "report_skip": [20, 394], "testmod": [20, 394], "lateimporttest": 20, "deprecationerroringtestprogram": [20, 396], "finalize_opt": [20, 396], "initialize_opt": [20, 396], "testprogram": [20, 396], "serialcomm": [20, 71, 122, 124, 126, 128, 137, 222, 223, 398, 428], "parallelcomm": [20, 222, 223, 398, 414], "__abs__": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__array_wrap__": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__bool__": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__float__": [20, 398, 407], "__ge__": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__getitem__": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__gt__": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__le__": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__lt__": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__mod__": [20, 398, 407], "__ne__": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__nonzero__": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__pow__": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__setitem__": [20, 398, 407], "allclos": [20, 32, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 148, 149, 150, 155, 161, 162, 163, 165, 166, 169, 170, 171, 175, 176, 177, 180, 188, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 378, 388, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "allequ": [20, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "arcco": [20, 398, 407], "arccosh": [20, 398, 407], "arcsin": [20, 72, 73, 398, 407], "arctan": [20, 160, 161, 173, 174, 398, 407], "arctan2": [20, 160, 161, 173, 174, 398, 407], "arctanh": [20, 398, 407], "ceil": [20, 398, 407], "conjug": [20, 82, 83, 261, 293, 298, 303, 398, 407, 488], "converttounit": [20, 398, 407], "co": [20, 39, 71, 72, 73, 140, 398, 407, 459, 462, 471, 472], "cosh": [20, 111, 398, 407], "floor": [20, 398, 407], "getsctyp": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "inbaseunit": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "indimensionless": [20, 398, 407], "inradian": [20, 398, 407], "insiunit": [20, 398, 407], "inunitsof": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "itemset": [20, 398, 407], "log10": [20, 398, 407], "numericvalu": [20, 398, 407], "sin": [20, 71, 81, 140, 189, 398, 407, 459, 462, 464, 465, 466, 468, 469, 471, 472, 488], "sinh": [20, 398, 407], "sum": [20, 71, 148, 149, 150, 222, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "tan": [20, 160, 161, 173, 174, 398, 407, 412], "tanh": [20, 112, 176, 398, 407], "tostr": [20, 398, 407, 412], "commwrapp": [20, 222, 223, 257, 330, 398, 401, 408, 414], "dummycomm": [20, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 234, 235, 241, 242, 250, 251, 398, 408, 414], "decor": 20, "dictwithdefault": 20, "numberdict": 20, "physicalunit": [20, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__rdiv__": [20, 407], "__rtruediv__": [20, 407], "conversionfactorto": [20, 407], "conversiontupleto": [20, 407], "isangl": [20, 407], "iscompat": [20, 407], "isdimensionless": [20, 407], "isdimensionlessorangl": [20, 407], "isinverseangl": [20, 407], "setnam": [20, 407], "conda_info": [20, 411], "package_info": [20, 411], "platform_info": [20, 411], "l1norm": [20, 355, 412], "l2norm": [20, 412], "linfnorm": [20, 412], "getshap": [20, 412], "getunit": [20, 412], "isclos": [20, 412], "nearest": [20, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "sqrtdot": [20, 412], "parser": [20, 137, 155, 165], "pars": [20, 137, 155, 165, 223, 413, 473], "sharedtempfil": 20, "prune": [20, 416], "putadd": [20, 416], "arithmeticcelltofacevari": 20, "betanoisevari": 20, "__and__": [20, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__call__": [20, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__new__": [20, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__or__": [20, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__setstate__": [20, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "cellvolumeaverag": [20, 39, 40, 71, 162, 163, 180, 181, 223, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "constraintmask": [20, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "gaussgrad": [20, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "harmonicfacevalu": [20, 108, 109, 110, 111, 113, 162, 163, 175, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "leastsquaresgrad": [20, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "minmodfacevalu": [20, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "rdot": [20, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "scrambl": [20, 421, 429, 433, 435, 449, 456], "std": [20, 223, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "binaryoperatorvari": [20, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "celltofacevari": 20, "constant": [20, 31, 32, 50, 56, 57, 60, 68, 81, 110, 137, 138, 143, 162, 163, 175, 189, 221, 251, 394, 407, 412, 488], "coupledcellvari": 20, "calcdistancefunct": [20, 122, 124, 126, 127, 128, 129, 137, 140, 141, 150, 428], "cellinterfacearea": [20, 148, 428], "extendvari": [20, 137, 149, 428], "exponentialnoisevari": 20, "facegradcontributionsvari": 20, "facegradvari": [20, 117], "gammanoisevari": 20, "gausscellgradvari": 20, "gaussiannoisevari": [20, 31, 32, 33, 34], "harmoniccelltofacevari": 20, "histogramvari": [20, 421, 429, 433, 435, 456], "interfaceareavari": 20, "interfaceflagvari": 20, "leastsquarescellgradvari": 20, "levelsetdiffusionvari": 20, "meshvari": [20, 189, 223, 368, 375, 376, 379, 383, 390, 391, 412, 421, 424, 428, 429, 432, 433, 435, 437, 448, 449, 451, 452, 453, 456, 460, 468, 469, 478, 480, 482, 483, 484], "minmodcelltofacevari": 20, "modcellgradvari": 20, "modcelltofacevari": 20, "modfacegradvari": 20, "modphysicalfield": 20, "modularvari": [20, 165, 166, 173, 174], "facegradnomod": [20, 165, 166, 173, 174, 448], "operatorvari": 20, "scharfettergummelfacevari": 20, "surfactantconvectionvari": 20, "surfactantvari": [20, 137, 148, 149, 150], "interfacevar": [20, 133, 137, 149, 453], "unaryoperatorvari": [20, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "uniformnoisevari": 20, "dummyview": [20, 458], "plotmesh": [20, 72, 73, 140, 141, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "setlimit": [20, 140, 141, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "meshdimensionerror": [20, 458], "abstractmatplotlib2dview": [20, 463, 464, 465, 466, 468, 469], "cmap": [20, 140, 160, 173, 174, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469], "fig": [20, 140, 173, 174, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469], "abstractmatplotlibview": [20, 140, 460, 462], "matplotlib1dview": 20, "matplotlib2dcontourview": 20, "matplotlib2dgridcontourview": 20, "matplotlibsparsematrixview": 20, "matplotlibstreamview": 20, "kwarg": [20, 218, 219, 220, 221, 233, 234, 235, 240, 241, 242, 253, 265, 286, 287, 288, 289, 290, 292, 293, 294, 295, 309, 322, 328, 355, 403, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 468, 473], "mayaviview": 20, "fp": [20, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 462, 464, 465, 466, 468, 469, 471, 472], "mayavidaemon": [20, 34, 471, 472], "parse_command_lin": [20, 473], "setup_sourc": [20, 473], "update_pipelin": [20, 473], "view_data": [20, 473], "testinteract": 20, "abstractview": [20, 141, 458, 461, 471, 472, 475, 478, 479, 484], "vtkcellview": [20, 480], "vtkfaceview": [20, 480], "tanh1d": 20, "explicitupwind": 20, "implicitupwind": 20, "vanleerupwind": 20, "cylindricalmesh1d": 20, "cylindricalmesh1dnonuniform": 20, "exponential1dback": 20, "exponential2d": 20, "cylindricalmesh2d": 20, "cylindricalmesh2dnonuniform": 20, "peclet": 20, "powerlaw1d": 20, "mesh20x20coupl": 20, "input4thorder_lin": 20, "inputperiod": 20, "tri2dinput": 20, "gmshinput": 20, "isotropi": 20, "modifiedmeshinput": 20, "orthoerror": 20, "mesh50x50": 20, "othermesh": 20, "prism": [20, 232], "mesh1ddimension": 20, "phasediffus": 20, "poisson": [20, 75, 106, 111], "interior": [20, 93, 161], "squar": [20, 45, 46, 47, 78, 82, 117, 176, 177, 223, 261, 298, 398, 407, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "adsorbingsurfactantequ": [20, 137], "adsorpt": [20, 137, 138], "gapfilldistancevari": 20, "gapfillmesh": 20, "matplotlibsurfactantview": [20, 137], "mayavisurfactantview": [20, 137], "metaliondiffusionequ": [20, 137], "surfactantbulkdiffusionequ": [20, 137], "trenchmesh": 20, "expandingcircl": 20, "gmshrefin": 20, "inputgrid2d": 20, "anisotropyold": 20, "missorient": 20, "modcircl": 20, "riemann": 20, "acoust": 20, "customiz": 21, "poli": 21, "deposit": [21, 137, 138, 143], "unusu": 21, "philosophi": 21, "algorithm": [21, 117, 177, 357, 492], "deform": 21, "tractabl": 21, "li": [21, 492], "encapsul": [21, 143, 208, 256, 257, 330, 331, 400, 488, 495], "tight": 21, "extend": [21, 162, 163, 428, 492], "reus": [21, 165], "overridden": [21, 396], "categori": [21, 248], "lower": [21, 162, 163, 432, 451, 452, 458], "aim": [21, 488], "tier": 21, "reassur": 21, "breakag": 21, "aid": 21, "dissemin": 21, "year": [21, 189, 190, 356], "movement": [21, 176], "matter": [21, 31, 32], "furthermor": 21, "broadli": 21, "lump": 21, "human": [21, 398, 407], "readabl": [21, 190, 398, 407, 424, 432, 442, 448, 449, 451, 457], "provok": 21, "real": [21, 160, 173, 174, 412], "low": [21, 488, 491], "closer": 21, "programm": 21, "awai": [21, 117, 428], "extern": 21, "acol": 21, "brow": 21, "malloc": 21, "sizeof": 21, "bcol": 21, "arow": 21, "worri": [21, 189], "needn": 21, "paramount": 21, "concern": [21, 325], "scenario": 21, "draft": 21, "hundr": 21, "recompil": 21, "relink": 21, "eventu": [21, 136, 143, 161], "imposs": 21, "rememb": [21, 435], "scientist": [21, 191, 485], "begun": 21, "expertis": 21, "spent": 21, "contrast": [21, 31, 32], "tcl": 21, "java": 21, "rubi": 21, "vener": 21, "immedi": [21, 138], "someon": 21, "fledg": 21, "ground": 21, "runtim": 21, "unquestion": 21, "proport": [21, 137, 160, 173, 174, 356], "month": 21, "diagnos": 21, "critic": [21, 31, 32], "palat": 21, "acknowledg": 21, "remark": [21, 489], "usabl": 21, "mathematician": 21, "scientificpython": [21, 407, 485], "easili": [21, 81, 113, 175, 485], "blitz": 21, "pyrex": [21, 485], "brief": [21, 394], "terminologi": 21, "assign": [21, 81, 396, 398, 407, 496], "lazi": [21, 418], "elimin": [21, 74, 81, 180], "entiti": 21, "beyond": 21, "bound": [21, 189], "vertic": [21, 72, 73, 117, 219, 222, 227, 228, 229, 231, 232, 234, 235, 240, 248, 251, 412, 459, 463, 464, 465, 466, 488], "_sparsematrix": [21, 355, 467], "invert": 21, "fashion": 21, "footnot": [21, 162, 163], "neglect": [21, 162, 163], "byte": 21, "prefix": [22, 81, 398, 407, 414], "ld_library_path": 22, "colon": 22, "search": [22, 189, 458, 459, 480], "elf": 22, "dyld_library_path": 22, "linker": 22, "phenomenon": [31, 32, 34], "spontan": [31, 32, 176], "mixtur": [31, 32, 81], "region": [31, 32, 127, 128, 135, 137, 150, 160, 161, 165, 173, 174, 176, 177, 463, 464], "spin": [31, 32], "barrierless": [31, 32], "fluctuat": [31, 32, 33, 34, 160, 173, 174], "grow": [31, 32, 160, 173, 174], "exce": [31, 32], "surviv": [31, 32], "ginsberg": [31, 32, 160, 173, 174], "landau": [31, 32, 160, 173, 174], "hohenberg": [31, 32, 160, 173, 174], "halperin": [31, 32, 160, 173, 174], "epsilon": [31, 32, 33, 34, 36, 75, 106, 112, 114, 165, 166, 169, 170, 171, 173, 174, 180, 181], "possibli": [31, 32, 400, 458], "composit": [31, 32, 135, 162, 163], "doubl": [31, 32, 106, 175, 176], "energi": [31, 32, 36, 106, 112, 162, 163, 175, 176, 180, 181, 338, 345, 492], "penal": [31, 32], "abrupt": [31, 32], "smooth": [31, 32, 137, 140, 141, 160, 173, 174, 338, 344, 345, 347, 348], "transit": [31, 32, 135, 492], "weight": [31, 32, 162, 163, 165, 195, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 469, 488, 490], "augment": [31, 32, 412], "__name__": [31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 394, 421, 429, 433, 435, 456], "__main__": [31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 188, 394, 396, 397, 421, 429, 433, 435, 456], "ny": [31, 32, 33, 40, 52, 57, 61, 62, 78, 80, 82, 83, 94, 100, 102, 110, 117, 121, 124, 126, 137, 140, 141, 155, 160, 161, 165, 173, 174, 177, 181, 188, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 368, 375, 376, 378, 379, 383, 390, 391, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 464, 465, 466, 468, 469, 471, 472, 478], "500": [31, 85, 111, 160, 161, 469], "els": [31, 32, 33, 34, 36, 39, 40, 67, 78, 85, 110, 111, 117, 137, 160, 162, 163, 173, 174, 176, 180, 181, 394, 473], "dy": [31, 32, 33, 40, 52, 57, 78, 80, 82, 83, 102, 110, 117, 121, 124, 126, 127, 129, 137, 140, 141, 155, 160, 161, 165, 173, 174, 177, 181, 189, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 368, 375, 376, 378, 379, 383, 390, 391, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 459, 464, 465, 466, 468, 469, 471, 472, 478], "varianc": [31, 32, 33, 34, 435], "__mainy__": 31, "microstructur": [31, 32, 33, 34, 492], "exponenti": [31, 32, 33, 34, 136, 376, 407, 429, 491], "dexp": [31, 32, 33, 34, 36], "durat": [31, 32, 33, 34], "exp": [31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 137, 138, 162, 163, 165, 166, 173, 174, 188, 189, 190, 429, 433, 435, 491], "__mainys__": 31, "elif": 31, "formul": [32, 74, 491], "enorm": [32, 81], "amount": [32, 240], "psi": [32, 75, 114, 160, 161, 173, 174, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "nois": [32, 160, 173, 174, 180, 421, 429, 433, 435, 449, 456], "taylor": [32, 176, 492], "expans": [32, 149, 176], "phi_": [32, 176, 364, 388, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "dfdphi": 32, "dfdphi_": 32, "d2fdphi2": 32, "eq1": [32, 47, 74], "eq2": [32, 47], "eq3": 32, "press": [32, 63, 68, 72, 73, 75, 81, 82, 83, 90, 111, 114, 162, 163, 176, 180, 492], "elementshap": [32, 74, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "v0": [32, 74, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "impcoeff": 32, "cube": 33, "nz": [33, 59, 60, 102, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 471, 472, 485], "dz": [33, 59, 60, 102, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 471, 472], "vesicl": 34, "youtub": 34, "watch": 34, "kdsfp67_zse": 34, "cellsiz": [34, 72, 73, 95, 137, 138, 143, 156, 223], "t1": [34, 156], "pi": [34, 39, 71, 156, 160, 161, 165, 166, 171, 173, 174, 398, 407, 428, 435, 448, 459, 462, 471, 472], "duplicata": [34, 156], "t2": [34, 156], "t3": [34, 156], "t4": [34, 156], "t5": [34, 156], "t6": [34, 156], "t7": [34, 156], "outer": [34, 156, 162, 163, 223], "overlap": [34, 208, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 488], "extrudefunc": [34, 156, 219, 223, 229, 231, 234, 240, 248], "lambda": [34, 156, 219, 223, 229, 231, 234, 240, 248], "daemon_fil": [34, 471, 472], "xmin": [34, 117, 140, 141, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "zmax": [34, 140, 141, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "asq": 36, "facevar": 36, "freeenergydoublederiv": 36, "diffterm2": 36, "diffterm4": 36, "eqch": 36, "solver_suit": [36, 85], "builtin": [36, 39, 40, 47, 63, 71, 72, 73, 74, 77, 78, 80, 81, 82, 83, 108, 109, 110, 111, 112, 113, 117, 121, 122, 124, 133, 137, 140, 148, 149, 150, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 223, 331, 388, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 464, 465, 466, 468, 469, 471, 472], "maxarg": 36, "argmax": 36, "atol": [36, 39, 40, 47, 49, 50, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 75, 77, 78, 81, 82, 83, 86, 94, 95, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 121, 124, 127, 162, 163, 165, 175, 176, 177, 188, 253, 364, 378, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__future__": [39, 40], "param": [39, 40], "kmvar": [39, 40], "km": [39, 40, 398, 407], "kcvar": [39, 40], "kc": [39, 40], "tmvar": [39, 40], "tcvar": [39, 40], "tc": [39, 40], "p3var": [39, 40], "p3": [39, 40], "p2var": [39, 40], "p2": [39, 40], "rvar": [39, 40], "pn": [39, 40], "kmsccoeff": [39, 40], "chik": [39, 40], "kmspcoeff": [39, 40], "lambdak": [39, 40], "kappak": [39, 40], "kmeq": [39, 40], "tmsccoeff": [39, 40], "chit": [39, 40], "tmspcoeff": [39, 40], "lambdat": [39, 40], "zetat": [39, 40], "tmeq": [39, 40], "tcsccoeff": [39, 40], "tcspcoeff": [39, 40], "lambdatstar": [39, 40], "tceq": [39, 40], "pip2pitp": [39, 40], "kappam": [39, 40], "kappac": [39, 40], "zetapitp": [39, 40], "p3spcoeff": [39, 40], "lambda3": [39, 40], "zeta3t": [39, 40], "p3sccoeff": [39, 40], "chi3": [39, 40], "kappa3": [39, 40], "zeta3pitp": [39, 40], "zeta3": [39, 40], "p3eq": [39, 40], "p2sccoeff": [39, 40], "sccoeff": [39, 40], "chi2": [39, 40], "p2spcoeff": [39, 40], "lambda2": [39, 40], "zeta2t": [39, 40], "p2eq": [39, 40], "kcsccoeff": [39, 40], "alphakstar": [39, 40], "kcspcoeff": [39, 40], "lambdakstar": [39, 40], "kappakstar": [39, 40], "kceq": [39, 40], "pnview": [39, 40], "kmview": [39, 40], "tmview": [39, 40], "naem": [39, 40], "kmviewer": [39, 40], "stimulu": 39, "pnviewer": 40, "tmviewer": 40, "puls": [45, 46], "gre": [47, 492], "ac": [47, 485, 492], "uk": [47, 492], "physica": 47, "phy2": 47, "node173": 47, "htm": 47, "wave": [47, 74], "van": [47, 180, 492], "leer": 47, "twice": 47, "wrap": [47, 249, 448], "var2": [47, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 478], "lost": 47, "annulu": [49, 50, 59, 60], "r0": [49, 50, 59, 60], "r1": [49, 50, 59, 60, 124], "nr": [49, 50, 59, 60, 222], "dr": [49, 50, 59, 60, 222], "valueleft": [49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 77, 78, 80, 81, 90, 91, 94, 95, 97, 99, 100, 102, 188], "valueright": [49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 78, 80, 81, 90, 91, 94, 95, 97, 99, 100, 102, 188], "impos": [49, 50, 51, 56, 59, 60, 85, 121, 148, 188, 193, 195, 196, 197, 364], "r_0": [49, 50, 59, 60, 149], "r_1": [49, 50, 59, 60], "drawback": [49, 50, 51, 59, 60, 188], "ei": [49, 50, 59, 60], "expi": [49, 50, 59, 60], "aa": [49, 50, 56, 57, 59, 60, 126, 127, 129, 364], "bb": [49, 50, 56, 57, 59, 60, 126, 127, 129], "analyticalarrai": [49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 77, 91, 94, 95, 97, 99, 100, 102, 112, 114, 176, 188], "rratio": [50, 60], "arang": [50, 60, 111, 124, 173, 174, 364, 378, 416, 421, 428, 429, 433, 435, 462, 468, 469, 471, 472], "imath": 51, "u_x": [51, 56, 181, 188], "dd": [51, 52, 54, 56, 57, 61, 62, 63, 65, 66, 188], "valuebottom": [52, 57], "valuetop": [52, 57], "rtol": [52, 54, 56, 61, 62, 63, 65, 66, 67, 75, 80, 81, 85, 90, 97, 99, 105, 108, 109, 110, 111, 112, 113, 114, 133, 137, 165, 175, 176, 188, 253, 265, 309, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "s_0": [56, 176, 488], "sourcecoeff": [56, 57, 165, 166], "s_c": 57, "pseudo": [59, 60], "allcloselist": 63, "str": [63, 111, 140, 141, 208, 223, 227, 252, 253, 265, 295, 309, 322, 325, 328, 359, 394, 398, 403, 407, 408, 411, 412, 413, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 473, 475, 478, 479, 480, 482, 483, 484], "1e4": 63, "arg0": 63, "arg1": [63, 495, 496], "append": [63, 191, 223, 408, 413], "2000": [66, 165, 188, 278, 279, 282], "4d": 67, "precaut": 67, "convectioncoeff": [67, 108, 109, 110, 111, 113, 175, 188], "canalyt": 67, "c_": [67, 75, 106, 112, 114, 133, 137, 143, 162, 163, 175], "restol": 67, "anstol": 67, "alpha": [68, 81, 137, 143, 160, 161, 165, 166, 169, 170, 171, 173, 174, 189, 421, 433], "outflow": 68, "artifici": 68, "unitari": 68, "5000": [68, 469], "phi0": [68, 388], "fake": 68, "pmatrix": 71, "theta": [71, 133, 136, 137, 143, 148, 149, 160, 161, 165, 166, 169, 170, 171, 173, 174, 488], "q": [71, 138, 173, 174, 177, 184, 318, 319, 320, 492], "00": 71, "mass": [71, 117, 162, 163, 180], "previous": [71, 136, 138, 143, 180, 223, 428], "splitext": [71, 161, 165, 166, 169, 170, 171], "__file__": [71, 137, 161, 165, 166, 169, 170, 171], "argmin": [71, 124], "rotationmatrix": 71, "gamma_prim": 71, "001": [71, 111, 407], "cellvolum": [71, 117, 148, 149, 155, 218, 223, 241, 435], "00025": 71, "triangl": [72, 248], "edg": [72, 73, 117], "plane": [72, 73, 95, 223], "timestepdur": [72, 73, 77, 78, 80, 81, 82, 83, 121, 122, 124, 148, 149, 150, 161, 165, 166, 169, 170, 171], "mytsv": [72, 73], "tsv": [72, 73, 111, 458], "variable_grad_x": [72, 73], "variable_grad_i": [72, 73], "975559734792414": [72, 73], "0755414402612554": [72, 73], "964844363287199": [72, 73], "229687917881182": [72, 73], "00757854476106331": [72, 73], "0442864953037566": [72, 73], "79191893162384": [72, 73], "0375859836421991": [72, 73], "773936613923853": [72, 73], "205560697612547": [72, 73], "0246775505084069": [72, 73], "771959648896982": [72, 73], "020853932412869": [72, 73], "723540342405813": [72, 73], "182589694334729": [72, 73], "223345558247991": [72, 73], "807931073108895": [72, 73], "203035857140125": [72, 73], "777466238738658": [72, 73], "0401235242511506": [72, 73], "00726763301939488": [72, 73], "775978916110686": [72, 73], "00412895434496877": [72, 73], "650055516507232": [72, 73], "183112882869288": [72, 73], "0220279064527904": [72, 73], "187563765977912": [72, 73], "012771874945585": [72, 73], "35707168379437": [72, 73], "056072788439713": [72, 73], "111223320911545": [72, 73], "679586798311355": [72, 73], "0911595298310758": [72, 73], "613455176718145": [72, 73], "0256182541329463": [72, 73], "78996770899909": [72, 73], "0173672729866294": [72, 73], "693887874335319": [72, 73], "00671109050419": [72, 73], "127611490372511": [72, 73], "703545986179876": [72, 73], "435813500559859": [72, 73], "635004192597412": [72, 73], "896203033957194": [72, 73], "00855563518923689": [72, 73], "888641841567831": [72, 73], "408558914368324": [72, 73], "877939107374768": [72, 73], "32195762184087": [72, 73], "22696791637322": [72, 73], "38212257821916": [72, 73], "51732949653553": [72, 73], "292889724306196": [72, 73], "854466141879776": [72, 73], "199715815696975": [72, 73], "359068256998365": [72, 73], "757882581524374": [72, 73], "323541041763627": [72, 73], "870534227755687": [72, 73], "0792631912863636": [72, 73], "459673905457569": [72, 73], "701526587772079": [72, 73], "417577664032421": [72, 73], "725460726303266": [72, 73], "119132299176163": [72, 73], "338256179134518": [72, 73], "523565732643067": [72, 73], "254030052182524": [72, 73], "923505840608445": [72, 73], "192224240688976": [72, 73], "87498754712638": [72, 73], "174119064688993": [72, 73], "836057900916614": [72, 73], "11590500805745": [72, 73], "211010116496191": [72, 73], "484106960369249": [72, 73], "0705987421869745": [72, 73], "319827850867342": [72, 73], "867894407968447": [72, 73], "051246727010685": [72, 73], "0221203060940465": [72, 73], "216026820080053": [72, 73], "0152729438559779": [72, 73], "341246696530392": [72, 73], "0538476142281317": [72, 73], "complic": [72, 73, 143], "horizont": [72, 73, 219, 222, 231, 234, 235, 240, 248, 251, 412], "phianalyt": [72, 73, 81], "x0": [72, 73, 162, 163], "erf": [72, 73, 77, 78, 81], "ticket": [72, 73, 364, 367, 368, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391, 408], "325": [72, 73], "7e": [72, 73, 81, 121, 162, 163, 176], "equal": [72, 73, 155, 162, 163, 175, 180, 248, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 488, 490], "quadrangl": 73, "recombin": 73, "035": 73, "biharmon": 74, "v_0": 74, "v_1": 74, "cross": [74, 428], "v1": [74, 126, 127, 129, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "eq0": 74, "vi": 74, "res0": 74, "res1": 74, "1e100": 74, "uncoupl": 74, "advantag": [74, 162, 163, 175, 189, 191, 488, 495], "simultan": [74, 160, 163, 173, 174, 475], "dictat": 74, "speci": [74, 106, 108, 111, 112, 113, 114, 137, 162, 163, 175, 489], "obvious": 74, "permitt": [75, 111, 114], "c_j": [75, 106, 108, 112, 114, 175], "th": [75, 108, 114], "valenc": [75, 106, 108, 109, 110, 111, 113, 114], "z_j": [75, 106, 114], "z_": [75, 106, 114], "electron": [75, 106, 111, 114, 175], "charg": [75, 106, 111, 114, 137, 138, 143], "densiti": [75, 81, 114, 136, 137, 138, 143, 162, 163, 175, 180, 181, 223, 453, 468, 492], "admit": [75, 114], "2x": [75, 114], "2e": [75, 77, 81, 108, 113, 114, 162, 163, 176], "next": [75, 81, 111, 114, 149, 412], "le": [75, 81, 113, 114, 124, 127, 129, 137, 166, 169, 170, 171, 173, 174, 175, 176, 177, 364, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "verifi": [75, 108, 109, 110, 112, 114, 162, 163, 180, 388], "attain": [75, 112, 114, 180], "initialvalu": 77, "epsi": 77, "triangular": [78, 95, 97, 102, 248], "gridmesh": 78, "trimesh": [78, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "othergridmesh": 78, "bigmesh": 78, "semi": [78, 81, 165, 166, 175, 176, 223], "late": [78, 396], "straight": [78, 81], "varanalyt": 78, "explicitdiffusionequ": 80, "assembl": [81, 176, 188], "uniti": [81, 490], "somefac": 81, "ever": [81, 189, 496], "differenc": [81, 368, 421, 424, 428, 429, 433, 435, 437, 449, 453, 456, 491], "phi_new": 81, "phi_old": 81, "eqx": 81, "delta": [81, 106, 112, 138, 143, 160, 162, 163, 173, 174, 176, 180, 388, 435, 488], "accomplish": 81, "tester": 81, "eqi": 81, "rerun": [81, 110], "crank": [81, 488], "nicholson": 81, "eqcn": 81, "drive": 81, "3e": [81, 111, 113, 137, 160, 161, 173, 174, 175, 180, 181], "omit": [81, 138, 176, 496], "del": [81, 140, 141, 432, 442, 451, 452, 457], "faceconstraint": 81, "lie": [81, 478, 488], "n_i": 81, "satisfi": [81, 117, 253, 428, 490, 491], "satisfactori": 81, "fluxright": 81, "9l": 81, "And": [81, 111, 117, 398, 407], "transfer": [81, 137, 138, 143, 492], "_p": [81, 117, 364, 378, 488], "capac": 81, "phit": 81, "phif": 81, "relev": [81, 223], "alpha_fals": 81, "eqf": 81, "eqt": 81, "forward": 81, "told": [81, 188], "d_0": 81, "d0": 81, "exit": [81, 396, 397], "criteria": [81, 265, 309], "balanc": 81, "art": [81, 492], "pitfal": 81, "dissip": [81, 180], "uniformli": 81, "vmatrix": 81, "1em": 81, "ddot": 81, "vdot": 81, "legitim": 81, "1e6": [81, 137], "myexampl": 81, "valuetopleft": [82, 83], "valuebottomright": [82, 83], "corner": [82, 83, 110, 117, 165, 223, 248], "facestopleft": [82, 83], "facesbottomright": [82, 83], "alpha_1": 85, "alpha_2": 85, "alpha_3": 85, "alpha_4": 85, "alpha1": 85, "alpha2": 85, "alpha3": 85, "alpha4": 85, "total": [86, 106, 175, 248, 398, 407, 412], "initialarrai": [90, 121, 189], "gather": 91, "errorvar": 95, "nonorthovar": 95, "_nonorthogon": 95, "errorview": 95, "noview": 95, "rm": 96, "xface": 102, "000000000000001": 102, "027": 102, "mesh2x1": 105, "paper": 106, "m_": [106, 112, 162, 163, 175, 176], "overbrac": [106, 175], "mu_j": [106, 175], "circ": [106, 112, 175], "w_j": [106, 175], "dielectr": 106, "ldot": [106, 175, 488], "d_": [106, 108, 117, 137, 143, 162, 163, 175, 364, 373, 378, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "substack": [106, 108, 175], "c_k": [106, 108, 175], "c_i": [106, 108, 138, 175], "c_n": [106, 175], "mu_": [106, 112], "jn": [106, 112], "w_": [106, 112], "electromigr": [106, 110, 111, 113], "electrod": [106, 112, 137], "electrolyt": [106, 112, 136, 137, 138], "barrier": [106, 108, 109, 110, 111, 112, 113, 114, 162, 163, 175, 176, 398, 414], "solvent": [106, 108, 109, 110, 111, 112, 113, 175], "unresolv": 106, "stiff": 106, "intract": 106, "jj": 108, "summat": [108, 488], "exclud": [108, 160], "ternari": [108, 109, 110, 113], "componentvari": [108, 109, 110, 111, 112, 113, 114], "standardpotenti": [108, 109, 110, 111, 112, 113, 114, 175], "__class__": [108, 109, 110, 111, 112, 113, 114], "cn": [108, 109, 110, 112, 113, 175], "c1": [108, 109, 110, 113, 175, 432, 442, 451, 452, 457], "c2": [108, 109, 110, 113, 175], "interstiti": [108, 109, 110, 111, 112, 113, 114, 175], "regim": [108, 109, 110, 112, 133], "cj": [108, 109, 110, 111, 113, 114, 175], "cksum": [108, 109, 110, 111, 113, 175], "ckfacesum": [108, 109, 110, 111, 113], "ck": [108, 109, 110, 111, 113, 175], "3200": 108, "h82b89f7_0": 108, "ceas": 108, "ok": [108, 357], "tsupport": 109, "incomplet": [109, 268, 270, 338, 340], "tit": 109, "mm": [109, 126, 127, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "mol": [109, 111, 138, 143, 162, 163, 175, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "pprime": [110, 111, 113, 162, 163, 175], "gprime": [110, 111, 113, 162, 163, 175], "counterdiffus": [110, 111, 113, 175], "phasetransform": [110, 111, 113, 175], "tol": 110, "input1dphasebinari": 111, "elphf0214": 111, "rt": 111, "nav": [111, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "kb": [111, 407], "molarvolum": [111, 137, 138, 143], "80000006366754e": 111, "faradai": [111, 137, 138, 143], "nm": 111, "1200": 111, "gradientenergi": [111, 112, 113, 175], "6e": [111, 137], "h2o": 111, "cnstandardpotenti": 111, "34139": 111, "7265625": 111, "cnbarrier": 111, "6e5": 111, "cnvalenc": 111, "so4": 111, "24276": 111, "6640625": 111, "000010414586295976": 111, "cu": 111, "7231": 111, "81396484375": 111, "5553718417909": 111, "33225": 111, "9453125": 111, "110723815414": 111, "78": 111, "eps0": [111, 407], "permittivityprim": [111, 112, 113], "rich": [111, 113, 175], "000111111503177394": 111, "249944439430068": 111, "249999982581341": 111, "input1d": 111, "setscal": 111, "enthalpi": [111, 112, 113, 162, 163, 175, 176], "mxi": [111, 112, 113, 189], "dmxidxi": [111, 112, 113], "s1": [111, 112, 113, 162, 163, 175, 176, 189], "s0": [111, 112, 113, 162, 163, 175, 176, 189], "phaseview": [111, 161, 165, 166], "concview": 111, "ylog": [111, 462], "potentialview": 111, "residualview": 111, "maxerror": 111, "safeti": [111, 357], "errcon": [111, 357], "89e": 111, "desiredtimestep": 111, "thistimestep": 111, "raw_input": [111, 191], "succeed": 111, "floatingpointerror": 111, "underflow": 111, "rearrang": [112, 189], "mu_n": [112, 175], "w_n": [112, 175], "inf": [112, 265], "equilibr": [112, 176], "thick": [112, 176], "2w_n": 112, "makeequ": 113, "c_1": 113, "recreat": 113, "c3": 113, "reiniti": [113, 137], "c_2": 113, "c_3": 113, "malengi": 117, "bm": 117, "cage": 117, "ugent": 117, "rework": 117, "colloc": 117, "pressur": [117, 180, 492], "viscos": [117, 180, 181], "momentum": [117, 180], "ferzig": [117, 492], "peric": 117, "rossow": [117, 492], "extrapol": 117, "dolfyn": 117, "frequenc": 117, "band": [117, 488], "ident": [117, 161, 162, 163, 407, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "dl": [117, 121, 162, 163, 165, 407], "relax": [117, 176, 180, 181, 301, 303, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "pressurerelax": 117, "velocityrelax": 117, "pressurecorrect": 117, "xveloc": 117, "yveloc": 117, "decoupl": [117, 180], "xvelocityeq": 117, "yvelocityeq": 117, "guess": 117, "ast": 117, "That": 117, "a_p": [117, 488], "a_a": [117, 491], "_a": [117, 488], "v_p": [117, 381, 388, 421, 424, 428, 429, 432, 433, 435, 437, 448, 449, 451, 452, 453, 456, 488], "somehow": 117, "ap": [117, 364, 373, 378, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "_facearea": [117, 180, 181], "_celldist": [117, 180, 181, 233, 234, 235], "pressurecorrectioneq": 117, "stagger": 117, "coloc": 117, "oscil": 117, "diamond": 117, "_l": 117, "_r": 117, "mathrm": 117, "avg": 117, "adjac": [117, 180, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456, 488], "expand": [117, 149, 162, 163], "arriv": 117, "formula": [117, 364, 378, 398, 407], "unphys": 117, "_facegradvari": 117, "contrvolum": 117, "slip": 117, "xmax": [117, 140, 141, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "ymin": [117, 140, 141, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "ymax": [117, 140, 141, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "underrelax": [117, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "star": 117, "xre": 117, "xmat": 117, "yre": 117, "asarrai": [117, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "takediagon": [117, 180, 181], "presgrad": 117, "facepresgrad": 117, "790867927": 117, "265072740929": 117, "150290488304": 117, "cfl": [121, 124, 137, 149, 162, 163, 180, 181], "distancetotravel": [121, 148], "adveqn": [121, 122, 124], "distancetravel": [121, 122], "1001": 121, "02e": 121, "interfaceposit": 122, "advectionequ": [122, 137, 148, 149, 150], "l_y": 124, "l_x": [124, 166], "r2": 124, "len": [124, 140, 141, 155, 218, 230, 241, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "logical_and": 124, "ravel": 124, "distancemov": 124, "m1": [126, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "evalcel": [126, 127, 129], "phix": [126, 127, 129], "phii": [126, 127, 129], "sqr": [126, 127, 129, 137], "v2": [126, 127, 129, 412, 428, 448], "v3": [126, 129, 412], "v4": [126, 129], "v5": 126, "trialvalu": 126, "succinctli": 128, "neg": [128, 137, 176, 265, 398, 407, 412, 452, 488], "val": 129, "arr": [129, 398, 407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "deplet": 133, "c_t": 133, "xx": 133, "c_x": 133, "intertext": 133, "gg": 133, "cinf": 133, "ln": [133, 162, 163, 175, 180], "rateconst": [133, 137], "currenttim": 133, "totaltimestep": 133, "surfeqn": 133, "surfactantvar": [133, 137, 140, 141], "bulkeqn": 133, "bulkvar": [133, 137], "currenttimefunc": 133, "concentrationfunc": 133, "glue": 135, "fine": 135, "area": [135, 148, 180, 195, 453, 469, 488, 490], "ceac": [136, 143], "roughli": [136, 138, 143, 180], "publish": [136, 138, 143], "27": [136, 407, 492], "rungold": 136, "displayview": [136, 138, 143], "fals": [136, 138, 140, 141, 143, 176, 223, 352, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 396, 397, 398, 407, 408, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 460, 461, 462, 468, 469, 491], "realist": [136, 143, 491], "depth": [136, 137, 138, 143, 222], "metal": [136, 137, 143], "ion": [136, 137, 138, 143, 173, 174, 459], "catalyst": [136, 137, 138, 143], "c_m": [136, 137, 138, 143, 175], "b_0": [136, 137, 143], "b_1": [136, 137, 143], "buri": 136, "k_c": 136, "consumptionrateconst": 136, "slight": 136, "taper": 136, "taperangl": 136, "Their": 137, "faradaysconst": [137, 138, 143], "6e4": 137, "gasconst": [137, 138, 143, 180, 181], "314": [137, 138, 143, 162, 163, 175, 180, 181], "transfercoeffici": [137, 143], "rateconstant0": [137, 143], "rateconstant3": [137, 143], "245e": 137, "catalystdiffus": [137, 138, 143], "sitedens": [137, 138, 143], "8e": 137, "cupric": 137, "metaldiffusioncoeffici": 137, "overpotenti": [137, 138, 143], "bulkmetalconcentr": 137, "catalystconcentr": [137, 143], "catalystcoverag": [137, 143], "flat": [137, 165, 398, 407], "copper": [137, 138], "currentdensity0": [137, 143], "currentdensity1": [137, 143], "cflnumber": 137, "numberofcellsinnarrowband": 137, "cellsbelowtrench": 137, "trenchdepth": [137, 138, 143], "aspectratio": [137, 138, 143], "trenchspac": [137, 138, 143], "boundarylayerdepth": [137, 138, 143], "hydrodynam": 137, "intention": [137, 143], "po": [137, 223], "ycell": 137, "xcell": 137, "buildmetaliondiffusionequ": 137, "narrowbandwidth": 137, "distancevar": [137, 140, 141, 452, 453], "bottomheight": 137, "trenchheight": 137, "trenchwidth": 137, "sidewidth": 137, "mark": [137, 492], "influenc": 137, "catalystvar": 137, "bulkcatalystvar": 137, "metalvar": 137, "depositionratevari": 137, "omega": [137, 138, 143], "molar": [137, 138, 143, 162, 163, 175], "i_0": [137, 138, 143], "eta": [137, 138, 143, 435], "ga": [137, 138, 143, 162, 163, 175], "empir": 137, "expoconst": 137, "tmp": [137, 398, 414, 428], "exchangecurrentdens": 137, "expo": [137, 165, 166, 173, 174], "currentdens": 137, "v_": [137, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "extensionequ": 137, "spread": [137, 176], "extensionvelocityvari": 137, "k_0": [137, 143], "k_3": [137, 143], "surfactantequ": [137, 148, 149, 150], "d_m": [137, 143], "metalequ": 137, "ionvar": 137, "depositionr": 137, "metalionmolarvolum": 137, "jump": 137, "langmuir": 137, "abil": 137, "buildsurfactantbulkdiffusionequ": 137, "bulkcatalystequ": 137, "zoomfactor": [137, 140, 141], "levelsetupdatefrequ": 137, "distanceequ": 137, "whole": [137, 398, 407], "filepath": 137, "join": [137, 488], "split": 137, "savetxt": 137, "loadtxt": [137, 161, 165, 166, 169, 170, 171], "acceler": [138, 492], "runlevel": 138, "25e": 138, "suppressor": 138, "absorb": 138, "unoccupi": 138, "cover": 138, "affin": 138, "preferenti": 138, "i_j": 138, "theta_j": 138, "alpha_j": 138, "vacant": 138, "substrat": 138, "theta_": 138, "kappa": [138, 162, 163, 176, 488], "theta_l": 138, "k_l": 138, "c_l": [138, 162, 163], "theta_a": 138, "k_a": 138, "c_a": 138, "theta_v": 138, "i_l": 138, "i_": 138, "rise": 138, "k_": 138, "a0": 138, "alpha_k": 138, "b_d": 138, "b_a": 138, "v_d": 138, "b_b": 138, "symbol": [138, 143], "mbox": [138, 143], "tabular": [138, 143], "rllr": [138, 143], "multicolumn": [138, 143], "i_a": 138, "texttt": [138, 143], "i0acceler": 138, "i0level": 138, "alpha_a": 138, "alphaacceler": 138, "alpha_": 138, "alphalevel": 138, "ionconcentr": 138, "d_i": 138, "iondiffus": 138, "acceleratorcoverag": 138, "acceleratorconcentr": 138, "d_a": 138, "gamma_a": 138, "kaccelerator0": 138, "alphaadsorpt": 138, "bd": 138, "levelsetvalu": [140, 141], "kwlimit": [140, 141, 160, 173, 174, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "_promptforopinion": [140, 141, 459, 462, 464, 465, 466, 468, 469, 471, 472], "bool": [140, 141, 193, 195, 196, 197, 223, 352, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 394, 398, 408, 412, 414, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469], "zmin": [140, 141, 458, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 472, 475, 478, 479, 480, 482, 483, 484], "colormap": [140, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469], "logarithm": [140, 398, 407, 460, 461, 462, 463, 464, 465, 466, 468, 469], "runsimpletrenchsystem": 143, "schemat": 143, "metalconcentr": 143, "metaldiffus": 143, "surfactantbefor": [148, 149], "surfactantaft": [148, 149], "initialsurfactantvalu": [148, 149], "initialradiu": [148, 149], "00813776069241": 148, "theta_0": 149, "totaltim": 149, "finalradiu": 149, "outward": 150, "initialsurfact": 150, "getcellvolum": 155, "vol": [155, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "numberofcel": [155, 161, 180, 181, 364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 408], "insid": [156, 223, 265], "cool": [160, 173, 174], "melt": [160, 162, 163, 173, 174, 176], "supercool": [160, 173, 174], "circumst": [160, 173, 174, 180, 496], "pattern": [160, 173, 174], "lobkovski": [160, 161, 166, 173, 174, 492], "carter": [160, 161, 166, 173, 174, 492], "crystallin": [160, 173, 174], "regular": [160, 162, 163, 173, 174], "latent": [160, 162, 163, 173, 174, 176], "d_t": [160, 161, 173, 174], "heateq": [160, 173, 174], "tau_": [160, 161, 166, 169, 170, 171, 173, 174], "kappa_1": [160, 161, 173, 174], "kappa_2": [160, 161, 173, 174], "beta": [160, 161, 165, 166, 173, 174, 176, 189, 421, 433], "015": [160, 161, 165, 166, 173, 174], "phisq": [160, 161, 173, 174], "dbetadpsi": [160, 173, 174], "ddia": [160, 173, 174], "doff": [160, 173, 174], "i0": [160, 173, 174], "i1": [160, 173, 174], "tau": [160, 161], "kappa1": [160, 161, 173, 174], "kappa2": [160, 161, 173, 174], "phaseeq": [160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174], "solidifi": [160, 161, 162, 163, 173, 174], "quench": [160, 162, 163, 173, 174, 176], "induc": [160, 162, 163, 173, 174], "granular": [160, 173, 174], "strive": [160, 173, 174, 188], "pylab": 160, "cm": [160, 162, 163, 173, 174, 176, 398, 407, 459, 460, 461, 463, 464, 465, 466], "hot": [160, 173, 174], "arm": [160, 173, 174], "fastest": [160, 173, 174], "steepest": [160, 173, 174], "lucid": 160, "seedcent": 161, "initialtemperatur": 161, "beta_": 161, "phi_i": [161, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "phi_x": [161, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "xi_x": 161, "xi_i": 161, "tempdiffusioncoeff": 161, "mvar": 161, "phasei": 161, "phasex": 161, "betapsi": 161, "dxi": 161, "nineti": 161, "anisotropysourc": 161, "temperatureeq": 161, "temperatureview": 161, "text_to_native_str": [161, 165, 166, 169, 170, 171], "testdata": [161, 165, 166, 169, 170, 171], "straightforward": [162, 163], "helmholtz": [162, 163, 176], "mathcal": [162, 163], "m_c": [162, 163], "f_a": [162, 163], "w_a": [162, 163], "f_b": [162, 163], "omega_": [162, 163], "omega_l": [162, 163], "calphad": [162, 163], "w_b": [162, 163], "yield": [162, 163, 180], "ideal": [162, 163], "l_a": [162, 163, 364], "t_m": [162, 163, 176], "likewis": [162, 163, 398, 407], "la": [162, 163], "2350": [162, 163, 176], "lb": [162, 163, 398, 407], "1728": [162, 163, 176], "tma": [162, 163], "tmb": [162, 163], "1358": [162, 163], "enthalpya": [162, 163], "enthalpyb": [162, 163], "nonumb": [162, 163, 175, 488], "l_b": [162, 163], "v_m": [162, 163], "mu_b": [162, 163], "mu_a": [162, 163], "vm": [162, 163], "deltaa": [162, 163], "deltab": [162, 163], "sigmaa": [162, 163], "sigmab": [162, 163], "9e": [162, 163], "betaa": [162, 163], "betab": [162, 163], "kappaa": [162, 163], "kappab": [162, 163], "wb": [162, 163, 407], "mphi": [162, 163, 175, 176], "dmphidphi": [162, 163, 175, 176], "deltachempot": [162, 163], "chempota": [162, 163], "chempotb": [162, 163], "fick": [162, 163], "phasetransformationveloc": [162, 163], "diffusioneq": [162, 163], "deduc": [162, 163], "liquidu": [162, 163, 175], "solidu": [162, 163, 175], "cl": [162, 163, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "fraction": [162, 163, 173, 174, 301], "lever": [162, 163], "cavg": [162, 163], "algebra": [162, 163, 176, 338, 343, 485, 492], "reveal": [162, 163], "unchang": [162, 163, 188, 398, 407], "root": [162, 163, 398, 407, 412, 421, 429, 433, 435], "luck": [162, 163, 428], "jacobian": [162, 163, 353], "equilibriumjacobian": [162, 163], "fsolv": [162, 163], "csroot": [162, 163], "clroot": [162, 163], "func": [162, 163, 403], "fprime": [162, 163], "uncondition": [162, 163], "e5": [162, 163], "asymmetr": [162, 252], "therefor": [162, 491], "phaser": 162, "diffr": 162, "stationari": [162, 163], "overal": [162, 163], "ten": [162, 163], "idea": [162, 163, 495], "neglig": [162, 163], "centi": [162, 163], "meter": [162, 163], "d_c": 163, "dc": 163, "dphi": 163, "initialr": 163, "principl": 163, "phasetransientcoeff": [165, 166], "thetasmallvalu": [165, 166, 173, 174], "1e5": [165, 166, 173, 174], "1e3": [165, 166, 173, 174], "thetatransientcoeff": [165, 166], "008": [165, 166, 173, 174], "held": [165, 166, 180, 453], "isotherm": [165, 166, 492], "randomli": [165, 469], "0001": [165, 173, 174], "thetavalu": 165, "segment": [165, 248], "buildphaseequ": 165, "mphivar": [165, 166], "thetamag": [165, 166, 173, 174], "implicitsourc": [165, 166], "et": [165, 166, 173, 174, 180, 492], "modular": [165, 166, 173, 174, 448], "buildthetaequ": 165, "phasemod": [165, 166, 173, 174], "phasemodsq": [165, 166], "pfunc": [165, 166, 173, 174], "phasefac": [165, 166], "phasesq": [165, 166], "gradmag": [165, 166], "igamma": [165, 166, 173, 174], "thetagraddiff": [165, 166], "thetaeq": [165, 166, 173, 174], "meaning": [165, 189], "thetaprod": 165, "thetaproductview": [165, 166], "disk": [165, 424], "recal": 165, "newphas": 165, "newtheta": 165, "newthetaeq": 165, "newphaseeq": 165, "m_1": [166, 169, 170, 171], "confin": 166, "angl": [166, 398, 407], "halv": 166, "misorient": [169, 170, 171], "foral": [169, 171, 364], "t_0": [173, 174], "tau_phas": [173, 174], "tau_theta": [173, 174], "beta_theta": [173, 174], "gradmagtheta": [173, 174], "v_theta": [173, 174], "d_theta": [173, 174], "numse": [173, 174], "12345": [173, 174, 412], "cx": [173, 174], "cy": [173, 174], "orientationview": [173, 174], "room": [173, 174], "stolen": [173, 174], "make_ax": [173, 174], "ec1cd2567521c105a451ce15e06de10715f8b54d": [173, 174], "lib": [173, 174], "l838": [173, 174], "pb": [173, 174], "get_posit": [173, 174], "frozen": [173, 174], "pad": [173, 174], "x1": [173, 174], "pb1": [173, 174], "pbx": [173, 174], "pbcb": [173, 174], "splitx": [173, 174], "panchor": [173, 174], "set_posit": [173, 174], "set_anchor": [173, 174], "gnomon": [173, 174], "get_figur": [173, 174], "add_ax": [173, 174], "85": [173, 174], "polar": [173, 174], "set_thetagrid": [173, 174], "set_theta_zero_loc": [173, 174], "set_theta_direct": [173, 174], "set_rgrid": [173, 174], "radii": [173, 174], "_orientation_and_phase_to_rgb": [173, 174], "set_facecolor": [173, 174], "set_edgecolor": [173, 174], "_reshap": [173, 174], "staticmethod": [173, 174], "hsv": [173, 174], "hsv_to_rgb": [173, 174], "_data": [173, 174], "rgb": [173, 174], "hue": [173, 174], "set_data": [173, 174], "pyplot": [173, 174, 459], "figaspect": [173, 174, 460, 461, 463, 464, 465, 466, 468, 469], "figsiz": [173, 174], "timer": [173, 174], "3f": [173, 174], "fontsiz": [173, 174], "add_subplot": [173, 174], "total_tim": [173, 174], "save_interv": [173, 174], "002": [173, 174, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "save_at": [173, 174], "set_text": [173, 174], "c_0": 175, "c0": [175, 451], "circ_j": 175, "tilt": 175, "_0": 175, "f_j": 175, "sl": 175, "circ_n": 175, "cook": 175, "rhol": 175, "arrang": [175, 180, 181], "d_j": 175, "l_v": 176, "0025": 176, "lv": 176, "atom": 176, "simplest": 176, "surpris": 176, "inspect": 176, "uninterest": 176, "resolut": 176, "reintroduc": 176, "exploit": [176, 485], "s_1": [176, 488], "advic": 176, "tangent": [176, 398, 407, 412], "appreci": [176, 189, 190], "focus": 176, "recast": 176, "redeclar": 176, "nickel": 176, "sigma": [176, 435], "viewer2": [176, 459], "redefin": 176, "quintic": 176, "polynomi": [176, 293], "chose": 176, "agreement": 176, "tanhresidu": 176, "leastsq": 176, "v_fit": 176, "d_fit": 176, "msg": 176, "symmetr": [177, 252, 265, 298, 299, 301, 302, 303, 338, 345, 347, 348], "quadrilater": 177, "mirror": 177, "testresult": 177, "bottomright": 177, "topleft": 177, "topright": 177, "vapor": 180, "der": 180, "waal": 180, "molarweight": [180, 181], "ee": [180, 181], "455971": [180, 181], "650": [180, 181], "vbar": [180, 181], "liquiddens": [180, 181], "7354": [180, 181], "3402662299995": [180, 181], "vapordens": [180, 181], "855803327810008": [180, 181], "u_j": 180, "u_i": [180, 181], "u_iu_j": 180, "nu": 180, "nc": [180, 181], "densityprevi": [180, 181], "velocityprevi": 180, "potentialnc": [180, 181], "freeenergi": [180, 181], "u_": 180, "d_f": [180, 488, 491], "overlin": 180, "partial_": 180, "overbar": 180, "matrixdiagon": [180, 181], "correctioncoeff": [180, 181], "masseqn": [180, 181], "lh": 180, "momentumeqn": 180, "superscript": [180, 488], "potentialderiv": [180, 181], "potentialnceqn": [180, 181], "quirk": 180, "amplitud": [180, 435], "totalstep": [180, 181], "1e10": 180, "elegantli": 180, "initialresidu": [180, 181], "previousresidu": [180, 181], "5e9": 180, "velocityx": 181, "velocityi": 181, "velocityvector": 181, "velocityxprevi": 181, "velocityyprevi": 181, "matxx": 181, "matyi": 181, "matxi": 181, "matyx": 181, "momentumxeqn": 181, "momentumyeqn": 181, "totalsweep": 181, "stress": [188, 489], "slightli": [188, 428], "inconveni": [188, 189, 190], "walk": 188, "getfacesleft": 188, "getfacesright": 188, "steadyconvectiondiffusionscequ": 188, "stdyconvdiffscequ": 188, "traceback": [188, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 368, 375, 376, 379, 383, 390, 391, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "convectionschem": 188, "nameerror": 188, "getcellcent": [188, 189, 190], "grid2dgistview": 188, "thrown": 188, "biggest": 188, "assembli": 188, "took": 188, "gistview": 188, "gist1dview": 188, "hesit": [188, 189, 190], "agre": [189, 190], "assur": [189, 190], "casual": [189, 190], "superced": [189, 190], "1_2": 189, "summar": [189, 190], "tip": [189, 190], "seemingli": [189, 428], "almost": [189, 488], "blindli": 189, "worth": 189, "reorient": 189, "deltax": 189, "deltai": 189, "vectorfacevari": 189, "vectorfield": 189, "hackish": 189, "_take": 189, "quietli": 189, "getexteriorfac": 189, "getcent": 189, "getarithmeticfacevalu": 189, "convolut": 189, "cellfilt": 189, "positivecel": 189, "getfac": 189, "deprecationwarn": [189, 190, 396, 403], "indefinit": [189, 190, 265], "breviti": 189, "feel": [189, 190], "whichev": [189, 190], "comfort": [189, 190], "clariti": 189, "trump": 189, "orthodoxi": 189, "temptat": 189, "2_1": 190, "3_0": 190, "reconsid": 190, "gmshimporter2d": 190, "gmshimporter3d": 190, "gmshimporter2din3dspac": 190, "fv": [191, 368, 375, 376, 379, 383, 390, 391, 490], "msed": 191, "mml": 191, "ubiquit": 191, "proprietari": 191, "expens": 191, "savvi": 191, "repr": [193, 194, 195, 196, 197, 208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 278, 279, 280, 281, 282, 286, 287, 288, 289, 290, 291, 292, 294, 298, 299, 300, 301, 302, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 351, 352, 353, 354, 359, 386, 400, 401, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458], "mathtt": [196, 355, 412], "g_": 196, "odd": 197, "numberofvari": 200, "numberofequ": 200, "equationindex": 200, "varindex": 200, "_representationclass": [208, 227, 228, 229, 230, 231, 232, 248, 249, 250, 251], "_abstractrepresent": [208, 249], "_topologyclass": [208, 227, 228, 229, 230, 231, 232, 248, 249, 250, 251], "_abstracttopologi": [208, 249], "among": 208, "dataset": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 458], "basemesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "translatedmesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "addedmesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "provis": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "consolid": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "triaddedmesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "83333333": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "16666667": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "66666667": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "33333333": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "threedbasemesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "threedsecondmesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "threedaddedmesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "invalidmesh": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "match": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 412], "helper": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 256, 257, 258, 325, 330, 331, 332, 359, 400, 401, 458, 473], "unsupport": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "operand": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 398, 407], "nonzero": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251], "attribut": [208, 218, 219, 220, 221, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 248, 249, 250, 251, 252, 398, 408, 414], "delattr": [208, 223, 227, 252, 325, 359, 458], "getattr": [208, 223, 227, 252, 325, 359, 458], "setattr": [208, 223, 227, 252, 325, 359, 458], "tb": [208, 223, 227, 252, 325, 359, 458], "__traceback__": [208, 223, 227, 252, 325, 359, 458], "indexerror": [218, 230, 241, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 458], "dilat": [218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248], "dilatedmesh": [218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248], "mismatch": [218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "broadcast": [218, 219, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 248, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "rectangular": [219, 221, 231, 232, 234, 235, 251], "radial": [221, 222], "axial": 221, "lr": 222, "count": [222, 394, 412, 413], "coorddimens": 223, "nproc": [223, 398, 408, 414], "squaredcircl": 223, "compass": 223, "label": [223, 402], "north": 223, "west": 223, "nw": 223, "parametr": 223, "physicalcel": 223, "physicalfac": 223, "bkg": 223, "monoton": 223, "trisquar": 223, "std1": 223, "std2": 223, "ii": [223, 492], "characterist": [223, 490], "topolog": 223, "fileistemporari": 223, "gmshoutput": 223, "respons": 223, "constructor": 223, "multilin": 223, "todo": 223, "truncat": [223, 458], "cellstovertic": 223, "recov": 223, "vertexcoord": [223, 227, 228, 229], "cellstovertid": 223, "cellstofac": 223, "isol": 223, "nodespath": 223, "elemspath": 223, "namesfil": 223, "physicalnam": 223, "facestovertexid": 223, "cellstofaceid": 223, "cellglobalidmap": 223, "ghostcellglobalidmap": 223, "trust": [223, 495], "retriev": [223, 495], "facevertexid": [227, 228, 229], "_meshrepresent": [227, 228, 229], "_meshtopologi": 227, "_mesh1dtopologi": 228, "_mesh2dtopologi": [229, 248], "_builderclass": 230, "_nonuniformgrid1dbuild": 230, "_grid1drepresent": [230, 250], "_grid1dtopologi": [230, 250], "_grid2drepresent": [231, 248, 251], "_grid2dtopologi": [231, 251], "_grid3drepresent": 232, "_grid3dtopologi": 232, "xz": 232, "yz": 232, "subcategori": 232, "facecellid": [233, 234, 235], "fill": [233, 234, 235, 268, 269], "999": 233, "_celltocelldist": [233, 234, 235], "_cellvertexid": [233, 234, 235], "_baseperiodicgrid2d": 234, "_baseperiodicgrid3d": 235, "rand": 240, "skew": 240, "hereaft": 248, "calc": 250, "machineri": 252, "broke": 253, "exceed": 253, "invalid": 253, "petsc4py_comm": 257, "comm_world": 257, "intoler": 259, "Not": [259, 265, 267, 280, 281, 291, 299, 300, 303, 304, 310, 313, 314, 315, 316, 317, 323, 324, 325, 333, 334, 335, 337, 351, 353, 354, 357, 398, 407, 448], "biconjug": [260, 293, 298, 333], "unprecondit": [260, 261, 262, 264, 266], "alia": [260, 261, 262, 264, 266, 288, 289, 290, 292, 299, 303, 333, 334, 335, 337, 351, 380, 397], "abstol": [265, 309], "eigenvalu": 265, "kspcg": 265, "kspgetconvergedreason": 265, "kspsolv": 265, "ksppreonli": 265, "kspconvergedskip": 265, "ran": [265, 309], "kspminr": 265, "kspcr": 265, "pivot": [265, 302], "subprecondition": 265, "pcfieldsplit": 265, "decreas": [265, 309, 355], "pcilu": [268, 269], "pcicc": [268, 269], "jacobi": [268, 269, 272, 286, 287, 288, 289, 290, 293, 299, 301, 303, 305, 306, 318, 320, 338, 342], "pcbjacobi": [268, 269], "manualpag": [268, 269], "pc": [268, 269], "pccreat": [268, 269], "choleski": [268, 270, 338, 340], "ilu": [268, 271, 293, 318, 319, 338, 341], "ssor": [268, 275, 303, 305, 308], "smoothed_aggregation_solv": 284, "aggreg": [286, 293, 338, 344, 345, 347], "amg": [286, 287], "pbicgstab": 288, "fgmre": 289, "dilu": 293, "mimum": 293, "gauss": [293, 338, 348, 435], "seidel": [293, 338, 348], "smoother_typ": 296, "variant": 298, "bicg": 298, "itsolv": [298, 299, 303], "superlu": 302, "spilu": [318, 319], "46876951": [318, 319, 320], "2019542": [318, 319, 320], "spsolv": [318, 320], "unsatisfactori": 325, "wignor": 325, "abort": 325, "werror": 325, "relr": 325, "linearxsolv": 325, "obj": [331, 496], "m4count": 331, "mpi4py_comm": 331, "get_rank": 331, "get_siz": 331, "assert": 331, "ameso": 336, "klu": 336, "ifpack": [338, 340], "multilevel": [338, 343, 346, 347, 348, 349], "nearli": [338, 347], "mloption": 352, "testunsupport": 352, "ml": [352, 407], "setparameterlist": 352, "printingopt": 353, "solveropt": 353, "linearsolveropt": 353, "linesearchopt": 353, "directionopt": 353, "newtonopt": 353, "steppyngstoun": [355, 358], "vardata": [356, 357, 358], "075": 356, "pid": 356, "articl": 356, "pidpap": 356, "author": 356, "valli": 356, "carei": 356, "coutinho": 356, "strategi": 356, "incompress": [356, 492], "reaction": 356, "meth": [356, 495], "pgrow": 357, "pshrink": 357, "000189": 357, "rkq": 357, "rung": 357, "kutta": 357, "incorpor": 364, "u_p": [364, 378], "sum_a": [364, 378], "phi_a": [364, 368, 373, 375, 376, 378, 379, 383, 390, 488], "l_p": 364, "_matrixclass": [364, 378], "_buildmatrix": [364, 378], "stand": [364, 378], "harpsichord": [364, 378], "sing": [364, 378], "vel": [364, 378], "quadrat": 364, "__advectionterm": 364, "spot": 364, "123105625618": 364, "0201715476598": 364, "hash": [364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391, 398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "__nondiffusionterm": [364, 367, 368, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391], "negat": [364, 367, 368, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391], "__unaryterm": [364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 388, 390, 391], "getrhsvector": [364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "residualfn": [364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "sovler": [364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "l2": [364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "cacheresidu": [364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "cacheerror": [364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "residualvector": [364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "errorvector": [364, 367, 368, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 383, 384, 385, 386, 388, 390, 391], "_nondiffusionterm": [367, 377, 378], "_abstractconvectionterm": [368, 375, 376, 379, 383, 390, 391], "simeq": [368, 373, 375, 376, 379, 381, 383, 388, 390, 488], "alpha_f": [368, 375, 376, 379, 383, 390, 488, 491], "central": [368, 491], "vcv": [368, 375, 376, 379, 383, 390, 391], "vfv": [368, 375, 376, 379, 383, 390, 391], "__convectionterm": [368, 375, 376, 379, 383, 390, 391], "_arithmeticcelltofacevari": [368, 375, 376, 379, 383, 390, 391], "m2": [368, 375, 376, 379, 383, 390, 391], "cv2": [368, 375, 376, 379, 383, 390, 391], "vcv2": [368, 375, 376, 379, 383, 390, 391], "vfv2": [368, 375, 376, 379, 383, 390, 391], "_abstractdiffusionterm": [371, 372, 373], "_abstractupwindconvectionterm": [375, 390], "_asymmetricconvectionterm": [376, 379, 383], "hybrid": [379, 491], "s_p": 381, "proportion": 381, "_explicitsourceterm": 384, "newton": 384, "rho_": [388, 488], "phi_0": 388, "relaxationfactor": 388, "skipwarn": 394, "glob": 394, "optionflag": 394, "extraglob": 394, "raise_on_error": 394, "exclude_empti": 394, "_selectivedoctestpars": 394, "reachabl": 394, "__doc__": 394, "__test__": 394, "__dict__": 394, "slate": 394, "stuff": 394, "iff": 394, "argv": [394, 396, 397, 473], "summari": 394, "dont_accept_true_for_1": 394, "dont_accept_blanklin": 394, "normalize_whitespac": 394, "ellipsi": 394, "ignore_exception_detail": 394, "report_udiff": 394, "report_cdiff": 394, "report_ndiff": 394, "report_only_first_failur": 394, "postmortem": 394, "defaulttest": [396, 397], "testrunn": [396, 397], "testload": [396, 397], "loader": [396, 397], "failfast": [396, 397], "catchbreak": [396, 397], "buffer": [396, 397, 398, 414], "tb_local": [396, 397], "inabl": 396, "kw": 396, "ie": 396, "foo": 396, "bunch": 396, "konrad": [398, 407], "hinsen": [398, 407], "physicalquant": [398, 407], "angular": [398, 407], "radian": [398, 407], "deg": [398, 407], "03490659": [398, 407], "05235988": [398, 407], "06981317": [398, 407], "08726646": [398, 407], "003": [398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "004": [398, 407], "005": [398, 407], "isinst": [398, 407, 412], "facilit": [398, 407], "inch": [398, 407], "034907": [398, 407], "ft": [398, 407], "remaind": [398, 407], "hz": [398, 407], "ev": [398, 407], "8288": [398, 407], "cosin": [398, 407], "57079632679": [398, 407], "rad": [398, 407, 428], "31695789692": [398, 407], "sine": [398, 407], "arctang": [398, 407], "785398": [398, 407], "380506": [398, 407], "549306144334": [398, 407], "smallest": [398, 407], "3j": [398, 407], "ohm": [398, 407], "adjust": [398, 407, 448], "hartre": [398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "kcal": [398, 407], "1694": [398, 407], "27557621": [398, 407], "sctype": [398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "obj2sctyp": [398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "si": [398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "7088849": [398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "01085": [398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "kg": [398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "degc": [398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "degf": [398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "314159": [398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "59": [398, 407, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "302585": [398, 407], "0254": [398, 407], "opposit": [398, 407, 412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "typecod": [398, 407], "0762": [398, 407], "0508": [398, 407], "expon": [398, 407, 489], "761594155956": [398, 407], "max_line_width": [398, 407, 412], "suppress_smal": [398, 407, 412], "14159": [398, 407], "encod": [398, 414], "newlin": [398, 414], "suffix": [398, 414], "namedtemporaryfil": [398, 414], "tmpfile": [398, 414], "procid": [398, 408, 414], "seek": [398, 414], "mkstemp": [398, 414], "duck": [398, 408, 414], "tempfil": [398, 408, 414], "stall": 402, "old_nam": 403, "new_nam": 403, "old_func": 403, "dirac": [407, 485], "cnr": [407, 485], "orlean": [407, 485], "fr": [407, 485], "2002": [407, 492], "codata": 407, "british": 407, "appendix": 407, "sr": 407, "da": 407, "bq": 407, "gy": 407, "lm": 407, "pa": 407, "sv": 407, "60217653e": 407, "acr": 407, "4046": 407, "8564224": 407, "amu": 407, "6605402e": 407, "ang": 407, "atm": 407, "101325": 407, "100000": 407, "bohr": 407, "291772081145378e": 407, "btui": 407, "1055": 407, "05585262": 407, "299792458": 407, "cal": 407, "cali": 407, "1868": 407, "0000000000000003e": 407, "cup": 407, "00023658825600000004": 407, "86400": 407, "017453292519943295": 407, "5555555555555556": 407, "degr": 407, "00010000000000000003": 407, "dyn": 407, "85418781762039e": 407, "erg": 407, "floz": 407, "9573532000000005e": 407, "3048": 407, "galuk": 407, "004546090000000002": 407, "galu": 407, "0037854120960000006": 407, "gn": 407, "80665": 407, "grav": 407, "6742e": 407, "3600": 407, "35974417680088e": 407, "hbar": 407, "0545716823644548e": 407, "hpel": 407, "746": 407, "hplanck": 407, "6260693e": 407, "hpuk": 407, "745": 407, "025400000000000002": 407, "invcm": 407, "9864456023253395e": 407, "3806505e": 407, "4184": 407, "kcali": 407, "4186": 407, "ken": 407, "0010000000000000002": 407, "45359237": 407, "lyr": 407, "9460730472580800": 407, "me": 407, "1093826e": 407, "mi": 407, "1609": 407, "344": 407, "0000000000000002e": 407, "mp": 407, "67262171e": 407, "mu0": 407, "2566370614359173e": 407, "0221415e": 407, "nmi": 407, "1852": 407, "oz": 407, "028349523125": 407, "6894": 407, "75729316836": 407, "pt": 407, "0004731765120000001": 407, "0009463530240000002": 407, "tbsp": 407, "4786766000000002e": 407, "ton": 407, "907": 407, "18474": 407, "torr": 407, "133": [407, 492], "32236842105263": 407, "tsp": 407, "9289220000000005e": 407, "wk": 407, "604800": 407, "yd": 407, "9144000000000001": 407, "yr": 407, "31536000": 407, "yrjul": 407, "31557600": 407, "yrsid": 407, "31558152": 407, "959999997": 407, "array_lik": [407, 412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 463, 464, 468], "nine": 407, "_findunit": 407, "555556": 407, "meterpersecond": 407, "fileobject": 408, "mesh_unmangl": 408, "cpickl": 408, "decompress": 408, "improp": 408, "taxicab": 412, "manhattan": 412, "_j": 412, "euclidean": 412, "underset": 412, "logic": [412, 421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "flatten": 412, "a1": 412, "a2": 412, "_variableclass": 412, "max_mem": 412, "100000000": 412, "m0": [412, 421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "maskvalu": 412, "999999": 412, "masked_valu": 412, "mayb": 412, "3x3": 412, "fill_valu": 412, "array_output": 412, "textual": 412, "bracket": 412, "subset": [412, 490], "rightmost": 412, "estat": 412, "2345": 412, "23345": 412, "123456": 412, "charact": 412, "output_line_width": 412, "decim": 412, "float_output_precis": 412, "float_output_suppress_smal": 412, "unus": 412, "optpars": 413, "store_tru": 413, "store_fals": 413, "store_const": 413, "callback": 413, "argpars": 413, "absent": [413, 416], "fear": 414, "inexplic": 416, "additionvector": 416, "thought": [416, 490], "shim": 417, "kwd": [421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "int_0": [421, 433], "sake": [421, 429, 433, 435], "determinist": [421, 429, 433, 435], "histogram": [421, 429, 433, 435, 437, 456], "gaussian": [421, 429, 433, 435], "betadist": 421, "histoplot": [421, 429, 433, 435, 456], "stderr": [421, 429, 433], "fab": [421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "truth": [421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "ambigu": [421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "nearestcellid": [421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "ncell": [421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "npoint": [421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "whose": [421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457, 496], "sliceabl": [421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "1000000000000000000": [421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "phi_1": [421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "phi_2": [421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "f2": [421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "interiorfac": [421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "opshap": [421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "operatorclass": [421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "otim": [421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "461538461538": [421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "phi1": [421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "phi2": [421, 424, 428, 429, 433, 435, 437, 448, 449, 453, 456], "mpitutori": [421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "allreduc": [421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456], "assertionerror": [421, 424, 428, 429, 433, 435, 437, 449, 453, 456], "longhand": [421, 424, 428, 429, 432, 433, 435, 437, 442, 448, 449, 451, 452, 453, 456, 457], "unpickledvar": 424, "dim": [424, 432, 442, 448, 449, 451], "_calctrialvalu": 428, "patholog": 428, "vbl": 428, "vbr": 428, "vml": 428, "crossprod": 428, "dsq": 428, "vmr": 428, "extensionvari": 428, "extensionvar": 428, "tmp1": 428, "tmp2": 428, "9544": 428, "5456": 428, "perpendicular": 428, "30473785": 428, "49923009": 428, "35355339": 428, "45118446": 428, "97140452": 428, "76215286": 428, "33721352": 428, "trial": 428, "didn": 428, "58578644": 428, "08578644": 428, "85136395": 428, "29289322": 428, "54389939": 428, "49547948": 428, "3rd": 428, "7th": 428, "15th": 428, "chanc": 428, "circumfer": 428, "57984690073": 428, "expdist": 429, "gammadist": 433, "langl": 435, "rangl": 435, "uncorrel": 435, "k_b": 435, "sigmasqrd": 435, "kboltzmann": 435, "sampl": 437, "bin": 437, "get_se": 449, "_celltofacevari": 451, "conservativesurfactantequ": 452, "numberoffac": 452, "volumetr": 453, "mole": 453, "941": 453, "_interfacesurfactantvari": 453, "some1dvar": 458, "plt": 459, "ax1": 459, "subplot": 459, "ax2": 459, "ax3": 459, "mesh1": 459, "xvar": [459, 462, 471, 472], "viewer1": 459, "mesh2": 459, "xyvar": [459, 464, 465, 466, 468, 469, 471, 472], "mesh3": 459, "viewer3": 459, "orrd": 459, "kval": [459, 462, 464, 465, 466, 468, 469, 471, 472], "jet": [459, 460, 461, 463, 464, 465, 466], "xlog": 462, "ocean": [462, 464, 465, 466, 468, 469], "synonym": [462, 488], "line2d": 462, "draw": [463, 464], "1002": [464, 465, 466, 471, 472], "polycollect": 466, "sparsiti": [467, 469], "linewidth": 468, "arrows": 468, "arrowstyl": 468, "minlength": 468, "stream": 468, "griddata": 468, "convex": 468, "hull": 468, "concav": 468, "cla": 468, "overlaid": 468, "arrow": [468, 469], "goe": [468, 469], "streamlin": 468, "30x30": 468, "linearli": [468, 488], "travers": 468, "density_x": 468, "density_i": 468, "lumin": 468, "stretch": 468, "fancyarrowpatch": 468, "quiver": 469, "xyzvar": [471, 472], "poll": 473, "poll_fil": 473, "Or": 473, "reader": 473, "fname": 473, "subview": 475, "866": 478, "stdout": 478, "var_gauss_grad_x": 478, "var_gauss_grad_i": 478, "33333333333333": 478, "wikipedia": 485, "wiki": 485, "continuous_integr": 485, "eponym": 485, "cad": 485, "javascript": 485, "appl": 485, "predecessor": 485, "ye": 485, "forum": 485, "pydata": 485, "cosc": 485, "canterburi": 485, "greg": [485, 492], "ew": 485, "slowli": 485, "3000": 485, "plone": 485, "pocoo": 485, "microsoft": 485, "polyhedr": 488, "surround": 488, "conjunction": 488, "omega_a": 488, "omega_1": 488, "omega_2": 488, "omega_3": 488, "omega_4": 488, "theorem": 488, "specificconvectionterm": 488, "estim": 488, "increasingli": 488, "gamma1": 488, "nicolson": 488, "reinforc": 488, "gamma_2": [488, 489], "gamma2": 488, "a_": 488, "b_p": 488, "rho_p": 488, "f_f": [488, 491], "biolog": 489, "inde": 489, "proven": 489, "variat": 489, "ph": 489, "lambda_i": 489, "react": [489, 492], "divers": 489, "electr": 489, "heart": 489, "tissu": 489, "schr": 489, "dinger": 489, "unknown": 489, "fickian": 489, "gamma_3": 489, "spectral": 489, "chapter": [490, 493, 494, 497], "phd": [490, 492], "patankar": [490, 492], "versteeg": [490, 492], "malalasekera": [490, 492], "fem": 490, "fdm": 490, "analog": 490, "\u00e9": 491, "clet": 491, "p_f": 491, "smear": 491, "rightarrow": 491, "overcom": 491, "inaccuraci": 491, "beckermann": 492, "karma": 492, "1146": 492, "annurev": 492, "matsci": 492, "101901": 492, "155803": 492, "chen": 492, "mdoel": 492, "112001": 492, "132041": 492, "contemporari": 492, "david": 492, "jonathan": 492, "coat": 492, "biomaterialia": 492, "604": 492, "jan": 492, "actbio": 492, "019": 492, "william": 492, "nov": 492, "hangart": 492, "hamadani": 492, "xu": 492, "interdigit": 492, "thin": 492, "film": 492, "heterojunct": 492, "073514": 492, "3561487": 492, "huber": 492, "superconform": 492, "submicron": 492, "016102": 492, "2001": 492, "sethian": 492, "cambridg": 492, "1996": 492, "scott": 492, "chacon": 492, "apress": 492, "guido": 492, "rossum": 492, "tut": 492, "pilgrim": 492, "isbn": 492, "1590593561": 492, "diveintopython": 492, "ref": 492, "alexand": 492, "craig": 492, "materialia": 492, "6035": 492, "6058": 492, "2003": 492, "s1359": 492, "6454": 492, "00388": 492, "swirl": 492, "turbul": 492, "greenwich": 492, "1998": 492, "gala": 492, "eprint": 492, "6371": 492, "franci": 492, "1980": 492, "longman": 492, "technic": 492, "1995": 492, "mattiussi": 492, "309": 492, "1997": 492, "epfl": 492, "ch": 492, "jcp1997": 492, "nterfaci": 492, "1958": 492, "hermodynam": 492, "1121": 492, "1124": 492, "1959": 492, "ucleat": 492, "elder": 492, "thornton": 492, "hoyt": 492, "philosoph": 492, "magagazin": 492, "164": 492, "1080": 492, "14786435": 492, "506427": 492, "quilibrium": 492, "69": 492, "021603": 492, "arxiv": 492, "cond": 492, "mat": 492, "0308173": 492, "inet": 492, "021604": 492, "0308179": 492, "saul": 492, "teukolski": 492, "vetterl": 492, "brian": 492, "flanneri": 492, "1999": 492, "peri": 492, "\u0107": 492, "springer": 492, "blend": 492, "185": 492, "s0021": 492, "9991": 492, "00059": 492, "c302": 492, "c310": 492, "1562598": 492, "mcf": 492, "adden": 492, "7424": 492, "7439": 492, "1992": 492, "microsegreg": 492, "metallurgica": 492, "689": 492, "ward": 492, "inst": 492, "winter2004": 492, "if12": 492, "pg46": 492, "capit": 495, "resid": 495, "oop": 495, "arg2": [495, 496], "unfamiliar": 495, "reorder": 495, "latter": 495, "famili": 495, "descend": 495, "myobjectderivedfrombas": [495, 496], "arg3": 496, "__": 496, "somethingels": 496, "val1": 496, "val2": 496, "wherea": 496}, "objects": {"": [[23, 0, 0, "-", "examples"], [191, 0, 0, "-", "fipy"], [493, 0, 0, "-", "package"], [17, 7, 1, "cmdoption-cache", "--cache"], [22, 7, 1, "cmdoption-home", "--home"], [17, 7, 1, "cmdoption-inline", "--inline"], [17, 7, 1, "cmdoption-lsmlib", "--lsmlib"], [17, 7, 1, "cmdoption-no-cache", "--no-cache"], [17, 7, 1, "cmdoption-no-pysparse", "--no-pysparse"], [22, 7, 1, "cmdoption-prefix", "--prefix"], [17, 7, 1, "cmdoption-pyamg", "--pyamg"], [17, 7, 1, "cmdoption-pyamgx", "--pyamgx"], [17, 7, 1, "cmdoption-pysparse", "--pysparse"], [17, 7, 1, "cmdoption-scipy", "--scipy"], [17, 7, 1, "cmdoption-skfmm", "--skfmm"], [17, 7, 1, "cmdoption-trilinos", "--trilinos"], [22, 8, 1, "-", "DYLD_LIBRARY_PATH"], [17, 8, 1, "-", "FIPY_CACHE"], [17, 8, 1, "-", "FIPY_DEFAULT_CRITERION"], [17, 8, 1, "-", "FIPY_DISPLAY_MATRIX"], [17, 8, 1, "-", "FIPY_INCLUDE_NUMERIX_ALL"], [17, 8, 1, "-", "FIPY_INLINE"], [17, 8, 1, "-", "FIPY_INLINE_COMMENT"], [17, 8, 1, "-", "FIPY_LOG_CONFIG"], [17, 8, 1, "-", "FIPY_SOLVERS"], [17, 8, 1, "-", "FIPY_VERBOSE_SOLVER"], [17, 8, 1, "-", "FIPY_VIEWER"], [22, 8, 1, "-", "LD_LIBRARY_PATH"], [17, 8, 1, "-", "PETSC_OPTIONS"]], "examples": [[24, 0, 0, "-", "benchmarking"], [30, 0, 0, "-", "cahnHilliard"], [38, 0, 0, "-", "chemotaxis"], [43, 0, 0, "-", "convection"], [70, 0, 0, "-", "diffusion"], [106, 0, 0, "-", "elphf"], [116, 0, 0, "-", "flow"], [119, 0, 0, "-", "levelSet"], [153, 0, 0, "-", "meshing"], [158, 0, 0, "-", "parallel"], [159, 0, 0, "-", "phase"], [179, 0, 0, "-", "reactiveWetting"], [183, 0, 0, "-", "riemann"], [186, 0, 0, "-", "test"], [187, 0, 0, "-", "updating"]], "examples.benchmarking": [[25, 0, 0, "-", "benchmarker"], [26, 0, 0, "-", "size"], [27, 0, 0, "-", "steps"], [28, 0, 0, "-", "utils"], [29, 0, 0, "-", "versions"]], "examples.cahnHilliard": [[31, 0, 0, "-", "mesh2D"], [32, 0, 0, "-", "mesh2DCoupled"], [33, 0, 0, "-", "mesh3D"], [34, 0, 0, "-", "sphere"], [35, 0, 0, "-", "sphereDaemon"], [36, 0, 0, "-", "tanh1D"], [37, 0, 0, "-", "test"]], "examples.chemotaxis": [[39, 0, 0, "-", "input"], [40, 0, 0, "-", "input2D"], [41, 0, 0, "-", "parameters"], [42, 0, 0, "-", "test"]], "examples.convection": [[44, 0, 0, "-", "advection"], [48, 0, 0, "-", "exponential1D"], [53, 0, 0, "-", "exponential1DBack"], [55, 0, 0, "-", "exponential1DSource"], [58, 0, 0, "-", "exponential2D"], [63, 0, 0, "-", "peclet"], [64, 0, 0, "-", "powerLaw1D"], [67, 0, 0, "-", "robin"], [68, 0, 0, "-", "source"], [69, 0, 0, "-", "test"]], "examples.convection.advection": [[45, 0, 0, "-", "explicitUpwind"], [46, 0, 0, "-", "implicitUpwind"], [47, 0, 0, "-", "vanLeerUpwind"]], "examples.convection.exponential1D": [[49, 0, 0, "-", "cylindricalMesh1D"], [50, 0, 0, "-", "cylindricalMesh1DNonUniform"], [51, 0, 0, "-", "mesh1D"], [52, 0, 0, "-", "tri2D"]], "examples.convection.exponential1DBack": [[54, 0, 0, "-", "mesh1D"]], "examples.convection.exponential1DSource": [[56, 0, 0, "-", "mesh1D"], [57, 0, 0, "-", "tri2D"]], "examples.convection.exponential2D": [[59, 0, 0, "-", "cylindricalMesh2D"], [60, 0, 0, "-", "cylindricalMesh2DNonUniform"], [61, 0, 0, "-", "mesh2D"], [62, 0, 0, "-", "tri2D"]], "examples.convection.powerLaw1D": [[65, 0, 0, "-", "mesh1D"], [66, 0, 0, "-", "tri2D"]], "examples.diffusion": [[71, 0, 0, "-", "anisotropy"], [72, 0, 0, "-", "circle"], [73, 0, 0, "-", "circleQuad"], [74, 0, 0, "-", "coupled"], [75, 0, 0, "-", "electrostatics"], [76, 0, 0, "-", "explicit"], [81, 0, 0, "-", "mesh1D"], [82, 0, 0, "-", "mesh20x20"], [83, 0, 0, "-", "mesh20x20Coupled"], [84, 0, 0, "-", "nthOrder"], [88, 0, 0, "-", "steadyState"], [104, 0, 0, "-", "test"], [105, 0, 0, "-", "variable"]], "examples.diffusion.explicit": [[77, 0, 0, "-", "mesh1D"], [78, 0, 0, "-", "mixedelement"], [79, 0, 0, "-", "test"], [80, 0, 0, "-", "tri2D"]], "examples.diffusion.nthOrder": [[85, 0, 0, "-", "input4thOrder1D"], [86, 0, 0, "-", "input4thOrder_line"], [87, 0, 0, "-", "test"]], "examples.diffusion.steadyState": [[89, 0, 0, "-", "mesh1D"], [92, 0, 0, "-", "mesh20x20"], [98, 0, 0, "-", "mesh50x50"], [101, 0, 0, "-", "otherMeshes"], [103, 0, 0, "-", "test"]], "examples.diffusion.steadyState.mesh1D": [[90, 0, 0, "-", "inputPeriodic"], [91, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.mesh20x20": [[93, 0, 0, "-", "gmshinput"], [94, 0, 0, "-", "isotropy"], [95, 0, 0, "-", "modifiedMeshInput"], [96, 0, 0, "-", "orthoerror"], [97, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.mesh50x50": [[99, 0, 0, "-", "input"], [100, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.otherMeshes": [[102, 0, 0, "-", "prism"]], "examples.elphf": [[107, 0, 0, "-", "diffusion"], [111, 0, 0, "-", "input"], [112, 0, 0, "-", "phase"], [113, 0, 0, "-", "phaseDiffusion"], [114, 0, 0, "-", "poisson"], [115, 0, 0, "-", "test"]], "examples.elphf.diffusion": [[108, 0, 0, "-", "mesh1D"], [109, 0, 0, "-", "mesh1Ddimensional"], [110, 0, 0, "-", "mesh2D"]], "examples.flow": [[117, 0, 0, "-", "stokesCavity"], [118, 0, 0, "-", "test"]], "examples.levelSet": [[120, 0, 0, "-", "advection"], [125, 0, 0, "-", "distanceFunction"], [131, 0, 0, "-", "electroChem"], [147, 0, 0, "-", "surfactant"], [152, 0, 0, "-", "test"]], "examples.levelSet.advection": [[121, 0, 0, "-", "circle"], [122, 0, 0, "-", "mesh1D"], [123, 0, 0, "-", "test"], [124, 0, 0, "-", "trench"]], "examples.levelSet.distanceFunction": [[126, 0, 0, "-", "circle"], [127, 0, 0, "-", "interior"], [128, 0, 0, "-", "mesh1D"], [129, 0, 0, "-", "square"], [130, 0, 0, "-", "test"]], "examples.levelSet.electroChem": [[132, 0, 0, "-", "adsorbingSurfactantEquation"], [133, 0, 0, "-", "adsorption"], [134, 0, 0, "-", "gapFillDistanceVariable"], [135, 0, 0, "-", "gapFillMesh"], [136, 0, 0, "-", "gold"], [137, 0, 0, "-", "howToWriteAScript"], [138, 0, 0, "-", "leveler"], [139, 0, 0, "-", "lines"], [140, 0, 0, "-", "matplotlibSurfactantViewer"], [141, 0, 0, "-", "mayaviSurfactantViewer"], [142, 0, 0, "-", "metalIonDiffusionEquation"], [143, 0, 0, "-", "simpleTrenchSystem"], [144, 0, 0, "-", "surfactantBulkDiffusionEquation"], [145, 0, 0, "-", "test"], [146, 0, 0, "-", "trenchMesh"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[140, 1, 1, "", "MatplotlibSurfactantViewer"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer": [[140, 2, 1, "", "axes"], [140, 2, 1, "", "cmap"], [140, 2, 1, "", "colorbar"], [140, 2, 1, "", "fig"], [140, 2, 1, "", "id"], [140, 2, 1, "", "log"], [140, 3, 1, "", "plot"], [140, 3, 1, "", "plotMesh"], [140, 3, 1, "", "setLimits"], [140, 2, 1, "", "title"], [140, 2, 1, "", "vars"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[141, 1, 1, "", "MayaviSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer": [[141, 3, 1, "", "plotMesh"], [141, 3, 1, "", "setLimits"], [141, 2, 1, "", "title"], [141, 2, 1, "", "vars"]], "examples.levelSet.surfactant": [[148, 0, 0, "-", "circle"], [149, 0, 0, "-", "expandingCircle"], [150, 0, 0, "-", "square"], [151, 0, 0, "-", "test"]], "examples.meshing": [[154, 0, 0, "-", "gmshRefinement"], [155, 0, 0, "-", "inputGrid2D"], [156, 0, 0, "-", "sphere"], [157, 0, 0, "-", "test"]], "examples.phase": [[160, 0, 0, "-", "anisotropy"], [161, 0, 0, "-", "anisotropyOLD"], [162, 0, 0, "-", "binary"], [163, 0, 0, "-", "binaryCoupled"], [164, 0, 0, "-", "impingement"], [168, 0, 0, "-", "missOrientation"], [173, 0, 0, "-", "polyxtal"], [174, 0, 0, "-", "polyxtalCoupled"], [175, 0, 0, "-", "quaternary"], [176, 0, 0, "-", "simple"], [177, 0, 0, "-", "symmetry"], [178, 0, 0, "-", "test"]], "examples.phase.impingement": [[165, 0, 0, "-", "mesh20x20"], [166, 0, 0, "-", "mesh40x1"], [167, 0, 0, "-", "test"]], "examples.phase.missOrientation": [[169, 0, 0, "-", "circle"], [170, 0, 0, "-", "mesh1D"], [171, 0, 0, "-", "modCircle"], [172, 0, 0, "-", "test"]], "examples.reactiveWetting": [[180, 0, 0, "-", "liquidVapor1D"], [181, 0, 0, "-", "liquidVapor2D"], [182, 0, 0, "-", "test"]], "examples.riemann": [[184, 0, 0, "-", "acoustics"], [185, 0, 0, "-", "test"]], "examples.updating": [[188, 0, 0, "-", "update0_1to1_0"], [189, 0, 0, "-", "update1_0to2_0"], [190, 0, 0, "-", "update2_0to3_0"]], "fipy": [[192, 0, 0, "-", "boundaryConditions"], [191, 4, 1, "", "doctest_raw_input"], [199, 0, 0, "-", "matrices"], [207, 0, 0, "-", "meshes"], [252, 0, 0, "-", "solvers"], [355, 0, 0, "-", "steppers"], [359, 0, 0, "-", "terms"], [191, 4, 1, "", "test"], [392, 0, 0, "-", "testFiPy"], [393, 0, 0, "-", "tests"], [398, 0, 0, "-", "tools"], [418, 0, 0, "-", "variables"], [458, 0, 0, "-", "viewers"]], "fipy.boundaryConditions": [[193, 0, 0, "-", "boundaryCondition"], [194, 0, 0, "-", "constraint"], [195, 0, 0, "-", "fixedFlux"], [196, 0, 0, "-", "fixedValue"], [197, 0, 0, "-", "nthOrderBoundaryCondition"], [198, 0, 0, "-", "test"]], "fipy.boundaryConditions.boundaryCondition": [[193, 1, 1, "", "BoundaryCondition"]], "fipy.boundaryConditions.boundaryCondition.BoundaryCondition": [[193, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.constraint": [[194, 1, 1, "", "Constraint"]], "fipy.boundaryConditions.constraint.Constraint": [[194, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedFlux": [[195, 1, 1, "", "FixedFlux"]], "fipy.boundaryConditions.fixedFlux.FixedFlux": [[195, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedValue": [[196, 1, 1, "", "FixedValue"]], "fipy.boundaryConditions.fixedValue.FixedValue": [[196, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[197, 1, 1, "", "NthOrderBoundaryCondition"]], "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition": [[197, 3, 1, "", "__repr__"]], "fipy.matrices": [[200, 0, 0, "-", "offsetSparseMatrix"], [201, 0, 0, "-", "petscMatrix"], [202, 0, 0, "-", "pysparseMatrix"], [203, 0, 0, "-", "scipyMatrix"], [204, 0, 0, "-", "sparseMatrix"], [205, 0, 0, "-", "test"], [206, 0, 0, "-", "trilinosMatrix"]], "fipy.matrices.offsetSparseMatrix": [[200, 4, 1, "", "OffsetSparseMatrix"]], "fipy.meshes": [[208, 0, 0, "-", "abstractMesh"], [209, 0, 0, "-", "builders"], [216, 0, 0, "-", "cylindricalGrid1D"], [217, 0, 0, "-", "cylindricalGrid2D"], [218, 0, 0, "-", "cylindricalNonUniformGrid1D"], [219, 0, 0, "-", "cylindricalNonUniformGrid2D"], [220, 0, 0, "-", "cylindricalUniformGrid1D"], [221, 0, 0, "-", "cylindricalUniformGrid2D"], [222, 0, 0, "-", "factoryMeshes"], [223, 0, 0, "-", "gmshMesh"], [224, 0, 0, "-", "grid1D"], [225, 0, 0, "-", "grid2D"], [226, 0, 0, "-", "grid3D"], [227, 0, 0, "-", "mesh"], [228, 0, 0, "-", "mesh1D"], [229, 0, 0, "-", "mesh2D"], [230, 0, 0, "-", "nonUniformGrid1D"], [231, 0, 0, "-", "nonUniformGrid2D"], [232, 0, 0, "-", "nonUniformGrid3D"], [233, 0, 0, "-", "periodicGrid1D"], [234, 0, 0, "-", "periodicGrid2D"], [235, 0, 0, "-", "periodicGrid3D"], [236, 0, 0, "-", "representations"], [240, 0, 0, "-", "skewedGrid2D"], [241, 0, 0, "-", "sphericalNonUniformGrid1D"], [242, 0, 0, "-", "sphericalUniformGrid1D"], [243, 0, 0, "-", "test"], [244, 0, 0, "-", "topologies"], [248, 0, 0, "-", "tri2D"], [249, 0, 0, "-", "uniformGrid"], [250, 0, 0, "-", "uniformGrid1D"], [251, 0, 0, "-", "uniformGrid2D"]], "fipy.meshes.abstractMesh": [[208, 1, 1, "", "AbstractMesh"], [208, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.abstractMesh.AbstractMesh": [[208, 2, 1, "", "VTKCellDataSet"], [208, 2, 1, "", "VTKFaceDataSet"], [208, 3, 1, "", "__add__"], [208, 3, 1, "", "__div__"], [208, 3, 1, "", "__getstate__"], [208, 3, 1, "", "__radd__"], [208, 3, 1, "", "__repr__"], [208, 3, 1, "", "__sub__"], [208, 3, 1, "", "__truediv__"], [208, 2, 1, "", "aspect2D"], [208, 2, 1, "", "cellCenters"], [208, 2, 1, "", "cellFaceIDs"], [208, 2, 1, "", "facesBack"], [208, 2, 1, "", "facesBottom"], [208, 2, 1, "", "facesDown"], [208, 2, 1, "", "facesFront"], [208, 2, 1, "", "facesLeft"], [208, 2, 1, "", "facesRight"], [208, 2, 1, "", "facesTop"], [208, 2, 1, "", "facesUp"], [208, 2, 1, "", "x"], [208, 2, 1, "", "y"], [208, 2, 1, "", "z"]], "fipy.meshes.abstractMesh.MeshAdditionError": [[208, 6, 1, "", "__cause__"], [208, 6, 1, "", "__context__"], [208, 3, 1, "", "__delattr__"], [208, 3, 1, "", "__getattribute__"], [208, 3, 1, "", "__reduce__"], [208, 3, 1, "", "__repr__"], [208, 3, 1, "", "__setattr__"], [208, 3, 1, "", "__str__"], [208, 3, 1, "", "add_note"], [208, 3, 1, "", "with_traceback"]], "fipy.meshes.builders": [[210, 0, 0, "-", "abstractGridBuilder"], [211, 0, 0, "-", "grid1DBuilder"], [212, 0, 0, "-", "grid2DBuilder"], [213, 0, 0, "-", "grid3DBuilder"], [214, 0, 0, "-", "periodicGrid1DBuilder"], [215, 0, 0, "-", "utilityClasses"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[218, 1, 1, "", "CylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D": [[218, 2, 1, "", "VTKCellDataSet"], [218, 2, 1, "", "VTKFaceDataSet"], [218, 3, 1, "", "__add__"], [218, 3, 1, "", "__div__"], [218, 3, 1, "", "__getstate__"], [218, 3, 1, "", "__mul__"], [218, 3, 1, "", "__radd__"], [218, 3, 1, "", "__repr__"], [218, 3, 1, "", "__rmul__"], [218, 3, 1, "", "__sub__"], [218, 3, 1, "", "__truediv__"], [218, 2, 1, "", "aspect2D"], [218, 2, 1, "", "cellCenters"], [218, 2, 1, "", "cellFaceIDs"], [218, 2, 1, "", "facesBack"], [218, 2, 1, "", "facesBottom"], [218, 2, 1, "", "facesDown"], [218, 2, 1, "", "facesFront"], [218, 2, 1, "", "facesLeft"], [218, 2, 1, "", "facesRight"], [218, 2, 1, "", "facesTop"], [218, 2, 1, "", "facesUp"], [218, 2, 1, "", "x"], [218, 2, 1, "", "y"], [218, 2, 1, "", "z"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[219, 1, 1, "", "CylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D": [[219, 2, 1, "", "VTKCellDataSet"], [219, 2, 1, "", "VTKFaceDataSet"], [219, 3, 1, "", "__add__"], [219, 3, 1, "", "__div__"], [219, 3, 1, "", "__getstate__"], [219, 3, 1, "", "__mul__"], [219, 3, 1, "", "__radd__"], [219, 3, 1, "", "__repr__"], [219, 3, 1, "", "__rmul__"], [219, 3, 1, "", "__sub__"], [219, 3, 1, "", "__truediv__"], [219, 2, 1, "", "aspect2D"], [219, 2, 1, "", "cellCenters"], [219, 2, 1, "", "cellFaceIDs"], [219, 3, 1, "", "extrude"], [219, 2, 1, "", "facesBack"], [219, 2, 1, "", "facesBottom"], [219, 2, 1, "", "facesDown"], [219, 2, 1, "", "facesFront"], [219, 2, 1, "", "facesLeft"], [219, 2, 1, "", "facesRight"], [219, 2, 1, "", "facesTop"], [219, 2, 1, "", "facesUp"], [219, 2, 1, "", "x"], [219, 2, 1, "", "y"], [219, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid1D": [[220, 1, 1, "", "CylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D": [[220, 2, 1, "", "VTKCellDataSet"], [220, 2, 1, "", "VTKFaceDataSet"], [220, 3, 1, "", "__add__"], [220, 3, 1, "", "__div__"], [220, 3, 1, "", "__getstate__"], [220, 3, 1, "", "__radd__"], [220, 3, 1, "", "__repr__"], [220, 3, 1, "", "__sub__"], [220, 3, 1, "", "__truediv__"], [220, 2, 1, "", "aspect2D"], [220, 2, 1, "", "cellCenters"], [220, 2, 1, "", "cellFaceIDs"], [220, 2, 1, "", "exteriorFaces"], [220, 2, 1, "", "facesBack"], [220, 2, 1, "", "facesBottom"], [220, 2, 1, "", "facesDown"], [220, 2, 1, "", "facesFront"], [220, 2, 1, "", "facesLeft"], [220, 2, 1, "", "facesRight"], [220, 2, 1, "", "facesTop"], [220, 2, 1, "", "facesUp"], [220, 2, 1, "", "x"], [220, 2, 1, "", "y"], [220, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid2D": [[221, 1, 1, "", "CylindricalUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D": [[221, 2, 1, "", "VTKCellDataSet"], [221, 2, 1, "", "VTKFaceDataSet"], [221, 3, 1, "", "__add__"], [221, 3, 1, "", "__div__"], [221, 3, 1, "", "__getstate__"], [221, 3, 1, "", "__radd__"], [221, 3, 1, "", "__repr__"], [221, 3, 1, "", "__sub__"], [221, 3, 1, "", "__truediv__"], [221, 2, 1, "", "aspect2D"], [221, 2, 1, "", "cellCenters"], [221, 2, 1, "", "cellFaceIDs"], [221, 2, 1, "", "facesBack"], [221, 2, 1, "", "facesBottom"], [221, 2, 1, "", "facesDown"], [221, 2, 1, "", "facesFront"], [221, 2, 1, "", "facesLeft"], [221, 2, 1, "", "facesRight"], [221, 2, 1, "", "facesTop"], [221, 2, 1, "", "facesUp"], [221, 2, 1, "", "x"], [221, 2, 1, "", "y"], [221, 2, 1, "", "z"]], "fipy.meshes.factoryMeshes": [[222, 4, 1, "", "CylindricalGrid1D"], [222, 4, 1, "", "CylindricalGrid2D"], [222, 4, 1, "", "Grid1D"], [222, 4, 1, "", "Grid2D"], [222, 4, 1, "", "Grid3D"], [222, 4, 1, "", "SphericalGrid1D"]], "fipy.meshes.gmshMesh": [[223, 1, 1, "", "Gmsh2D"], [223, 1, 1, "", "Gmsh2DIn3DSpace"], [223, 1, 1, "", "Gmsh3D"], [223, 5, 1, "", "GmshException"], [223, 1, 1, "", "GmshFile"], [223, 1, 1, "", "GmshGrid2D"], [223, 1, 1, "", "GmshGrid3D"], [223, 1, 1, "", "MSHFile"], [223, 5, 1, "", "MeshExportError"], [223, 1, 1, "", "POSFile"], [223, 4, 1, "", "gmshVersion"], [223, 4, 1, "", "openMSHFile"], [223, 4, 1, "", "openPOSFile"]], "fipy.meshes.gmshMesh.Gmsh2D": [[223, 2, 1, "", "VTKCellDataSet"], [223, 2, 1, "", "VTKFaceDataSet"], [223, 3, 1, "", "__add__"], [223, 3, 1, "", "__div__"], [223, 3, 1, "", "__getstate__"], [223, 3, 1, "", "__mul__"], [223, 3, 1, "", "__radd__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__rmul__"], [223, 3, 1, "", "__sub__"], [223, 3, 1, "", "__truediv__"], [223, 2, 1, "", "aspect2D"], [223, 2, 1, "", "cellCenters"], [223, 2, 1, "", "cellFaceIDs"], [223, 3, 1, "", "extrude"], [223, 2, 1, "", "facesBack"], [223, 2, 1, "", "facesBottom"], [223, 2, 1, "", "facesDown"], [223, 2, 1, "", "facesFront"], [223, 2, 1, "", "facesLeft"], [223, 2, 1, "", "facesRight"], [223, 2, 1, "", "facesTop"], [223, 2, 1, "", "facesUp"], [223, 2, 1, "", "x"], [223, 2, 1, "", "y"], [223, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace": [[223, 2, 1, "", "VTKCellDataSet"], [223, 2, 1, "", "VTKFaceDataSet"], [223, 3, 1, "", "__add__"], [223, 3, 1, "", "__div__"], [223, 3, 1, "", "__getstate__"], [223, 3, 1, "", "__mul__"], [223, 3, 1, "", "__radd__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__rmul__"], [223, 3, 1, "", "__sub__"], [223, 3, 1, "", "__truediv__"], [223, 2, 1, "", "aspect2D"], [223, 2, 1, "", "cellCenters"], [223, 2, 1, "", "cellFaceIDs"], [223, 3, 1, "", "extrude"], [223, 2, 1, "", "facesBack"], [223, 2, 1, "", "facesBottom"], [223, 2, 1, "", "facesDown"], [223, 2, 1, "", "facesFront"], [223, 2, 1, "", "facesLeft"], [223, 2, 1, "", "facesRight"], [223, 2, 1, "", "facesTop"], [223, 2, 1, "", "facesUp"], [223, 2, 1, "", "x"], [223, 2, 1, "", "y"], [223, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh3D": [[223, 2, 1, "", "VTKCellDataSet"], [223, 2, 1, "", "VTKFaceDataSet"], [223, 3, 1, "", "__add__"], [223, 3, 1, "", "__div__"], [223, 3, 1, "", "__getstate__"], [223, 3, 1, "", "__mul__"], [223, 3, 1, "", "__radd__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__rmul__"], [223, 3, 1, "", "__sub__"], [223, 3, 1, "", "__truediv__"], [223, 2, 1, "", "aspect2D"], [223, 2, 1, "", "cellCenters"], [223, 2, 1, "", "cellFaceIDs"], [223, 2, 1, "", "facesBack"], [223, 2, 1, "", "facesBottom"], [223, 2, 1, "", "facesDown"], [223, 2, 1, "", "facesFront"], [223, 2, 1, "", "facesLeft"], [223, 2, 1, "", "facesRight"], [223, 2, 1, "", "facesTop"], [223, 2, 1, "", "facesUp"], [223, 2, 1, "", "x"], [223, 2, 1, "", "y"], [223, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshException": [[223, 6, 1, "", "__cause__"], [223, 6, 1, "", "__context__"], [223, 3, 1, "", "__delattr__"], [223, 3, 1, "", "__getattribute__"], [223, 3, 1, "", "__reduce__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__setattr__"], [223, 3, 1, "", "__str__"], [223, 3, 1, "", "add_note"], [223, 3, 1, "", "with_traceback"]], "fipy.meshes.gmshMesh.GmshGrid2D": [[223, 2, 1, "", "VTKCellDataSet"], [223, 2, 1, "", "VTKFaceDataSet"], [223, 3, 1, "", "__add__"], [223, 3, 1, "", "__div__"], [223, 3, 1, "", "__getstate__"], [223, 3, 1, "", "__mul__"], [223, 3, 1, "", "__radd__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__rmul__"], [223, 3, 1, "", "__sub__"], [223, 3, 1, "", "__truediv__"], [223, 2, 1, "", "aspect2D"], [223, 2, 1, "", "cellCenters"], [223, 2, 1, "", "cellFaceIDs"], [223, 3, 1, "", "extrude"], [223, 2, 1, "", "facesBack"], [223, 2, 1, "", "facesBottom"], [223, 2, 1, "", "facesDown"], [223, 2, 1, "", "facesFront"], [223, 2, 1, "", "facesLeft"], [223, 2, 1, "", "facesRight"], [223, 2, 1, "", "facesTop"], [223, 2, 1, "", "facesUp"], [223, 2, 1, "", "x"], [223, 2, 1, "", "y"], [223, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshGrid3D": [[223, 2, 1, "", "VTKCellDataSet"], [223, 2, 1, "", "VTKFaceDataSet"], [223, 3, 1, "", "__add__"], [223, 3, 1, "", "__div__"], [223, 3, 1, "", "__getstate__"], [223, 3, 1, "", "__mul__"], [223, 3, 1, "", "__radd__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__rmul__"], [223, 3, 1, "", "__sub__"], [223, 3, 1, "", "__truediv__"], [223, 2, 1, "", "aspect2D"], [223, 2, 1, "", "cellCenters"], [223, 2, 1, "", "cellFaceIDs"], [223, 2, 1, "", "facesBack"], [223, 2, 1, "", "facesBottom"], [223, 2, 1, "", "facesDown"], [223, 2, 1, "", "facesFront"], [223, 2, 1, "", "facesLeft"], [223, 2, 1, "", "facesRight"], [223, 2, 1, "", "facesTop"], [223, 2, 1, "", "facesUp"], [223, 2, 1, "", "x"], [223, 2, 1, "", "y"], [223, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.MSHFile": [[223, 3, 1, "", "makeMapVariables"], [223, 3, 1, "", "read"]], "fipy.meshes.gmshMesh.MeshExportError": [[223, 6, 1, "", "__cause__"], [223, 6, 1, "", "__context__"], [223, 3, 1, "", "__delattr__"], [223, 3, 1, "", "__getattribute__"], [223, 3, 1, "", "__reduce__"], [223, 3, 1, "", "__repr__"], [223, 3, 1, "", "__setattr__"], [223, 3, 1, "", "__str__"], [223, 3, 1, "", "add_note"], [223, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh": [[227, 1, 1, "", "Mesh"], [227, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.mesh.Mesh": [[227, 2, 1, "", "VTKCellDataSet"], [227, 2, 1, "", "VTKFaceDataSet"], [227, 3, 1, "", "__add__"], [227, 3, 1, "", "__div__"], [227, 3, 1, "", "__getstate__"], [227, 3, 1, "", "__mul__"], [227, 3, 1, "", "__radd__"], [227, 3, 1, "", "__repr__"], [227, 3, 1, "", "__rmul__"], [227, 3, 1, "", "__sub__"], [227, 3, 1, "", "__truediv__"], [227, 2, 1, "", "aspect2D"], [227, 2, 1, "", "cellCenters"], [227, 2, 1, "", "cellFaceIDs"], [227, 2, 1, "", "facesBack"], [227, 2, 1, "", "facesBottom"], [227, 2, 1, "", "facesDown"], [227, 2, 1, "", "facesFront"], [227, 2, 1, "", "facesLeft"], [227, 2, 1, "", "facesRight"], [227, 2, 1, "", "facesTop"], [227, 2, 1, "", "facesUp"], [227, 2, 1, "", "x"], [227, 2, 1, "", "y"], [227, 2, 1, "", "z"]], "fipy.meshes.mesh.MeshAdditionError": [[227, 6, 1, "", "__cause__"], [227, 6, 1, "", "__context__"], [227, 3, 1, "", "__delattr__"], [227, 3, 1, "", "__getattribute__"], [227, 3, 1, "", "__reduce__"], [227, 3, 1, "", "__repr__"], [227, 3, 1, "", "__setattr__"], [227, 3, 1, "", "__str__"], [227, 3, 1, "", "add_note"], [227, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh1D": [[228, 1, 1, "", "Mesh1D"]], "fipy.meshes.mesh1D.Mesh1D": [[228, 2, 1, "", "VTKCellDataSet"], [228, 2, 1, "", "VTKFaceDataSet"], [228, 3, 1, "", "__add__"], [228, 3, 1, "", "__div__"], [228, 3, 1, "", "__getstate__"], [228, 3, 1, "", "__mul__"], [228, 3, 1, "", "__radd__"], [228, 3, 1, "", "__repr__"], [228, 3, 1, "", "__rmul__"], [228, 3, 1, "", "__sub__"], [228, 3, 1, "", "__truediv__"], [228, 2, 1, "", "aspect2D"], [228, 2, 1, "", "cellCenters"], [228, 2, 1, "", "cellFaceIDs"], [228, 2, 1, "", "facesBack"], [228, 2, 1, "", "facesBottom"], [228, 2, 1, "", "facesDown"], [228, 2, 1, "", "facesFront"], [228, 2, 1, "", "facesLeft"], [228, 2, 1, "", "facesRight"], [228, 2, 1, "", "facesTop"], [228, 2, 1, "", "facesUp"], [228, 2, 1, "", "x"], [228, 2, 1, "", "y"], [228, 2, 1, "", "z"]], "fipy.meshes.mesh2D": [[229, 1, 1, "", "Mesh2D"]], "fipy.meshes.mesh2D.Mesh2D": [[229, 2, 1, "", "VTKCellDataSet"], [229, 2, 1, "", "VTKFaceDataSet"], [229, 3, 1, "", "__add__"], [229, 3, 1, "", "__div__"], [229, 3, 1, "", "__getstate__"], [229, 3, 1, "", "__mul__"], [229, 3, 1, "", "__radd__"], [229, 3, 1, "", "__repr__"], [229, 3, 1, "", "__rmul__"], [229, 3, 1, "", "__sub__"], [229, 3, 1, "", "__truediv__"], [229, 2, 1, "", "aspect2D"], [229, 2, 1, "", "cellCenters"], [229, 2, 1, "", "cellFaceIDs"], [229, 3, 1, "", "extrude"], [229, 2, 1, "", "facesBack"], [229, 2, 1, "", "facesBottom"], [229, 2, 1, "", "facesDown"], [229, 2, 1, "", "facesFront"], [229, 2, 1, "", "facesLeft"], [229, 2, 1, "", "facesRight"], [229, 2, 1, "", "facesTop"], [229, 2, 1, "", "facesUp"], [229, 2, 1, "", "x"], [229, 2, 1, "", "y"], [229, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid1D": [[230, 1, 1, "", "NonUniformGrid1D"]], "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D": [[230, 2, 1, "", "VTKCellDataSet"], [230, 2, 1, "", "VTKFaceDataSet"], [230, 3, 1, "", "__add__"], [230, 3, 1, "", "__div__"], [230, 3, 1, "", "__getstate__"], [230, 3, 1, "", "__mul__"], [230, 3, 1, "", "__radd__"], [230, 3, 1, "", "__repr__"], [230, 3, 1, "", "__rmul__"], [230, 3, 1, "", "__sub__"], [230, 3, 1, "", "__truediv__"], [230, 2, 1, "", "aspect2D"], [230, 2, 1, "", "cellCenters"], [230, 2, 1, "", "cellFaceIDs"], [230, 2, 1, "", "facesBack"], [230, 2, 1, "", "facesBottom"], [230, 2, 1, "", "facesDown"], [230, 2, 1, "", "facesFront"], [230, 2, 1, "", "facesLeft"], [230, 2, 1, "", "facesRight"], [230, 2, 1, "", "facesTop"], [230, 2, 1, "", "facesUp"], [230, 2, 1, "", "x"], [230, 2, 1, "", "y"], [230, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid2D": [[231, 1, 1, "", "NonUniformGrid2D"]], "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D": [[231, 2, 1, "", "VTKCellDataSet"], [231, 2, 1, "", "VTKFaceDataSet"], [231, 3, 1, "", "__add__"], [231, 3, 1, "", "__div__"], [231, 3, 1, "", "__getstate__"], [231, 3, 1, "", "__mul__"], [231, 3, 1, "", "__radd__"], [231, 3, 1, "", "__repr__"], [231, 3, 1, "", "__rmul__"], [231, 3, 1, "", "__sub__"], [231, 3, 1, "", "__truediv__"], [231, 2, 1, "", "aspect2D"], [231, 2, 1, "", "cellCenters"], [231, 2, 1, "", "cellFaceIDs"], [231, 3, 1, "", "extrude"], [231, 2, 1, "", "facesBack"], [231, 2, 1, "", "facesBottom"], [231, 2, 1, "", "facesDown"], [231, 2, 1, "", "facesFront"], [231, 2, 1, "", "facesLeft"], [231, 2, 1, "", "facesRight"], [231, 2, 1, "", "facesTop"], [231, 2, 1, "", "facesUp"], [231, 2, 1, "", "x"], [231, 2, 1, "", "y"], [231, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid3D": [[232, 1, 1, "", "NonUniformGrid3D"]], "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D": [[232, 2, 1, "", "VTKCellDataSet"], [232, 2, 1, "", "VTKFaceDataSet"], [232, 3, 1, "", "__add__"], [232, 3, 1, "", "__div__"], [232, 3, 1, "", "__getstate__"], [232, 3, 1, "", "__mul__"], [232, 3, 1, "", "__radd__"], [232, 3, 1, "", "__repr__"], [232, 3, 1, "", "__rmul__"], [232, 3, 1, "", "__sub__"], [232, 3, 1, "", "__truediv__"], [232, 2, 1, "", "aspect2D"], [232, 2, 1, "", "cellCenters"], [232, 2, 1, "", "cellFaceIDs"], [232, 2, 1, "", "facesBack"], [232, 2, 1, "", "facesBottom"], [232, 2, 1, "", "facesDown"], [232, 2, 1, "", "facesFront"], [232, 2, 1, "", "facesLeft"], [232, 2, 1, "", "facesRight"], [232, 2, 1, "", "facesTop"], [232, 2, 1, "", "facesUp"], [232, 2, 1, "", "x"], [232, 2, 1, "", "y"], [232, 2, 1, "", "z"]], "fipy.meshes.periodicGrid1D": [[233, 1, 1, "", "PeriodicGrid1D"]], "fipy.meshes.periodicGrid1D.PeriodicGrid1D": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D": [[234, 1, 1, "", "PeriodicGrid2D"], [234, 1, 1, "", "PeriodicGrid2DLeftRight"], [234, 1, 1, "", "PeriodicGrid2DTopBottom"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2D": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__getstate__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellCenters"], [234, 2, 1, "", "cellFaceIDs"], [234, 3, 1, "", "extrude"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__getstate__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellCenters"], [234, 2, 1, "", "cellFaceIDs"], [234, 3, 1, "", "extrude"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__getstate__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellCenters"], [234, 2, 1, "", "cellFaceIDs"], [234, 3, 1, "", "extrude"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D": [[235, 1, 1, "", "PeriodicGrid3D"], [235, 1, 1, "", "PeriodicGrid3DFrontBack"], [235, 1, 1, "", "PeriodicGrid3DLeftRight"], [235, 1, 1, "", "PeriodicGrid3DLeftRightFrontBack"], [235, 1, 1, "", "PeriodicGrid3DLeftRightTopBottom"], [235, 1, 1, "", "PeriodicGrid3DTopBottom"], [235, 1, 1, "", "PeriodicGrid3DTopBottomFrontBack"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3D": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__getstate__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellCenters"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__getstate__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellCenters"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__getstate__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellCenters"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__getstate__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellCenters"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__getstate__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellCenters"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__getstate__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellCenters"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack": [[235, 2, 1, "", "VTKCellDataSet"], [235, 2, 1, "", "VTKFaceDataSet"], [235, 3, 1, "", "__add__"], [235, 3, 1, "", "__div__"], [235, 3, 1, "", "__getstate__"], [235, 3, 1, "", "__mul__"], [235, 3, 1, "", "__radd__"], [235, 3, 1, "", "__repr__"], [235, 3, 1, "", "__rmul__"], [235, 3, 1, "", "__sub__"], [235, 3, 1, "", "__truediv__"], [235, 2, 1, "", "aspect2D"], [235, 2, 1, "", "cellCenters"], [235, 2, 1, "", "cellFaceIDs"], [235, 2, 1, "", "facesBack"], [235, 2, 1, "", "facesBottom"], [235, 2, 1, "", "facesDown"], [235, 2, 1, "", "facesFront"], [235, 2, 1, "", "facesLeft"], [235, 2, 1, "", "facesRight"], [235, 2, 1, "", "facesTop"], [235, 2, 1, "", "facesUp"], [235, 2, 1, "", "x"], [235, 2, 1, "", "y"], [235, 2, 1, "", "z"]], "fipy.meshes.representations": [[237, 0, 0, "-", "abstractRepresentation"], [238, 0, 0, "-", "gridRepresentation"], [239, 0, 0, "-", "meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[240, 1, 1, "", "SkewedGrid2D"]], "fipy.meshes.skewedGrid2D.SkewedGrid2D": [[240, 2, 1, "", "VTKCellDataSet"], [240, 2, 1, "", "VTKFaceDataSet"], [240, 3, 1, "", "__add__"], [240, 3, 1, "", "__div__"], [240, 3, 1, "", "__getstate__"], [240, 3, 1, "", "__mul__"], [240, 3, 1, "", "__radd__"], [240, 3, 1, "", "__repr__"], [240, 3, 1, "", "__rmul__"], [240, 3, 1, "", "__sub__"], [240, 3, 1, "", "__truediv__"], [240, 2, 1, "", "aspect2D"], [240, 2, 1, "", "cellCenters"], [240, 2, 1, "", "cellFaceIDs"], [240, 3, 1, "", "extrude"], [240, 2, 1, "", "facesBack"], [240, 2, 1, "", "facesBottom"], [240, 2, 1, "", "facesDown"], [240, 2, 1, "", "facesFront"], [240, 2, 1, "", "facesLeft"], [240, 2, 1, "", "facesRight"], [240, 2, 1, "", "facesTop"], [240, 2, 1, "", "facesUp"], [240, 2, 1, "", "physicalShape"], [240, 2, 1, "", "x"], [240, 2, 1, "", "y"], [240, 2, 1, "", "z"]], "fipy.meshes.sphericalNonUniformGrid1D": [[241, 1, 1, "", "SphericalNonUniformGrid1D"]], "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D": [[241, 2, 1, "", "VTKCellDataSet"], [241, 2, 1, "", "VTKFaceDataSet"], [241, 3, 1, "", "__add__"], [241, 3, 1, "", "__div__"], [241, 3, 1, "", "__getstate__"], [241, 3, 1, "", "__mul__"], [241, 3, 1, "", "__radd__"], [241, 3, 1, "", "__repr__"], [241, 3, 1, "", "__rmul__"], [241, 3, 1, "", "__sub__"], [241, 3, 1, "", "__truediv__"], [241, 2, 1, "", "aspect2D"], [241, 2, 1, "", "cellCenters"], [241, 2, 1, "", "cellFaceIDs"], [241, 2, 1, "", "facesBack"], [241, 2, 1, "", "facesBottom"], [241, 2, 1, "", "facesDown"], [241, 2, 1, "", "facesFront"], [241, 2, 1, "", "facesLeft"], [241, 2, 1, "", "facesRight"], [241, 2, 1, "", "facesTop"], [241, 2, 1, "", "facesUp"], [241, 2, 1, "", "x"], [241, 2, 1, "", "y"], [241, 2, 1, "", "z"]], "fipy.meshes.sphericalUniformGrid1D": [[242, 1, 1, "", "SphericalUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D": [[242, 2, 1, "", "VTKCellDataSet"], [242, 2, 1, "", "VTKFaceDataSet"], [242, 3, 1, "", "__add__"], [242, 3, 1, "", "__div__"], [242, 3, 1, "", "__getstate__"], [242, 3, 1, "", "__radd__"], [242, 3, 1, "", "__repr__"], [242, 3, 1, "", "__sub__"], [242, 3, 1, "", "__truediv__"], [242, 2, 1, "", "aspect2D"], [242, 2, 1, "", "cellCenters"], [242, 2, 1, "", "cellFaceIDs"], [242, 2, 1, "", "exteriorFaces"], [242, 2, 1, "", "facesBack"], [242, 2, 1, "", "facesBottom"], [242, 2, 1, "", "facesDown"], [242, 2, 1, "", "facesFront"], [242, 2, 1, "", "facesLeft"], [242, 2, 1, "", "facesRight"], [242, 2, 1, "", "facesTop"], [242, 2, 1, "", "facesUp"], [242, 2, 1, "", "x"], [242, 2, 1, "", "y"], [242, 2, 1, "", "z"]], "fipy.meshes.topologies": [[245, 0, 0, "-", "abstractTopology"], [246, 0, 0, "-", "gridTopology"], [247, 0, 0, "-", "meshTopology"]], "fipy.meshes.tri2D": [[248, 1, 1, "", "Tri2D"]], "fipy.meshes.tri2D.Tri2D": [[248, 2, 1, "", "VTKCellDataSet"], [248, 2, 1, "", "VTKFaceDataSet"], [248, 3, 1, "", "__add__"], [248, 3, 1, "", "__div__"], [248, 3, 1, "", "__getstate__"], [248, 3, 1, "", "__mul__"], [248, 3, 1, "", "__radd__"], [248, 3, 1, "", "__repr__"], [248, 3, 1, "", "__rmul__"], [248, 3, 1, "", "__sub__"], [248, 3, 1, "", "__truediv__"], [248, 2, 1, "", "aspect2D"], [248, 2, 1, "", "cellCenters"], [248, 2, 1, "", "cellFaceIDs"], [248, 3, 1, "", "extrude"], [248, 2, 1, "", "facesBack"], [248, 2, 1, "", "facesBottom"], [248, 2, 1, "", "facesDown"], [248, 2, 1, "", "facesFront"], [248, 2, 1, "", "facesLeft"], [248, 2, 1, "", "facesRight"], [248, 2, 1, "", "facesTop"], [248, 2, 1, "", "facesUp"], [248, 2, 1, "", "physicalShape"], [248, 2, 1, "", "x"], [248, 2, 1, "", "y"], [248, 2, 1, "", "z"]], "fipy.meshes.uniformGrid": [[249, 1, 1, "", "UniformGrid"]], "fipy.meshes.uniformGrid.UniformGrid": [[249, 2, 1, "", "VTKCellDataSet"], [249, 2, 1, "", "VTKFaceDataSet"], [249, 3, 1, "", "__add__"], [249, 3, 1, "", "__div__"], [249, 3, 1, "", "__getstate__"], [249, 3, 1, "", "__radd__"], [249, 3, 1, "", "__repr__"], [249, 3, 1, "", "__sub__"], [249, 3, 1, "", "__truediv__"], [249, 2, 1, "", "aspect2D"], [249, 2, 1, "", "cellCenters"], [249, 2, 1, "", "cellFaceIDs"], [249, 2, 1, "", "facesBack"], [249, 2, 1, "", "facesBottom"], [249, 2, 1, "", "facesDown"], [249, 2, 1, "", "facesFront"], [249, 2, 1, "", "facesLeft"], [249, 2, 1, "", "facesRight"], [249, 2, 1, "", "facesTop"], [249, 2, 1, "", "facesUp"], [249, 2, 1, "", "x"], [249, 2, 1, "", "y"], [249, 2, 1, "", "z"]], "fipy.meshes.uniformGrid1D": [[250, 1, 1, "", "UniformGrid1D"]], "fipy.meshes.uniformGrid1D.UniformGrid1D": [[250, 2, 1, "", "VTKCellDataSet"], [250, 2, 1, "", "VTKFaceDataSet"], [250, 3, 1, "", "__add__"], [250, 3, 1, "", "__div__"], [250, 3, 1, "", "__getstate__"], [250, 3, 1, "", "__radd__"], [250, 3, 1, "", "__repr__"], [250, 3, 1, "", "__sub__"], [250, 3, 1, "", "__truediv__"], [250, 2, 1, "", "aspect2D"], [250, 2, 1, "", "cellCenters"], [250, 2, 1, "", "cellFaceIDs"], [250, 2, 1, "", "exteriorFaces"], [250, 2, 1, "", "facesBack"], [250, 2, 1, "", "facesBottom"], [250, 2, 1, "", "facesDown"], [250, 2, 1, "", "facesFront"], [250, 2, 1, "", "facesLeft"], [250, 2, 1, "", "facesRight"], [250, 2, 1, "", "facesTop"], [250, 2, 1, "", "facesUp"], [250, 2, 1, "", "x"], [250, 2, 1, "", "y"], [250, 2, 1, "", "z"]], "fipy.meshes.uniformGrid2D": [[251, 1, 1, "", "UniformGrid2D"]], "fipy.meshes.uniformGrid2D.UniformGrid2D": [[251, 2, 1, "", "VTKCellDataSet"], [251, 2, 1, "", "VTKFaceDataSet"], [251, 3, 1, "", "__add__"], [251, 3, 1, "", "__div__"], [251, 3, 1, "", "__getstate__"], [251, 3, 1, "", "__radd__"], [251, 3, 1, "", "__repr__"], [251, 3, 1, "", "__sub__"], [251, 3, 1, "", "__truediv__"], [251, 2, 1, "", "aspect2D"], [251, 2, 1, "", "cellCenters"], [251, 2, 1, "", "cellFaceIDs"], [251, 2, 1, "", "facesBack"], [251, 2, 1, "", "facesBottom"], [251, 2, 1, "", "facesDown"], [251, 2, 1, "", "facesFront"], [251, 2, 1, "", "facesLeft"], [251, 2, 1, "", "facesRight"], [251, 2, 1, "", "facesTop"], [251, 2, 1, "", "facesUp"], [251, 2, 1, "", "x"], [251, 2, 1, "", "y"], [251, 2, 1, "", "z"]], "fipy.solvers": [[252, 6, 1, "", "DefaultAsymmetricSolver"], [252, 6, 1, "", "DefaultSolver"], [252, 6, 1, "", "DummySolver"], [252, 6, 1, "", "GeneralSolver"], [252, 5, 1, "", "SerialSolverError"], [253, 0, 0, "-", "convergence"], [254, 0, 0, "-", "petsc"], [276, 0, 0, "-", "preconditioner"], [277, 0, 0, "-", "pyAMG"], [285, 0, 0, "-", "pyamgx"], [297, 0, 0, "-", "pysparse"], [311, 0, 0, "-", "pysparseMatrixSolver"], [312, 0, 0, "-", "scipy"], [325, 0, 0, "-", "solver"], [326, 0, 0, "-", "test"], [327, 0, 0, "-", "trilinos"]], "fipy.solvers.SerialSolverError": [[252, 6, 1, "", "__cause__"], [252, 6, 1, "", "__context__"], [252, 3, 1, "", "__delattr__"], [252, 3, 1, "", "__getattribute__"], [252, 3, 1, "", "__reduce__"], [252, 3, 1, "", "__repr__"], [252, 3, 1, "", "__setattr__"], [252, 3, 1, "", "__str__"], [252, 3, 1, "", "add_note"], [252, 3, 1, "", "with_traceback"]], "fipy.solvers.convergence": [[253, 1, 1, "", "AbsoluteToleranceConvergence"], [253, 1, 1, "", "BreakdownDivergence"], [253, 1, 1, "", "Convergence"], [253, 1, 1, "", "ConvergenceBase"], [253, 1, 1, "", "Divergence"], [253, 1, 1, "", "HappyBreakdownConvergence"], [253, 1, 1, "", "IllConditionedDivergence"], [253, 1, 1, "", "IllConditionedPreconditionerDivergence"], [253, 1, 1, "", "IteratingConvergence"], [253, 1, 1, "", "IterationConvergence"], [253, 1, 1, "", "IterationDivergence"], [253, 1, 1, "", "LossOfAccuracyConvergence"], [253, 1, 1, "", "NullDivergence"], [253, 1, 1, "", "OutOfRangeDivergence"], [253, 1, 1, "", "PreconditioningDivergence"], [253, 1, 1, "", "RHSZeroConvergence"], [253, 1, 1, "", "RelativeToleranceConvergence"], [253, 1, 1, "", "StagnatedDivergence"], [253, 1, 1, "", "ToleranceDivergence"]], "fipy.solvers.convergence.AbsoluteToleranceConvergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.BreakdownDivergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.Convergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.ConvergenceBase": [[253, 3, 1, "", "__str__"], [253, 6, 1, "", "actual_code"], [253, 6, 1, "", "criterion"], [253, 6, 1, "", "iterations"], [253, 6, 1, "", "residual"], [253, 6, 1, "", "solver"], [253, 6, 1, "", "status_code"], [253, 6, 1, "", "status_name"], [253, 6, 1, "", "tolerance_scale"]], "fipy.solvers.convergence.Divergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.HappyBreakdownConvergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IllConditionedDivergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IllConditionedPreconditionerDivergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IteratingConvergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IterationConvergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IterationDivergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.LossOfAccuracyConvergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.NullDivergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.OutOfRangeDivergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.PreconditioningDivergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.RHSZeroConvergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.RelativeToleranceConvergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.StagnatedDivergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.convergence.ToleranceDivergence": [[253, 3, 1, "", "__str__"]], "fipy.solvers.petsc": [[255, 0, 0, "-", "comms"], [259, 0, 0, "-", "dummySolver"], [260, 0, 0, "-", "linearBicgSolver"], [261, 0, 0, "-", "linearCGSSolver"], [262, 0, 0, "-", "linearGMRESSolver"], [263, 0, 0, "-", "linearLUSolver"], [264, 0, 0, "-", "linearPCGSolver"], [265, 0, 0, "-", "petscConvergence"], [266, 0, 0, "-", "petscKrylovSolver"], [267, 0, 0, "-", "petscSolver"], [268, 0, 0, "-", "preconditioners"]], "fipy.solvers.petsc.comms": [[256, 0, 0, "-", "parallelPETScCommWrapper"], [257, 0, 0, "-", "petscCommWrapper"], [258, 0, 0, "-", "serialPETScCommWrapper"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper": [[256, 1, 1, "", "ParallelPETScCommWrapper"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper": [[256, 3, 1, "", "__getstate__"], [256, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.comms.petscCommWrapper": [[257, 1, 1, "", "PETScCommWrapper"]], "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper": [[257, 3, 1, "", "__getstate__"], [257, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper": [[258, 1, 1, "", "SerialPETScCommWrapper"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper": [[258, 3, 1, "", "__getstate__"], [258, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.dummySolver": [[259, 1, 1, "", "DummySolver"]], "fipy.solvers.petsc.dummySolver.DummySolver": [[259, 6, 1, "", "DEFAULT_ITERATIONS"], [259, 6, 1, "", "DEFAULT_PRECONDITIONER"], [259, 6, 1, "", "DEFAULT_TOLERANCE"], [259, 6, 1, "", "LEGACY_TOLERANCE"], [259, 3, 1, "", "__repr__"], [259, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearBicgSolver": [[260, 1, 1, "", "LinearBicgSolver"]], "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver": [[260, 6, 1, "", "DEFAULT_ITERATIONS"], [260, 6, 1, "", "DEFAULT_PRECONDITIONER"], [260, 6, 1, "", "DEFAULT_TOLERANCE"], [260, 6, 1, "", "LEGACY_TOLERANCE"], [260, 3, 1, "", "__repr__"], [260, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearCGSSolver": [[261, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver": [[261, 6, 1, "", "DEFAULT_ITERATIONS"], [261, 6, 1, "", "DEFAULT_PRECONDITIONER"], [261, 6, 1, "", "DEFAULT_TOLERANCE"], [261, 6, 1, "", "LEGACY_TOLERANCE"], [261, 3, 1, "", "__repr__"], [261, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearGMRESSolver": [[262, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver": [[262, 6, 1, "", "DEFAULT_ITERATIONS"], [262, 6, 1, "", "DEFAULT_PRECONDITIONER"], [262, 6, 1, "", "DEFAULT_TOLERANCE"], [262, 6, 1, "", "LEGACY_TOLERANCE"], [262, 3, 1, "", "__repr__"], [262, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearLUSolver": [[263, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.petsc.linearLUSolver.LinearLUSolver": [[263, 6, 1, "", "DEFAULT_ITERATIONS"], [263, 6, 1, "", "DEFAULT_PRECONDITIONER"], [263, 6, 1, "", "DEFAULT_TOLERANCE"], [263, 6, 1, "", "LEGACY_TOLERANCE"], [263, 3, 1, "", "__repr__"], [263, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearPCGSolver": [[264, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver": [[264, 6, 1, "", "DEFAULT_ITERATIONS"], [264, 6, 1, "", "DEFAULT_PRECONDITIONER"], [264, 6, 1, "", "DEFAULT_TOLERANCE"], [264, 6, 1, "", "LEGACY_TOLERANCE"], [264, 3, 1, "", "__repr__"], [264, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.petscConvergence": [[265, 1, 1, "", "KSP_AbsoluteToleranceConvergence"], [265, 1, 1, "", "KSP_BreakdownBICGDivergence"], [265, 1, 1, "", "KSP_BreakdownDivergence"], [265, 1, 1, "", "KSP_HappyBreakdownConvergence"], [265, 1, 1, "", "KSP_IndefiniteMatrixDivergence"], [265, 1, 1, "", "KSP_IndefinitePreconditionerDivergence"], [265, 1, 1, "", "KSP_IteratingConvergence"], [265, 1, 1, "", "KSP_IterationConvergence"], [265, 1, 1, "", "KSP_IterationDivergence"], [265, 1, 1, "", "KSP_NanOrInfDivergence"], [265, 1, 1, "", "KSP_NonSymmetricDivergence"], [265, 1, 1, "", "KSP_NormalAbsoluteToleranceConvergence"], [265, 1, 1, "", "KSP_NormalRelativeToleranceConvergence"], [265, 1, 1, "", "KSP_NullDivergence"], [265, 1, 1, "", "KSP_PreconditioningDivergence"], [265, 1, 1, "", "KSP_RelativeToleranceConvergence"], [265, 1, 1, "", "KSP_ToleranceDivergence"]], "fipy.solvers.petsc.petscConvergence.KSP_AbsoluteToleranceConvergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_BreakdownBICGDivergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_BreakdownDivergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_HappyBreakdownConvergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IndefiniteMatrixDivergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IndefinitePreconditionerDivergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IteratingConvergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IterationConvergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IterationDivergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NanOrInfDivergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NonSymmetricDivergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NormalAbsoluteToleranceConvergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NormalRelativeToleranceConvergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NullDivergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_PreconditioningDivergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_RelativeToleranceConvergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_ToleranceDivergence": [[265, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscKrylovSolver": [[266, 1, 1, "", "PETScKrylovSolver"]], "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver": [[266, 6, 1, "", "DEFAULT_ITERATIONS"], [266, 6, 1, "", "DEFAULT_PRECONDITIONER"], [266, 6, 1, "", "DEFAULT_TOLERANCE"], [266, 6, 1, "", "LEGACY_TOLERANCE"], [266, 3, 1, "", "__repr__"], [266, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.petscSolver": [[267, 1, 1, "", "PETScSolver"]], "fipy.solvers.petsc.petscSolver.PETScSolver": [[267, 6, 1, "", "DEFAULT_ITERATIONS"], [267, 6, 1, "", "DEFAULT_PRECONDITIONER"], [267, 6, 1, "", "DEFAULT_TOLERANCE"], [267, 6, 1, "", "LEGACY_TOLERANCE"], [267, 3, 1, "", "__repr__"], [267, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.preconditioners": [[268, 1, 1, "", "DefaultPreconditioner"], [268, 1, 1, "", "ICPreconditioner"], [268, 1, 1, "", "ILUPreconditioner"], [268, 1, 1, "", "JacobiPreconditioner"], [268, 1, 1, "", "LUPreconditioner"], [268, 1, 1, "", "SSORPreconditioner"], [269, 0, 0, "-", "defaultPreconditioner"], [270, 0, 0, "-", "icPreconditioner"], [271, 0, 0, "-", "iluPreconditioner"], [272, 0, 0, "-", "jacobiPreconditioner"], [273, 0, 0, "-", "luPreconditioner"], [274, 0, 0, "-", "petscPreconditioner"], [275, 0, 0, "-", "ssorPreconditioner"]], "fipy.solvers.petsc.preconditioners.defaultPreconditioner": [[269, 1, 1, "", "DefaultPreconditioner"]], "fipy.solvers.petsc.preconditioners.icPreconditioner": [[270, 1, 1, "", "ICPreconditioner"]], "fipy.solvers.petsc.preconditioners.iluPreconditioner": [[271, 1, 1, "", "ILUPreconditioner"]], "fipy.solvers.petsc.preconditioners.jacobiPreconditioner": [[272, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.petsc.preconditioners.luPreconditioner": [[273, 1, 1, "", "LUPreconditioner"]], "fipy.solvers.petsc.preconditioners.petscPreconditioner": [[274, 1, 1, "", "PETScPreconditioner"]], "fipy.solvers.petsc.preconditioners.ssorPreconditioner": [[275, 1, 1, "", "SSORPreconditioner"]], "fipy.solvers.preconditioner": [[276, 1, 1, "", "MatrixModifyingPreconditioner"], [276, 1, 1, "", "Preconditioner"], [276, 1, 1, "", "SolverModifyingPreconditioner"]], "fipy.solvers.pyAMG": [[278, 0, 0, "-", "linearCGSSolver"], [279, 0, 0, "-", "linearGMRESSolver"], [280, 0, 0, "-", "linearGeneralSolver"], [281, 0, 0, "-", "linearLUSolver"], [282, 0, 0, "-", "linearPCGSolver"], [283, 0, 0, "-", "preconditioners"]], "fipy.solvers.pyAMG.linearCGSSolver": [[278, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver": [[278, 6, 1, "", "DEFAULT_ITERATIONS"], [278, 6, 1, "", "DEFAULT_PRECONDITIONER"], [278, 6, 1, "", "DEFAULT_TOLERANCE"], [278, 6, 1, "", "LEGACY_TOLERANCE"], [278, 3, 1, "", "__repr__"], [278, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.linearGMRESSolver": [[279, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver": [[279, 6, 1, "", "DEFAULT_ITERATIONS"], [279, 6, 1, "", "DEFAULT_PRECONDITIONER"], [279, 6, 1, "", "DEFAULT_TOLERANCE"], [279, 6, 1, "", "LEGACY_TOLERANCE"], [279, 3, 1, "", "__repr__"], [279, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.linearGeneralSolver": [[280, 1, 1, "", "LinearGeneralSolver"]], "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver": [[280, 6, 1, "", "DEFAULT_ITERATIONS"], [280, 6, 1, "", "DEFAULT_PRECONDITIONER"], [280, 6, 1, "", "DEFAULT_TOLERANCE"], [280, 6, 1, "", "LEGACY_TOLERANCE"], [280, 3, 1, "", "__repr__"], [280, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.linearLUSolver": [[281, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver": [[281, 6, 1, "", "DEFAULT_ITERATIONS"], [281, 6, 1, "", "DEFAULT_PRECONDITIONER"], [281, 6, 1, "", "DEFAULT_TOLERANCE"], [281, 6, 1, "", "LEGACY_TOLERANCE"], [281, 3, 1, "", "__repr__"], [281, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.linearPCGSolver": [[282, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver": [[282, 6, 1, "", "DEFAULT_ITERATIONS"], [282, 6, 1, "", "DEFAULT_PRECONDITIONER"], [282, 6, 1, "", "DEFAULT_TOLERANCE"], [282, 6, 1, "", "LEGACY_TOLERANCE"], [282, 3, 1, "", "__repr__"], [282, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.preconditioners": [[284, 0, 0, "-", "smoothedAggregationPreconditioner"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[284, 1, 1, "", "SmoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[286, 0, 0, "-", "aggregationAMGSolver"], [287, 0, 0, "-", "classicalAMGSolver"], [288, 0, 0, "-", "linearBiCGStabSolver"], [289, 0, 0, "-", "linearFGMRESSolver"], [290, 0, 0, "-", "linearGMRESSolver"], [291, 0, 0, "-", "linearLUSolver"], [292, 0, 0, "-", "linearPCGSolver"], [293, 0, 0, "-", "preconditioners"], [294, 0, 0, "-", "pyAMGXSolver"], [295, 0, 0, "-", "pyamgxConvergence"], [296, 0, 0, "-", "smoothers"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[286, 1, 1, "", "AggregationAMGSolver"]], "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver": [[286, 6, 1, "", "DEFAULT_ITERATIONS"], [286, 6, 1, "", "DEFAULT_PRECONDITIONER"], [286, 6, 1, "", "DEFAULT_SMOOTHER"], [286, 6, 1, "", "DEFAULT_TOLERANCE"], [286, 6, 1, "", "LEGACY_TOLERANCE"], [286, 3, 1, "", "__repr__"], [286, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[287, 1, 1, "", "ClassicalAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver": [[287, 6, 1, "", "DEFAULT_ITERATIONS"], [287, 6, 1, "", "DEFAULT_PRECONDITIONER"], [287, 6, 1, "", "DEFAULT_SMOOTHER"], [287, 6, 1, "", "DEFAULT_TOLERANCE"], [287, 6, 1, "", "LEGACY_TOLERANCE"], [287, 3, 1, "", "__repr__"], [287, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[288, 1, 1, "", "LinearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver": [[288, 6, 1, "", "DEFAULT_ITERATIONS"], [288, 6, 1, "", "DEFAULT_PRECONDITIONER"], [288, 6, 1, "", "DEFAULT_SMOOTHER"], [288, 6, 1, "", "DEFAULT_TOLERANCE"], [288, 6, 1, "", "LEGACY_TOLERANCE"], [288, 3, 1, "", "__repr__"], [288, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[289, 1, 1, "", "LinearFGMRESSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver": [[289, 6, 1, "", "DEFAULT_ITERATIONS"], [289, 6, 1, "", "DEFAULT_PRECONDITIONER"], [289, 6, 1, "", "DEFAULT_SMOOTHER"], [289, 6, 1, "", "DEFAULT_TOLERANCE"], [289, 6, 1, "", "LEGACY_TOLERANCE"], [289, 3, 1, "", "__repr__"], [289, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[290, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver": [[290, 6, 1, "", "DEFAULT_ITERATIONS"], [290, 6, 1, "", "DEFAULT_PRECONDITIONER"], [290, 6, 1, "", "DEFAULT_SMOOTHER"], [290, 6, 1, "", "DEFAULT_TOLERANCE"], [290, 6, 1, "", "LEGACY_TOLERANCE"], [290, 3, 1, "", "__repr__"], [290, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearLUSolver": [[291, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver": [[291, 6, 1, "", "DEFAULT_ITERATIONS"], [291, 6, 1, "", "DEFAULT_PRECONDITIONER"], [291, 6, 1, "", "DEFAULT_TOLERANCE"], [291, 6, 1, "", "LEGACY_TOLERANCE"], [291, 3, 1, "", "__repr__"], [291, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearPCGSolver": [[292, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver": [[292, 6, 1, "", "DEFAULT_ITERATIONS"], [292, 6, 1, "", "DEFAULT_PRECONDITIONER"], [292, 6, 1, "", "DEFAULT_SMOOTHER"], [292, 6, 1, "", "DEFAULT_TOLERANCE"], [292, 6, 1, "", "LEGACY_TOLERANCE"], [292, 3, 1, "", "__repr__"], [292, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.preconditioners": [[293, 1, 1, "", "AMGPreconditioner"], [293, 1, 1, "", "AggregationAMGPreconditioner"], [293, 1, 1, "", "BiCGStabPreconditioner"], [293, 1, 1, "", "CGPreconditioner"], [293, 1, 1, "", "DILUPreconditioner"], [293, 1, 1, "", "FGMRESPreconditioner"], [293, 1, 1, "", "GaussSeidelPreconditioner"], [293, 1, 1, "", "ILUPreconditioner"], [293, 1, 1, "", "JacobiPreconditioner"], [293, 1, 1, "", "PolynomialPreconditioner"], [293, 1, 1, "", "PyAMGXPreconditioner"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[294, 1, 1, "", "PyAMGXSolver"]], "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver": [[294, 6, 1, "", "DEFAULT_ITERATIONS"], [294, 6, 1, "", "DEFAULT_PRECONDITIONER"], [294, 6, 1, "", "DEFAULT_SMOOTHER"], [294, 6, 1, "", "DEFAULT_TOLERANCE"], [294, 6, 1, "", "LEGACY_TOLERANCE"], [294, 3, 1, "", "__repr__"], [294, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.pyamgxConvergence": [[295, 1, 1, "", "pyamgx_BreakdownDivergence"], [295, 1, 1, "", "pyamgx_Convergence"], [295, 1, 1, "", "pyamgx_IterationDivergence"]], "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_BreakdownDivergence": [[295, 3, 1, "", "__str__"]], "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_Convergence": [[295, 3, 1, "", "__str__"]], "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_IterationDivergence": [[295, 3, 1, "", "__str__"]], "fipy.solvers.pyamgx.smoothers": [[296, 1, 1, "", "Smoother"]], "fipy.solvers.pysparse": [[298, 0, 0, "-", "linearCGSSolver"], [299, 0, 0, "-", "linearGMRESSolver"], [300, 0, 0, "-", "linearInitialSolver"], [301, 0, 0, "-", "linearJORSolver"], [302, 0, 0, "-", "linearLUSolver"], [303, 0, 0, "-", "linearPCGSolver"], [304, 0, 0, "-", "linearRHSSolver"], [305, 0, 0, "-", "preconditioners"], [309, 0, 0, "-", "pysparseConvergence"], [310, 0, 0, "-", "pysparseSolver"]], "fipy.solvers.pysparse.linearCGSSolver": [[298, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver": [[298, 6, 1, "", "DEFAULT_ITERATIONS"], [298, 6, 1, "", "DEFAULT_PRECONDITIONER"], [298, 6, 1, "", "DEFAULT_TOLERANCE"], [298, 6, 1, "", "LEGACY_TOLERANCE"], [298, 3, 1, "", "__repr__"], [298, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearGMRESSolver": [[299, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver": [[299, 6, 1, "", "DEFAULT_ITERATIONS"], [299, 6, 1, "", "DEFAULT_PRECONDITIONER"], [299, 6, 1, "", "DEFAULT_TOLERANCE"], [299, 6, 1, "", "LEGACY_TOLERANCE"], [299, 3, 1, "", "__repr__"], [299, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearInitialSolver": [[300, 1, 1, "", "LinearInitialSolver"]], "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver": [[300, 6, 1, "", "DEFAULT_ITERATIONS"], [300, 6, 1, "", "DEFAULT_PRECONDITIONER"], [300, 6, 1, "", "DEFAULT_TOLERANCE"], [300, 6, 1, "", "LEGACY_TOLERANCE"], [300, 3, 1, "", "__repr__"], [300, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearJORSolver": [[301, 1, 1, "", "LinearJORSolver"]], "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver": [[301, 6, 1, "", "DEFAULT_ITERATIONS"], [301, 6, 1, "", "DEFAULT_PRECONDITIONER"], [301, 6, 1, "", "DEFAULT_TOLERANCE"], [301, 6, 1, "", "LEGACY_TOLERANCE"], [301, 3, 1, "", "__repr__"], [301, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearLUSolver": [[302, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver": [[302, 6, 1, "", "DEFAULT_ITERATIONS"], [302, 6, 1, "", "DEFAULT_PRECONDITIONER"], [302, 6, 1, "", "DEFAULT_TOLERANCE"], [302, 6, 1, "", "LEGACY_TOLERANCE"], [302, 3, 1, "", "__repr__"], [302, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearPCGSolver": [[303, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver": [[303, 6, 1, "", "DEFAULT_ITERATIONS"], [303, 6, 1, "", "DEFAULT_PRECONDITIONER"], [303, 6, 1, "", "DEFAULT_TOLERANCE"], [303, 6, 1, "", "LEGACY_TOLERANCE"], [303, 3, 1, "", "__repr__"], [303, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearRHSSolver": [[304, 1, 1, "", "LinearRHSSolver"]], "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver": [[304, 6, 1, "", "DEFAULT_ITERATIONS"], [304, 6, 1, "", "DEFAULT_PRECONDITIONER"], [304, 6, 1, "", "DEFAULT_TOLERANCE"], [304, 6, 1, "", "LEGACY_TOLERANCE"], [304, 3, 1, "", "__repr__"], [304, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.preconditioners": [[305, 1, 1, "", "JacobiPreconditioner"], [305, 1, 1, "", "SSORPreconditioner"], [306, 0, 0, "-", "jacobiPreconditioner"], [307, 0, 0, "-", "pysparsePreconditioner"], [308, 0, 0, "-", "ssorPreconditioner"]], "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner": [[306, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.pysparsePreconditioner": [[307, 1, 1, "", "PysparsePreconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorPreconditioner": [[308, 1, 1, "", "SSORPreconditioner"]], "fipy.solvers.pysparse.pysparseConvergence": [[309, 1, 1, "", "Pysparse_AbsoluteToleranceConvergence"], [309, 1, 1, "", "Pysparse_IllConditionedDivergence"], [309, 1, 1, "", "Pysparse_IllConditionedPreconditionerDivergence"], [309, 1, 1, "", "Pysparse_IterationDivergence"], [309, 1, 1, "", "Pysparse_NonPosDefPreconditioningDivergence"], [309, 1, 1, "", "Pysparse_OutOfRangeDivergence"], [309, 1, 1, "", "Pysparse_RHSZeroConvergence"], [309, 1, 1, "", "Pysparse_RelativeToleranceConvergence"], [309, 1, 1, "", "Pysparse_StagnatedDivergence"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_AbsoluteToleranceConvergence": [[309, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedDivergence": [[309, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedPreconditionerDivergence": [[309, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IterationDivergence": [[309, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_NonPosDefPreconditioningDivergence": [[309, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_OutOfRangeDivergence": [[309, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RHSZeroConvergence": [[309, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RelativeToleranceConvergence": [[309, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_StagnatedDivergence": [[309, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseSolver": [[310, 1, 1, "", "PysparseSolver"]], "fipy.solvers.pysparse.pysparseSolver.PysparseSolver": [[310, 6, 1, "", "DEFAULT_ITERATIONS"], [310, 6, 1, "", "DEFAULT_PRECONDITIONER"], [310, 6, 1, "", "DEFAULT_TOLERANCE"], [310, 6, 1, "", "LEGACY_TOLERANCE"], [310, 3, 1, "", "__repr__"], [310, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy": [[313, 0, 0, "-", "linearBicgstabSolver"], [314, 0, 0, "-", "linearCGSSolver"], [315, 0, 0, "-", "linearGMRESSolver"], [316, 0, 0, "-", "linearLUSolver"], [317, 0, 0, "-", "linearPCGSolver"], [318, 0, 0, "-", "preconditioners"], [322, 0, 0, "-", "scipyConvergence"], [323, 0, 0, "-", "scipyKrylovSolver"], [324, 0, 0, "-", "scipySolver"]], "fipy.solvers.scipy.linearBicgstabSolver": [[313, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver": [[313, 6, 1, "", "DEFAULT_ITERATIONS"], [313, 6, 1, "", "DEFAULT_PRECONDITIONER"], [313, 6, 1, "", "DEFAULT_TOLERANCE"], [313, 6, 1, "", "LEGACY_TOLERANCE"], [313, 3, 1, "", "__repr__"], [313, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearCGSSolver": [[314, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver": [[314, 6, 1, "", "DEFAULT_ITERATIONS"], [314, 6, 1, "", "DEFAULT_PRECONDITIONER"], [314, 6, 1, "", "DEFAULT_TOLERANCE"], [314, 6, 1, "", "LEGACY_TOLERANCE"], [314, 3, 1, "", "__repr__"], [314, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearGMRESSolver": [[315, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver": [[315, 6, 1, "", "DEFAULT_ITERATIONS"], [315, 6, 1, "", "DEFAULT_PRECONDITIONER"], [315, 6, 1, "", "DEFAULT_TOLERANCE"], [315, 6, 1, "", "LEGACY_TOLERANCE"], [315, 3, 1, "", "__repr__"], [315, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearLUSolver": [[316, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.scipy.linearLUSolver.LinearLUSolver": [[316, 6, 1, "", "DEFAULT_ITERATIONS"], [316, 6, 1, "", "DEFAULT_PRECONDITIONER"], [316, 6, 1, "", "DEFAULT_TOLERANCE"], [316, 6, 1, "", "LEGACY_TOLERANCE"], [316, 3, 1, "", "__repr__"], [316, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearPCGSolver": [[317, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver": [[317, 6, 1, "", "DEFAULT_ITERATIONS"], [317, 6, 1, "", "DEFAULT_PRECONDITIONER"], [317, 6, 1, "", "DEFAULT_TOLERANCE"], [317, 6, 1, "", "LEGACY_TOLERANCE"], [317, 3, 1, "", "__repr__"], [317, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.preconditioners": [[318, 1, 1, "", "ILUPreconditioner"], [318, 1, 1, "", "JacobiPreconditioner"], [319, 0, 0, "-", "iluPreconditioner"], [320, 0, 0, "-", "jacobiPreconditioner"], [321, 0, 0, "-", "scipyPreconditioner"]], "fipy.solvers.scipy.preconditioners.iluPreconditioner": [[319, 1, 1, "", "ILUPreconditioner"]], "fipy.solvers.scipy.preconditioners.jacobiPreconditioner": [[320, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners.scipyPreconditioner": [[321, 1, 1, "", "ScipyPreconditioner"]], "fipy.solvers.scipy.scipyConvergence": [[322, 1, 1, "", "SciPy_BreakdownDivergence"], [322, 1, 1, "", "SciPy_Convergence"], [322, 1, 1, "", "SciPy_IterationDivergence"]], "fipy.solvers.scipy.scipyConvergence.SciPy_BreakdownDivergence": [[322, 3, 1, "", "__str__"]], "fipy.solvers.scipy.scipyConvergence.SciPy_Convergence": [[322, 3, 1, "", "__str__"]], "fipy.solvers.scipy.scipyConvergence.SciPy_IterationDivergence": [[322, 3, 1, "", "__str__"]], "fipy.solvers.scipy.scipyKrylovSolver": [[323, 1, 1, "", "ScipyKrylovSolver"]], "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver": [[323, 6, 1, "", "DEFAULT_ITERATIONS"], [323, 6, 1, "", "DEFAULT_PRECONDITIONER"], [323, 6, 1, "", "DEFAULT_TOLERANCE"], [323, 6, 1, "", "LEGACY_TOLERANCE"], [323, 3, 1, "", "__repr__"], [323, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.scipySolver": [[324, 1, 1, "", "ScipySolver"]], "fipy.solvers.scipy.scipySolver.ScipySolver": [[324, 6, 1, "", "DEFAULT_ITERATIONS"], [324, 6, 1, "", "DEFAULT_PRECONDITIONER"], [324, 6, 1, "", "DEFAULT_TOLERANCE"], [324, 6, 1, "", "LEGACY_TOLERANCE"], [324, 3, 1, "", "__repr__"], [324, 2, 1, "", "default_tolerance"]], "fipy.solvers.solver": [[325, 5, 1, "", "BreakdownWarning"], [325, 5, 1, "", "IllConditionedPreconditionerWarning"], [325, 5, 1, "", "IllegalInputOrBreakdownWarning"], [325, 5, 1, "", "LossOfPrecisionWarning"], [325, 5, 1, "", "MatrixIllConditionedWarning"], [325, 5, 1, "", "MaximumIterationWarning"], [325, 5, 1, "", "NormalConvergence"], [325, 5, 1, "", "ParameterWarning"], [325, 5, 1, "", "PreconditionerNotPositiveDefiniteWarning"], [325, 5, 1, "", "PreconditionerWarning"], [325, 5, 1, "", "ScalarQuantityOutOfRangeWarning"], [325, 1, 1, "", "Solver"], [325, 5, 1, "", "SolverConvergenceWarning"], [325, 5, 1, "", "StagnatedSolverWarning"]], "fipy.solvers.solver.BreakdownWarning": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.IllConditionedPreconditionerWarning": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.IllegalInputOrBreakdownWarning": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.LossOfPrecisionWarning": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MatrixIllConditionedWarning": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MaximumIterationWarning": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.NormalConvergence": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.ParameterWarning": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerWarning": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.Solver": [[325, 6, 1, "", "DEFAULT_ITERATIONS"], [325, 6, 1, "", "DEFAULT_PRECONDITIONER"], [325, 6, 1, "", "DEFAULT_TOLERANCE"], [325, 6, 1, "", "LEGACY_TOLERANCE"], [325, 3, 1, "", "__repr__"], [325, 2, 1, "", "default_tolerance"]], "fipy.solvers.solver.SolverConvergenceWarning": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.StagnatedSolverWarning": [[325, 6, 1, "", "__cause__"], [325, 6, 1, "", "__context__"], [325, 3, 1, "", "__delattr__"], [325, 3, 1, "", "__getattribute__"], [325, 3, 1, "", "__reduce__"], [325, 3, 1, "", "__repr__"], [325, 3, 1, "", "__setattr__"], [325, 3, 1, "", "__str__"], [325, 3, 1, "", "add_note"], [325, 3, 1, "", "with_traceback"]], "fipy.solvers.trilinos": [[328, 0, 0, "-", "aztecConvergence"], [329, 0, 0, "-", "comms"], [333, 0, 0, "-", "linearBicgstabSolver"], [334, 0, 0, "-", "linearCGSSolver"], [335, 0, 0, "-", "linearGMRESSolver"], [336, 0, 0, "-", "linearLUSolver"], [337, 0, 0, "-", "linearPCGSolver"], [338, 0, 0, "-", "preconditioners"], [351, 0, 0, "-", "trilinosAztecOOSolver"], [352, 0, 0, "-", "trilinosMLTest"], [353, 0, 0, "-", "trilinosNonlinearSolver"], [354, 0, 0, "-", "trilinosSolver"]], "fipy.solvers.trilinos.aztecConvergence": [[328, 1, 1, "", "AZ_BreakdownDivergence"], [328, 1, 1, "", "AZ_IllConditionedDivergence"], [328, 1, 1, "", "AZ_IterationDivergence"], [328, 1, 1, "", "AZ_LossOfAccuracyConvergence"], [328, 1, 1, "", "AZ_NormalConvergence"], [328, 1, 1, "", "AZ_ParameterDivergence"]], "fipy.solvers.trilinos.aztecConvergence.AZ_BreakdownDivergence": [[328, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_IllConditionedDivergence": [[328, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_IterationDivergence": [[328, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_LossOfAccuracyConvergence": [[328, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_NormalConvergence": [[328, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_ParameterDivergence": [[328, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.comms": [[330, 0, 0, "-", "epetraCommWrapper"], [331, 0, 0, "-", "parallelEpetraCommWrapper"], [332, 0, 0, "-", "serialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[330, 1, 1, "", "EpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper": [[330, 3, 1, "", "__getstate__"], [330, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper": [[331, 1, 1, "", "ParallelEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper": [[331, 3, 1, "", "MaxAll"], [331, 3, 1, "", "MinAll"], [331, 3, 1, "", "__getstate__"], [331, 3, 1, "", "__repr__"], [331, 3, 1, "", "allgather"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[332, 1, 1, "", "SerialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper": [[332, 3, 1, "", "__getstate__"], [332, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[333, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver": [[333, 6, 1, "", "DEFAULT_ITERATIONS"], [333, 6, 1, "", "DEFAULT_PRECONDITIONER"], [333, 6, 1, "", "DEFAULT_TOLERANCE"], [333, 6, 1, "", "LEGACY_TOLERANCE"], [333, 3, 1, "", "__repr__"], [333, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearCGSSolver": [[334, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver": [[334, 6, 1, "", "DEFAULT_ITERATIONS"], [334, 6, 1, "", "DEFAULT_PRECONDITIONER"], [334, 6, 1, "", "DEFAULT_TOLERANCE"], [334, 6, 1, "", "LEGACY_TOLERANCE"], [334, 3, 1, "", "__repr__"], [334, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearGMRESSolver": [[335, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver": [[335, 6, 1, "", "DEFAULT_ITERATIONS"], [335, 6, 1, "", "DEFAULT_PRECONDITIONER"], [335, 6, 1, "", "DEFAULT_TOLERANCE"], [335, 6, 1, "", "LEGACY_TOLERANCE"], [335, 3, 1, "", "__repr__"], [335, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearLUSolver": [[336, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver": [[336, 6, 1, "", "DEFAULT_ITERATIONS"], [336, 6, 1, "", "DEFAULT_PRECONDITIONER"], [336, 6, 1, "", "DEFAULT_TOLERANCE"], [336, 6, 1, "", "LEGACY_TOLERANCE"], [336, 3, 1, "", "__repr__"], [336, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearPCGSolver": [[337, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver": [[337, 6, 1, "", "DEFAULT_ITERATIONS"], [337, 6, 1, "", "DEFAULT_PRECONDITIONER"], [337, 6, 1, "", "DEFAULT_TOLERANCE"], [337, 6, 1, "", "LEGACY_TOLERANCE"], [337, 3, 1, "", "__repr__"], [337, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.preconditioners": [[338, 1, 1, "", "DomDecompPreconditioner"], [338, 1, 1, "", "ICPreconditioner"], [338, 1, 1, "", "ILUPreconditioner"], [338, 1, 1, "", "JacobiPreconditioner"], [338, 1, 1, "", "MultilevelDDMLPreconditioner"], [338, 1, 1, "", "MultilevelDDPreconditioner"], [338, 1, 1, "", "MultilevelNSSAPreconditioner"], [338, 1, 1, "", "MultilevelSAPreconditioner"], [338, 1, 1, "", "MultilevelSGSPreconditioner"], [338, 1, 1, "", "MultilevelSolverSmootherPreconditioner"], [339, 0, 0, "-", "domDecompPreconditioner"], [340, 0, 0, "-", "icPreconditioner"], [341, 0, 0, "-", "iluPreconditioner"], [342, 0, 0, "-", "jacobiPreconditioner"], [343, 0, 0, "-", "multilevelDDMLPreconditioner"], [344, 0, 0, "-", "multilevelDDPreconditioner"], [345, 0, 0, "-", "multilevelNSSAPreconditioner"], [346, 0, 0, "-", "multilevelPreconditioner"], [347, 0, 0, "-", "multilevelSAPreconditioner"], [348, 0, 0, "-", "multilevelSGSPreconditioner"], [349, 0, 0, "-", "multilevelSolverSmootherPreconditioner"], [350, 0, 0, "-", "trilinosPreconditioner"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[339, 1, 1, "", "DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[340, 1, 1, "", "ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.iluPreconditioner": [[341, 1, 1, "", "ILUPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[342, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[343, 1, 1, "", "MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[344, 1, 1, "", "MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[345, 1, 1, "", "MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner": [[346, 1, 1, "", "MultilevelPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[347, 1, 1, "", "MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[348, 1, 1, "", "MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[349, 1, 1, "", "MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner": [[350, 1, 1, "", "TrilinosPreconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[351, 1, 1, "", "TrilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver": [[351, 6, 1, "", "DEFAULT_ITERATIONS"], [351, 6, 1, "", "DEFAULT_PRECONDITIONER"], [351, 6, 1, "", "DEFAULT_TOLERANCE"], [351, 6, 1, "", "LEGACY_TOLERANCE"], [351, 3, 1, "", "__repr__"], [351, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.trilinosMLTest": [[352, 1, 1, "", "TrilinosMLTest"]], "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest": [[352, 6, 1, "", "DEFAULT_ITERATIONS"], [352, 6, 1, "", "DEFAULT_PRECONDITIONER"], [352, 6, 1, "", "DEFAULT_TOLERANCE"], [352, 6, 1, "", "LEGACY_TOLERANCE"], [352, 3, 1, "", "__repr__"], [352, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[353, 1, 1, "", "TrilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver": [[353, 6, 1, "", "DEFAULT_ITERATIONS"], [353, 6, 1, "", "DEFAULT_PRECONDITIONER"], [353, 6, 1, "", "DEFAULT_TOLERANCE"], [353, 6, 1, "", "LEGACY_TOLERANCE"], [353, 3, 1, "", "__repr__"], [353, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.trilinosSolver": [[354, 1, 1, "", "TrilinosSolver"]], "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver": [[354, 6, 1, "", "DEFAULT_ITERATIONS"], [354, 6, 1, "", "DEFAULT_PRECONDITIONER"], [354, 6, 1, "", "DEFAULT_TOLERANCE"], [354, 6, 1, "", "LEGACY_TOLERANCE"], [354, 3, 1, "", "__repr__"], [354, 2, 1, "", "default_tolerance"]], "fipy.steppers": [[355, 4, 1, "", "L1error"], [355, 4, 1, "", "L2error"], [355, 4, 1, "", "LINFerror"], [355, 4, 1, "", "error"], [356, 0, 0, "-", "pidStepper"], [357, 0, 0, "-", "pseudoRKQSStepper"], [355, 4, 1, "", "residual"], [358, 0, 0, "-", "stepper"], [355, 4, 1, "", "sweepMonotonic"]], "fipy.steppers.pidStepper": [[356, 1, 1, "", "PIDStepper"]], "fipy.steppers.pseudoRKQSStepper": [[357, 1, 1, "", "PseudoRKQSStepper"]], "fipy.steppers.stepper": [[358, 1, 1, "", "Stepper"]], "fipy.terms": [[359, 5, 1, "", "AbstractBaseClassError"], [359, 5, 1, "", "ExplicitVariableError"], [359, 5, 1, "", "IncorrectSolutionVariable"], [359, 5, 1, "", "SolutionVariableNumberError"], [359, 5, 1, "", "SolutionVariableRequiredError"], [359, 5, 1, "", "TermMultiplyError"], [359, 5, 1, "", "TransientTermError"], [359, 5, 1, "", "VectorCoeffError"], [360, 0, 0, "-", "abstractBinaryTerm"], [361, 0, 0, "-", "abstractConvectionTerm"], [362, 0, 0, "-", "abstractDiffusionTerm"], [363, 0, 0, "-", "abstractUpwindConvectionTerm"], [364, 0, 0, "-", "advectionTerm"], [365, 0, 0, "-", "asymmetricConvectionTerm"], [366, 0, 0, "-", "binaryTerm"], [367, 0, 0, "-", "cellTerm"], [368, 0, 0, "-", "centralDiffConvectionTerm"], [369, 0, 0, "-", "coupledBinaryTerm"], [370, 0, 0, "-", "diffusionTerm"], [371, 0, 0, "-", "diffusionTermCorrection"], [372, 0, 0, "-", "diffusionTermNoCorrection"], [373, 0, 0, "-", "explicitDiffusionTerm"], [374, 0, 0, "-", "explicitSourceTerm"], [375, 0, 0, "-", "explicitUpwindConvectionTerm"], [376, 0, 0, "-", "exponentialConvectionTerm"], [377, 0, 0, "-", "faceTerm"], [378, 0, 0, "-", "firstOrderAdvectionTerm"], [379, 0, 0, "-", "hybridConvectionTerm"], [380, 0, 0, "-", "implicitDiffusionTerm"], [381, 0, 0, "-", "implicitSourceTerm"], [382, 0, 0, "-", "nonDiffusionTerm"], [383, 0, 0, "-", "powerLawConvectionTerm"], [384, 0, 0, "-", "residualTerm"], [385, 0, 0, "-", "sourceTerm"], [386, 0, 0, "-", "term"], [387, 0, 0, "-", "test"], [388, 0, 0, "-", "transientTerm"], [389, 0, 0, "-", "unaryTerm"], [390, 0, 0, "-", "upwindConvectionTerm"], [391, 0, 0, "-", "vanLeerConvectionTerm"]], "fipy.terms.AbstractBaseClassError": [[359, 6, 1, "", "__cause__"], [359, 6, 1, "", "__context__"], [359, 3, 1, "", "__delattr__"], [359, 3, 1, "", "__getattribute__"], [359, 3, 1, "", "__reduce__"], [359, 3, 1, "", "__repr__"], [359, 3, 1, "", "__setattr__"], [359, 3, 1, "", "__str__"], [359, 3, 1, "", "add_note"], [359, 3, 1, "", "with_traceback"]], "fipy.terms.ExplicitVariableError": [[359, 6, 1, "", "__cause__"], [359, 6, 1, "", "__context__"], [359, 3, 1, "", "__delattr__"], [359, 3, 1, "", "__getattribute__"], [359, 3, 1, "", "__reduce__"], [359, 3, 1, "", "__repr__"], [359, 3, 1, "", "__setattr__"], [359, 3, 1, "", "__str__"], [359, 3, 1, "", "add_note"], [359, 3, 1, "", "with_traceback"]], "fipy.terms.IncorrectSolutionVariable": [[359, 6, 1, "", "__cause__"], [359, 6, 1, "", "__context__"], [359, 3, 1, "", "__delattr__"], [359, 3, 1, "", "__getattribute__"], [359, 3, 1, "", "__reduce__"], [359, 3, 1, "", "__repr__"], [359, 3, 1, "", "__setattr__"], [359, 3, 1, "", "__str__"], [359, 3, 1, "", "add_note"], [359, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableNumberError": [[359, 6, 1, "", "__cause__"], [359, 6, 1, "", "__context__"], [359, 3, 1, "", "__delattr__"], [359, 3, 1, "", "__getattribute__"], [359, 3, 1, "", "__reduce__"], [359, 3, 1, "", "__repr__"], [359, 3, 1, "", "__setattr__"], [359, 3, 1, "", "__str__"], [359, 3, 1, "", "add_note"], [359, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableRequiredError": [[359, 6, 1, "", "__cause__"], [359, 6, 1, "", "__context__"], [359, 3, 1, "", "__delattr__"], [359, 3, 1, "", "__getattribute__"], [359, 3, 1, "", "__reduce__"], [359, 3, 1, "", "__repr__"], [359, 3, 1, "", "__setattr__"], [359, 3, 1, "", "__str__"], [359, 3, 1, "", "add_note"], [359, 3, 1, "", "with_traceback"]], "fipy.terms.TermMultiplyError": [[359, 6, 1, "", "__cause__"], [359, 6, 1, "", "__context__"], [359, 3, 1, "", "__delattr__"], [359, 3, 1, "", "__getattribute__"], [359, 3, 1, "", "__reduce__"], [359, 3, 1, "", "__repr__"], [359, 3, 1, "", "__setattr__"], [359, 3, 1, "", "__str__"], [359, 3, 1, "", "add_note"], [359, 3, 1, "", "with_traceback"]], "fipy.terms.TransientTermError": [[359, 6, 1, "", "__cause__"], [359, 6, 1, "", "__context__"], [359, 3, 1, "", "__delattr__"], [359, 3, 1, "", "__getattribute__"], [359, 3, 1, "", "__reduce__"], [359, 3, 1, "", "__repr__"], [359, 3, 1, "", "__setattr__"], [359, 3, 1, "", "__str__"], [359, 3, 1, "", "add_note"], [359, 3, 1, "", "with_traceback"]], "fipy.terms.VectorCoeffError": [[359, 6, 1, "", "__cause__"], [359, 6, 1, "", "__context__"], [359, 3, 1, "", "__delattr__"], [359, 3, 1, "", "__getattribute__"], [359, 3, 1, "", "__reduce__"], [359, 3, 1, "", "__repr__"], [359, 3, 1, "", "__setattr__"], [359, 3, 1, "", "__str__"], [359, 3, 1, "", "add_note"], [359, 3, 1, "", "with_traceback"]], "fipy.terms.advectionTerm": [[364, 1, 1, "", "AdvectionTerm"]], "fipy.terms.advectionTerm.AdvectionTerm": [[364, 2, 1, "", "RHSvector"], [364, 3, 1, "", "__eq__"], [364, 3, 1, "", "__hash__"], [364, 3, 1, "", "__mul__"], [364, 3, 1, "", "__neg__"], [364, 3, 1, "", "__repr__"], [364, 3, 1, "", "__rmul__"], [364, 3, 1, "", "cacheMatrix"], [364, 3, 1, "", "cacheRHSvector"], [364, 3, 1, "", "justErrorVector"], [364, 3, 1, "", "justResidualVector"], [364, 2, 1, "", "matrix"], [364, 3, 1, "", "residualVectorAndNorm"], [364, 3, 1, "", "solve"], [364, 3, 1, "", "sweep"]], "fipy.terms.cellTerm": [[367, 1, 1, "", "CellTerm"]], "fipy.terms.cellTerm.CellTerm": [[367, 2, 1, "", "RHSvector"], [367, 3, 1, "", "__eq__"], [367, 3, 1, "", "__hash__"], [367, 3, 1, "", "__mul__"], [367, 3, 1, "", "__neg__"], [367, 3, 1, "", "__repr__"], [367, 3, 1, "", "__rmul__"], [367, 3, 1, "", "cacheMatrix"], [367, 3, 1, "", "cacheRHSvector"], [367, 3, 1, "", "justErrorVector"], [367, 3, 1, "", "justResidualVector"], [367, 2, 1, "", "matrix"], [367, 3, 1, "", "residualVectorAndNorm"], [367, 3, 1, "", "solve"], [367, 3, 1, "", "sweep"]], "fipy.terms.centralDiffConvectionTerm": [[368, 1, 1, "", "CentralDifferenceConvectionTerm"]], "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm": [[368, 2, 1, "", "RHSvector"], [368, 3, 1, "", "__eq__"], [368, 3, 1, "", "__hash__"], [368, 3, 1, "", "__mul__"], [368, 3, 1, "", "__neg__"], [368, 3, 1, "", "__repr__"], [368, 3, 1, "", "__rmul__"], [368, 3, 1, "", "cacheMatrix"], [368, 3, 1, "", "cacheRHSvector"], [368, 3, 1, "", "justErrorVector"], [368, 3, 1, "", "justResidualVector"], [368, 2, 1, "", "matrix"], [368, 3, 1, "", "residualVectorAndNorm"], [368, 3, 1, "", "solve"], [368, 3, 1, "", "sweep"]], "fipy.terms.diffusionTerm": [[370, 1, 1, "", "DiffusionTerm"]], "fipy.terms.diffusionTerm.DiffusionTerm": [[370, 2, 1, "", "RHSvector"], [370, 3, 1, "", "__eq__"], [370, 3, 1, "", "__hash__"], [370, 3, 1, "", "__repr__"], [370, 3, 1, "", "cacheMatrix"], [370, 3, 1, "", "cacheRHSvector"], [370, 3, 1, "", "justErrorVector"], [370, 3, 1, "", "justResidualVector"], [370, 2, 1, "", "matrix"], [370, 3, 1, "", "residualVectorAndNorm"], [370, 3, 1, "", "solve"], [370, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermCorrection": [[371, 1, 1, "", "DiffusionTermCorrection"]], "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection": [[371, 2, 1, "", "RHSvector"], [371, 3, 1, "", "__eq__"], [371, 3, 1, "", "__hash__"], [371, 3, 1, "", "__repr__"], [371, 3, 1, "", "cacheMatrix"], [371, 3, 1, "", "cacheRHSvector"], [371, 3, 1, "", "justErrorVector"], [371, 3, 1, "", "justResidualVector"], [371, 2, 1, "", "matrix"], [371, 3, 1, "", "residualVectorAndNorm"], [371, 3, 1, "", "solve"], [371, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermNoCorrection": [[372, 1, 1, "", "DiffusionTermNoCorrection"]], "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection": [[372, 2, 1, "", "RHSvector"], [372, 3, 1, "", "__eq__"], [372, 3, 1, "", "__hash__"], [372, 3, 1, "", "__repr__"], [372, 3, 1, "", "cacheMatrix"], [372, 3, 1, "", "cacheRHSvector"], [372, 3, 1, "", "justErrorVector"], [372, 3, 1, "", "justResidualVector"], [372, 2, 1, "", "matrix"], [372, 3, 1, "", "residualVectorAndNorm"], [372, 3, 1, "", "solve"], [372, 3, 1, "", "sweep"]], "fipy.terms.explicitDiffusionTerm": [[373, 1, 1, "", "ExplicitDiffusionTerm"]], "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm": [[373, 2, 1, "", "RHSvector"], [373, 3, 1, "", "__eq__"], [373, 3, 1, "", "__hash__"], [373, 3, 1, "", "__repr__"], [373, 3, 1, "", "cacheMatrix"], [373, 3, 1, "", "cacheRHSvector"], [373, 3, 1, "", "justErrorVector"], [373, 3, 1, "", "justResidualVector"], [373, 2, 1, "", "matrix"], [373, 3, 1, "", "residualVectorAndNorm"], [373, 3, 1, "", "solve"], [373, 3, 1, "", "sweep"]], "fipy.terms.explicitUpwindConvectionTerm": [[375, 1, 1, "", "ExplicitUpwindConvectionTerm"]], "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm": [[375, 2, 1, "", "RHSvector"], [375, 3, 1, "", "__eq__"], [375, 3, 1, "", "__hash__"], [375, 3, 1, "", "__mul__"], [375, 3, 1, "", "__neg__"], [375, 3, 1, "", "__repr__"], [375, 3, 1, "", "__rmul__"], [375, 3, 1, "", "cacheMatrix"], [375, 3, 1, "", "cacheRHSvector"], [375, 3, 1, "", "justErrorVector"], [375, 3, 1, "", "justResidualVector"], [375, 2, 1, "", "matrix"], [375, 3, 1, "", "residualVectorAndNorm"], [375, 3, 1, "", "solve"], [375, 3, 1, "", "sweep"]], "fipy.terms.exponentialConvectionTerm": [[376, 1, 1, "", "ExponentialConvectionTerm"]], "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm": [[376, 2, 1, "", "RHSvector"], [376, 3, 1, "", "__eq__"], [376, 3, 1, "", "__hash__"], [376, 3, 1, "", "__mul__"], [376, 3, 1, "", "__neg__"], [376, 3, 1, "", "__repr__"], [376, 3, 1, "", "__rmul__"], [376, 3, 1, "", "cacheMatrix"], [376, 3, 1, "", "cacheRHSvector"], [376, 3, 1, "", "justErrorVector"], [376, 3, 1, "", "justResidualVector"], [376, 2, 1, "", "matrix"], [376, 3, 1, "", "residualVectorAndNorm"], [376, 3, 1, "", "solve"], [376, 3, 1, "", "sweep"]], "fipy.terms.faceTerm": [[377, 1, 1, "", "FaceTerm"]], "fipy.terms.faceTerm.FaceTerm": [[377, 2, 1, "", "RHSvector"], [377, 3, 1, "", "__eq__"], [377, 3, 1, "", "__hash__"], [377, 3, 1, "", "__mul__"], [377, 3, 1, "", "__neg__"], [377, 3, 1, "", "__repr__"], [377, 3, 1, "", "__rmul__"], [377, 3, 1, "", "cacheMatrix"], [377, 3, 1, "", "cacheRHSvector"], [377, 3, 1, "", "justErrorVector"], [377, 3, 1, "", "justResidualVector"], [377, 2, 1, "", "matrix"], [377, 3, 1, "", "residualVectorAndNorm"], [377, 3, 1, "", "solve"], [377, 3, 1, "", "sweep"]], "fipy.terms.firstOrderAdvectionTerm": [[378, 1, 1, "", "FirstOrderAdvectionTerm"]], "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm": [[378, 2, 1, "", "RHSvector"], [378, 3, 1, "", "__eq__"], [378, 3, 1, "", "__hash__"], [378, 3, 1, "", "__mul__"], [378, 3, 1, "", "__neg__"], [378, 3, 1, "", "__repr__"], [378, 3, 1, "", "__rmul__"], [378, 3, 1, "", "cacheMatrix"], [378, 3, 1, "", "cacheRHSvector"], [378, 3, 1, "", "justErrorVector"], [378, 3, 1, "", "justResidualVector"], [378, 2, 1, "", "matrix"], [378, 3, 1, "", "residualVectorAndNorm"], [378, 3, 1, "", "solve"], [378, 3, 1, "", "sweep"]], "fipy.terms.hybridConvectionTerm": [[379, 1, 1, "", "HybridConvectionTerm"]], "fipy.terms.hybridConvectionTerm.HybridConvectionTerm": [[379, 2, 1, "", "RHSvector"], [379, 3, 1, "", "__eq__"], [379, 3, 1, "", "__hash__"], [379, 3, 1, "", "__mul__"], [379, 3, 1, "", "__neg__"], [379, 3, 1, "", "__repr__"], [379, 3, 1, "", "__rmul__"], [379, 3, 1, "", "cacheMatrix"], [379, 3, 1, "", "cacheRHSvector"], [379, 3, 1, "", "justErrorVector"], [379, 3, 1, "", "justResidualVector"], [379, 2, 1, "", "matrix"], [379, 3, 1, "", "residualVectorAndNorm"], [379, 3, 1, "", "solve"], [379, 3, 1, "", "sweep"]], "fipy.terms.implicitDiffusionTerm": [[380, 6, 1, "", "ImplicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[381, 1, 1, "", "ImplicitSourceTerm"]], "fipy.terms.implicitSourceTerm.ImplicitSourceTerm": [[381, 2, 1, "", "RHSvector"], [381, 3, 1, "", "__eq__"], [381, 3, 1, "", "__hash__"], [381, 3, 1, "", "__mul__"], [381, 3, 1, "", "__neg__"], [381, 3, 1, "", "__repr__"], [381, 3, 1, "", "__rmul__"], [381, 3, 1, "", "cacheMatrix"], [381, 3, 1, "", "cacheRHSvector"], [381, 3, 1, "", "justErrorVector"], [381, 3, 1, "", "justResidualVector"], [381, 2, 1, "", "matrix"], [381, 3, 1, "", "residualVectorAndNorm"], [381, 3, 1, "", "solve"], [381, 3, 1, "", "sweep"]], "fipy.terms.powerLawConvectionTerm": [[383, 1, 1, "", "PowerLawConvectionTerm"]], "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm": [[383, 2, 1, "", "RHSvector"], [383, 3, 1, "", "__eq__"], [383, 3, 1, "", "__hash__"], [383, 3, 1, "", "__mul__"], [383, 3, 1, "", "__neg__"], [383, 3, 1, "", "__repr__"], [383, 3, 1, "", "__rmul__"], [383, 3, 1, "", "cacheMatrix"], [383, 3, 1, "", "cacheRHSvector"], [383, 3, 1, "", "justErrorVector"], [383, 3, 1, "", "justResidualVector"], [383, 2, 1, "", "matrix"], [383, 3, 1, "", "residualVectorAndNorm"], [383, 3, 1, "", "solve"], [383, 3, 1, "", "sweep"]], "fipy.terms.residualTerm": [[384, 1, 1, "", "ResidualTerm"]], "fipy.terms.residualTerm.ResidualTerm": [[384, 2, 1, "", "RHSvector"], [384, 3, 1, "", "__eq__"], [384, 3, 1, "", "__hash__"], [384, 3, 1, "", "__mul__"], [384, 3, 1, "", "__neg__"], [384, 3, 1, "", "__repr__"], [384, 3, 1, "", "__rmul__"], [384, 3, 1, "", "cacheMatrix"], [384, 3, 1, "", "cacheRHSvector"], [384, 3, 1, "", "justErrorVector"], [384, 3, 1, "", "justResidualVector"], [384, 2, 1, "", "matrix"], [384, 3, 1, "", "residualVectorAndNorm"], [384, 3, 1, "", "solve"], [384, 3, 1, "", "sweep"]], "fipy.terms.sourceTerm": [[385, 1, 1, "", "SourceTerm"]], "fipy.terms.sourceTerm.SourceTerm": [[385, 2, 1, "", "RHSvector"], [385, 3, 1, "", "__eq__"], [385, 3, 1, "", "__hash__"], [385, 3, 1, "", "__mul__"], [385, 3, 1, "", "__neg__"], [385, 3, 1, "", "__repr__"], [385, 3, 1, "", "__rmul__"], [385, 3, 1, "", "cacheMatrix"], [385, 3, 1, "", "cacheRHSvector"], [385, 3, 1, "", "justErrorVector"], [385, 3, 1, "", "justResidualVector"], [385, 2, 1, "", "matrix"], [385, 3, 1, "", "residualVectorAndNorm"], [385, 3, 1, "", "solve"], [385, 3, 1, "", "sweep"]], "fipy.terms.term": [[386, 1, 1, "", "Term"]], "fipy.terms.term.Term": [[386, 2, 1, "", "RHSvector"], [386, 3, 1, "", "__eq__"], [386, 3, 1, "", "__hash__"], [386, 3, 1, "", "__repr__"], [386, 3, 1, "", "cacheMatrix"], [386, 3, 1, "", "cacheRHSvector"], [386, 3, 1, "", "justErrorVector"], [386, 3, 1, "", "justResidualVector"], [386, 2, 1, "", "matrix"], [386, 3, 1, "", "residualVectorAndNorm"], [386, 3, 1, "", "solve"], [386, 3, 1, "", "sweep"]], "fipy.terms.transientTerm": [[388, 1, 1, "", "TransientTerm"]], "fipy.terms.transientTerm.TransientTerm": [[388, 2, 1, "", "RHSvector"], [388, 3, 1, "", "__eq__"], [388, 3, 1, "", "__hash__"], [388, 3, 1, "", "__mul__"], [388, 3, 1, "", "__neg__"], [388, 3, 1, "", "__repr__"], [388, 3, 1, "", "__rmul__"], [388, 3, 1, "", "cacheMatrix"], [388, 3, 1, "", "cacheRHSvector"], [388, 3, 1, "", "justErrorVector"], [388, 3, 1, "", "justResidualVector"], [388, 2, 1, "", "matrix"], [388, 3, 1, "", "residualVectorAndNorm"], [388, 3, 1, "", "solve"], [388, 3, 1, "", "sweep"]], "fipy.terms.upwindConvectionTerm": [[390, 1, 1, "", "UpwindConvectionTerm"]], "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm": [[390, 2, 1, "", "RHSvector"], [390, 3, 1, "", "__eq__"], [390, 3, 1, "", "__hash__"], [390, 3, 1, "", "__mul__"], [390, 3, 1, "", "__neg__"], [390, 3, 1, "", "__repr__"], [390, 3, 1, "", "__rmul__"], [390, 3, 1, "", "cacheMatrix"], [390, 3, 1, "", "cacheRHSvector"], [390, 3, 1, "", "justErrorVector"], [390, 3, 1, "", "justResidualVector"], [390, 2, 1, "", "matrix"], [390, 3, 1, "", "residualVectorAndNorm"], [390, 3, 1, "", "solve"], [390, 3, 1, "", "sweep"]], "fipy.terms.vanLeerConvectionTerm": [[391, 1, 1, "", "VanLeerConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm": [[391, 2, 1, "", "RHSvector"], [391, 3, 1, "", "__eq__"], [391, 3, 1, "", "__hash__"], [391, 3, 1, "", "__mul__"], [391, 3, 1, "", "__neg__"], [391, 3, 1, "", "__repr__"], [391, 3, 1, "", "__rmul__"], [391, 3, 1, "", "cacheMatrix"], [391, 3, 1, "", "cacheRHSvector"], [391, 3, 1, "", "justErrorVector"], [391, 3, 1, "", "justResidualVector"], [391, 2, 1, "", "matrix"], [391, 3, 1, "", "residualVectorAndNorm"], [391, 3, 1, "", "solve"], [391, 3, 1, "", "sweep"]], "fipy.tests": [[394, 0, 0, "-", "doctestPlus"], [395, 0, 0, "-", "lateImportTest"], [396, 0, 0, "-", "test"], [397, 0, 0, "-", "testProgram"]], "fipy.tests.doctestPlus": [[394, 4, 1, "", "execButNoTest"], [394, 4, 1, "", "register_skipper"], [394, 4, 1, "", "report_skips"], [394, 4, 1, "", "testmod"]], "fipy.tests.test": [[396, 1, 1, "", "DeprecationErroringTestProgram"], [396, 1, 1, "", "test"]], "fipy.tests.test.test": [[396, 3, 1, "", "finalize_options"], [396, 3, 1, "", "initialize_options"]], "fipy.tests.testProgram": [[397, 1, 1, "", "TestProgram"], [397, 6, 1, "", "main"]], "fipy.tools": [[398, 1, 1, "", "PhysicalField"], [398, 4, 1, "", "SharedTemporaryFile"], [399, 0, 0, "-", "comms"], [402, 0, 0, "-", "debug"], [403, 0, 0, "-", "decorators"], [404, 0, 0, "-", "dimensions"], [408, 0, 0, "-", "dump"], [409, 0, 0, "-", "inline"], [410, 0, 0, "-", "logging"], [412, 0, 0, "-", "numerix"], [398, 6, 1, "", "parallelComm"], [413, 0, 0, "-", "parser"], [398, 6, 1, "", "serialComm"], [414, 0, 0, "-", "sharedtempfile"], [415, 0, 0, "-", "test"], [416, 0, 0, "-", "vector"], [417, 0, 0, "-", "version"]], "fipy.tools.PhysicalField": [[398, 3, 1, "", "__abs__"], [398, 3, 1, "", "__add__"], [398, 3, 1, "", "__array__"], [398, 3, 1, "", "__array_wrap__"], [398, 3, 1, "", "__bool__"], [398, 3, 1, "", "__div__"], [398, 3, 1, "", "__eq__"], [398, 3, 1, "", "__float__"], [398, 3, 1, "", "__ge__"], [398, 3, 1, "", "__getitem__"], [398, 3, 1, "", "__gt__"], [398, 3, 1, "", "__hash__"], [398, 3, 1, "", "__le__"], [398, 3, 1, "", "__lt__"], [398, 3, 1, "", "__mod__"], [398, 3, 1, "", "__mul__"], [398, 3, 1, "", "__ne__"], [398, 3, 1, "", "__neg__"], [398, 3, 1, "", "__nonzero__"], [398, 3, 1, "", "__pow__"], [398, 3, 1, "", "__radd__"], [398, 3, 1, "", "__repr__"], [398, 3, 1, "", "__rmul__"], [398, 3, 1, "", "__setitem__"], [398, 3, 1, "", "__str__"], [398, 3, 1, "", "__sub__"], [398, 3, 1, "", "__truediv__"], [398, 3, 1, "", "add"], [398, 3, 1, "", "allclose"], [398, 3, 1, "", "allequal"], [398, 3, 1, "", "arccos"], [398, 3, 1, "", "arccosh"], [398, 3, 1, "", "arcsin"], [398, 3, 1, "", "arctan"], [398, 3, 1, "", "arctan2"], [398, 3, 1, "", "arctanh"], [398, 3, 1, "", "ceil"], [398, 3, 1, "", "conjugate"], [398, 3, 1, "", "convertToUnit"], [398, 3, 1, "", "copy"], [398, 3, 1, "", "cos"], [398, 3, 1, "", "cosh"], [398, 3, 1, "", "divide"], [398, 3, 1, "", "dot"], [398, 3, 1, "", "floor"], [398, 3, 1, "", "getsctype"], [398, 3, 1, "", "inBaseUnits"], [398, 3, 1, "", "inDimensionless"], [398, 3, 1, "", "inRadians"], [398, 3, 1, "", "inSIUnits"], [398, 3, 1, "", "inUnitsOf"], [398, 3, 1, "", "itemset"], [398, 3, 1, "", "log"], [398, 3, 1, "", "log10"], [398, 3, 1, "", "multiply"], [398, 2, 1, "", "numericValue"], [398, 3, 1, "", "put"], [398, 3, 1, "", "reshape"], [398, 2, 1, "", "shape"], [398, 3, 1, "", "sign"], [398, 3, 1, "", "sin"], [398, 3, 1, "", "sinh"], [398, 3, 1, "", "sqrt"], [398, 3, 1, "", "subtract"], [398, 3, 1, "", "sum"], [398, 3, 1, "", "take"], [398, 3, 1, "", "tan"], [398, 3, 1, "", "tanh"], [398, 3, 1, "", "tostring"], [398, 2, 1, "", "unit"]], "fipy.tools.comms": [[400, 0, 0, "-", "commWrapper"], [401, 0, 0, "-", "dummyComm"]], "fipy.tools.comms.commWrapper": [[400, 1, 1, "", "CommWrapper"]], "fipy.tools.comms.commWrapper.CommWrapper": [[400, 3, 1, "", "__getstate__"], [400, 3, 1, "", "__repr__"]], "fipy.tools.comms.dummyComm": [[401, 1, 1, "", "DummyComm"]], "fipy.tools.comms.dummyComm.DummyComm": [[401, 3, 1, "", "__getstate__"], [401, 3, 1, "", "__repr__"]], "fipy.tools.debug": [[402, 4, 1, "", "PRINT"]], "fipy.tools.decorators": [[403, 4, 1, "", "deprecate"]], "fipy.tools.dimensions": [[405, 0, 0, "-", "DictWithDefault"], [406, 0, 0, "-", "NumberDict"], [407, 0, 0, "-", "physicalField"]], "fipy.tools.dimensions.physicalField": [[407, 1, 1, "", "PhysicalField"], [407, 1, 1, "", "PhysicalUnit"]], "fipy.tools.dimensions.physicalField.PhysicalField": [[407, 3, 1, "", "__abs__"], [407, 3, 1, "", "__add__"], [407, 3, 1, "", "__array__"], [407, 3, 1, "", "__array_wrap__"], [407, 3, 1, "", "__bool__"], [407, 3, 1, "", "__div__"], [407, 3, 1, "", "__eq__"], [407, 3, 1, "", "__float__"], [407, 3, 1, "", "__ge__"], [407, 3, 1, "", "__getitem__"], [407, 3, 1, "", "__gt__"], [407, 3, 1, "", "__hash__"], [407, 3, 1, "", "__le__"], [407, 3, 1, "", "__lt__"], [407, 3, 1, "", "__mod__"], [407, 3, 1, "", "__mul__"], [407, 3, 1, "", "__ne__"], [407, 3, 1, "", "__neg__"], [407, 3, 1, "", "__nonzero__"], [407, 3, 1, "", "__pow__"], [407, 3, 1, "", "__radd__"], [407, 3, 1, "", "__repr__"], [407, 3, 1, "", "__rmul__"], [407, 3, 1, "", "__setitem__"], [407, 3, 1, "", "__str__"], [407, 3, 1, "", "__sub__"], [407, 3, 1, "", "__truediv__"], [407, 3, 1, "", "add"], [407, 3, 1, "", "allclose"], [407, 3, 1, "", "allequal"], [407, 3, 1, "", "arccos"], [407, 3, 1, "", "arccosh"], [407, 3, 1, "", "arcsin"], [407, 3, 1, "", "arctan"], [407, 3, 1, "", "arctan2"], [407, 3, 1, "", "arctanh"], [407, 3, 1, "", "ceil"], [407, 3, 1, "", "conjugate"], [407, 3, 1, "", "convertToUnit"], [407, 3, 1, "", "copy"], [407, 3, 1, "", "cos"], [407, 3, 1, "", "cosh"], [407, 3, 1, "", "divide"], [407, 3, 1, "", "dot"], [407, 3, 1, "", "floor"], [407, 3, 1, "", "getsctype"], [407, 3, 1, "", "inBaseUnits"], [407, 3, 1, "", "inDimensionless"], [407, 3, 1, "", "inRadians"], [407, 3, 1, "", "inSIUnits"], [407, 3, 1, "", "inUnitsOf"], [407, 3, 1, "", "itemset"], [407, 3, 1, "", "log"], [407, 3, 1, "", "log10"], [407, 3, 1, "", "multiply"], [407, 2, 1, "", "numericValue"], [407, 3, 1, "", "put"], [407, 3, 1, "", "reshape"], [407, 2, 1, "", "shape"], [407, 3, 1, "", "sign"], [407, 3, 1, "", "sin"], [407, 3, 1, "", "sinh"], [407, 3, 1, "", "sqrt"], [407, 3, 1, "", "subtract"], [407, 3, 1, "", "sum"], [407, 3, 1, "", "take"], [407, 3, 1, "", "tan"], [407, 3, 1, "", "tanh"], [407, 3, 1, "", "tostring"], [407, 2, 1, "", "unit"]], "fipy.tools.dimensions.physicalField.PhysicalUnit": [[407, 3, 1, "", "__div__"], [407, 3, 1, "", "__eq__"], [407, 3, 1, "", "__ge__"], [407, 3, 1, "", "__gt__"], [407, 6, 1, "", "__hash__"], [407, 3, 1, "", "__le__"], [407, 3, 1, "", "__lt__"], [407, 3, 1, "", "__mul__"], [407, 3, 1, "", "__ne__"], [407, 3, 1, "", "__pow__"], [407, 3, 1, "", "__rdiv__"], [407, 3, 1, "", "__repr__"], [407, 3, 1, "", "__rmul__"], [407, 3, 1, "", "__rtruediv__"], [407, 3, 1, "", "__str__"], [407, 3, 1, "", "__truediv__"], [407, 3, 1, "", "conversionFactorTo"], [407, 3, 1, "", "conversionTupleTo"], [407, 3, 1, "", "isAngle"], [407, 3, 1, "", "isCompatible"], [407, 3, 1, "", "isDimensionless"], [407, 3, 1, "", "isDimensionlessOrAngle"], [407, 3, 1, "", "isInverseAngle"], [407, 3, 1, "", "name"], [407, 3, 1, "", "setName"]], "fipy.tools.dump": [[408, 4, 1, "", "read"], [408, 4, 1, "", "write"]], "fipy.tools.logging": [[411, 0, 0, "-", "environment"]], "fipy.tools.logging.environment": [[411, 4, 1, "", "conda_info"], [411, 4, 1, "", "package_info"], [411, 4, 1, "", "platform_info"]], "fipy.tools.numerix": [[412, 4, 1, "", "L1norm"], [412, 4, 1, "", "L2norm"], [412, 4, 1, "", "LINFnorm"], [412, 4, 1, "", "all"], [412, 4, 1, "", "allclose"], [412, 4, 1, "", "allequal"], [412, 4, 1, "", "dot"], [412, 4, 1, "", "getShape"], [412, 4, 1, "", "getUnit"], [412, 4, 1, "", "isclose"], [412, 4, 1, "", "nearest"], [412, 4, 1, "", "put"], [412, 4, 1, "", "rank"], [412, 4, 1, "", "reshape"], [412, 4, 1, "", "sqrtDot"], [412, 4, 1, "", "sum"], [412, 4, 1, "", "take"], [412, 4, 1, "", "tostring"]], "fipy.tools.parser": [[413, 4, 1, "", "parse"]], "fipy.tools.sharedtempfile": [[414, 4, 1, "", "SharedTemporaryFile"]], "fipy.tools.vector": [[416, 4, 1, "", "prune"], [416, 4, 1, "", "putAdd"]], "fipy.variables": [[419, 0, 0, "-", "addOverFacesVariable"], [420, 0, 0, "-", "arithmeticCellToFaceVariable"], [421, 0, 0, "-", "betaNoiseVariable"], [422, 0, 0, "-", "binaryOperatorVariable"], [423, 0, 0, "-", "cellToFaceVariable"], [424, 0, 0, "-", "cellVariable"], [425, 0, 0, "-", "constant"], [426, 0, 0, "-", "constraintMask"], [427, 0, 0, "-", "coupledCellVariable"], [428, 0, 0, "-", "distanceVariable"], [429, 0, 0, "-", "exponentialNoiseVariable"], [430, 0, 0, "-", "faceGradContributionsVariable"], [431, 0, 0, "-", "faceGradVariable"], [432, 0, 0, "-", "faceVariable"], [433, 0, 0, "-", "gammaNoiseVariable"], [434, 0, 0, "-", "gaussCellGradVariable"], [435, 0, 0, "-", "gaussianNoiseVariable"], [436, 0, 0, "-", "harmonicCellToFaceVariable"], [437, 0, 0, "-", "histogramVariable"], [438, 0, 0, "-", "interfaceAreaVariable"], [439, 0, 0, "-", "interfaceFlagVariable"], [440, 0, 0, "-", "leastSquaresCellGradVariable"], [441, 0, 0, "-", "levelSetDiffusionVariable"], [442, 0, 0, "-", "meshVariable"], [443, 0, 0, "-", "minmodCellToFaceVariable"], [444, 0, 0, "-", "modCellGradVariable"], [445, 0, 0, "-", "modCellToFaceVariable"], [446, 0, 0, "-", "modFaceGradVariable"], [447, 0, 0, "-", "modPhysicalField"], [448, 0, 0, "-", "modularVariable"], [449, 0, 0, "-", "noiseVariable"], [450, 0, 0, "-", "operatorVariable"], [451, 0, 0, "-", "scharfetterGummelFaceVariable"], [452, 0, 0, "-", "surfactantConvectionVariable"], [453, 0, 0, "-", "surfactantVariable"], [454, 0, 0, "-", "test"], [455, 0, 0, "-", "unaryOperatorVariable"], [456, 0, 0, "-", "uniformNoiseVariable"], [457, 0, 0, "-", "variable"]], "fipy.variables.betaNoiseVariable": [[421, 1, 1, "", "BetaNoiseVariable"]], "fipy.variables.betaNoiseVariable.BetaNoiseVariable": [[421, 3, 1, "", "__abs__"], [421, 3, 1, "", "__and__"], [421, 3, 1, "", "__array__"], [421, 3, 1, "", "__array_wrap__"], [421, 3, 1, "", "__bool__"], [421, 3, 1, "", "__call__"], [421, 3, 1, "", "__eq__"], [421, 3, 1, "", "__ge__"], [421, 3, 1, "", "__getitem__"], [421, 3, 1, "", "__getstate__"], [421, 3, 1, "", "__gt__"], [421, 3, 1, "", "__hash__"], [421, 3, 1, "", "__invert__"], [421, 3, 1, "", "__le__"], [421, 3, 1, "", "__lt__"], [421, 3, 1, "", "__ne__"], [421, 3, 1, "", "__new__"], [421, 3, 1, "", "__nonzero__"], [421, 3, 1, "", "__or__"], [421, 3, 1, "", "__pow__"], [421, 3, 1, "", "__repr__"], [421, 3, 1, "", "__setstate__"], [421, 3, 1, "", "__str__"], [421, 3, 1, "", "all"], [421, 3, 1, "", "allclose"], [421, 3, 1, "", "any"], [421, 2, 1, "", "arithmeticFaceValue"], [421, 2, 1, "", "cellVolumeAverage"], [421, 3, 1, "", "constrain"], [421, 2, 1, "", "constraintMask"], [421, 3, 1, "", "copy"], [421, 3, 1, "", "dot"], [421, 2, 1, "", "faceGrad"], [421, 2, 1, "", "faceGradAverage"], [421, 2, 1, "", "faceValue"], [421, 2, 1, "", "gaussGrad"], [421, 3, 1, "", "getsctype"], [421, 2, 1, "", "globalValue"], [421, 2, 1, "", "grad"], [421, 2, 1, "", "harmonicFaceValue"], [421, 3, 1, "", "inBaseUnits"], [421, 3, 1, "", "inUnitsOf"], [421, 2, 1, "", "leastSquaresGrad"], [421, 2, 1, "", "mag"], [421, 3, 1, "", "max"], [421, 3, 1, "", "min"], [421, 2, 1, "", "minmodFaceValue"], [421, 2, 1, "", "old"], [421, 3, 1, "", "rdot"], [421, 3, 1, "", "release"], [421, 3, 1, "", "scramble"], [421, 3, 1, "", "setValue"], [421, 2, 1, "", "shape"], [421, 3, 1, "", "std"], [421, 2, 1, "", "unit"], [421, 3, 1, "", "updateOld"], [421, 2, 1, "", "value"]], "fipy.variables.cellVariable": [[424, 1, 1, "", "CellVariable"]], "fipy.variables.cellVariable.CellVariable": [[424, 3, 1, "", "__abs__"], [424, 3, 1, "", "__and__"], [424, 3, 1, "", "__array__"], [424, 3, 1, "", "__array_wrap__"], [424, 3, 1, "", "__bool__"], [424, 3, 1, "", "__call__"], [424, 3, 1, "", "__eq__"], [424, 3, 1, "", "__ge__"], [424, 3, 1, "", "__getitem__"], [424, 3, 1, "", "__getstate__"], [424, 3, 1, "", "__gt__"], [424, 3, 1, "", "__hash__"], [424, 3, 1, "", "__invert__"], [424, 3, 1, "", "__le__"], [424, 3, 1, "", "__lt__"], [424, 3, 1, "", "__ne__"], [424, 3, 1, "", "__new__"], [424, 3, 1, "", "__nonzero__"], [424, 3, 1, "", "__or__"], [424, 3, 1, "", "__pow__"], [424, 3, 1, "", "__repr__"], [424, 3, 1, "", "__setstate__"], [424, 3, 1, "", "__str__"], [424, 3, 1, "", "all"], [424, 3, 1, "", "allclose"], [424, 3, 1, "", "any"], [424, 2, 1, "", "arithmeticFaceValue"], [424, 2, 1, "", "cellVolumeAverage"], [424, 3, 1, "", "constrain"], [424, 2, 1, "", "constraintMask"], [424, 3, 1, "", "copy"], [424, 3, 1, "", "dot"], [424, 2, 1, "", "faceGrad"], [424, 2, 1, "", "faceGradAverage"], [424, 2, 1, "", "faceValue"], [424, 2, 1, "", "gaussGrad"], [424, 3, 1, "", "getsctype"], [424, 2, 1, "", "globalValue"], [424, 2, 1, "", "grad"], [424, 2, 1, "", "harmonicFaceValue"], [424, 3, 1, "", "inBaseUnits"], [424, 3, 1, "", "inUnitsOf"], [424, 2, 1, "", "leastSquaresGrad"], [424, 2, 1, "", "mag"], [424, 3, 1, "", "max"], [424, 3, 1, "", "min"], [424, 2, 1, "", "minmodFaceValue"], [424, 2, 1, "", "old"], [424, 3, 1, "", "rdot"], [424, 3, 1, "", "release"], [424, 3, 1, "", "setValue"], [424, 2, 1, "", "shape"], [424, 3, 1, "", "std"], [424, 2, 1, "", "unit"], [424, 3, 1, "", "updateOld"], [424, 2, 1, "", "value"]], "fipy.variables.distanceVariable": [[428, 1, 1, "", "DistanceVariable"]], "fipy.variables.distanceVariable.DistanceVariable": [[428, 3, 1, "", "__abs__"], [428, 3, 1, "", "__and__"], [428, 3, 1, "", "__array__"], [428, 3, 1, "", "__array_wrap__"], [428, 3, 1, "", "__bool__"], [428, 3, 1, "", "__call__"], [428, 3, 1, "", "__eq__"], [428, 3, 1, "", "__ge__"], [428, 3, 1, "", "__getitem__"], [428, 3, 1, "", "__getstate__"], [428, 3, 1, "", "__gt__"], [428, 3, 1, "", "__hash__"], [428, 3, 1, "", "__invert__"], [428, 3, 1, "", "__le__"], [428, 3, 1, "", "__lt__"], [428, 3, 1, "", "__ne__"], [428, 3, 1, "", "__new__"], [428, 3, 1, "", "__nonzero__"], [428, 3, 1, "", "__or__"], [428, 3, 1, "", "__pow__"], [428, 3, 1, "", "__repr__"], [428, 3, 1, "", "__setstate__"], [428, 3, 1, "", "__str__"], [428, 3, 1, "", "all"], [428, 3, 1, "", "allclose"], [428, 3, 1, "", "any"], [428, 2, 1, "", "arithmeticFaceValue"], [428, 3, 1, "", "calcDistanceFunction"], [428, 2, 1, "", "cellInterfaceAreas"], [428, 2, 1, "", "cellVolumeAverage"], [428, 3, 1, "", "constrain"], [428, 2, 1, "", "constraintMask"], [428, 3, 1, "", "copy"], [428, 3, 1, "", "dot"], [428, 3, 1, "", "extendVariable"], [428, 2, 1, "", "faceGrad"], [428, 2, 1, "", "faceGradAverage"], [428, 2, 1, "", "faceValue"], [428, 2, 1, "", "gaussGrad"], [428, 3, 1, "", "getsctype"], [428, 2, 1, "", "globalValue"], [428, 2, 1, "", "grad"], [428, 2, 1, "", "harmonicFaceValue"], [428, 3, 1, "", "inBaseUnits"], [428, 3, 1, "", "inUnitsOf"], [428, 2, 1, "", "leastSquaresGrad"], [428, 2, 1, "", "mag"], [428, 3, 1, "", "max"], [428, 3, 1, "", "min"], [428, 2, 1, "", "minmodFaceValue"], [428, 2, 1, "", "old"], [428, 3, 1, "", "rdot"], [428, 3, 1, "", "release"], [428, 3, 1, "", "setValue"], [428, 2, 1, "", "shape"], [428, 3, 1, "", "std"], [428, 2, 1, "", "unit"], [428, 3, 1, "", "updateOld"], [428, 2, 1, "", "value"]], "fipy.variables.exponentialNoiseVariable": [[429, 1, 1, "", "ExponentialNoiseVariable"]], "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable": [[429, 3, 1, "", "__abs__"], [429, 3, 1, "", "__and__"], [429, 3, 1, "", "__array__"], [429, 3, 1, "", "__array_wrap__"], [429, 3, 1, "", "__bool__"], [429, 3, 1, "", "__call__"], [429, 3, 1, "", "__eq__"], [429, 3, 1, "", "__ge__"], [429, 3, 1, "", "__getitem__"], [429, 3, 1, "", "__getstate__"], [429, 3, 1, "", "__gt__"], [429, 3, 1, "", "__hash__"], [429, 3, 1, "", "__invert__"], [429, 3, 1, "", "__le__"], [429, 3, 1, "", "__lt__"], [429, 3, 1, "", "__ne__"], [429, 3, 1, "", "__new__"], [429, 3, 1, "", "__nonzero__"], [429, 3, 1, "", "__or__"], [429, 3, 1, "", "__pow__"], [429, 3, 1, "", "__repr__"], [429, 3, 1, "", "__setstate__"], [429, 3, 1, "", "__str__"], [429, 3, 1, "", "all"], [429, 3, 1, "", "allclose"], [429, 3, 1, "", "any"], [429, 2, 1, "", "arithmeticFaceValue"], [429, 2, 1, "", "cellVolumeAverage"], [429, 3, 1, "", "constrain"], [429, 2, 1, "", "constraintMask"], [429, 3, 1, "", "copy"], [429, 3, 1, "", "dot"], [429, 2, 1, "", "faceGrad"], [429, 2, 1, "", "faceGradAverage"], [429, 2, 1, "", "faceValue"], [429, 2, 1, "", "gaussGrad"], [429, 3, 1, "", "getsctype"], [429, 2, 1, "", "globalValue"], [429, 2, 1, "", "grad"], [429, 2, 1, "", "harmonicFaceValue"], [429, 3, 1, "", "inBaseUnits"], [429, 3, 1, "", "inUnitsOf"], [429, 2, 1, "", "leastSquaresGrad"], [429, 2, 1, "", "mag"], [429, 3, 1, "", "max"], [429, 3, 1, "", "min"], [429, 2, 1, "", "minmodFaceValue"], [429, 2, 1, "", "old"], [429, 3, 1, "", "rdot"], [429, 3, 1, "", "release"], [429, 3, 1, "", "scramble"], [429, 3, 1, "", "setValue"], [429, 2, 1, "", "shape"], [429, 3, 1, "", "std"], [429, 2, 1, "", "unit"], [429, 3, 1, "", "updateOld"], [429, 2, 1, "", "value"]], "fipy.variables.faceVariable": [[432, 1, 1, "", "FaceVariable"]], "fipy.variables.faceVariable.FaceVariable": [[432, 3, 1, "", "__abs__"], [432, 3, 1, "", "__and__"], [432, 3, 1, "", "__array__"], [432, 3, 1, "", "__array_wrap__"], [432, 3, 1, "", "__bool__"], [432, 3, 1, "", "__call__"], [432, 3, 1, "", "__eq__"], [432, 3, 1, "", "__ge__"], [432, 3, 1, "", "__getitem__"], [432, 3, 1, "", "__getstate__"], [432, 3, 1, "", "__gt__"], [432, 3, 1, "", "__hash__"], [432, 3, 1, "", "__invert__"], [432, 3, 1, "", "__le__"], [432, 3, 1, "", "__lt__"], [432, 3, 1, "", "__ne__"], [432, 3, 1, "", "__new__"], [432, 3, 1, "", "__nonzero__"], [432, 3, 1, "", "__or__"], [432, 3, 1, "", "__pow__"], [432, 3, 1, "", "__repr__"], [432, 3, 1, "", "__setstate__"], [432, 3, 1, "", "__str__"], [432, 3, 1, "", "all"], [432, 3, 1, "", "allclose"], [432, 3, 1, "", "any"], [432, 3, 1, "", "constrain"], [432, 2, 1, "", "constraintMask"], [432, 3, 1, "", "copy"], [432, 2, 1, "", "divergence"], [432, 3, 1, "", "dot"], [432, 3, 1, "", "getsctype"], [432, 3, 1, "", "inBaseUnits"], [432, 3, 1, "", "inUnitsOf"], [432, 2, 1, "", "mag"], [432, 3, 1, "", "max"], [432, 3, 1, "", "min"], [432, 3, 1, "", "rdot"], [432, 3, 1, "", "release"], [432, 3, 1, "", "setValue"], [432, 2, 1, "", "shape"], [432, 3, 1, "", "std"], [432, 2, 1, "", "unit"], [432, 2, 1, "", "value"]], "fipy.variables.gammaNoiseVariable": [[433, 1, 1, "", "GammaNoiseVariable"]], "fipy.variables.gammaNoiseVariable.GammaNoiseVariable": [[433, 3, 1, "", "__abs__"], [433, 3, 1, "", "__and__"], [433, 3, 1, "", "__array__"], [433, 3, 1, "", "__array_wrap__"], [433, 3, 1, "", "__bool__"], [433, 3, 1, "", "__call__"], [433, 3, 1, "", "__eq__"], [433, 3, 1, "", "__ge__"], [433, 3, 1, "", "__getitem__"], [433, 3, 1, "", "__getstate__"], [433, 3, 1, "", "__gt__"], [433, 3, 1, "", "__hash__"], [433, 3, 1, "", "__invert__"], [433, 3, 1, "", "__le__"], [433, 3, 1, "", "__lt__"], [433, 3, 1, "", "__ne__"], [433, 3, 1, "", "__new__"], [433, 3, 1, "", "__nonzero__"], [433, 3, 1, "", "__or__"], [433, 3, 1, "", "__pow__"], [433, 3, 1, "", "__repr__"], [433, 3, 1, "", "__setstate__"], [433, 3, 1, "", "__str__"], [433, 3, 1, "", "all"], [433, 3, 1, "", "allclose"], [433, 3, 1, "", "any"], [433, 2, 1, "", "arithmeticFaceValue"], [433, 2, 1, "", "cellVolumeAverage"], [433, 3, 1, "", "constrain"], [433, 2, 1, "", "constraintMask"], [433, 3, 1, "", "copy"], [433, 3, 1, "", "dot"], [433, 2, 1, "", "faceGrad"], [433, 2, 1, "", "faceGradAverage"], [433, 2, 1, "", "faceValue"], [433, 2, 1, "", "gaussGrad"], [433, 3, 1, "", "getsctype"], [433, 2, 1, "", "globalValue"], [433, 2, 1, "", "grad"], [433, 2, 1, "", "harmonicFaceValue"], [433, 3, 1, "", "inBaseUnits"], [433, 3, 1, "", "inUnitsOf"], [433, 2, 1, "", "leastSquaresGrad"], [433, 2, 1, "", "mag"], [433, 3, 1, "", "max"], [433, 3, 1, "", "min"], [433, 2, 1, "", "minmodFaceValue"], [433, 2, 1, "", "old"], [433, 3, 1, "", "rdot"], [433, 3, 1, "", "release"], [433, 3, 1, "", "scramble"], [433, 3, 1, "", "setValue"], [433, 2, 1, "", "shape"], [433, 3, 1, "", "std"], [433, 2, 1, "", "unit"], [433, 3, 1, "", "updateOld"], [433, 2, 1, "", "value"]], "fipy.variables.gaussianNoiseVariable": [[435, 1, 1, "", "GaussianNoiseVariable"]], "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable": [[435, 3, 1, "", "__abs__"], [435, 3, 1, "", "__and__"], [435, 3, 1, "", "__array__"], [435, 3, 1, "", "__array_wrap__"], [435, 3, 1, "", "__bool__"], [435, 3, 1, "", "__call__"], [435, 3, 1, "", "__eq__"], [435, 3, 1, "", "__ge__"], [435, 3, 1, "", "__getitem__"], [435, 3, 1, "", "__getstate__"], [435, 3, 1, "", "__gt__"], [435, 3, 1, "", "__hash__"], [435, 3, 1, "", "__invert__"], [435, 3, 1, "", "__le__"], [435, 3, 1, "", "__lt__"], [435, 3, 1, "", "__ne__"], [435, 3, 1, "", "__new__"], [435, 3, 1, "", "__nonzero__"], [435, 3, 1, "", "__or__"], [435, 3, 1, "", "__pow__"], [435, 3, 1, "", "__repr__"], [435, 3, 1, "", "__setstate__"], [435, 3, 1, "", "__str__"], [435, 3, 1, "", "all"], [435, 3, 1, "", "allclose"], [435, 3, 1, "", "any"], [435, 2, 1, "", "arithmeticFaceValue"], [435, 2, 1, "", "cellVolumeAverage"], [435, 3, 1, "", "constrain"], [435, 2, 1, "", "constraintMask"], [435, 3, 1, "", "copy"], [435, 3, 1, "", "dot"], [435, 2, 1, "", "faceGrad"], [435, 2, 1, "", "faceGradAverage"], [435, 2, 1, "", "faceValue"], [435, 2, 1, "", "gaussGrad"], [435, 3, 1, "", "getsctype"], [435, 2, 1, "", "globalValue"], [435, 2, 1, "", "grad"], [435, 2, 1, "", "harmonicFaceValue"], [435, 3, 1, "", "inBaseUnits"], [435, 3, 1, "", "inUnitsOf"], [435, 2, 1, "", "leastSquaresGrad"], [435, 2, 1, "", "mag"], [435, 3, 1, "", "max"], [435, 3, 1, "", "min"], [435, 2, 1, "", "minmodFaceValue"], [435, 2, 1, "", "old"], [435, 3, 1, "", "rdot"], [435, 3, 1, "", "release"], [435, 3, 1, "", "scramble"], [435, 3, 1, "", "setValue"], [435, 2, 1, "", "shape"], [435, 3, 1, "", "std"], [435, 2, 1, "", "unit"], [435, 3, 1, "", "updateOld"], [435, 2, 1, "", "value"]], "fipy.variables.histogramVariable": [[437, 1, 1, "", "HistogramVariable"]], "fipy.variables.histogramVariable.HistogramVariable": [[437, 3, 1, "", "__abs__"], [437, 3, 1, "", "__and__"], [437, 3, 1, "", "__array__"], [437, 3, 1, "", "__array_wrap__"], [437, 3, 1, "", "__bool__"], [437, 3, 1, "", "__call__"], [437, 3, 1, "", "__eq__"], [437, 3, 1, "", "__ge__"], [437, 3, 1, "", "__getitem__"], [437, 3, 1, "", "__getstate__"], [437, 3, 1, "", "__gt__"], [437, 3, 1, "", "__hash__"], [437, 3, 1, "", "__invert__"], [437, 3, 1, "", "__le__"], [437, 3, 1, "", "__lt__"], [437, 3, 1, "", "__ne__"], [437, 3, 1, "", "__new__"], [437, 3, 1, "", "__nonzero__"], [437, 3, 1, "", "__or__"], [437, 3, 1, "", "__pow__"], [437, 3, 1, "", "__repr__"], [437, 3, 1, "", "__setstate__"], [437, 3, 1, "", "__str__"], [437, 3, 1, "", "all"], [437, 3, 1, "", "allclose"], [437, 3, 1, "", "any"], [437, 2, 1, "", "arithmeticFaceValue"], [437, 2, 1, "", "cellVolumeAverage"], [437, 3, 1, "", "constrain"], [437, 2, 1, "", "constraintMask"], [437, 3, 1, "", "copy"], [437, 3, 1, "", "dot"], [437, 2, 1, "", "faceGrad"], [437, 2, 1, "", "faceGradAverage"], [437, 2, 1, "", "faceValue"], [437, 2, 1, "", "gaussGrad"], [437, 3, 1, "", "getsctype"], [437, 2, 1, "", "globalValue"], [437, 2, 1, "", "grad"], [437, 2, 1, "", "harmonicFaceValue"], [437, 3, 1, "", "inBaseUnits"], [437, 3, 1, "", "inUnitsOf"], [437, 2, 1, "", "leastSquaresGrad"], [437, 2, 1, "", "mag"], [437, 3, 1, "", "max"], [437, 3, 1, "", "min"], [437, 2, 1, "", "minmodFaceValue"], [437, 2, 1, "", "old"], [437, 3, 1, "", "rdot"], [437, 3, 1, "", "release"], [437, 3, 1, "", "setValue"], [437, 2, 1, "", "shape"], [437, 3, 1, "", "std"], [437, 2, 1, "", "unit"], [437, 3, 1, "", "updateOld"], [437, 2, 1, "", "value"]], "fipy.variables.meshVariable": [[442, 1, 1, "", "MeshVariable"]], "fipy.variables.meshVariable.MeshVariable": [[442, 3, 1, "", "__abs__"], [442, 3, 1, "", "__and__"], [442, 3, 1, "", "__array__"], [442, 3, 1, "", "__array_wrap__"], [442, 3, 1, "", "__bool__"], [442, 3, 1, "", "__call__"], [442, 3, 1, "", "__eq__"], [442, 3, 1, "", "__ge__"], [442, 3, 1, "", "__getitem__"], [442, 3, 1, "", "__getstate__"], [442, 3, 1, "", "__gt__"], [442, 3, 1, "", "__hash__"], [442, 3, 1, "", "__invert__"], [442, 3, 1, "", "__le__"], [442, 3, 1, "", "__lt__"], [442, 3, 1, "", "__ne__"], [442, 3, 1, "", "__new__"], [442, 3, 1, "", "__nonzero__"], [442, 3, 1, "", "__or__"], [442, 3, 1, "", "__pow__"], [442, 3, 1, "", "__repr__"], [442, 3, 1, "", "__setstate__"], [442, 3, 1, "", "__str__"], [442, 3, 1, "", "all"], [442, 3, 1, "", "allclose"], [442, 3, 1, "", "any"], [442, 3, 1, "", "constrain"], [442, 2, 1, "", "constraintMask"], [442, 3, 1, "", "copy"], [442, 3, 1, "", "dot"], [442, 3, 1, "", "getsctype"], [442, 3, 1, "", "inBaseUnits"], [442, 3, 1, "", "inUnitsOf"], [442, 2, 1, "", "mag"], [442, 3, 1, "", "max"], [442, 3, 1, "", "min"], [442, 3, 1, "", "rdot"], [442, 3, 1, "", "release"], [442, 3, 1, "", "setValue"], [442, 2, 1, "", "shape"], [442, 3, 1, "", "std"], [442, 2, 1, "", "unit"], [442, 2, 1, "", "value"]], "fipy.variables.modularVariable": [[448, 1, 1, "", "ModularVariable"]], "fipy.variables.modularVariable.ModularVariable": [[448, 3, 1, "", "__abs__"], [448, 3, 1, "", "__and__"], [448, 3, 1, "", "__array__"], [448, 3, 1, "", "__array_wrap__"], [448, 3, 1, "", "__bool__"], [448, 3, 1, "", "__call__"], [448, 3, 1, "", "__eq__"], [448, 3, 1, "", "__ge__"], [448, 3, 1, "", "__getitem__"], [448, 3, 1, "", "__getstate__"], [448, 3, 1, "", "__gt__"], [448, 3, 1, "", "__hash__"], [448, 3, 1, "", "__invert__"], [448, 3, 1, "", "__le__"], [448, 3, 1, "", "__lt__"], [448, 3, 1, "", "__ne__"], [448, 3, 1, "", "__new__"], [448, 3, 1, "", "__nonzero__"], [448, 3, 1, "", "__or__"], [448, 3, 1, "", "__pow__"], [448, 3, 1, "", "__repr__"], [448, 3, 1, "", "__setstate__"], [448, 3, 1, "", "__str__"], [448, 3, 1, "", "all"], [448, 3, 1, "", "allclose"], [448, 3, 1, "", "any"], [448, 2, 1, "", "arithmeticFaceValue"], [448, 2, 1, "", "cellVolumeAverage"], [448, 3, 1, "", "constrain"], [448, 2, 1, "", "constraintMask"], [448, 3, 1, "", "copy"], [448, 3, 1, "", "dot"], [448, 2, 1, "", "faceGrad"], [448, 2, 1, "", "faceGradAverage"], [448, 2, 1, "", "faceGradNoMod"], [448, 2, 1, "", "faceValue"], [448, 2, 1, "", "gaussGrad"], [448, 3, 1, "", "getsctype"], [448, 2, 1, "", "globalValue"], [448, 2, 1, "", "grad"], [448, 2, 1, "", "harmonicFaceValue"], [448, 3, 1, "", "inBaseUnits"], [448, 3, 1, "", "inUnitsOf"], [448, 2, 1, "", "leastSquaresGrad"], [448, 2, 1, "", "mag"], [448, 3, 1, "", "max"], [448, 3, 1, "", "min"], [448, 2, 1, "", "minmodFaceValue"], [448, 2, 1, "", "old"], [448, 3, 1, "", "rdot"], [448, 3, 1, "", "release"], [448, 3, 1, "", "setValue"], [448, 2, 1, "", "shape"], [448, 3, 1, "", "std"], [448, 2, 1, "", "unit"], [448, 3, 1, "", "updateOld"], [448, 2, 1, "", "value"]], "fipy.variables.noiseVariable": [[449, 1, 1, "", "NoiseVariable"]], "fipy.variables.noiseVariable.NoiseVariable": [[449, 3, 1, "", "__abs__"], [449, 3, 1, "", "__and__"], [449, 3, 1, "", "__array__"], [449, 3, 1, "", "__array_wrap__"], [449, 3, 1, "", "__bool__"], [449, 3, 1, "", "__call__"], [449, 3, 1, "", "__eq__"], [449, 3, 1, "", "__ge__"], [449, 3, 1, "", "__getitem__"], [449, 3, 1, "", "__getstate__"], [449, 3, 1, "", "__gt__"], [449, 3, 1, "", "__hash__"], [449, 3, 1, "", "__invert__"], [449, 3, 1, "", "__le__"], [449, 3, 1, "", "__lt__"], [449, 3, 1, "", "__ne__"], [449, 3, 1, "", "__new__"], [449, 3, 1, "", "__nonzero__"], [449, 3, 1, "", "__or__"], [449, 3, 1, "", "__pow__"], [449, 3, 1, "", "__repr__"], [449, 3, 1, "", "__setstate__"], [449, 3, 1, "", "__str__"], [449, 3, 1, "", "all"], [449, 3, 1, "", "allclose"], [449, 3, 1, "", "any"], [449, 2, 1, "", "arithmeticFaceValue"], [449, 2, 1, "", "cellVolumeAverage"], [449, 3, 1, "", "constrain"], [449, 2, 1, "", "constraintMask"], [449, 3, 1, "", "copy"], [449, 3, 1, "", "dot"], [449, 2, 1, "", "faceGrad"], [449, 2, 1, "", "faceGradAverage"], [449, 2, 1, "", "faceValue"], [449, 2, 1, "", "gaussGrad"], [449, 3, 1, "", "getsctype"], [449, 2, 1, "", "globalValue"], [449, 2, 1, "", "grad"], [449, 2, 1, "", "harmonicFaceValue"], [449, 3, 1, "", "inBaseUnits"], [449, 3, 1, "", "inUnitsOf"], [449, 2, 1, "", "leastSquaresGrad"], [449, 2, 1, "", "mag"], [449, 3, 1, "", "max"], [449, 3, 1, "", "min"], [449, 2, 1, "", "minmodFaceValue"], [449, 2, 1, "", "old"], [449, 3, 1, "", "rdot"], [449, 3, 1, "", "release"], [449, 3, 1, "", "scramble"], [449, 3, 1, "", "setValue"], [449, 2, 1, "", "shape"], [449, 3, 1, "", "std"], [449, 2, 1, "", "unit"], [449, 3, 1, "", "updateOld"], [449, 2, 1, "", "value"]], "fipy.variables.scharfetterGummelFaceVariable": [[451, 1, 1, "", "ScharfetterGummelFaceVariable"]], "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable": [[451, 3, 1, "", "__abs__"], [451, 3, 1, "", "__and__"], [451, 3, 1, "", "__array__"], [451, 3, 1, "", "__array_wrap__"], [451, 3, 1, "", "__bool__"], [451, 3, 1, "", "__call__"], [451, 3, 1, "", "__eq__"], [451, 3, 1, "", "__ge__"], [451, 3, 1, "", "__getitem__"], [451, 3, 1, "", "__getstate__"], [451, 3, 1, "", "__gt__"], [451, 3, 1, "", "__hash__"], [451, 3, 1, "", "__invert__"], [451, 3, 1, "", "__le__"], [451, 3, 1, "", "__lt__"], [451, 3, 1, "", "__ne__"], [451, 3, 1, "", "__new__"], [451, 3, 1, "", "__nonzero__"], [451, 3, 1, "", "__or__"], [451, 3, 1, "", "__pow__"], [451, 3, 1, "", "__repr__"], [451, 3, 1, "", "__setstate__"], [451, 3, 1, "", "__str__"], [451, 3, 1, "", "all"], [451, 3, 1, "", "allclose"], [451, 3, 1, "", "any"], [451, 3, 1, "", "constrain"], [451, 2, 1, "", "constraintMask"], [451, 3, 1, "", "copy"], [451, 2, 1, "", "divergence"], [451, 3, 1, "", "dot"], [451, 3, 1, "", "getsctype"], [451, 3, 1, "", "inBaseUnits"], [451, 3, 1, "", "inUnitsOf"], [451, 2, 1, "", "mag"], [451, 3, 1, "", "max"], [451, 3, 1, "", "min"], [451, 3, 1, "", "rdot"], [451, 3, 1, "", "release"], [451, 3, 1, "", "setValue"], [451, 2, 1, "", "shape"], [451, 3, 1, "", "std"], [451, 2, 1, "", "unit"], [451, 2, 1, "", "value"]], "fipy.variables.surfactantConvectionVariable": [[452, 1, 1, "", "SurfactantConvectionVariable"]], "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable": [[452, 3, 1, "", "__abs__"], [452, 3, 1, "", "__and__"], [452, 3, 1, "", "__array__"], [452, 3, 1, "", "__array_wrap__"], [452, 3, 1, "", "__bool__"], [452, 3, 1, "", "__call__"], [452, 3, 1, "", "__eq__"], [452, 3, 1, "", "__ge__"], [452, 3, 1, "", "__getitem__"], [452, 3, 1, "", "__getstate__"], [452, 3, 1, "", "__gt__"], [452, 3, 1, "", "__hash__"], [452, 3, 1, "", "__invert__"], [452, 3, 1, "", "__le__"], [452, 3, 1, "", "__lt__"], [452, 3, 1, "", "__ne__"], [452, 3, 1, "", "__new__"], [452, 3, 1, "", "__nonzero__"], [452, 3, 1, "", "__or__"], [452, 3, 1, "", "__pow__"], [452, 3, 1, "", "__repr__"], [452, 3, 1, "", "__setstate__"], [452, 3, 1, "", "__str__"], [452, 3, 1, "", "all"], [452, 3, 1, "", "allclose"], [452, 3, 1, "", "any"], [452, 3, 1, "", "constrain"], [452, 2, 1, "", "constraintMask"], [452, 3, 1, "", "copy"], [452, 2, 1, "", "divergence"], [452, 3, 1, "", "dot"], [452, 3, 1, "", "getsctype"], [452, 3, 1, "", "inBaseUnits"], [452, 3, 1, "", "inUnitsOf"], [452, 2, 1, "", "mag"], [452, 3, 1, "", "max"], [452, 3, 1, "", "min"], [452, 3, 1, "", "rdot"], [452, 3, 1, "", "release"], [452, 3, 1, "", "setValue"], [452, 2, 1, "", "shape"], [452, 3, 1, "", "std"], [452, 2, 1, "", "unit"], [452, 2, 1, "", "value"]], "fipy.variables.surfactantVariable": [[453, 1, 1, "", "SurfactantVariable"]], "fipy.variables.surfactantVariable.SurfactantVariable": [[453, 3, 1, "", "__abs__"], [453, 3, 1, "", "__and__"], [453, 3, 1, "", "__array__"], [453, 3, 1, "", "__array_wrap__"], [453, 3, 1, "", "__bool__"], [453, 3, 1, "", "__call__"], [453, 3, 1, "", "__eq__"], [453, 3, 1, "", "__ge__"], [453, 3, 1, "", "__getitem__"], [453, 3, 1, "", "__getstate__"], [453, 3, 1, "", "__gt__"], [453, 3, 1, "", "__hash__"], [453, 3, 1, "", "__invert__"], [453, 3, 1, "", "__le__"], [453, 3, 1, "", "__lt__"], [453, 3, 1, "", "__ne__"], [453, 3, 1, "", "__new__"], [453, 3, 1, "", "__nonzero__"], [453, 3, 1, "", "__or__"], [453, 3, 1, "", "__pow__"], [453, 3, 1, "", "__repr__"], [453, 3, 1, "", "__setstate__"], [453, 3, 1, "", "__str__"], [453, 3, 1, "", "all"], [453, 3, 1, "", "allclose"], [453, 3, 1, "", "any"], [453, 2, 1, "", "arithmeticFaceValue"], [453, 2, 1, "", "cellVolumeAverage"], [453, 3, 1, "", "constrain"], [453, 2, 1, "", "constraintMask"], [453, 3, 1, "", "copy"], [453, 3, 1, "", "dot"], [453, 2, 1, "", "faceGrad"], [453, 2, 1, "", "faceGradAverage"], [453, 2, 1, "", "faceValue"], [453, 2, 1, "", "gaussGrad"], [453, 3, 1, "", "getsctype"], [453, 2, 1, "", "globalValue"], [453, 2, 1, "", "grad"], [453, 2, 1, "", "harmonicFaceValue"], [453, 3, 1, "", "inBaseUnits"], [453, 3, 1, "", "inUnitsOf"], [453, 2, 1, "", "interfaceVar"], [453, 2, 1, "", "leastSquaresGrad"], [453, 2, 1, "", "mag"], [453, 3, 1, "", "max"], [453, 3, 1, "", "min"], [453, 2, 1, "", "minmodFaceValue"], [453, 2, 1, "", "old"], [453, 3, 1, "", "rdot"], [453, 3, 1, "", "release"], [453, 3, 1, "", "setValue"], [453, 2, 1, "", "shape"], [453, 3, 1, "", "std"], [453, 2, 1, "", "unit"], [453, 3, 1, "", "updateOld"], [453, 2, 1, "", "value"]], "fipy.variables.uniformNoiseVariable": [[456, 1, 1, "", "UniformNoiseVariable"]], "fipy.variables.uniformNoiseVariable.UniformNoiseVariable": [[456, 3, 1, "", "__abs__"], [456, 3, 1, "", "__and__"], [456, 3, 1, "", "__array__"], [456, 3, 1, "", "__array_wrap__"], [456, 3, 1, "", "__bool__"], [456, 3, 1, "", "__call__"], [456, 3, 1, "", "__eq__"], [456, 3, 1, "", "__ge__"], [456, 3, 1, "", "__getitem__"], [456, 3, 1, "", "__getstate__"], [456, 3, 1, "", "__gt__"], [456, 3, 1, "", "__hash__"], [456, 3, 1, "", "__invert__"], [456, 3, 1, "", "__le__"], [456, 3, 1, "", "__lt__"], [456, 3, 1, "", "__ne__"], [456, 3, 1, "", "__new__"], [456, 3, 1, "", "__nonzero__"], [456, 3, 1, "", "__or__"], [456, 3, 1, "", "__pow__"], [456, 3, 1, "", "__repr__"], [456, 3, 1, "", "__setstate__"], [456, 3, 1, "", "__str__"], [456, 3, 1, "", "all"], [456, 3, 1, "", "allclose"], [456, 3, 1, "", "any"], [456, 2, 1, "", "arithmeticFaceValue"], [456, 2, 1, "", "cellVolumeAverage"], [456, 3, 1, "", "constrain"], [456, 2, 1, "", "constraintMask"], [456, 3, 1, "", "copy"], [456, 3, 1, "", "dot"], [456, 2, 1, "", "faceGrad"], [456, 2, 1, "", "faceGradAverage"], [456, 2, 1, "", "faceValue"], [456, 2, 1, "", "gaussGrad"], [456, 3, 1, "", "getsctype"], [456, 2, 1, "", "globalValue"], [456, 2, 1, "", "grad"], [456, 2, 1, "", "harmonicFaceValue"], [456, 3, 1, "", "inBaseUnits"], [456, 3, 1, "", "inUnitsOf"], [456, 2, 1, "", "leastSquaresGrad"], [456, 2, 1, "", "mag"], [456, 3, 1, "", "max"], [456, 3, 1, "", "min"], [456, 2, 1, "", "minmodFaceValue"], [456, 2, 1, "", "old"], [456, 3, 1, "", "rdot"], [456, 3, 1, "", "release"], [456, 3, 1, "", "scramble"], [456, 3, 1, "", "setValue"], [456, 2, 1, "", "shape"], [456, 3, 1, "", "std"], [456, 2, 1, "", "unit"], [456, 3, 1, "", "updateOld"], [456, 2, 1, "", "value"]], "fipy.variables.variable": [[457, 1, 1, "", "Variable"]], "fipy.variables.variable.Variable": [[457, 3, 1, "", "__abs__"], [457, 3, 1, "", "__and__"], [457, 3, 1, "", "__array__"], [457, 3, 1, "", "__array_wrap__"], [457, 3, 1, "", "__bool__"], [457, 3, 1, "", "__call__"], [457, 3, 1, "", "__eq__"], [457, 3, 1, "", "__ge__"], [457, 3, 1, "", "__getitem__"], [457, 3, 1, "", "__getstate__"], [457, 3, 1, "", "__gt__"], [457, 3, 1, "", "__hash__"], [457, 3, 1, "", "__invert__"], [457, 3, 1, "", "__le__"], [457, 3, 1, "", "__lt__"], [457, 3, 1, "", "__ne__"], [457, 3, 1, "", "__new__"], [457, 3, 1, "", "__nonzero__"], [457, 3, 1, "", "__or__"], [457, 3, 1, "", "__pow__"], [457, 3, 1, "", "__repr__"], [457, 3, 1, "", "__setstate__"], [457, 3, 1, "", "__str__"], [457, 3, 1, "", "all"], [457, 3, 1, "", "allclose"], [457, 3, 1, "", "any"], [457, 3, 1, "", "constrain"], [457, 3, 1, "", "copy"], [457, 3, 1, "", "getsctype"], [457, 3, 1, "", "inBaseUnits"], [457, 3, 1, "", "inUnitsOf"], [457, 2, 1, "", "mag"], [457, 3, 1, "", "max"], [457, 3, 1, "", "min"], [457, 3, 1, "", "release"], [457, 3, 1, "", "setValue"], [457, 2, 1, "", "shape"], [457, 3, 1, "", "std"], [457, 2, 1, "", "unit"], [457, 2, 1, "", "value"]], "fipy.viewers": [[458, 1, 1, "", "DummyViewer"], [458, 5, 1, "", "MeshDimensionError"], [458, 4, 1, "", "Viewer"], [459, 0, 0, "-", "matplotlibViewer"], [471, 0, 0, "-", "mayaviViewer"], [475, 0, 0, "-", "multiViewer"], [476, 0, 0, "-", "test"], [477, 0, 0, "-", "testinteractive"], [478, 0, 0, "-", "tsvViewer"], [479, 0, 0, "-", "viewer"], [480, 0, 0, "-", "vtkViewer"]], "fipy.viewers.DummyViewer": [[458, 3, 1, "", "plot"], [458, 3, 1, "", "plotMesh"], [458, 3, 1, "", "setLimits"], [458, 2, 1, "", "title"], [458, 2, 1, "", "vars"]], "fipy.viewers.MeshDimensionError": [[458, 6, 1, "", "__cause__"], [458, 6, 1, "", "__context__"], [458, 3, 1, "", "__delattr__"], [458, 3, 1, "", "__getattribute__"], [458, 3, 1, "", "__reduce__"], [458, 3, 1, "", "__repr__"], [458, 3, 1, "", "__setattr__"], [458, 3, 1, "", "__str__"], [458, 3, 1, "", "add_note"], [458, 3, 1, "", "with_traceback"]], "fipy.viewers.matplotlibViewer": [[459, 4, 1, "", "MatplotlibViewer"], [460, 0, 0, "-", "abstractMatplotlib2DViewer"], [461, 0, 0, "-", "abstractMatplotlibViewer"], [462, 0, 0, "-", "matplotlib1DViewer"], [463, 0, 0, "-", "matplotlib2DContourViewer"], [464, 0, 0, "-", "matplotlib2DGridContourViewer"], [465, 0, 0, "-", "matplotlib2DGridViewer"], [466, 0, 0, "-", "matplotlib2DViewer"], [467, 0, 0, "-", "matplotlibSparseMatrixViewer"], [468, 0, 0, "-", "matplotlibStreamViewer"], [469, 0, 0, "-", "matplotlibVectorViewer"], [470, 0, 0, "-", "test"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer": [[460, 1, 1, "", "AbstractMatplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer": [[460, 2, 1, "", "axes"], [460, 2, 1, "", "cmap"], [460, 2, 1, "", "colorbar"], [460, 2, 1, "", "fig"], [460, 2, 1, "", "id"], [460, 2, 1, "", "log"], [460, 3, 1, "", "plot"], [460, 3, 1, "", "plotMesh"], [460, 3, 1, "", "setLimits"], [460, 2, 1, "", "title"], [460, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer": [[461, 1, 1, "", "AbstractMatplotlibViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer": [[461, 2, 1, "", "axes"], [461, 2, 1, "", "cmap"], [461, 2, 1, "", "colorbar"], [461, 2, 1, "", "fig"], [461, 2, 1, "", "id"], [461, 2, 1, "", "log"], [461, 3, 1, "", "plot"], [461, 3, 1, "", "plotMesh"], [461, 3, 1, "", "setLimits"], [461, 2, 1, "", "title"], [461, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer": [[462, 1, 1, "", "Matplotlib1DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer": [[462, 2, 1, "", "axes"], [462, 2, 1, "", "cmap"], [462, 2, 1, "", "colorbar"], [462, 2, 1, "", "fig"], [462, 2, 1, "", "id"], [462, 2, 1, "", "lines"], [462, 2, 1, "", "log"], [462, 3, 1, "", "plot"], [462, 3, 1, "", "plotMesh"], [462, 3, 1, "", "setLimits"], [462, 2, 1, "", "title"], [462, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer": [[463, 1, 1, "", "Matplotlib2DContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer": [[463, 2, 1, "", "axes"], [463, 2, 1, "", "cmap"], [463, 2, 1, "", "colorbar"], [463, 2, 1, "", "fig"], [463, 2, 1, "", "id"], [463, 2, 1, "", "levels"], [463, 2, 1, "", "log"], [463, 3, 1, "", "plot"], [463, 3, 1, "", "plotMesh"], [463, 3, 1, "", "setLimits"], [463, 2, 1, "", "title"], [463, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer": [[464, 1, 1, "", "Matplotlib2DGridContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer": [[464, 2, 1, "", "axes"], [464, 2, 1, "", "cmap"], [464, 2, 1, "", "colorbar"], [464, 2, 1, "", "fig"], [464, 2, 1, "", "id"], [464, 2, 1, "", "levels"], [464, 2, 1, "", "log"], [464, 3, 1, "", "plot"], [464, 3, 1, "", "plotMesh"], [464, 3, 1, "", "setLimits"], [464, 2, 1, "", "title"], [464, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer": [[465, 1, 1, "", "Matplotlib2DGridViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer": [[465, 2, 1, "", "axes"], [465, 2, 1, "", "cmap"], [465, 2, 1, "", "colorbar"], [465, 2, 1, "", "fig"], [465, 2, 1, "", "id"], [465, 2, 1, "", "log"], [465, 3, 1, "", "plot"], [465, 3, 1, "", "plotMesh"], [465, 3, 1, "", "setLimits"], [465, 2, 1, "", "title"], [465, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer": [[466, 1, 1, "", "Matplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer": [[466, 2, 1, "", "axes"], [466, 2, 1, "", "cmap"], [466, 2, 1, "", "collection"], [466, 2, 1, "", "colorbar"], [466, 2, 1, "", "fig"], [466, 2, 1, "", "id"], [466, 2, 1, "", "log"], [466, 3, 1, "", "plot"], [466, 3, 1, "", "plotMesh"], [466, 3, 1, "", "setLimits"], [466, 2, 1, "", "title"], [466, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer": [[467, 1, 1, "", "MatplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer": [[468, 1, 1, "", "MatplotlibStreamViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer": [[468, 2, 1, "", "axes"], [468, 2, 1, "", "cmap"], [468, 2, 1, "", "colorbar"], [468, 2, 1, "", "fig"], [468, 2, 1, "", "id"], [468, 2, 1, "", "kwargs"], [468, 2, 1, "", "log"], [468, 3, 1, "", "plot"], [468, 3, 1, "", "plotMesh"], [468, 3, 1, "", "setLimits"], [468, 2, 1, "", "title"], [468, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer": [[469, 1, 1, "", "MatplotlibVectorViewer"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer": [[469, 2, 1, "", "axes"], [469, 2, 1, "", "cmap"], [469, 2, 1, "", "colorbar"], [469, 2, 1, "", "fig"], [469, 2, 1, "", "id"], [469, 2, 1, "", "log"], [469, 3, 1, "", "plot"], [469, 3, 1, "", "plotMesh"], [469, 3, 1, "", "setLimits"], [469, 2, 1, "", "title"], [469, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer": [[471, 1, 1, "", "MayaviClient"], [472, 0, 0, "-", "mayaviClient"], [473, 0, 0, "-", "mayaviDaemon"], [474, 0, 0, "-", "test"]], "fipy.viewers.mayaviViewer.MayaviClient": [[471, 2, 1, "", "fps"], [471, 3, 1, "", "plot"], [471, 3, 1, "", "plotMesh"], [471, 3, 1, "", "setLimits"], [471, 2, 1, "", "title"], [471, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviClient": [[472, 1, 1, "", "MayaviClient"]], "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient": [[472, 2, 1, "", "fps"], [472, 3, 1, "", "plot"], [472, 3, 1, "", "plotMesh"], [472, 3, 1, "", "setLimits"], [472, 2, 1, "", "title"], [472, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviDaemon": [[473, 1, 1, "", "MayaviDaemon"], [473, 4, 1, "", "main"]], "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon": [[473, 3, 1, "", "parse_command_line"], [473, 3, 1, "", "setup_source"], [473, 3, 1, "", "update_pipeline"], [473, 3, 1, "", "view_data"]], "fipy.viewers.multiViewer": [[475, 1, 1, "", "MultiViewer"]], "fipy.viewers.multiViewer.MultiViewer": [[475, 3, 1, "", "plot"], [475, 3, 1, "", "plotMesh"], [475, 3, 1, "", "setLimits"], [475, 2, 1, "", "title"], [475, 2, 1, "", "vars"]], "fipy.viewers.tsvViewer": [[478, 1, 1, "", "TSVViewer"]], "fipy.viewers.tsvViewer.TSVViewer": [[478, 3, 1, "", "plot"], [478, 3, 1, "", "plotMesh"], [478, 3, 1, "", "setLimits"], [478, 2, 1, "", "title"], [478, 2, 1, "", "vars"]], "fipy.viewers.viewer": [[479, 1, 1, "", "AbstractViewer"]], "fipy.viewers.viewer.AbstractViewer": [[479, 3, 1, "", "plot"], [479, 3, 1, "", "plotMesh"], [479, 3, 1, "", "setLimits"], [479, 2, 1, "", "title"], [479, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer": [[480, 1, 1, "", "VTKCellViewer"], [480, 1, 1, "", "VTKFaceViewer"], [480, 4, 1, "", "VTKViewer"], [481, 0, 0, "-", "test"], [482, 0, 0, "-", "vtkCellViewer"], [483, 0, 0, "-", "vtkFaceViewer"], [484, 0, 0, "-", "vtkViewer"]], "fipy.viewers.vtkViewer.VTKCellViewer": [[480, 3, 1, "", "plot"], [480, 3, 1, "", "plotMesh"], [480, 3, 1, "", "setLimits"], [480, 2, 1, "", "title"], [480, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.VTKFaceViewer": [[480, 3, 1, "", "plot"], [480, 3, 1, "", "plotMesh"], [480, 3, 1, "", "setLimits"], [480, 2, 1, "", "title"], [480, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[482, 1, 1, "", "VTKCellViewer"]], "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer": [[482, 3, 1, "", "plot"], [482, 3, 1, "", "plotMesh"], [482, 3, 1, "", "setLimits"], [482, 2, 1, "", "title"], [482, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[483, 1, 1, "", "VTKFaceViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer": [[483, 3, 1, "", "plot"], [483, 3, 1, "", "plotMesh"], [483, 3, 1, "", "setLimits"], [483, 2, 1, "", "title"], [483, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkViewer": [[484, 1, 1, "", "VTKViewer"]], "fipy.viewers.vtkViewer.vtkViewer.VTKViewer": [[484, 3, 1, "", "plot"], [484, 3, 1, "", "plotMesh"], [484, 3, 1, "", "setLimits"], [484, 2, 1, "", "title"], [484, 2, 1, "", "vars"]], "package": [[494, 0, 0, "-", "subpackage"]], "package.subpackage": [[495, 0, 0, "-", "base"], [496, 0, 0, "-", "object"]], "package.subpackage.base": [[495, 1, 1, "", "Base"]], "package.subpackage.base.Base": [[495, 3, 1, "", "method1"], [495, 3, 1, "", "method2"]], "package.subpackage.object": [[496, 1, 1, "", "Object"]], "package.subpackage.object.Object": [[496, 3, 1, "", "method1"], [496, 3, 1, "", "method2"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:function", "5": "py:exception", "6": "py:attribute", "7": "std:cmdoption", "8": "std:envvar"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["std", "cmdoption", "program option"], "8": ["std", "envvar", "environment variable"]}, "titleterms": {"git": [0, 9, 11], "practic": 0, "branch": [0, 9, 11], "merg": 0, "chang": [0, 2, 8], "from": 0, "master": 0, "submit": 0, "code": [0, 16], "review": 0, "refactor": 0, "complet": 0, "continu": 0, "integr": 0, "conda": [0, 11], "lockfil": 0, "make": [0, 8], "releas": 0, "sourc": [0, 8, 21, 68, 488], "upload": 0, "updat": [0, 7, 187, 188, 189, 190], "forg": 0, "feedstock": 0, "announc": 0, "fipi": [1, 7, 8, 11, 17, 20, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487], "packag": [1, 11, 13, 493, 494, 495, 496], "document": [1, 497], "log": [2, 17, 410, 411], "version": [2, 29, 417], "3": 2, "1": 2, "1051": 2, "g36bff3800": 2, "pull": 2, "fix": [2, 17], "4": 2, "2022": 2, "06": 2, "15": 2, "2": [2, 17], "2020": 2, "08": 2, "01": 2, "02": 2, "14": 2, "2019": 2, "28": 2, "04": 2, "22": 2, "2017": 2, "17": 2, "2016": 2, "12": 2, "24": 2, "2015": 2, "2013": 2, "09": 2, "30": 2, "0": 2, "2012": 2, "10": 2, "03": 2, "16": 2, "2011": 2, "20": 2, "2010": 2, "05": 2, "2009": 2, "11": 2, "23": 2, "2008": 2, "2007": 2, "2006": 2, "2005": 2, "2004": 2, "contact": 3, "github": 3, "discuss": [3, 6], "issu": 3, "stackoverflow": 3, "mail": 3, "list": 3, "archiv": 3, "contributor": 4, "disclaim": 5, "effici": 6, "comparison": 6, "between": [6, 8], "cach": 6, "flag": [6, 17, 22], "pyspars": [6, 16, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "trilino": [6, 16, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "exampl": [7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190], "select": 7, "diffus": [7, 8, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 488], "convect": [7, 8, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 488], "phase": [7, 112, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178], "field": 7, "level": [7, 11, 21, 138], "set": [7, 11], "cahn": 7, "hilliard": 7, "fluid": 7, "flow": [7, 116, 117, 118], "reactiv": 7, "wet": 7, "frequent": 8, "ask": 8, "question": 8, "how": [8, 497], "do": 8, "i": 8, "repres": 8, "an": 8, "equat": [8, 17, 488, 489], "wai": 8, "model": 8, "anisotrop": 8, "process": 8, "more": 8, "gener": [8, 489], "coeffici": 8, "tensor": 8, "so": 8, "term": [8, 12, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 488], "take": 8, "form": 8, "partial_i": 8, "gamma_": 8, "ij": 8, "partial_j": 8, "phi": [8, 488], "doesn": 8, "t": [8, 15, 488], "involv": 8, "depend": 8, "variabl": [8, 17, 22, 105, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], "transient": [8, 488], "what": 8, "my": 8, "where": 8, "put": 8, "m": 8, "solv": [8, 17], "can": 8, "see": 8, "export": 8, "data": 8, "save": 8, "plot": 8, "imag": 8, "onli": 8, "want": 8, "file": 8, "displai": 8, "screen": 8, "movi": 8, "why": 8, "viewer": [8, 18, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "look": 8, "iter": 8, "timestep": 8, "sweep": 8, "oh": 8, "distinct": 8, "cellvari": [8, 424], "facevari": [8, 432], "boundari": [8, 17, 488], "condit": [8, 17, 488], "doe": 8, "thi": 8, "error": 8, "messag": 8, "mean": 8, "": 8, "default": [8, 16, 17], "behavior": 8, "tell": 8, "run": [8, 17], "parallel": [8, 17, 158], "don": [8, 15], "script": [8, 21], "work": 8, "anymor": 8, "isn": 8, "answer": 8, "here": 8, "usag": [9, 11], "client": [9, 11], "develop": [10, 11, 21], "guidelin": 10, "object": [10, 21, 496], "orient": [10, 21], "design": [10, 21], "program": [10, 21], "style": 10, "test": [10, 17, 21, 37, 42, 69, 79, 87, 103, 104, 115, 118, 123, 130, 145, 151, 152, 157, 167, 172, 178, 182, 185, 186, 198, 205, 243, 326, 387, 393, 394, 395, 396, 397, 415, 454, 470, 474, 476, 481], "instal": [11, 13, 15], "pre": 11, "binder": 11, "recommend": 11, "method": [11, 488], "creat": 11, "environ": [11, 17, 22, 411], "enabl": 11, "obtain": 11, "requir": 11, "python": [11, 17, 21], "numpi": 11, "option": 11, "gmsh": [11, 17], "scipi": [11, 16, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324], "scikit": 11, "fmm": 11, "lsmlib": 11, "nix": [11, 13], "get": [11, 13], "start": [11, 13], "addit": [11, 13], "us": [11, 12, 13, 17], "pip": [11, 13], "public": 14, "present": 14, "overview": 15, "even": 15, "you": 15, "read": [15, 497], "manual": [15, 17, 487], "download": 15, "support": 15, "convent": 15, "notat": 15, "solver": [16, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354], "petsc": [16, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275], "pyamg": [16, 277, 278, 279, 280, 281, 282, 283, 284], "pyamgx": [16, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296], "converg": [16, 253], "residu": 16, "criteria": 16, "legaci": 16, "absolute_toler": 16, "divergence_toler": 16, "report": 16, "statu": 16, "diverg": 16, "command": [17, 22], "line": [17, 22, 139], "openmp": 17, "thread": 17, "v": 17, "mpi": 17, "rank": 17, "mesh": [17, 153, 154, 155, 156, 157, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251], "coupl": [17, 74], "vector": [17, 416], "appli": 17, "valu": 17, "dirichlet": 17, "gradient": 17, "neumann": 17, "flux": 17, "outlet": 17, "inlet": 17, "spatial": 17, "vari": 17, "robin": [17, 67], "intern": 17, "under": 17, "matplotlib": 18, "mayavi": 18, "virtual": 19, "kinet": 19, "materi": 19, "laboratori": 19, "content": 20, "implement": 21, "numer": [21, 490, 491], "approach": 21, "structur": 21, "base": [21, 495], "open": 21, "high": 21, "languag": 21, "extern": 22, "benchmark": [24, 25, 26, 27, 28, 29], "size": 26, "step": 27, "util": 28, "cahnhilliard": [30, 31, 32, 33, 34, 35, 36, 37], "mesh2d": [31, 61, 110, 229], "mesh2dcoupl": 32, "mesh3d": 33, "sphere": [34, 156], "spheredaemon": 35, "tanh1d": 36, "chemotaxi": [38, 39, 40, 41, 42], "input": [39, 99, 111], "input2d": 40, "paramet": 41, "advect": [44, 45, 46, 47, 120, 121, 122, 123, 124], "explicitupwind": 45, "implicitupwind": 46, "vanleerupwind": 47, "exponential1d": [48, 49, 50, 51, 52], "cylindricalmesh1d": 49, "cylindricalmesh1dnonuniform": 50, "mesh1d": [51, 54, 56, 65, 77, 81, 89, 90, 91, 108, 122, 128, 170, 228], "tri2d": [52, 57, 62, 66, 80, 248], "exponential1dback": [53, 54], "exponential1dsourc": [55, 56, 57], "exponential2d": [58, 59, 60, 61, 62], "cylindricalmesh2d": 59, "cylindricalmesh2dnonuniform": 60, "peclet": 63, "powerlaw1d": [64, 65, 66], "anisotropi": [71, 160], "circl": [72, 121, 126, 148, 169], "circlequad": 73, "electrostat": 75, "explicit": [76, 77, 78, 79, 80], "mixedel": 78, "mesh20x20": [82, 92, 93, 94, 95, 96, 97, 165], "mesh20x20coupl": 83, "nthorder": [84, 85, 86, 87], "input4thorder1d": 85, "input4thorder_lin": 86, "steadyst": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "inputperiod": 90, "tri2dinput": [91, 97, 100], "gmshinput": 93, "isotropi": 94, "modifiedmeshinput": 95, "orthoerror": 96, "mesh50x50": [98, 99, 100], "othermesh": [101, 102], "prism": 102, "elphf": [106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "mesh1ddimension": 109, "phasediffus": 113, "poisson": 114, "stokescav": 117, "levelset": [119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152], "trench": 124, "distancefunct": [125, 126, 127, 128, 129, 130], "interior": 127, "squar": [129, 150], "electrochem": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], "adsorbingsurfactantequ": 132, "adsorpt": 133, "gapfilldistancevari": 134, "gapfillmesh": 135, "gold": 136, "howtowriteascript": 137, "matplotlibsurfactantview": 140, "mayavisurfactantview": 141, "metaliondiffusionequ": 142, "simpletrenchsystem": 143, "surfactantbulkdiffusionequ": 144, "trenchmesh": 146, "surfact": [147, 148, 149, 150, 151], "expandingcircl": 149, "gmshrefin": 154, "inputgrid2d": 155, "anisotropyold": 161, "binari": 162, "binarycoupl": 163, "imping": [164, 165, 166, 167], "mesh40x1": 166, "missorient": [168, 169, 170, 171, 172], "modcircl": 171, "polyxt": 173, "polyxtalcoupl": 174, "quaternari": 175, "simpl": 176, "symmetri": 177, "reactivewet": [179, 180, 181, 182], "liquidvapor1d": 180, "liquidvapor2d": 181, "riemann": [183, 184, 185], "acoust": 184, "update0_1to1_0": 188, "update1_0to2_0": 189, "update2_0to3_0": 190, "boundarycondit": [192, 193, 194, 195, 196, 197, 198], "constraint": 194, "fixedflux": 195, "fixedvalu": 196, "nthorderboundarycondit": 197, "matric": [199, 200, 201, 202, 203, 204, 205, 206], "offsetsparsematrix": 200, "petscmatrix": 201, "pysparsematrix": 202, "scipymatrix": 203, "sparsematrix": 204, "trilinosmatrix": 206, "abstractmesh": 208, "builder": [209, 210, 211, 212, 213, 214, 215], "abstractgridbuild": 210, "grid1dbuild": 211, "grid2dbuild": 212, "grid3dbuild": 213, "periodicgrid1dbuild": 214, "utilityclass": 215, "cylindricalgrid1d": 216, "cylindricalgrid2d": 217, "cylindricalnonuniformgrid1d": 218, "cylindricalnonuniformgrid2d": 219, "cylindricaluniformgrid1d": 220, "cylindricaluniformgrid2d": 221, "factorymesh": 222, "gmshmesh": 223, "grid1d": 224, "grid2d": 225, "grid3d": 226, "nonuniformgrid1d": 230, "nonuniformgrid2d": 231, "nonuniformgrid3d": 232, "periodicgrid1d": 233, "periodicgrid2d": 234, "periodicgrid3d": 235, "represent": [236, 237, 238, 239], "abstractrepresent": 237, "gridrepresent": 238, "meshrepresent": 239, "skewedgrid2d": 240, "sphericalnonuniformgrid1d": 241, "sphericaluniformgrid1d": 242, "topologi": [244, 245, 246, 247], "abstracttopologi": 245, "gridtopologi": 246, "meshtopologi": 247, "uniformgrid": 249, "uniformgrid1d": 250, "uniformgrid2d": 251, "comm": [255, 256, 257, 258, 329, 330, 331, 332, 399, 400, 401], "parallelpetsccommwrapp": 256, "petsccommwrapp": 257, "serialpetsccommwrapp": 258, "dummysolv": 259, "linearbicgsolv": 260, "linearcgssolv": [261, 278, 298, 314, 334], "lineargmressolv": [262, 279, 290, 299, 315, 335], "linearlusolv": [263, 281, 291, 302, 316, 336], "linearpcgsolv": [264, 282, 292, 303, 317, 337], "petscconverg": 265, "petsckrylovsolv": 266, "petscsolv": 267, "precondition": [268, 269, 270, 271, 272, 273, 274, 275, 276, 283, 284, 293, 305, 306, 307, 308, 318, 319, 320, 321, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350], "defaultprecondition": 269, "icprecondition": [270, 340], "iluprecondition": [271, 319, 341], "jacobiprecondition": [272, 306, 320, 342], "luprecondition": 273, "petscprecondition": 274, "ssorprecondition": [275, 308], "lineargeneralsolv": 280, "smoothedaggregationprecondition": 284, "aggregationamgsolv": 286, "classicalamgsolv": 287, "linearbicgstabsolv": [288, 313, 333], "linearfgmressolv": 289, "pyamgxsolv": 294, "pyamgxconverg": 295, "smoother": 296, "linearinitialsolv": 300, "linearjorsolv": 301, "linearrhssolv": 304, "pysparseprecondition": 307, "pysparseconverg": 309, "pysparsesolv": 310, "pysparsematrixsolv": 311, "scipyprecondition": 321, "scipyconverg": 322, "scipykrylovsolv": 323, "scipysolv": 324, "aztecconverg": 328, "epetracommwrapp": 330, "parallelepetracommwrapp": 331, "serialepetracommwrapp": 332, "domdecompprecondition": 339, "multilevelddmlprecondition": 343, "multilevelddprecondition": 344, "multilevelnssaprecondition": 345, "multilevelprecondition": 346, "multilevelsaprecondition": 347, "multilevelsgsprecondition": 348, "multilevelsolversmootherprecondition": 349, "trilinosprecondition": 350, "trilinosaztecoosolv": 351, "trilinosmltest": 352, "trilinosnonlinearsolv": 353, "trilinossolv": 354, "stepper": [355, 356, 357, 358], "pidstepp": 356, "pseudorkqsstepp": 357, "abstractbinaryterm": 360, "abstractconvectionterm": 361, "abstractdiffusionterm": 362, "abstractupwindconvectionterm": 363, "advectionterm": 364, "asymmetricconvectionterm": 365, "binaryterm": 366, "cellterm": 367, "centraldiffconvectionterm": 368, "coupledbinaryterm": 369, "diffusionterm": 370, "diffusiontermcorrect": 371, "diffusiontermnocorrect": 372, "explicitdiffusionterm": 373, "explicitsourceterm": 374, "explicitupwindconvectionterm": 375, "exponentialconvectionterm": 376, "faceterm": 377, "firstorderadvectionterm": 378, "hybridconvectionterm": 379, "implicitdiffusionterm": 380, "implicitsourceterm": 381, "nondiffusionterm": 382, "powerlawconvectionterm": 383, "residualterm": 384, "sourceterm": 385, "transientterm": 388, "unaryterm": 389, "upwindconvectionterm": 390, "vanleerconvectionterm": 391, "testfipi": 392, "doctestplu": 394, "lateimporttest": 395, "testprogram": 397, "tool": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417], "commwrapp": 400, "dummycomm": 401, "debug": 402, "decor": 403, "dimens": [404, 405, 406, 407], "dictwithdefault": 405, "numberdict": 406, "physicalfield": 407, "dump": 408, "inlin": 409, "numerix": 412, "parser": 413, "sharedtempfil": 414, "addoverfacesvari": 419, "arithmeticcelltofacevari": 420, "betanoisevari": 421, "binaryoperatorvari": 422, "celltofacevari": 423, "constant": 425, "constraintmask": 426, "coupledcellvari": 427, "distancevari": 428, "exponentialnoisevari": 429, "facegradcontributionsvari": 430, "facegradvari": 431, "gammanoisevari": 433, "gausscellgradvari": 434, "gaussiannoisevari": 435, "harmoniccelltofacevari": 436, "histogramvari": 437, "interfaceareavari": 438, "interfaceflagvari": 439, "leastsquarescellgradvari": 440, "levelsetdiffusionvari": 441, "meshvari": 442, "minmodcelltofacevari": 443, "modcellgradvari": 444, "modcelltofacevari": 445, "modfacegradvari": 446, "modphysicalfield": 447, "modularvari": 448, "noisevari": 449, "operatorvari": 450, "scharfettergummelfacevari": 451, "surfactantconvectionvari": 452, "surfactantvari": 453, "unaryoperatorvari": 455, "uniformnoisevari": 456, "matplotlibview": [459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470], "abstractmatplotlib2dview": 460, "abstractmatplotlibview": 461, "matplotlib1dview": 462, "matplotlib2dcontourview": 463, "matplotlib2dgridcontourview": 464, "matplotlib2dgridview": 465, "matplotlib2dview": 466, "matplotlibsparsematrixview": 467, "matplotlibstreamview": 468, "matplotlibvectorview": 469, "mayaviview": [471, 472, 473, 474], "mayavicli": 472, "mayavidaemon": 473, "multiview": 475, "testinteract": 477, "tsvviewer": 478, "vtkviewer": [480, 481, 482, 483, 484], "vtkcellview": 482, "vtkfaceview": 483, "glossari": 485, "introduct": 486, "finit": 488, "volum": 488, "cell": 488, "center": 488, "fvm": 488, "cc": 488, "vertex": 488, "vc": 488, "discret": 488, "partial": 488, "rho": 488, "nabla": 488, "cdot": 488, "left": 488, "vec": 488, "u": 488, "right": 488, "gamma_1": 488, "higher": 488, "order": 488, "linear": 488, "conserv": 489, "theoret": 490, "background": 490, "scheme": 491, "refer": 492, "subpackag": [494, 495, 496], "modul": 497}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinxcontrib.bibtex": 9, "sphinx": 58}, "alltitles": {"Git practices": [[0, "git-practices"]], "Branches": [[0, "branches"]], "Merging changes from master to the branch": [[0, "merging-changes-from-master-to-the-branch"]], "Submit branch for code review": [[0, "submit-branch-for-code-review"]], "Refactoring complete: merge branch to master": [[0, "refactoring-complete-merge-branch-to-master"]], "Continuous Integration": [[0, "continuous-integration"]], "Conda Lockfiles": [[0, "conda-lockfiles"]], "Making a Release": [[0, "making-a-release"]], "Source": [[0, "source"]], "Release from master": [[0, "release-from-master"]], "Upload": [[0, "upload"]], "Update conda-forge feedstock": [[0, "update-conda-forge-feedstock"]], "Announce": [[0, "announce"]], "fipy Package Documentation": [[1, "fipy-package-documentation"]], "Change Log": [[2, "change-log"]], "Version 3.1.3+1051.g36bff3800": [[2, "version-release"]], "Pulls": [[2, "pulls"], [2, "id7"], [2, "id52"], [2, "id61"], [2, "id67"], [2, "id80"], [2, "id98"], [2, "id171"]], "Fixes": [[2, "fixes"], [2, "id25"], [2, "id57"], [2, "id65"], [2, "id76"], [2, "id86"], [2, "id130"], [2, "id169"], [2, "id206"], [2, "id231"], [2, "id241"], [2, "id304"], [2, "id308"], [2, "id367"], [2, "id391"], [2, "id399"], [2, "id407"], [2, "id416"], [2, "id423"], [2, "id427"], [2, "id439"], [2, "id441"], [2, "id484"], [2, "id500"], [2, "id519"]], "Version 3.4.3 - 2022-06-15": [[2, "version-3-4-3-2022-06-15"]], "Version 3.4.2.1 - 2020-08-01": [[2, "version-3-4-2-1-2020-08-01"]], "Version 3.4.1 - 2020-02-14": [[2, "version-3-4-1-2020-02-14"]], "Version 3.4 - 2020-02-06": [[2, "version-3-4-2020-02-06"]], "Version 3.3 - 2019-06-28": [[2, "version-3-3-2019-06-28"]], "Version 3.2 - 2019-04-22": [[2, "version-3-2-2019-04-22"]], "Version 3.1.3 - 2017-01-17": [[2, "version-3-1-3-2017-01-17"]], "Version 3.1.2 - 2016-12-24": [[2, "version-3-1-2-2016-12-24"]], "Version 3.1.1 - 2015-12-17": [[2, "version-3-1-1-2015-12-17"]], "Version 3.1 - 2013-09-30": [[2, "version-3-1-2013-09-30"]], "Version 3.0.1 - 2012-10-03": [[2, "version-3-0-1-2012-10-03"]], "Version 3.0 - 2012-08-16": [[2, "version-3-0-2012-08-16"]], "Version 2.1.3 - 2012-01-17": [[2, "version-2-1-3-2012-01-17"]], "Version 2.1.2 - 2011-04-20": [[2, "version-2-1-2-2011-04-20"]], "Version 2.1.1 - 2010-10-05": [[2, "version-2-1-1-2010-10-05"]], "Version 2.1 - 2010-04-01": [[2, "version-2-1-2010-04-01"]], "Version 2.0.3 - 2010-03-17": [[2, "version-2-0-3-2010-03-17"]], "Version 2.0.2 - 2009-06-11": [[2, "version-2-0-2-2009-06-11"]], "Version 2.0.1 - 2009-04-23": [[2, "version-2-0-1-2009-04-23"]], "Version 2.0 - 2009-02-09": [[2, "version-2-0-2009-02-09"]], "Version 1.2.3 - 2009-01-0": [[2, "version-1-2-3-2009-01-0"]], "Version 1.2.2 - 2008-12-30": [[2, "version-1-2-2-2008-12-30"]], "Version 1.2.1 - 2008-02-08": [[2, "version-1-2-1-2008-02-08"]], "Version 1.2 - 2007-02-12": [[2, "version-1-2-2007-02-12"]], "Version 1.1 - 2006-06-06": [[2, "version-1-1-2006-06-06"]], "Version 1.0 - 2005-09-16": [[2, "version-1-0-2005-09-16"]], "Version 0.1.1": [[2, "version-0-1-1"]], "Version 0.1 - 2004-11-05": [[2, "version-0-1-2004-11-05"]], "Contact": [[3, "contact"]], "GitHub Discussions": [[3, "github-discussions"]], "GitHub Issues": [[3, "github-issues"]], "StackOverflow": [[3, "stackoverflow"]], "Mailing List": [[3, "mailing-list"]], "List Archive": [[3, "list-archive"]], "Contributors": [[4, "contributors"]], "Disclaimer": [[5, "disclaimer"]], "Efficiency": [[6, "efficiency"]], "Efficiency comparison between --no-cache and --cache flags": [[6, "efficiency-comparison-between-no-cache-and-cache-flags"]], "Efficiency discussion of Pysparse and Trilinos": [[6, "efficiency-discussion-of-pysparse-and-trilinos"]], "Examples": [[7, "examples"]], "Selected Examples": [[7, "selected-examples"]], "Diffusion Examples": [[7, "diffusion-examples"]], "Convection Examples": [[7, "convection-examples"]], "Phase Field Examples": [[7, "phase-field-examples"]], "Level Set Examples": [[7, "level-set-examples"]], "Cahn-Hilliard Examples": [[7, "cahn-hilliard-examples"]], "Fluid Flow Examples": [[7, "fluid-flow-examples"]], "Reactive Wetting Examples": [[7, "reactive-wetting-examples"]], "Updating FiPy": [[7, "updating-fipy"]], "Frequently Asked Questions": [[8, "frequently-asked-questions"]], "How do I represent an equation in FiPy?": [[8, "how-do-i-represent-an-equation-in-fipy"]], "Is there a way to model an anisotropic diffusion process or more generally to represent the diffusion coefficient as a tensor so that the diffusion term takes the form \\partial_i \\Gamma_{ij}\\partial_j \\phi?": [[8, "is-there-a-way-to-model-an-anisotropic-diffusion-process-or-more-generally-to-represent-the-diffusion-coefficient-as-a-tensor-so-that-the-diffusion-term-takes-the-form-partial-i-gamma-ij-partial-j-phi"]], "How do I represent a \u2026 term that doesn\u2019t involve the dependent variable?": [[8, "how-do-i-represent-a-term-that-doesn-t-involve-the-dependent-variable"]], "How do I represent a diffusive source?": [[8, "how-do-i-represent-a-diffusive-source"]], "How do I represent a convective source?": [[8, "how-do-i-represent-a-convective-source"]], "How do I represent a transient source?": [[8, "how-do-i-represent-a-transient-source"]], "What if my term involves the dependent variable, but not where FiPy puts it?": [[8, "what-if-my-term-involves-the-dependent-variable-but-not-where-fipy-puts-it"]], "What if the coefficient of a term depends on the variable that I\u2019m solving for?": [[8, "what-if-the-coefficient-of-a-term-depends-on-the-variable-that-i-m-solving-for"]], "How can I see what I\u2019m doing?": [[8, "how-can-i-see-what-i-m-doing"]], "How do I export data?": [[8, "how-do-i-export-data"]], "How do I save a plot image?": [[8, "how-do-i-save-a-plot-image"]], "What if I only want the saved file, with no display on screen?": [[8, "what-if-i-only-want-the-saved-file-with-no-display-on-screen"]], "How do I make a movie?": [[8, "how-do-i-make-a-movie"]], "Why doesn\u2019t the Viewer look the way I want?": [[8, "why-doesn-t-the-viewer-look-the-way-i-want"]], "Iterations, timesteps, and sweeps? Oh, my!": [[8, "iterations-timesteps-and-sweeps-oh-my"]], "Why the distinction between CellVariable and FaceVariable coefficients?": [[8, "why-the-distinction-between-cellvariable-and-facevariable-coefficients"]], "How do I represent boundary conditions?": [[8, "how-do-i-represent-boundary-conditions"]], "What does this error message mean?": [[8, "what-does-this-error-message-mean"]], "How do I change FiPy\u2019s default behavior?": [[8, "how-do-i-change-fipy-s-default-behavior"]], "How can I tell if I\u2019m running in parallel?": [[8, "how-can-i-tell-if-i-m-running-in-parallel"]], "Why don\u2019t my scripts work anymore?": [[8, "why-don-t-my-scripts-work-anymore"]], "What if my question isn\u2019t answered here?": [[8, "what-if-my-question-isn-t-answered-here"]], "Git usage": [[9, "git-usage"], [11, "git-usage"]], "Git client": [[9, "git-client"], [11, "git-client"]], "Git branches": [[9, "git-branches"], [11, "git-branches"]], "Development Guidelines": [[10, "development-guidelines"]], "Object Oriented Design": [[10, "object-oriented-design"]], "Programming Style": [[10, "programming-style"]], "Testing": [[10, "testing"]], "Installation": [[11, "installation"]], "Pre-Installed on Binder": [[11, "pre-installed-on-binder"]], "Recommended Method": [[11, "recommended-method"]], "Install conda": [[11, "install-conda"]], "Create a conda environment": [[11, "create-a-conda-environment"]], "Install FiPy": [[11, "install-fipy"]], "Enable conda environment": [[11, "enable-conda-environment"]], "Obtaining FiPy": [[11, "obtaining-fipy"]], "Installing FiPy": [[11, "installing-fipy"]], "Required Packages": [[11, "required-packages"]], "Python": [[11, "python"]], "NumPy": [[11, "numpy"]], "Optional Packages": [[11, "optional-packages"]], "Gmsh": [[11, "gmsh"]], "SciPy": [[11, "scipy"], [16, "scipy"]], "Level Set Packages": [[11, "level-set-packages"]], "Scikit-fmm": [[11, "scikit-fmm"]], "LSMLIB": [[11, "lsmlib"]], "Development Environment": [[11, "development-environment"]], "Nix": [[11, "nix"]], "Nix Installation": [[11, "nix-installation"], [13, "nix-installation"]], "Getting Started with Nix": [[11, "getting-started-with-nix"], [13, "getting-started-with-nix"]], "Installing": [[11, "installing"], [13, "installing"]], "Additional Packages": [[11, "additional-packages"], [13, "additional-packages"]], "Using Pip": [[11, "using-pip"], [13, "using-pip"]], "Terms of Use": [[12, "terms-of-use"]], "Publications": [[14, "publications"]], "Presentations": [[14, "presentations"]], "Overview": [[15, "overview"]], "Even if you don\u2019t read manuals\u2026": [[15, "even-if-you-don-t-read-manuals"]], "Download and Installation": [[15, "download-and-installation"]], "Support": [[15, "support"]], "Conventions and Notation": [[15, "conventions-and-notation"]], "Solvers": [[16, "solvers"]], "PETSc": [[16, "petsc"]], "Pysparse": [[16, "pysparse"]], "PyAMG": [[16, "pyamg"]], "pyamgx": [[16, "pyamgx"]], "Trilinos": [[16, "trilinos"]], "Convergence": [[16, "convergence"]], "Residual Criteria": [[16, "id25"]], "default": [[16, "default"]], "legacy": [[16, "legacy"]], "absolute_tolerance": [[16, "absolute-tolerance"]], "divergence_tolerance": [[16, "divergence-tolerance"]], "Reporting": [[16, "reporting"]], "Convergence Status Codes": [[16, "id26"]], "Divergence Status Codes": [[16, "id27"]], "Using FiPy": [[17, "using-fipy"]], "Logging": [[17, "logging"]], "Testing FiPy": [[17, "testing-fipy"]], "Parallel Tests": [[17, "parallel-tests"]], "Command-line Flags and Environment Variables": [[17, "command-line-flags-and-environment-variables"]], "Command-line Flags": [[17, "command-line-flags"]], "Environment Variables": [[17, "environment-variables"]], "Solving in Parallel": [[17, "solving-in-parallel"]], "OpenMP Threads vs. MPI Ranks": [[17, "openmp-threads-vs-mpi-ranks"]], "Meshing with Gmsh": [[17, "meshing-with-gmsh"]], "Coupled and Vector Equations": [[17, "coupled-and-vector-equations"]], "Boundary Conditions": [[17, "boundary-conditions"], [488, "boundary-conditions"]], "Default boundary conditions": [[17, "default-boundary-conditions"]], "Applying fixed value (Dirichlet) boundary conditions": [[17, "applying-fixed-value-dirichlet-boundary-conditions"]], "Applying fixed gradient boundary conditions (Neumann)": [[17, "applying-fixed-gradient-boundary-conditions-neumann"]], "Applying fixed flux boundary conditions": [[17, "applying-fixed-flux-boundary-conditions"]], "Applying outlet or inlet boundary conditions": [[17, "applying-outlet-or-inlet-boundary-conditions"]], "Applying spatially varying boundary conditions": [[17, "applying-spatially-varying-boundary-conditions"]], "Applying Robin boundary conditions": [[17, "applying-robin-boundary-conditions"]], "Applying internal \u201cboundary\u201d conditions": [[17, "applying-internal-boundary-conditions"]], "Internal fixed value": [[17, "internal-fixed-value"]], "Internal fixed gradient": [[17, "internal-fixed-gradient"]], "Internal Robin condition": [[17, "internal-robin-condition"]], "Running under Python 2": [[17, "running-under-python-2"]], "Manual": [[17, "manual"]], "Viewers": [[18, "viewers"]], "Matplotlib": [[18, "matplotlib"]], "Mayavi": [[18, "mayavi"]], "Virtual Kinetics of Materials Laboratory": [[19, "virtual-kinetics-of-materials-laboratory"]], "FiPy Contents": [[20, "fipy-contents"]], "Design and Implementation": [[21, "design-and-implementation"]], "Design": [[21, "design"]], "Numerical Approach": [[21, "numerical-approach"]], "Object Oriented Structure": [[21, "object-oriented-structure"]], "Test Based Development": [[21, "test-based-development"]], "Open Source": [[21, "open-source"]], "High-Level Scripting Language": [[21, "high-level-scripting-language"]], "Python Programming Language": [[21, "python-programming-language"]], "Implementation": [[21, "implementation"]], "External Command-line Flags": [[22, "external-command-line-flags"]], "External Environment Variables": [[22, "external-environment-variables"]], "examples": [[23, "module-examples"]], "examples.benchmarking": [[24, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[25, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[26, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[27, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[28, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[29, "module-examples.benchmarking.versions"]], "examples.cahnHilliard": [[30, "module-examples.cahnHilliard"]], "examples.cahnHilliard.mesh2D": [[31, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnHilliard.mesh2DCoupled": [[32, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnHilliard.mesh3D": [[33, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnHilliard.sphere": [[34, "module-examples.cahnHilliard.sphere"]], "examples.cahnHilliard.sphereDaemon": [[35, "module-examples.cahnHilliard.sphereDaemon"]], "examples.cahnHilliard.tanh1D": [[36, "module-examples.cahnHilliard.tanh1D"]], "examples.cahnHilliard.test": [[37, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[38, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[39, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2D": [[40, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[41, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[42, "module-examples.chemotaxis.test"]], "examples.convection": [[43, "module-examples.convection"]], "examples.convection.advection": [[44, "module-examples.convection.advection"]], "examples.convection.advection.explicitUpwind": [[45, "module-examples.convection.advection.explicitUpwind"]], "examples.convection.advection.implicitUpwind": [[46, "module-examples.convection.advection.implicitUpwind"]], "examples.convection.advection.vanLeerUpwind": [[47, "module-examples.convection.advection.vanLeerUpwind"]], "examples.convection.exponential1D": [[48, "module-examples.convection.exponential1D"]], "examples.convection.exponential1D.cylindricalMesh1D": [[49, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1D.cylindricalMesh1DNonUniform": [[50, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1D.mesh1D": [[51, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1D.tri2D": [[52, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1DBack": [[53, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1DBack.mesh1D": [[54, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1DSource": [[55, "module-examples.convection.exponential1DSource"]], "examples.convection.exponential1DSource.mesh1D": [[56, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1DSource.tri2D": [[57, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2D": [[58, "module-examples.convection.exponential2D"]], "examples.convection.exponential2D.cylindricalMesh2D": [[59, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2D.cylindricalMesh2DNonUniform": [[60, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2D.mesh2D": [[61, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2D.tri2D": [[62, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[63, "module-examples.convection.peclet"]], "examples.convection.powerLaw1D": [[64, "module-examples.convection.powerLaw1D"]], "examples.convection.powerLaw1D.mesh1D": [[65, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerLaw1D.tri2D": [[66, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[67, "module-examples.convection.robin"]], "examples.convection.source": [[68, "module-examples.convection.source"]], "examples.convection.test": [[69, "module-examples.convection.test"]], "examples.diffusion": [[70, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[71, "module-examples.diffusion.anisotropy"]], "examples.diffusion.circle": [[72, "module-examples.diffusion.circle"]], "examples.diffusion.circleQuad": [[73, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[74, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[75, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[76, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1D": [[77, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[78, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[79, "module-examples.diffusion.explicit.test"]], "examples.diffusion.explicit.tri2D": [[80, "module-examples.diffusion.explicit.tri2D"]], "examples.diffusion.mesh1D": [[81, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[82, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20Coupled": [[83, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthOrder": [[84, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthOrder.input4thOrder1D": [[85, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthOrder.input4thOrder_line": [[86, "module-examples.diffusion.nthOrder.input4thOrder_line"]], "examples.diffusion.nthOrder.test": [[87, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadyState": [[88, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadyState.mesh1D": [[89, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadyState.mesh1D.inputPeriodic": [[90, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadyState.mesh1D.tri2Dinput": [[91, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"]], "examples.diffusion.steadyState.mesh20x20": [[92, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadyState.mesh20x20.gmshinput": [[93, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadyState.mesh20x20.isotropy": [[94, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput": [[95, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadyState.mesh20x20.orthoerror": [[96, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadyState.mesh20x20.tri2Dinput": [[97, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"]], "examples.diffusion.steadyState.mesh50x50": [[98, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadyState.mesh50x50.input": [[99, "module-examples.diffusion.steadyState.mesh50x50.input"]], "examples.diffusion.steadyState.mesh50x50.tri2Dinput": [[100, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"]], "examples.diffusion.steadyState.otherMeshes": [[101, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadyState.otherMeshes.prism": [[102, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadyState.test": [[103, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[104, "module-examples.diffusion.test"]], "examples.diffusion.variable": [[105, "module-examples.diffusion.variable"]], "examples.elphf": [[106, "module-examples.elphf"]], "examples.elphf.diffusion": [[107, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1D": [[108, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1Ddimensional": [[109, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2D": [[110, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[111, "module-examples.elphf.input"]], "examples.elphf.phase": [[112, "module-examples.elphf.phase"]], "examples.elphf.phaseDiffusion": [[113, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[114, "module-examples.elphf.poisson"]], "examples.elphf.test": [[115, "module-examples.elphf.test"]], "examples.flow": [[116, "module-examples.flow"]], "examples.flow.stokesCavity": [[117, "module-examples.flow.stokesCavity"]], "examples.flow.test": [[118, "module-examples.flow.test"]], "examples.levelSet": [[119, "module-examples.levelSet"]], "examples.levelSet.advection": [[120, "module-examples.levelSet.advection"]], "examples.levelSet.advection.circle": [[121, "module-examples.levelSet.advection.circle"]], "examples.levelSet.advection.mesh1D": [[122, "module-examples.levelSet.advection.mesh1D"]], "examples.levelSet.advection.test": [[123, "module-examples.levelSet.advection.test"]], "examples.levelSet.advection.trench": [[124, "module-examples.levelSet.advection.trench"]], "examples.levelSet.distanceFunction": [[125, "module-examples.levelSet.distanceFunction"]], "examples.levelSet.distanceFunction.circle": [[126, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelSet.distanceFunction.interior": [[127, "module-examples.levelSet.distanceFunction.interior"]], "examples.levelSet.distanceFunction.mesh1D": [[128, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelSet.distanceFunction.square": [[129, "module-examples.levelSet.distanceFunction.square"]], "examples.levelSet.distanceFunction.test": [[130, "module-examples.levelSet.distanceFunction.test"]], "examples.levelSet.electroChem": [[131, "module-examples.levelSet.electroChem"]], "examples.levelSet.electroChem.adsorbingSurfactantEquation": [[132, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelSet.electroChem.adsorption": [[133, "module-examples.levelSet.electroChem.adsorption"]], "examples.levelSet.electroChem.gapFillDistanceVariable": [[134, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelSet.electroChem.gapFillMesh": [[135, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelSet.electroChem.gold": [[136, "module-examples.levelSet.electroChem.gold"]], "examples.levelSet.electroChem.howToWriteAScript": [[137, "module-examples.levelSet.electroChem.howToWriteAScript"]], "examples.levelSet.electroChem.leveler": [[138, "module-examples.levelSet.electroChem.leveler"]], "examples.levelSet.electroChem.lines": [[139, "module-examples.levelSet.electroChem.lines"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[140, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[141, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "examples.levelSet.electroChem.metalIonDiffusionEquation": [[142, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelSet.electroChem.simpleTrenchSystem": [[143, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "examples.levelSet.electroChem.surfactantBulkDiffusionEquation": [[144, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelSet.electroChem.test": [[145, "module-examples.levelSet.electroChem.test"]], "examples.levelSet.electroChem.trenchMesh": [[146, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelSet.surfactant": [[147, "module-examples.levelSet.surfactant"]], "examples.levelSet.surfactant.circle": [[148, "module-examples.levelSet.surfactant.circle"]], "examples.levelSet.surfactant.expandingCircle": [[149, "module-examples.levelSet.surfactant.expandingCircle"]], "examples.levelSet.surfactant.square": [[150, "module-examples.levelSet.surfactant.square"]], "examples.levelSet.surfactant.test": [[151, "module-examples.levelSet.surfactant.test"]], "examples.levelSet.test": [[152, "module-examples.levelSet.test"]], "examples.meshing": [[153, "module-examples.meshing"]], "examples.meshing.gmshRefinement": [[154, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputGrid2D": [[155, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[156, "module-examples.meshing.sphere"]], "examples.meshing.test": [[157, "module-examples.meshing.test"]], "examples.parallel": [[158, "module-examples.parallel"]], "examples.phase": [[159, "module-examples.phase"]], "examples.phase.anisotropy": [[160, "module-examples.phase.anisotropy"]], "examples.phase.anisotropyOLD": [[161, "module-examples.phase.anisotropyOLD"]], "examples.phase.binary": [[162, "module-examples.phase.binary"]], "examples.phase.binaryCoupled": [[163, "module-examples.phase.binaryCoupled"]], "examples.phase.impingement": [[164, "module-examples.phase.impingement"]], "examples.phase.impingement.mesh20x20": [[165, "module-examples.phase.impingement.mesh20x20"]], "examples.phase.impingement.mesh40x1": [[166, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[167, "module-examples.phase.impingement.test"]], "examples.phase.missOrientation": [[168, "module-examples.phase.missOrientation"]], "examples.phase.missOrientation.circle": [[169, "module-examples.phase.missOrientation.circle"]], "examples.phase.missOrientation.mesh1D": [[170, "module-examples.phase.missOrientation.mesh1D"]], "examples.phase.missOrientation.modCircle": [[171, "module-examples.phase.missOrientation.modCircle"]], "examples.phase.missOrientation.test": [[172, "module-examples.phase.missOrientation.test"]], "examples.phase.polyxtal": [[173, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalCoupled": [[174, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[175, "module-examples.phase.quaternary"]], "examples.phase.simple": [[176, "module-examples.phase.simple"]], "examples.phase.symmetry": [[177, "module-examples.phase.symmetry"]], "examples.phase.test": [[178, "module-examples.phase.test"]], "examples.reactiveWetting": [[179, "module-examples.reactiveWetting"]], "examples.reactiveWetting.liquidVapor1D": [[180, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactiveWetting.liquidVapor2D": [[181, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactiveWetting.test": [[182, "module-examples.reactiveWetting.test"]], "examples.riemann": [[183, "module-examples.riemann"]], "examples.riemann.acoustics": [[184, "module-examples.riemann.acoustics"]], "examples.riemann.test": [[185, "module-examples.riemann.test"]], "examples.test": [[186, "module-examples.test"]], "examples.updating": [[187, "module-examples.updating"]], "examples.updating.update0_1to1_0": [[188, "module-examples.updating.update0_1to1_0"]], "examples.updating.update1_0to2_0": [[189, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[190, "module-examples.updating.update2_0to3_0"]], "fipy": [[191, "module-fipy"]], "fipy.boundaryConditions": [[192, "module-fipy.boundaryConditions"]], "fipy.boundaryConditions.boundaryCondition": [[193, "module-fipy.boundaryConditions.boundaryCondition"]], "fipy.boundaryConditions.constraint": [[194, "module-fipy.boundaryConditions.constraint"]], "fipy.boundaryConditions.fixedFlux": [[195, "module-fipy.boundaryConditions.fixedFlux"]], "fipy.boundaryConditions.fixedValue": [[196, "module-fipy.boundaryConditions.fixedValue"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[197, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryConditions.test": [[198, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[199, "module-fipy.matrices"]], "fipy.matrices.offsetSparseMatrix": [[200, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.petscMatrix": [[201, "module-fipy.matrices.petscMatrix"]], "fipy.matrices.pysparseMatrix": [[202, "module-fipy.matrices.pysparseMatrix"]], "fipy.matrices.scipyMatrix": [[203, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparseMatrix": [[204, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[205, "module-fipy.matrices.test"]], "fipy.matrices.trilinosMatrix": [[206, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[207, "module-fipy.meshes"]], "fipy.meshes.abstractMesh": [[208, "module-fipy.meshes.abstractMesh"]], "fipy.meshes.builders": [[209, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractGridBuilder": [[210, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1DBuilder": [[211, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2DBuilder": [[212, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3DBuilder": [[213, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicGrid1DBuilder": [[214, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityClasses": [[215, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalGrid1D": [[216, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalGrid2D": [[217, "module-fipy.meshes.cylindricalGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[218, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[219, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid1D": [[220, "module-fipy.meshes.cylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid2D": [[221, "module-fipy.meshes.cylindricalUniformGrid2D"]], "fipy.meshes.factoryMeshes": [[222, "module-fipy.meshes.factoryMeshes"]], "fipy.meshes.gmshMesh": [[223, "module-fipy.meshes.gmshMesh"]], "fipy.meshes.grid1D": [[224, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2D": [[225, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3D": [[226, "module-fipy.meshes.grid3D"]], "fipy.meshes.mesh": [[227, "module-fipy.meshes.mesh"]], "fipy.meshes.mesh1D": [[228, "module-fipy.meshes.mesh1D"]], "fipy.meshes.mesh2D": [[229, "module-fipy.meshes.mesh2D"]], "fipy.meshes.nonUniformGrid1D": [[230, "module-fipy.meshes.nonUniformGrid1D"]], "fipy.meshes.nonUniformGrid2D": [[231, "module-fipy.meshes.nonUniformGrid2D"]], "fipy.meshes.nonUniformGrid3D": [[232, "module-fipy.meshes.nonUniformGrid3D"]], "fipy.meshes.periodicGrid1D": [[233, "module-fipy.meshes.periodicGrid1D"]], "fipy.meshes.periodicGrid2D": [[234, "module-fipy.meshes.periodicGrid2D"]], "fipy.meshes.periodicGrid3D": [[235, "module-fipy.meshes.periodicGrid3D"]], "fipy.meshes.representations": [[236, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractRepresentation": [[237, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridRepresentation": [[238, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshRepresentation": [[239, "module-fipy.meshes.representations.meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[240, "module-fipy.meshes.skewedGrid2D"]], "fipy.meshes.sphericalNonUniformGrid1D": [[241, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D": [[242, "module-fipy.meshes.sphericalUniformGrid1D"]], "fipy.meshes.test": [[243, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[244, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstractTopology": [[245, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridTopology": [[246, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshTopology": [[247, "module-fipy.meshes.topologies.meshTopology"]], "fipy.meshes.tri2D": [[248, "module-fipy.meshes.tri2D"]], "fipy.meshes.uniformGrid": [[249, "module-fipy.meshes.uniformGrid"]], "fipy.meshes.uniformGrid1D": [[250, "module-fipy.meshes.uniformGrid1D"]], "fipy.meshes.uniformGrid2D": [[251, "module-fipy.meshes.uniformGrid2D"]], "fipy.solvers": [[252, "module-fipy.solvers"]], "fipy.solvers.convergence": [[253, "module-fipy.solvers.convergence"]], "fipy.solvers.petsc": [[254, "module-fipy.solvers.petsc"]], "fipy.solvers.petsc.comms": [[255, "module-fipy.solvers.petsc.comms"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper": [[256, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"]], "fipy.solvers.petsc.comms.petscCommWrapper": [[257, "module-fipy.solvers.petsc.comms.petscCommWrapper"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper": [[258, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"]], "fipy.solvers.petsc.dummySolver": [[259, "module-fipy.solvers.petsc.dummySolver"]], "fipy.solvers.petsc.linearBicgSolver": [[260, "module-fipy.solvers.petsc.linearBicgSolver"]], "fipy.solvers.petsc.linearCGSSolver": [[261, "module-fipy.solvers.petsc.linearCGSSolver"]], "fipy.solvers.petsc.linearGMRESSolver": [[262, "module-fipy.solvers.petsc.linearGMRESSolver"]], "fipy.solvers.petsc.linearLUSolver": [[263, "module-fipy.solvers.petsc.linearLUSolver"]], "fipy.solvers.petsc.linearPCGSolver": [[264, "module-fipy.solvers.petsc.linearPCGSolver"]], "fipy.solvers.petsc.petscConvergence": [[265, "module-fipy.solvers.petsc.petscConvergence"]], "fipy.solvers.petsc.petscKrylovSolver": [[266, "module-fipy.solvers.petsc.petscKrylovSolver"]], "fipy.solvers.petsc.petscSolver": [[267, "module-fipy.solvers.petsc.petscSolver"]], "fipy.solvers.petsc.preconditioners": [[268, "module-fipy.solvers.petsc.preconditioners"]], "fipy.solvers.petsc.preconditioners.defaultPreconditioner": [[269, "module-fipy.solvers.petsc.preconditioners.defaultPreconditioner"]], "fipy.solvers.petsc.preconditioners.icPreconditioner": [[270, "module-fipy.solvers.petsc.preconditioners.icPreconditioner"]], "fipy.solvers.petsc.preconditioners.iluPreconditioner": [[271, "module-fipy.solvers.petsc.preconditioners.iluPreconditioner"]], "fipy.solvers.petsc.preconditioners.jacobiPreconditioner": [[272, "module-fipy.solvers.petsc.preconditioners.jacobiPreconditioner"]], "fipy.solvers.petsc.preconditioners.luPreconditioner": [[273, "module-fipy.solvers.petsc.preconditioners.luPreconditioner"]], "fipy.solvers.petsc.preconditioners.petscPreconditioner": [[274, "module-fipy.solvers.petsc.preconditioners.petscPreconditioner"]], "fipy.solvers.petsc.preconditioners.ssorPreconditioner": [[275, "module-fipy.solvers.petsc.preconditioners.ssorPreconditioner"]], "fipy.solvers.preconditioner": [[276, "module-fipy.solvers.preconditioner"]], "fipy.solvers.pyAMG": [[277, "module-fipy.solvers.pyAMG"]], "fipy.solvers.pyAMG.linearCGSSolver": [[278, "module-fipy.solvers.pyAMG.linearCGSSolver"]], "fipy.solvers.pyAMG.linearGMRESSolver": [[279, "module-fipy.solvers.pyAMG.linearGMRESSolver"]], "fipy.solvers.pyAMG.linearGeneralSolver": [[280, "module-fipy.solvers.pyAMG.linearGeneralSolver"]], "fipy.solvers.pyAMG.linearLUSolver": [[281, "module-fipy.solvers.pyAMG.linearLUSolver"]], "fipy.solvers.pyAMG.linearPCGSolver": [[282, "module-fipy.solvers.pyAMG.linearPCGSolver"]], "fipy.solvers.pyAMG.preconditioners": [[283, "module-fipy.solvers.pyAMG.preconditioners"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[284, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[285, "module-fipy.solvers.pyamgx"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[286, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[287, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[288, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[289, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[290, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "fipy.solvers.pyamgx.linearLUSolver": [[291, "module-fipy.solvers.pyamgx.linearLUSolver"]], "fipy.solvers.pyamgx.linearPCGSolver": [[292, "module-fipy.solvers.pyamgx.linearPCGSolver"]], "fipy.solvers.pyamgx.preconditioners": [[293, "module-fipy.solvers.pyamgx.preconditioners"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[294, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "fipy.solvers.pyamgx.pyamgxConvergence": [[295, "module-fipy.solvers.pyamgx.pyamgxConvergence"]], "fipy.solvers.pyamgx.smoothers": [[296, "module-fipy.solvers.pyamgx.smoothers"]], "fipy.solvers.pysparse": [[297, "module-fipy.solvers.pysparse"]], "fipy.solvers.pysparse.linearCGSSolver": [[298, "module-fipy.solvers.pysparse.linearCGSSolver"]], "fipy.solvers.pysparse.linearGMRESSolver": [[299, "module-fipy.solvers.pysparse.linearGMRESSolver"]], "fipy.solvers.pysparse.linearInitialSolver": [[300, "module-fipy.solvers.pysparse.linearInitialSolver"]], "fipy.solvers.pysparse.linearJORSolver": [[301, "module-fipy.solvers.pysparse.linearJORSolver"]], "fipy.solvers.pysparse.linearLUSolver": [[302, "module-fipy.solvers.pysparse.linearLUSolver"]], "fipy.solvers.pysparse.linearPCGSolver": [[303, "module-fipy.solvers.pysparse.linearPCGSolver"]], "fipy.solvers.pysparse.linearRHSSolver": [[304, "module-fipy.solvers.pysparse.linearRHSSolver"]], "fipy.solvers.pysparse.preconditioners": [[305, "module-fipy.solvers.pysparse.preconditioners"]], "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner": [[306, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.pysparsePreconditioner": [[307, "module-fipy.solvers.pysparse.preconditioners.pysparsePreconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorPreconditioner": [[308, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"]], "fipy.solvers.pysparse.pysparseConvergence": [[309, "module-fipy.solvers.pysparse.pysparseConvergence"]], "fipy.solvers.pysparse.pysparseSolver": [[310, "module-fipy.solvers.pysparse.pysparseSolver"]], "fipy.solvers.pysparseMatrixSolver": [[311, "module-fipy.solvers.pysparseMatrixSolver"]], "fipy.solvers.scipy": [[312, "module-fipy.solvers.scipy"]], "fipy.solvers.scipy.linearBicgstabSolver": [[313, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "fipy.solvers.scipy.linearCGSSolver": [[314, "module-fipy.solvers.scipy.linearCGSSolver"]], "fipy.solvers.scipy.linearGMRESSolver": [[315, "module-fipy.solvers.scipy.linearGMRESSolver"]], "fipy.solvers.scipy.linearLUSolver": [[316, "module-fipy.solvers.scipy.linearLUSolver"]], "fipy.solvers.scipy.linearPCGSolver": [[317, "module-fipy.solvers.scipy.linearPCGSolver"]], "fipy.solvers.scipy.preconditioners": [[318, "module-fipy.solvers.scipy.preconditioners"]], "fipy.solvers.scipy.preconditioners.iluPreconditioner": [[319, "module-fipy.solvers.scipy.preconditioners.iluPreconditioner"]], "fipy.solvers.scipy.preconditioners.jacobiPreconditioner": [[320, "module-fipy.solvers.scipy.preconditioners.jacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners.scipyPreconditioner": [[321, "module-fipy.solvers.scipy.preconditioners.scipyPreconditioner"]], "fipy.solvers.scipy.scipyConvergence": [[322, "module-fipy.solvers.scipy.scipyConvergence"]], "fipy.solvers.scipy.scipyKrylovSolver": [[323, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "fipy.solvers.scipy.scipySolver": [[324, "module-fipy.solvers.scipy.scipySolver"]], "fipy.solvers.solver": [[325, "module-fipy.solvers.solver"]], "fipy.solvers.test": [[326, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[327, "module-fipy.solvers.trilinos"]], "fipy.solvers.trilinos.aztecConvergence": [[328, "module-fipy.solvers.trilinos.aztecConvergence"]], "fipy.solvers.trilinos.comms": [[329, "module-fipy.solvers.trilinos.comms"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[330, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper": [[331, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[332, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[333, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "fipy.solvers.trilinos.linearCGSSolver": [[334, "module-fipy.solvers.trilinos.linearCGSSolver"]], "fipy.solvers.trilinos.linearGMRESSolver": [[335, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "fipy.solvers.trilinos.linearLUSolver": [[336, "module-fipy.solvers.trilinos.linearLUSolver"]], "fipy.solvers.trilinos.linearPCGSolver": [[337, "module-fipy.solvers.trilinos.linearPCGSolver"]], "fipy.solvers.trilinos.preconditioners": [[338, "module-fipy.solvers.trilinos.preconditioners"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[339, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[340, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "fipy.solvers.trilinos.preconditioners.iluPreconditioner": [[341, "module-fipy.solvers.trilinos.preconditioners.iluPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[342, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[343, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[344, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[345, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner": [[346, "module-fipy.solvers.trilinos.preconditioners.multilevelPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[347, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[348, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[349, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner": [[350, "module-fipy.solvers.trilinos.preconditioners.trilinosPreconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[351, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosMLTest": [[352, "module-fipy.solvers.trilinos.trilinosMLTest"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[353, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosSolver": [[354, "module-fipy.solvers.trilinos.trilinosSolver"]], "fipy.steppers": [[355, "module-fipy.steppers"]], "fipy.steppers.pidStepper": [[356, "module-fipy.steppers.pidStepper"]], "fipy.steppers.pseudoRKQSStepper": [[357, "module-fipy.steppers.pseudoRKQSStepper"]], "fipy.steppers.stepper": [[358, "module-fipy.steppers.stepper"]], "fipy.terms": [[359, "module-fipy.terms"]], "fipy.terms.abstractBinaryTerm": [[360, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractConvectionTerm": [[361, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractDiffusionTerm": [[362, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractUpwindConvectionTerm": [[363, "module-fipy.terms.abstractUpwindConvectionTerm"]], "fipy.terms.advectionTerm": [[364, "module-fipy.terms.advectionTerm"]], "fipy.terms.asymmetricConvectionTerm": [[365, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryTerm": [[366, "module-fipy.terms.binaryTerm"]], "fipy.terms.cellTerm": [[367, "module-fipy.terms.cellTerm"]], "fipy.terms.centralDiffConvectionTerm": [[368, "module-fipy.terms.centralDiffConvectionTerm"]], "fipy.terms.coupledBinaryTerm": [[369, "module-fipy.terms.coupledBinaryTerm"]], "fipy.terms.diffusionTerm": [[370, "module-fipy.terms.diffusionTerm"]], "fipy.terms.diffusionTermCorrection": [[371, "module-fipy.terms.diffusionTermCorrection"]], "fipy.terms.diffusionTermNoCorrection": [[372, "module-fipy.terms.diffusionTermNoCorrection"]], "fipy.terms.explicitDiffusionTerm": [[373, "module-fipy.terms.explicitDiffusionTerm"]], "fipy.terms.explicitSourceTerm": [[374, "module-fipy.terms.explicitSourceTerm"]], "fipy.terms.explicitUpwindConvectionTerm": [[375, "module-fipy.terms.explicitUpwindConvectionTerm"]], "fipy.terms.exponentialConvectionTerm": [[376, "module-fipy.terms.exponentialConvectionTerm"]], "fipy.terms.faceTerm": [[377, "module-fipy.terms.faceTerm"]], "fipy.terms.firstOrderAdvectionTerm": [[378, "module-fipy.terms.firstOrderAdvectionTerm"]], "fipy.terms.hybridConvectionTerm": [[379, "module-fipy.terms.hybridConvectionTerm"]], "fipy.terms.implicitDiffusionTerm": [[380, "module-fipy.terms.implicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[381, "module-fipy.terms.implicitSourceTerm"]], "fipy.terms.nonDiffusionTerm": [[382, "module-fipy.terms.nonDiffusionTerm"]], "fipy.terms.powerLawConvectionTerm": [[383, "module-fipy.terms.powerLawConvectionTerm"]], "fipy.terms.residualTerm": [[384, "module-fipy.terms.residualTerm"]], "fipy.terms.sourceTerm": [[385, "module-fipy.terms.sourceTerm"]], "fipy.terms.term": [[386, "module-fipy.terms.term"]], "fipy.terms.test": [[387, "module-fipy.terms.test"]], "fipy.terms.transientTerm": [[388, "module-fipy.terms.transientTerm"]], "fipy.terms.unaryTerm": [[389, "module-fipy.terms.unaryTerm"]], "fipy.terms.upwindConvectionTerm": [[390, "module-fipy.terms.upwindConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm": [[391, "module-fipy.terms.vanLeerConvectionTerm"]], "fipy.testFiPy": [[392, "module-fipy.testFiPy"]], "fipy.tests": [[393, "module-fipy.tests"]], "fipy.tests.doctestPlus": [[394, "module-fipy.tests.doctestPlus"]], "fipy.tests.lateImportTest": [[395, "module-fipy.tests.lateImportTest"]], "fipy.tests.test": [[396, "module-fipy.tests.test"]], "fipy.tests.testProgram": [[397, "module-fipy.tests.testProgram"]], "fipy.tools": [[398, "module-fipy.tools"]], "fipy.tools.comms": [[399, "module-fipy.tools.comms"]], "fipy.tools.comms.commWrapper": [[400, "module-fipy.tools.comms.commWrapper"]], "fipy.tools.comms.dummyComm": [[401, "module-fipy.tools.comms.dummyComm"]], "fipy.tools.debug": [[402, "module-fipy.tools.debug"]], "fipy.tools.decorators": [[403, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[404, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.DictWithDefault": [[405, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.NumberDict": [[406, "module-fipy.tools.dimensions.NumberDict"]], "fipy.tools.dimensions.physicalField": [[407, "module-fipy.tools.dimensions.physicalField"]], "fipy.tools.dump": [[408, "module-fipy.tools.dump"]], "fipy.tools.inline": [[409, "module-fipy.tools.inline"]], "fipy.tools.logging": [[410, "module-fipy.tools.logging"]], "fipy.tools.logging.environment": [[411, "module-fipy.tools.logging.environment"]], "fipy.tools.numerix": [[412, "module-fipy.tools.numerix"]], "fipy.tools.parser": [[413, "module-fipy.tools.parser"]], "fipy.tools.sharedtempfile": [[414, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[415, "module-fipy.tools.test"]], "fipy.tools.vector": [[416, "module-fipy.tools.vector"]], "fipy.tools.version": [[417, "module-fipy.tools.version"]], "fipy.variables": [[418, "module-fipy.variables"]], "fipy.variables.addOverFacesVariable": [[419, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticCellToFaceVariable": [[420, "module-fipy.variables.arithmeticCellToFaceVariable"]], "fipy.variables.betaNoiseVariable": [[421, "module-fipy.variables.betaNoiseVariable"]], "fipy.variables.binaryOperatorVariable": [[422, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.cellToFaceVariable": [[423, "module-fipy.variables.cellToFaceVariable"]], "fipy.variables.cellVariable": [[424, "module-fipy.variables.cellVariable"]], "fipy.variables.constant": [[425, "module-fipy.variables.constant"]], "fipy.variables.constraintMask": [[426, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledCellVariable": [[427, "module-fipy.variables.coupledCellVariable"]], "fipy.variables.distanceVariable": [[428, "module-fipy.variables.distanceVariable"]], "fipy.variables.exponentialNoiseVariable": [[429, "module-fipy.variables.exponentialNoiseVariable"]], "fipy.variables.faceGradContributionsVariable": [[430, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.faceGradVariable": [[431, "module-fipy.variables.faceGradVariable"]], "fipy.variables.faceVariable": [[432, "module-fipy.variables.faceVariable"]], "fipy.variables.gammaNoiseVariable": [[433, "module-fipy.variables.gammaNoiseVariable"]], "fipy.variables.gaussCellGradVariable": [[434, "module-fipy.variables.gaussCellGradVariable"]], "fipy.variables.gaussianNoiseVariable": [[435, "module-fipy.variables.gaussianNoiseVariable"]], "fipy.variables.harmonicCellToFaceVariable": [[436, "module-fipy.variables.harmonicCellToFaceVariable"]], "fipy.variables.histogramVariable": [[437, "module-fipy.variables.histogramVariable"]], "fipy.variables.interfaceAreaVariable": [[438, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceFlagVariable": [[439, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastSquaresCellGradVariable": [[440, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelSetDiffusionVariable": [[441, "module-fipy.variables.levelSetDiffusionVariable"]], "fipy.variables.meshVariable": [[442, "module-fipy.variables.meshVariable"]], "fipy.variables.minmodCellToFaceVariable": [[443, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modCellGradVariable": [[444, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modCellToFaceVariable": [[445, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modFaceGradVariable": [[446, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modPhysicalField": [[447, "module-fipy.variables.modPhysicalField"]], "fipy.variables.modularVariable": [[448, "module-fipy.variables.modularVariable"]], "fipy.variables.noiseVariable": [[449, "module-fipy.variables.noiseVariable"]], "fipy.variables.operatorVariable": [[450, "module-fipy.variables.operatorVariable"]], "fipy.variables.scharfetterGummelFaceVariable": [[451, "module-fipy.variables.scharfetterGummelFaceVariable"]], "fipy.variables.surfactantConvectionVariable": [[452, "module-fipy.variables.surfactantConvectionVariable"]], "fipy.variables.surfactantVariable": [[453, "module-fipy.variables.surfactantVariable"]], "fipy.variables.test": [[454, "module-fipy.variables.test"]], "fipy.variables.unaryOperatorVariable": [[455, "module-fipy.variables.unaryOperatorVariable"]], "fipy.variables.uniformNoiseVariable": [[456, "module-fipy.variables.uniformNoiseVariable"]], "fipy.variables.variable": [[457, "module-fipy.variables.variable"]], "fipy.viewers": [[458, "module-fipy.viewers"]], "fipy.viewers.matplotlibViewer": [[459, "module-fipy.viewers.matplotlibViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer": [[460, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer": [[461, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer": [[462, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer": [[463, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer": [[464, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer": [[465, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer": [[466, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer": [[467, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer": [[468, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer": [[469, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"]], "fipy.viewers.matplotlibViewer.test": [[470, "module-fipy.viewers.matplotlibViewer.test"]], "fipy.viewers.mayaviViewer": [[471, "module-fipy.viewers.mayaviViewer"]], "fipy.viewers.mayaviViewer.mayaviClient": [[472, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fipy.viewers.mayaviViewer.mayaviDaemon": [[473, "module-fipy.viewers.mayaviViewer.mayaviDaemon"]], "fipy.viewers.mayaviViewer.test": [[474, "module-fipy.viewers.mayaviViewer.test"]], "fipy.viewers.multiViewer": [[475, "module-fipy.viewers.multiViewer"]], "fipy.viewers.test": [[476, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[477, "module-fipy.viewers.testinteractive"]], "fipy.viewers.tsvViewer": [[478, "module-fipy.viewers.tsvViewer"]], "fipy.viewers.viewer": [[479, "module-fipy.viewers.viewer"]], "fipy.viewers.vtkViewer": [[480, "module-fipy.viewers.vtkViewer"]], "fipy.viewers.vtkViewer.test": [[481, "module-fipy.viewers.vtkViewer.test"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[482, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[483, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "fipy.viewers.vtkViewer.vtkViewer": [[484, "module-fipy.viewers.vtkViewer.vtkViewer"]], "Glossary": [[485, "glossary"]], "Introduction": [[486, "introduction"]], "FiPy Manual": [[487, "fipy-manual"]], "Finite Volume Method": [[488, "finite-volume-method"]], "Cell Centered FVM (CC-FVM)": [[488, "cell-centered-fvm-cc-fvm"]], "Vertex Centered FVM (VC-FVM)": [[488, "vertex-centered-fvm-vc-fvm"]], "Discretization": [[488, "discretization"]], "Transient Term \\partial (\\rho \\phi) / \\partial t": [[488, "transient-term-partial-rho-phi-partial-t"]], "Convection Term \\nabla \\cdot \\left( \\vec{u} \\phi \\right)": [[488, "convection-term-nabla-cdot-left-vec-u-phi-right"]], "Diffusion Term \\nabla \\cdot \\left( \\Gamma_1 \\nabla \\phi \\right)": [[488, "diffusion-term-nabla-cdot-left-gamma-1-nabla-phi-right"]], "Higher Order Diffusion": [[488, "higher-order-diffusion"]], "Source Term": [[488, "source-term"]], "Linear Equations": [[488, "linear-equations"]], "General Conservation Equation": [[489, "general-conservation-equation"]], "Theoretical and Numerical Background": [[490, "theoretical-and-numerical-background"]], "Numerical Schemes": [[491, "numerical-schemes"]], "References": [[492, "references"]], "package": [[493, "module-package"]], "package.subpackage": [[494, "module-package.subpackage"]], "package.subpackage.base": [[495, "module-package.subpackage.base"]], "package.subpackage.object": [[496, "module-package.subpackage.object"]], "How to Read the Modules Documentation": [[497, "how-to-read-the-modules-documentation"]]}, "indexentries": {"path": [[10, "index-1"]], "pep 8": [[10, "index-0"]], "python enhancement proposals": [[10, "index-0"], [485, "index-0"]], "environment variable": [[10, "index-1"], [16, "index-0"], [17, "envvar-FIPY_CACHE"], [17, "envvar-FIPY_DEFAULT_CRITERION"], [17, "envvar-FIPY_DISPLAY_MATRIX"], [17, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [17, "envvar-FIPY_INLINE"], [17, "envvar-FIPY_INLINE_COMMENT"], [17, "envvar-FIPY_LOG_CONFIG"], [17, "envvar-FIPY_SOLVERS"], [17, "envvar-FIPY_VERBOSE_SOLVER"], [17, "envvar-FIPY_VIEWER"], [17, "envvar-PETSC_OPTIONS"], [17, "index-0"], [17, "index-1"], [17, "index-2"], [22, "envvar-DYLD_LIBRARY_PATH"], [22, "envvar-LD_LIBRARY_PATH"], [190, "index-0"]], "fipy_solvers": [[16, "index-0"], [17, "envvar-FIPY_SOLVERS"], [17, "index-1"]], "--cache": [[17, "cmdoption-cache"]], "--inline": [[17, "cmdoption-inline"]], "--lsmlib": [[17, "cmdoption-lsmlib"]], "--no-cache": [[17, "cmdoption-no-cache"]], "--no-pysparse": [[17, "cmdoption-no-pysparse"]], "--pyamg": [[17, "cmdoption-pyamg"]], "--pyamgx": [[17, "cmdoption-pyamgx"]], "--pysparse": [[17, "cmdoption-pysparse"]], "--scipy": [[17, "cmdoption-scipy"]], "--skfmm": [[17, "cmdoption-skfmm"]], "--trilinos": [[17, "cmdoption-trilinos"]], "fipy_cache": [[17, "envvar-FIPY_CACHE"]], "fipy_default_criterion": [[17, "envvar-FIPY_DEFAULT_CRITERION"]], "fipy_display_matrix": [[17, "envvar-FIPY_DISPLAY_MATRIX"]], "fipy_include_numerix_all": [[17, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [190, "index-0"]], "fipy_inline": [[17, "envvar-FIPY_INLINE"]], "fipy_inline_comment": [[17, "envvar-FIPY_INLINE_COMMENT"]], "fipy_log_config": [[17, "envvar-FIPY_LOG_CONFIG"], [17, "index-0"], [17, "index-2"]], "fipy_verbose_solver": [[17, "envvar-FIPY_VERBOSE_SOLVER"]], "fipy_viewer": [[17, "envvar-FIPY_VIEWER"]], "petsc_options": [[17, "envvar-PETSC_OPTIONS"]], "command line option": [[17, "cmdoption-cache"], [17, "cmdoption-inline"], [17, "cmdoption-lsmlib"], [17, "cmdoption-no-cache"], [17, "cmdoption-no-pysparse"], [17, "cmdoption-pyamg"], [17, "cmdoption-pyamgx"], [17, "cmdoption-pysparse"], [17, "cmdoption-scipy"], [17, "cmdoption-skfmm"], [17, "cmdoption-trilinos"], [22, "cmdoption-home"], [22, "cmdoption-prefix"]], "--home": [[22, "cmdoption-home"]], "--prefix": [[22, "cmdoption-prefix"]], "dyld_library_path": [[22, "envvar-DYLD_LIBRARY_PATH"]], "ld_library_path": [[22, "envvar-LD_LIBRARY_PATH"]], "examples": [[23, "module-examples"]], "module": [[23, "module-examples"], [24, "module-examples.benchmarking"], [25, "module-examples.benchmarking.benchmarker"], [26, "module-examples.benchmarking.size"], [27, "module-examples.benchmarking.steps"], [28, "module-examples.benchmarking.utils"], [29, "module-examples.benchmarking.versions"], [30, "module-examples.cahnHilliard"], [31, "module-examples.cahnHilliard.mesh2D"], [32, "module-examples.cahnHilliard.mesh2DCoupled"], [33, "module-examples.cahnHilliard.mesh3D"], [34, "module-examples.cahnHilliard.sphere"], [35, "module-examples.cahnHilliard.sphereDaemon"], [36, "index-5"], [36, "module-examples.cahnHilliard.tanh1D"], [37, "module-examples.cahnHilliard.test"], [38, "module-examples.chemotaxis"], [39, "module-examples.chemotaxis.input"], [40, "module-examples.chemotaxis.input2D"], [41, "module-examples.chemotaxis.parameters"], [42, "module-examples.chemotaxis.test"], [43, "module-examples.convection"], [44, "module-examples.convection.advection"], [45, "module-examples.convection.advection.explicitUpwind"], [46, "module-examples.convection.advection.implicitUpwind"], [47, "module-examples.convection.advection.vanLeerUpwind"], [48, "module-examples.convection.exponential1D"], [49, "index-2"], [49, "module-examples.convection.exponential1D.cylindricalMesh1D"], [50, "index-1"], [50, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"], [51, "index-2"], [51, "module-examples.convection.exponential1D.mesh1D"], [52, "module-examples.convection.exponential1D.tri2D"], [53, "module-examples.convection.exponential1DBack"], [54, "module-examples.convection.exponential1DBack.mesh1D"], [55, "module-examples.convection.exponential1DSource"], [56, "index-4"], [56, "module-examples.convection.exponential1DSource.mesh1D"], [57, "module-examples.convection.exponential1DSource.tri2D"], [58, "module-examples.convection.exponential2D"], [59, "index-2"], [59, "module-examples.convection.exponential2D.cylindricalMesh2D"], [60, "index-1"], [60, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"], [61, "module-examples.convection.exponential2D.mesh2D"], [62, "module-examples.convection.exponential2D.tri2D"], [63, "module-examples.convection.peclet"], [64, "module-examples.convection.powerLaw1D"], [65, "module-examples.convection.powerLaw1D.mesh1D"], [66, "module-examples.convection.powerLaw1D.tri2D"], [67, "module-examples.convection.robin"], [68, "module-examples.convection.source"], [69, "module-examples.convection.test"], [70, "module-examples.diffusion"], [71, "module-examples.diffusion.anisotropy"], [72, "index-3"], [72, "module-examples.diffusion.circle"], [73, "index-3"], [73, "module-examples.diffusion.circleQuad"], [74, "module-examples.diffusion.coupled"], [75, "module-examples.diffusion.electrostatics"], [76, "module-examples.diffusion.explicit"], [77, "module-examples.diffusion.explicit.mesh1D"], [78, "module-examples.diffusion.explicit.mixedelement"], [79, "module-examples.diffusion.explicit.test"], [80, "module-examples.diffusion.explicit.tri2D"], [81, "index-1"], [81, "module-examples.diffusion.mesh1D"], [82, "index-1"], [82, "module-examples.diffusion.mesh20x20"], [83, "index-1"], [83, "module-examples.diffusion.mesh20x20Coupled"], [84, "module-examples.diffusion.nthOrder"], [85, "index-3"], [85, "module-examples.diffusion.nthOrder.input4thOrder1D"], [86, "module-examples.diffusion.nthOrder.input4thOrder_line"], [87, "module-examples.diffusion.nthOrder.test"], [88, "module-examples.diffusion.steadyState"], [89, "module-examples.diffusion.steadyState.mesh1D"], [90, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"], [91, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"], [92, "module-examples.diffusion.steadyState.mesh20x20"], [93, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"], [94, "module-examples.diffusion.steadyState.mesh20x20.isotropy"], [95, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"], [96, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"], [97, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"], [98, "module-examples.diffusion.steadyState.mesh50x50"], [99, "module-examples.diffusion.steadyState.mesh50x50.input"], [100, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"], [101, "module-examples.diffusion.steadyState.otherMeshes"], [102, "module-examples.diffusion.steadyState.otherMeshes.prism"], [103, "module-examples.diffusion.steadyState.test"], [104, "module-examples.diffusion.test"], [105, "module-examples.diffusion.variable"], [106, "module-examples.elphf"], [107, "module-examples.elphf.diffusion"], [108, "module-examples.elphf.diffusion.mesh1D"], [109, "module-examples.elphf.diffusion.mesh1Ddimensional"], [110, "module-examples.elphf.diffusion.mesh2D"], [111, "module-examples.elphf.input"], [112, "module-examples.elphf.phase"], [113, "module-examples.elphf.phaseDiffusion"], [114, "module-examples.elphf.poisson"], [115, "module-examples.elphf.test"], [116, "module-examples.flow"], [117, "index-2"], [117, "module-examples.flow.stokesCavity"], [118, "module-examples.flow.test"], [119, "module-examples.levelSet"], [120, "module-examples.levelSet.advection"], [121, "module-examples.levelSet.advection.circle"], [122, "module-examples.levelSet.advection.mesh1D"], [123, "module-examples.levelSet.advection.test"], [124, "module-examples.levelSet.advection.trench"], [125, "module-examples.levelSet.distanceFunction"], [126, "module-examples.levelSet.distanceFunction.circle"], [127, "module-examples.levelSet.distanceFunction.interior"], [128, "module-examples.levelSet.distanceFunction.mesh1D"], [129, "module-examples.levelSet.distanceFunction.square"], [130, "module-examples.levelSet.distanceFunction.test"], [131, "module-examples.levelSet.electroChem"], [132, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"], [133, "module-examples.levelSet.electroChem.adsorption"], [134, "module-examples.levelSet.electroChem.gapFillDistanceVariable"], [135, "module-examples.levelSet.electroChem.gapFillMesh"], [136, "index-1"], [136, "module-examples.levelSet.electroChem.gold"], [137, "index-0"], [137, "module-examples.levelSet.electroChem.howToWriteAScript"], [138, "index-1"], [138, "module-examples.levelSet.electroChem.leveler"], [139, "module-examples.levelSet.electroChem.lines"], [140, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"], [141, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"], [142, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"], [143, "index-1"], [143, "module-examples.levelSet.electroChem.simpleTrenchSystem"], [144, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"], [145, "module-examples.levelSet.electroChem.test"], [146, "module-examples.levelSet.electroChem.trenchMesh"], [147, "module-examples.levelSet.surfactant"], [148, "module-examples.levelSet.surfactant.circle"], [149, "module-examples.levelSet.surfactant.expandingCircle"], [150, "module-examples.levelSet.surfactant.square"], [151, "module-examples.levelSet.surfactant.test"], [152, "module-examples.levelSet.test"], [153, "module-examples.meshing"], [154, "module-examples.meshing.gmshRefinement"], [155, "module-examples.meshing.inputGrid2D"], [156, "module-examples.meshing.sphere"], [157, "module-examples.meshing.test"], [158, "module-examples.parallel"], [159, "module-examples.phase"], [160, "module-examples.phase.anisotropy"], [161, "index-4"], [161, "module-examples.phase.anisotropyOLD"], [162, "index-7"], [162, "module-examples.phase.binary"], [163, "index-5"], [163, "index-6"], [163, "module-examples.phase.binaryCoupled"], [164, "module-examples.phase.impingement"], [165, "index-0"], [165, "index-6"], [165, "index-8"], [165, "module-examples.phase.impingement.mesh20x20"], [166, "index-4"], [166, "module-examples.phase.impingement.mesh40x1"], [167, "module-examples.phase.impingement.test"], [168, "module-examples.phase.missOrientation"], [169, "module-examples.phase.missOrientation.circle"], [170, "module-examples.phase.missOrientation.mesh1D"], [171, "module-examples.phase.missOrientation.modCircle"], [172, "module-examples.phase.missOrientation.test"], [173, "module-examples.phase.polyxtal"], [174, "module-examples.phase.polyxtalCoupled"], [175, "index-4"], [175, "module-examples.phase.quaternary"], [176, "index-2"], [176, "index-8"], [176, "module-examples.phase.simple"], [177, "module-examples.phase.symmetry"], [178, "module-examples.phase.test"], [179, "module-examples.reactiveWetting"], [180, "module-examples.reactiveWetting.liquidVapor1D"], [181, "module-examples.reactiveWetting.liquidVapor2D"], [182, "module-examples.reactiveWetting.test"], [183, "module-examples.riemann"], [184, "module-examples.riemann.acoustics"], [185, "module-examples.riemann.test"], [186, "module-examples.test"], [187, "module-examples.updating"], [188, "index-5"], [188, "module-examples.updating.update0_1to1_0"], [189, "module-examples.updating.update1_0to2_0"], [190, "module-examples.updating.update2_0to3_0"], [191, "module-fipy"], [192, "module-fipy.boundaryConditions"], [193, "module-fipy.boundaryConditions.boundaryCondition"], [194, "module-fipy.boundaryConditions.constraint"], [195, "module-fipy.boundaryConditions.fixedFlux"], [196, "module-fipy.boundaryConditions.fixedValue"], [197, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"], [198, "module-fipy.boundaryConditions.test"], [199, "module-fipy.matrices"], [200, "module-fipy.matrices.offsetSparseMatrix"], [201, "module-fipy.matrices.petscMatrix"], [202, "module-fipy.matrices.pysparseMatrix"], [203, "module-fipy.matrices.scipyMatrix"], [204, "module-fipy.matrices.sparseMatrix"], [205, "module-fipy.matrices.test"], [206, "module-fipy.matrices.trilinosMatrix"], [207, "module-fipy.meshes"], [208, "module-fipy.meshes.abstractMesh"], [209, "module-fipy.meshes.builders"], [210, "module-fipy.meshes.builders.abstractGridBuilder"], [211, "module-fipy.meshes.builders.grid1DBuilder"], [212, "module-fipy.meshes.builders.grid2DBuilder"], [213, "module-fipy.meshes.builders.grid3DBuilder"], [214, "module-fipy.meshes.builders.periodicGrid1DBuilder"], [215, "module-fipy.meshes.builders.utilityClasses"], [216, "module-fipy.meshes.cylindricalGrid1D"], [217, "module-fipy.meshes.cylindricalGrid2D"], [218, "module-fipy.meshes.cylindricalNonUniformGrid1D"], [219, "module-fipy.meshes.cylindricalNonUniformGrid2D"], [220, "module-fipy.meshes.cylindricalUniformGrid1D"], [221, "module-fipy.meshes.cylindricalUniformGrid2D"], [222, "module-fipy.meshes.factoryMeshes"], [223, "module-fipy.meshes.gmshMesh"], [224, "module-fipy.meshes.grid1D"], [225, "module-fipy.meshes.grid2D"], [226, "module-fipy.meshes.grid3D"], [227, "module-fipy.meshes.mesh"], [228, "module-fipy.meshes.mesh1D"], [229, "module-fipy.meshes.mesh2D"], [230, "module-fipy.meshes.nonUniformGrid1D"], [231, "module-fipy.meshes.nonUniformGrid2D"], [232, "module-fipy.meshes.nonUniformGrid3D"], [233, "module-fipy.meshes.periodicGrid1D"], [234, "module-fipy.meshes.periodicGrid2D"], [235, "module-fipy.meshes.periodicGrid3D"], [236, "module-fipy.meshes.representations"], [237, "module-fipy.meshes.representations.abstractRepresentation"], [238, "module-fipy.meshes.representations.gridRepresentation"], [239, "module-fipy.meshes.representations.meshRepresentation"], [240, "module-fipy.meshes.skewedGrid2D"], [241, "module-fipy.meshes.sphericalNonUniformGrid1D"], [242, "module-fipy.meshes.sphericalUniformGrid1D"], [243, "module-fipy.meshes.test"], [244, "module-fipy.meshes.topologies"], [245, "module-fipy.meshes.topologies.abstractTopology"], [246, "module-fipy.meshes.topologies.gridTopology"], [247, "module-fipy.meshes.topologies.meshTopology"], [248, "module-fipy.meshes.tri2D"], [249, "module-fipy.meshes.uniformGrid"], [250, "module-fipy.meshes.uniformGrid1D"], [251, "module-fipy.meshes.uniformGrid2D"], [252, "module-fipy.solvers"], [253, "module-fipy.solvers.convergence"], [254, "module-fipy.solvers.petsc"], [255, "module-fipy.solvers.petsc.comms"], [256, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"], [257, "module-fipy.solvers.petsc.comms.petscCommWrapper"], [258, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"], [259, "module-fipy.solvers.petsc.dummySolver"], [260, "module-fipy.solvers.petsc.linearBicgSolver"], [261, "module-fipy.solvers.petsc.linearCGSSolver"], [262, "module-fipy.solvers.petsc.linearGMRESSolver"], [263, "module-fipy.solvers.petsc.linearLUSolver"], [264, "module-fipy.solvers.petsc.linearPCGSolver"], [265, "module-fipy.solvers.petsc.petscConvergence"], [266, "module-fipy.solvers.petsc.petscKrylovSolver"], [267, "module-fipy.solvers.petsc.petscSolver"], [268, "module-fipy.solvers.petsc.preconditioners"], [269, "module-fipy.solvers.petsc.preconditioners.defaultPreconditioner"], [270, "module-fipy.solvers.petsc.preconditioners.icPreconditioner"], [271, "module-fipy.solvers.petsc.preconditioners.iluPreconditioner"], [272, "module-fipy.solvers.petsc.preconditioners.jacobiPreconditioner"], [273, "module-fipy.solvers.petsc.preconditioners.luPreconditioner"], [274, "module-fipy.solvers.petsc.preconditioners.petscPreconditioner"], [275, "module-fipy.solvers.petsc.preconditioners.ssorPreconditioner"], [276, "module-fipy.solvers.preconditioner"], [277, "module-fipy.solvers.pyAMG"], [278, "module-fipy.solvers.pyAMG.linearCGSSolver"], [279, "module-fipy.solvers.pyAMG.linearGMRESSolver"], [280, "module-fipy.solvers.pyAMG.linearGeneralSolver"], [281, "module-fipy.solvers.pyAMG.linearLUSolver"], [282, "module-fipy.solvers.pyAMG.linearPCGSolver"], [283, "module-fipy.solvers.pyAMG.preconditioners"], [284, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"], [285, "module-fipy.solvers.pyamgx"], [286, "module-fipy.solvers.pyamgx.aggregationAMGSolver"], [287, "module-fipy.solvers.pyamgx.classicalAMGSolver"], [288, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"], [289, "module-fipy.solvers.pyamgx.linearFGMRESSolver"], [290, "module-fipy.solvers.pyamgx.linearGMRESSolver"], [291, "module-fipy.solvers.pyamgx.linearLUSolver"], [292, "module-fipy.solvers.pyamgx.linearPCGSolver"], [293, "module-fipy.solvers.pyamgx.preconditioners"], [294, "module-fipy.solvers.pyamgx.pyAMGXSolver"], [295, "module-fipy.solvers.pyamgx.pyamgxConvergence"], [296, "module-fipy.solvers.pyamgx.smoothers"], [297, "module-fipy.solvers.pysparse"], [298, "module-fipy.solvers.pysparse.linearCGSSolver"], [299, "module-fipy.solvers.pysparse.linearGMRESSolver"], [300, "module-fipy.solvers.pysparse.linearInitialSolver"], [301, "module-fipy.solvers.pysparse.linearJORSolver"], [302, "module-fipy.solvers.pysparse.linearLUSolver"], [303, "module-fipy.solvers.pysparse.linearPCGSolver"], [304, "module-fipy.solvers.pysparse.linearRHSSolver"], [305, "module-fipy.solvers.pysparse.preconditioners"], [306, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"], [307, "module-fipy.solvers.pysparse.preconditioners.pysparsePreconditioner"], [308, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"], [309, "module-fipy.solvers.pysparse.pysparseConvergence"], [310, "module-fipy.solvers.pysparse.pysparseSolver"], [311, "module-fipy.solvers.pysparseMatrixSolver"], [312, "module-fipy.solvers.scipy"], [313, "module-fipy.solvers.scipy.linearBicgstabSolver"], [314, "module-fipy.solvers.scipy.linearCGSSolver"], [315, "module-fipy.solvers.scipy.linearGMRESSolver"], [316, "module-fipy.solvers.scipy.linearLUSolver"], [317, "module-fipy.solvers.scipy.linearPCGSolver"], [318, "module-fipy.solvers.scipy.preconditioners"], [319, "module-fipy.solvers.scipy.preconditioners.iluPreconditioner"], [320, "module-fipy.solvers.scipy.preconditioners.jacobiPreconditioner"], [321, "module-fipy.solvers.scipy.preconditioners.scipyPreconditioner"], [322, "module-fipy.solvers.scipy.scipyConvergence"], [323, "module-fipy.solvers.scipy.scipyKrylovSolver"], [324, "module-fipy.solvers.scipy.scipySolver"], [325, "module-fipy.solvers.solver"], [326, "module-fipy.solvers.test"], [327, "module-fipy.solvers.trilinos"], [328, "module-fipy.solvers.trilinos.aztecConvergence"], [329, "module-fipy.solvers.trilinos.comms"], [330, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"], [331, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"], [332, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"], [333, "module-fipy.solvers.trilinos.linearBicgstabSolver"], [334, "module-fipy.solvers.trilinos.linearCGSSolver"], [335, "module-fipy.solvers.trilinos.linearGMRESSolver"], [336, "module-fipy.solvers.trilinos.linearLUSolver"], [337, "module-fipy.solvers.trilinos.linearPCGSolver"], [338, "module-fipy.solvers.trilinos.preconditioners"], [339, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"], [340, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"], [341, "module-fipy.solvers.trilinos.preconditioners.iluPreconditioner"], [342, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"], [343, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"], [344, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"], [345, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"], [346, "module-fipy.solvers.trilinos.preconditioners.multilevelPreconditioner"], [347, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"], [348, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"], [349, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"], [350, "module-fipy.solvers.trilinos.preconditioners.trilinosPreconditioner"], [351, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"], [352, "module-fipy.solvers.trilinos.trilinosMLTest"], [353, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"], [354, "module-fipy.solvers.trilinos.trilinosSolver"], [355, "module-fipy.steppers"], [356, "module-fipy.steppers.pidStepper"], [357, "module-fipy.steppers.pseudoRKQSStepper"], [358, "module-fipy.steppers.stepper"], [359, "module-fipy.terms"], [360, "module-fipy.terms.abstractBinaryTerm"], [361, "module-fipy.terms.abstractConvectionTerm"], [362, "module-fipy.terms.abstractDiffusionTerm"], [363, "module-fipy.terms.abstractUpwindConvectionTerm"], [364, "module-fipy.terms.advectionTerm"], [365, "module-fipy.terms.asymmetricConvectionTerm"], [366, "module-fipy.terms.binaryTerm"], [367, "module-fipy.terms.cellTerm"], [368, "module-fipy.terms.centralDiffConvectionTerm"], [369, "module-fipy.terms.coupledBinaryTerm"], [370, "module-fipy.terms.diffusionTerm"], [371, "module-fipy.terms.diffusionTermCorrection"], [372, "module-fipy.terms.diffusionTermNoCorrection"], [373, "module-fipy.terms.explicitDiffusionTerm"], [374, "module-fipy.terms.explicitSourceTerm"], [375, "module-fipy.terms.explicitUpwindConvectionTerm"], [376, "module-fipy.terms.exponentialConvectionTerm"], [377, "module-fipy.terms.faceTerm"], [378, "module-fipy.terms.firstOrderAdvectionTerm"], [379, "module-fipy.terms.hybridConvectionTerm"], [380, "module-fipy.terms.implicitDiffusionTerm"], [381, "module-fipy.terms.implicitSourceTerm"], [382, "module-fipy.terms.nonDiffusionTerm"], [383, "module-fipy.terms.powerLawConvectionTerm"], [384, "module-fipy.terms.residualTerm"], [385, "module-fipy.terms.sourceTerm"], [386, "module-fipy.terms.term"], [387, "module-fipy.terms.test"], [388, "module-fipy.terms.transientTerm"], [389, "module-fipy.terms.unaryTerm"], [390, "module-fipy.terms.upwindConvectionTerm"], [391, "module-fipy.terms.vanLeerConvectionTerm"], [392, "module-fipy.testFiPy"], [393, "module-fipy.tests"], [394, "module-fipy.tests.doctestPlus"], [395, "module-fipy.tests.lateImportTest"], [396, "module-fipy.tests.test"], [397, "module-fipy.tests.testProgram"], [398, "module-fipy.tools"], [399, "module-fipy.tools.comms"], [400, "module-fipy.tools.comms.commWrapper"], [401, "module-fipy.tools.comms.dummyComm"], [402, "module-fipy.tools.debug"], [403, "module-fipy.tools.decorators"], [404, "module-fipy.tools.dimensions"], [405, "module-fipy.tools.dimensions.DictWithDefault"], [406, "module-fipy.tools.dimensions.NumberDict"], [407, "module-fipy.tools.dimensions.physicalField"], [408, "module-fipy.tools.dump"], [409, "module-fipy.tools.inline"], [410, "module-fipy.tools.logging"], [411, "module-fipy.tools.logging.environment"], [412, "module-fipy.tools.numerix"], [413, "module-fipy.tools.parser"], [414, "module-fipy.tools.sharedtempfile"], [415, "module-fipy.tools.test"], [416, "module-fipy.tools.vector"], [417, "module-fipy.tools.version"], [418, "module-fipy.variables"], [419, "module-fipy.variables.addOverFacesVariable"], [420, "module-fipy.variables.arithmeticCellToFaceVariable"], [421, "module-fipy.variables.betaNoiseVariable"], [422, "module-fipy.variables.binaryOperatorVariable"], [423, "module-fipy.variables.cellToFaceVariable"], [424, "module-fipy.variables.cellVariable"], [425, "module-fipy.variables.constant"], [426, "module-fipy.variables.constraintMask"], [427, "module-fipy.variables.coupledCellVariable"], [428, "module-fipy.variables.distanceVariable"], [429, "module-fipy.variables.exponentialNoiseVariable"], [430, "module-fipy.variables.faceGradContributionsVariable"], [431, "module-fipy.variables.faceGradVariable"], [432, "module-fipy.variables.faceVariable"], [433, "module-fipy.variables.gammaNoiseVariable"], [434, "module-fipy.variables.gaussCellGradVariable"], [435, "module-fipy.variables.gaussianNoiseVariable"], [436, "module-fipy.variables.harmonicCellToFaceVariable"], [437, "module-fipy.variables.histogramVariable"], [438, "module-fipy.variables.interfaceAreaVariable"], [439, "module-fipy.variables.interfaceFlagVariable"], [440, "module-fipy.variables.leastSquaresCellGradVariable"], [441, "module-fipy.variables.levelSetDiffusionVariable"], [442, "module-fipy.variables.meshVariable"], [443, "module-fipy.variables.minmodCellToFaceVariable"], [444, "module-fipy.variables.modCellGradVariable"], [445, "module-fipy.variables.modCellToFaceVariable"], [446, "module-fipy.variables.modFaceGradVariable"], [447, "module-fipy.variables.modPhysicalField"], [448, "module-fipy.variables.modularVariable"], [449, "module-fipy.variables.noiseVariable"], [450, "module-fipy.variables.operatorVariable"], [451, "module-fipy.variables.scharfetterGummelFaceVariable"], [452, "module-fipy.variables.surfactantConvectionVariable"], [453, "module-fipy.variables.surfactantVariable"], [454, "module-fipy.variables.test"], [455, "module-fipy.variables.unaryOperatorVariable"], [456, "module-fipy.variables.uniformNoiseVariable"], [457, "module-fipy.variables.variable"], [458, "module-fipy.viewers"], [459, "module-fipy.viewers.matplotlibViewer"], [460, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"], [461, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"], [462, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"], [463, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"], [464, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"], [465, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"], [466, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"], [467, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"], [468, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"], [469, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"], [470, "module-fipy.viewers.matplotlibViewer.test"], [471, "module-fipy.viewers.mayaviViewer"], [472, "module-fipy.viewers.mayaviViewer.mayaviClient"], [473, "module-fipy.viewers.mayaviViewer.mayaviDaemon"], [474, "module-fipy.viewers.mayaviViewer.test"], [475, "module-fipy.viewers.multiViewer"], [476, "module-fipy.viewers.test"], [477, "module-fipy.viewers.testinteractive"], [478, "module-fipy.viewers.tsvViewer"], [479, "module-fipy.viewers.viewer"], [480, "module-fipy.viewers.vtkViewer"], [481, "module-fipy.viewers.vtkViewer.test"], [482, "module-fipy.viewers.vtkViewer.vtkCellViewer"], [483, "module-fipy.viewers.vtkViewer.vtkFaceViewer"], [484, "module-fipy.viewers.vtkViewer.vtkViewer"], [493, "module-package"], [494, "module-package.subpackage"], [495, "module-package.subpackage.base"], [496, "module-package.subpackage.object"]], "examples.benchmarking": [[24, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[25, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[26, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[27, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[28, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[29, "module-examples.benchmarking.versions"]], "examples.cahnhilliard": [[30, "module-examples.cahnHilliard"]], "examples.cahnhilliard.mesh2d": [[31, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnhilliard.mesh2dcoupled": [[32, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnhilliard.mesh3d": [[33, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnhilliard.sphere": [[34, "module-examples.cahnHilliard.sphere"]], "examples.cahnhilliard.spheredaemon": [[35, "module-examples.cahnHilliard.sphereDaemon"]], "cellvariable": [[36, "index-1"], [56, "index-1"], [85, "index-1"], [117, "index-1"], [137, "index-5"], [161, "index-1"], [162, "index-1"], [163, "index-1"], [165, "index-2"], [166, "index-1"], [175, "index-1"], [176, "index-1"], [188, "index-2"], [188, "index-9"]], "defaultsolver": [[36, "index-3"]], "grid2d": [[36, "index-0"], [82, "index-0"], [83, "index-0"], [117, "index-0"], [126, "index-0"], [128, "index-0"], [137, "index-2"], [161, "index-0"], [165, "index-1"], [188, "index-0"]], "linearlusolver": [[36, "index-3"], [163, "index-7"], [188, "index-3"]], "nthorderboundarycondition": [[36, "index-2"], [85, "index-2"]], "examples.cahnhilliard.tanh1d": [[36, "module-examples.cahnHilliard.tanh1D"]], "exp": [[36, "index-4"], [49, "index-1"], [50, "index-0"], [51, "index-1"], [56, "index-3"], [59, "index-1"], [60, "index-0"], [137, "index-1"], [162, "index-4"], [163, "index-3"], [165, "index-5"], [166, "index-3"]], "fipy.viewers": [[36, "index-5"], [49, "index-2"], [50, "index-1"], [51, "index-2"], [56, "index-4"], [59, "index-2"], [60, "index-1"], [81, "index-1"], [82, "index-1"], [83, "index-1"], [85, "index-3"], [117, "index-2"], [161, "index-4"], [162, "index-7"], [163, "index-6"], [165, "index-6"], [166, "index-4"], [176, "index-2"], [188, "index-11"], [458, "module-fipy.viewers"]], "sqrt": [[36, "index-4"], [72, "index-3"], [73, "index-3"], [137, "index-1"], [165, "index-1"], [176, "index-3"]], "examples.cahnhilliard.test": [[37, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[38, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[39, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2d": [[40, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[41, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[42, "module-examples.chemotaxis.test"]], "examples.convection": [[43, "module-examples.convection"]], "examples.convection.advection": [[44, "module-examples.convection.advection"]], "examples.convection.advection.explicitupwind": [[45, "module-examples.convection.advection.explicitUpwind"]], "examples.convection.advection.implicitupwind": [[46, "module-examples.convection.advection.implicitUpwind"]], "examples.convection.advection.vanleerupwind": [[47, "module-examples.convection.advection.vanLeerUpwind"]], "examples.convection.exponential1d": [[48, "module-examples.convection.exponential1D"]], "grid1d": [[49, "index-0"], [51, "index-0"], [56, "index-0"], [59, "index-0"], [85, "index-0"], [122, "index-0"], [162, "index-0"], [163, "index-0"], [166, "index-0"], [175, "index-0"], [176, "index-0"], [188, "index-7"]], "examples.convection.exponential1d.cylindricalmesh1d": [[49, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1d.cylindricalmesh1dnonuniform": [[50, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1d.mesh1d": [[51, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1d.tri2d": [[52, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1dback": [[53, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1dback.mesh1d": [[54, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1dsource": [[55, "module-examples.convection.exponential1DSource"]], "defaultasymmetricsolver": [[56, "index-2"], [175, "index-5"]], "examples.convection.exponential1dsource.mesh1d": [[56, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1dsource.tri2d": [[57, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2d": [[58, "module-examples.convection.exponential2D"]], "examples.convection.exponential2d.cylindricalmesh2d": [[59, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2d.cylindricalmesh2dnonuniform": [[60, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2d.mesh2d": [[61, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2d.tri2d": [[62, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[63, "module-examples.convection.peclet"]], "examples.convection.powerlaw1d": [[64, "module-examples.convection.powerLaw1D"]], "examples.convection.powerlaw1d.mesh1d": [[65, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerlaw1d.tri2d": [[66, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[67, "module-examples.convection.robin"]], "examples.convection.source": [[68, "module-examples.convection.source"]], "examples.convection.test": [[69, "module-examples.convection.test"]], "examples.diffusion": [[70, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[71, "module-examples.diffusion.anisotropy"]], "arcsin; cos": [[72, "index-3"], [73, "index-3"]], "examples.diffusion.circle": [[72, "module-examples.diffusion.circle"]], "fipy.terms.implicitdiffusionterm.diffusionterm": [[72, "index-1"], [73, "index-1"]], "fipy.terms.transientterm.transientterm": [[72, "index-1"], [73, "index-1"]], "fipy.variables.cellvariable.cellvariable": [[72, "index-0"], [73, "index-0"]], "fipy.viewers.tsvviewer.tsvviewer": [[72, "index-2"], [73, "index-2"]], "object": [[72, "index-0"], [72, "index-1"], [72, "index-2"], [73, "index-0"], [73, "index-1"], [73, "index-2"]], "scipy": [[72, "index-3"], [73, "index-3"], [162, "index-6"], [163, "index-5"], [176, "index-8"], [485, "term-SciPy"]], "examples.diffusion.circlequad": [[73, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[74, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[75, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[76, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1d": [[77, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[78, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[79, "module-examples.diffusion.explicit.test"]], "examples.diffusion.explicit.tri2d": [[80, "module-examples.diffusion.explicit.tri2D"]], "explicitdiffusionterm": [[81, "index-0"], [161, "index-3"], [165, "index-4"], [166, "index-2"]], "facevariable": [[81, "index-2"]], "transientterm": [[81, "index-0"], [161, "index-3"], [165, "index-4"], [166, "index-2"], [176, "index-4"]], "examples.diffusion.mesh1d": [[81, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[82, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20coupled": [[83, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthorder": [[84, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthorder.input4thorder1d": [[85, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthorder.input4thorder_line": [[86, "module-examples.diffusion.nthOrder.input4thOrder_line"]], "examples.diffusion.nthorder.test": [[87, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadystate": [[88, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadystate.mesh1d": [[89, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadystate.mesh1d.inputperiodic": [[90, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadystate.mesh1d.tri2dinput": [[91, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"]], "examples.diffusion.steadystate.mesh20x20": [[92, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadystate.mesh20x20.gmshinput": [[93, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadystate.mesh20x20.isotropy": [[94, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadystate.mesh20x20.modifiedmeshinput": [[95, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadystate.mesh20x20.orthoerror": [[96, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadystate.mesh20x20.tri2dinput": [[97, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"]], "examples.diffusion.steadystate.mesh50x50": [[98, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadystate.mesh50x50.input": [[99, "module-examples.diffusion.steadyState.mesh50x50.input"]], "examples.diffusion.steadystate.mesh50x50.tri2dinput": [[100, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"]], "examples.diffusion.steadystate.othermeshes": [[101, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadystate.othermeshes.prism": [[102, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadystate.test": [[103, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[104, "module-examples.diffusion.test"]], "examples.diffusion.variable": [[105, "module-examples.diffusion.variable"]], "examples.elphf": [[106, "module-examples.elphf"]], "examples.elphf.diffusion": [[107, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1d": [[108, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1ddimensional": [[109, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2d": [[110, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[111, "module-examples.elphf.input"]], "examples.elphf.phase": [[112, "module-examples.elphf.phase"]], "examples.elphf.phasediffusion": [[113, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[114, "module-examples.elphf.poisson"]], "examples.elphf.test": [[115, "module-examples.elphf.test"]], "examples.flow": [[116, "module-examples.flow"]], "rhsvector": [[117, "index-3"]], "cachematrix": [[117, "index-3"]], "cacherhsvector": [[117, "index-3"]], "examples.flow.stokescavity": [[117, "module-examples.flow.stokesCavity"]], "matrix": [[117, "index-3"]], "sweep": [[117, "index-3"], [163, "index-7"], [176, "index-7"]], "examples.flow.test": [[118, "module-examples.flow.test"]], "examples.levelset": [[119, "module-examples.levelSet"]], "examples.levelset.advection": [[120, "module-examples.levelSet.advection"]], "examples.levelset.advection.circle": [[121, "module-examples.levelSet.advection.circle"]], "examples.levelset.advection.mesh1d": [[122, "module-examples.levelSet.advection.mesh1D"]], "examples.levelset.advection.test": [[123, "module-examples.levelSet.advection.test"]], "examples.levelset.advection.trench": [[124, "module-examples.levelSet.advection.trench"]], "examples.levelset.distancefunction": [[125, "module-examples.levelSet.distanceFunction"]], "examples.levelset.distancefunction.circle": [[126, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelset.distancefunction.interior": [[127, "module-examples.levelSet.distanceFunction.interior"]], "examples.levelset.distancefunction.mesh1d": [[128, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelset.distancefunction.square": [[129, "module-examples.levelSet.distanceFunction.square"]], "examples.levelset.distancefunction.test": [[130, "module-examples.levelSet.distanceFunction.test"]], "examples.levelset.electrochem": [[131, "module-examples.levelSet.electroChem"]], "examples.levelset.electrochem.adsorbingsurfactantequation": [[132, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelset.electrochem.adsorption": [[133, "module-examples.levelSet.electroChem.adsorption"]], "examples.levelset.electrochem.gapfilldistancevariable": [[134, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelset.electrochem.gapfillmesh": [[135, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelset.electrochem.gold": [[136, "module-examples.levelSet.electroChem.gold"]], "gmsh": [[136, "index-1"], [138, "index-1"], [143, "index-1"], [485, "term-Gmsh"]], "rungold": [[136, "index-0"]], "advectionterm": [[137, "index-6"]], "distancevariable": [[137, "index-3"]], "mayavisurfactantviewer": [[137, "index-7"]], "surfactantvariable": [[137, "index-4"]], "examples.levelset.electrochem.howtowriteascript": [[137, "module-examples.levelSet.electroChem.howToWriteAScript"]], "fipy.tools.parser": [[137, "index-0"], [165, "index-0"], [413, "module-fipy.tools.parser"]], "loadtxt": [[137, "index-8"], [161, "index-5"], [165, "index-7"], [166, "index-6"]], "examples.levelset.electrochem.leveler": [[138, "module-examples.levelSet.electroChem.leveler"]], "runleveler": [[138, "index-0"]], "examples.levelset.electrochem.lines": [[139, "module-examples.levelSet.electroChem.lines"]], "matplotlibsurfactantviewer (class in examples.levelset.electrochem.matplotlibsurfactantviewer)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer"]], "axes (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.axes"]], "cmap (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.cmap"]], "colorbar (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.colorbar"]], "examples.levelset.electrochem.matplotlibsurfactantviewer": [[140, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "fig (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.fig"]], "id (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.id"]], "log (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.log"]], "plot() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plot"]], "plotmesh() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.title"]], "vars (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.vars"]], "mayavisurfactantviewer (class in examples.levelset.electrochem.mayavisurfactantviewer)": [[141, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer"]], "examples.levelset.electrochem.mayavisurfactantviewer": [[141, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "plotmesh() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[141, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[141, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[141, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.title"]], "vars (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[141, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.vars"]], "examples.levelset.electrochem.metaliondiffusionequation": [[142, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelset.electrochem.simpletrenchsystem": [[143, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "runsimpletrenchsystem": [[143, "index-0"]], "examples.levelset.electrochem.surfactantbulkdiffusionequation": [[144, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelset.electrochem.test": [[145, "module-examples.levelSet.electroChem.test"]], "examples.levelset.electrochem.trenchmesh": [[146, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelset.surfactant": [[147, "module-examples.levelSet.surfactant"]], "examples.levelset.surfactant.circle": [[148, "module-examples.levelSet.surfactant.circle"]], "examples.levelset.surfactant.expandingcircle": [[149, "module-examples.levelSet.surfactant.expandingCircle"]], "examples.levelset.surfactant.square": [[150, "module-examples.levelSet.surfactant.square"]], "examples.levelset.surfactant.test": [[151, "module-examples.levelSet.surfactant.test"]], "examples.levelset.test": [[152, "module-examples.levelSet.test"]], "examples.meshing": [[153, "module-examples.meshing"]], "examples.meshing.gmshrefinement": [[154, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputgrid2d": [[155, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[156, "module-examples.meshing.sphere"]], "examples.meshing.test": [[157, "module-examples.meshing.test"]], "examples.parallel": [[158, "module-examples.parallel"]], "examples.phase": [[159, "module-examples.phase"]], ":math:`\\pi`": [[160, "index-0"], [161, "index-2"], [165, "index-3"], [166, "index-5"]], "arctan": [[160, "index-0"], [161, "index-2"]], "arctan2": [[160, "index-0"], [161, "index-2"]], "examples.phase.anisotropy": [[160, "module-examples.phase.anisotropy"]], "pi": [[160, "index-0"], [161, "index-2"], [165, "index-3"], [166, "index-5"]], "tan": [[160, "index-0"], [161, "index-2"]], "implicitsourceterm": [[161, "index-3"], [165, "index-4"], [166, "index-2"], [176, "index-5"]], "allclose": [[161, "index-5"], [175, "index-6"]], "examples.phase.anisotropyold": [[161, "module-examples.phase.anisotropyOLD"]], "powerlawconvectionterm": [[162, "index-3"], [175, "index-3"]], "variable": [[162, "index-2"], [163, "index-2"], [176, "index-6"]], "array": [[162, "index-5"], [163, "index-4"]], "examples.phase.binary": [[162, "module-examples.phase.binary"]], "log": [[162, "index-5"], [163, "index-4"], [175, "index-2"]], "examples.phase.binarycoupled": [[163, "module-examples.phase.binaryCoupled"]], "solve": [[163, "index-7"]], "examples.phase.impingement": [[164, "module-examples.phase.impingement"]], "modularvariable": [[165, "index-3"]], "examples.phase.impingement.mesh20x20": [[165, "module-examples.phase.impingement.mesh20x20"]], "fipy.tools.dump": [[165, "index-8"], [408, "module-fipy.tools.dump"]], "examples.phase.impingement.mesh40x1": [[166, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[167, "module-examples.phase.impingement.test"]], "examples.phase.missorientation": [[168, "module-examples.phase.missOrientation"]], "examples.phase.missorientation.circle": [[169, "module-examples.phase.missOrientation.circle"]], "examples.phase.missorientation.mesh1d": [[170, "module-examples.phase.missOrientation.mesh1D"]], "examples.phase.missorientation.modcircle": [[171, "module-examples.phase.missOrientation.modCircle"]], "examples.phase.missorientation.test": [[172, "module-examples.phase.missOrientation.test"]], "examples.phase.polyxtal": [[173, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalcoupled": [[174, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[175, "module-examples.phase.quaternary"]], "viewers": [[175, "index-4"]], "examples.phase.simple": [[176, "module-examples.phase.simple"]], "tanh": [[176, "index-3"]], "examples.phase.symmetry": [[177, "module-examples.phase.symmetry"]], "examples.phase.test": [[178, "module-examples.phase.test"]], "examples.reactivewetting": [[179, "module-examples.reactiveWetting"]], "examples.reactivewetting.liquidvapor1d": [[180, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactivewetting.liquidvapor2d": [[181, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactivewetting.test": [[182, "module-examples.reactiveWetting.test"]], "examples.riemann": [[183, "module-examples.riemann"]], "examples.riemann.acoustics": [[184, "module-examples.riemann.acoustics"]], "examples.riemann.test": [[185, "module-examples.riemann.test"]], "examples.test": [[186, "module-examples.test"]], "examples.updating": [[187, "module-examples.updating"]], "exponentialconvectionterm": [[188, "index-3"]], "fixedflux": [[188, "index-1"]], "fixedvalue": [[188, "index-1"], [188, "index-8"]], "gist1dviewer": [[188, "index-10"]], "grid2dgistviewer": [[188, "index-6"]], "iterator": [[188, "index-4"]], "steadyconvectiondiffusionscequation": [[188, "index-3"]], "examples.updating.update0_1to1_0": [[188, "module-examples.updating.update0_1to1_0"]], "fipy.numerix": [[188, "index-5"]], "examples.updating.update1_0to2_0": [[189, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[190, "module-examples.updating.update2_0to3_0"]], "doctest_raw_input() (in module fipy)": [[191, "fipy.doctest_raw_input"]], "fipy": [[191, "module-fipy"], [485, "term-FiPy"]], "test() (in module fipy)": [[191, "fipy.test"]], "fipy.boundaryconditions": [[192, "module-fipy.boundaryConditions"]], "boundarycondition (class in fipy.boundaryconditions.boundarycondition)": [[193, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition"]], "__repr__() (fipy.boundaryconditions.boundarycondition.boundarycondition method)": [[193, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition.__repr__"]], "fipy.boundaryconditions.boundarycondition": [[193, "module-fipy.boundaryConditions.boundaryCondition"]], "constraint (class in fipy.boundaryconditions.constraint)": [[194, "fipy.boundaryConditions.constraint.Constraint"]], "__repr__() (fipy.boundaryconditions.constraint.constraint method)": [[194, "fipy.boundaryConditions.constraint.Constraint.__repr__"]], "fipy.boundaryconditions.constraint": [[194, "module-fipy.boundaryConditions.constraint"]], "fixedflux (class in fipy.boundaryconditions.fixedflux)": [[195, "fipy.boundaryConditions.fixedFlux.FixedFlux"]], "__repr__() (fipy.boundaryconditions.fixedflux.fixedflux method)": [[195, "fipy.boundaryConditions.fixedFlux.FixedFlux.__repr__"]], "fipy.boundaryconditions.fixedflux": [[195, "module-fipy.boundaryConditions.fixedFlux"]], "fixedvalue (class in fipy.boundaryconditions.fixedvalue)": [[196, "fipy.boundaryConditions.fixedValue.FixedValue"]], "__repr__() (fipy.boundaryconditions.fixedvalue.fixedvalue method)": [[196, "fipy.boundaryConditions.fixedValue.FixedValue.__repr__"]], "fipy.boundaryconditions.fixedvalue": [[196, "module-fipy.boundaryConditions.fixedValue"]], "nthorderboundarycondition (class in fipy.boundaryconditions.nthorderboundarycondition)": [[197, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition"]], "__repr__() (fipy.boundaryconditions.nthorderboundarycondition.nthorderboundarycondition method)": [[197, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition.__repr__"]], "fipy.boundaryconditions.nthorderboundarycondition": [[197, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryconditions.test": [[198, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[199, "module-fipy.matrices"]], "offsetsparsematrix() (in module fipy.matrices.offsetsparsematrix)": [[200, "fipy.matrices.offsetSparseMatrix.OffsetSparseMatrix"]], "fipy.matrices.offsetsparsematrix": [[200, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.petscmatrix": [[201, "module-fipy.matrices.petscMatrix"]], "fipy.matrices.pysparsematrix": [[202, "module-fipy.matrices.pysparseMatrix"]], "fipy.matrices.scipymatrix": [[203, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparsematrix": [[204, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[205, "module-fipy.matrices.test"]], "fipy.matrices.trilinosmatrix": [[206, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[207, "module-fipy.meshes"]], "abstractmesh (class in fipy.meshes.abstractmesh)": [[208, "fipy.meshes.abstractMesh.AbstractMesh"]], "meshadditionerror": [[208, "fipy.meshes.abstractMesh.MeshAdditionError"], [227, "fipy.meshes.mesh.MeshAdditionError"]], "vtkcelldataset (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__add__"]], "__cause__ (fipy.meshes.abstractmesh.meshadditionerror attribute)": [[208, "fipy.meshes.abstractMesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.abstractmesh.meshadditionerror attribute)": [[208, "fipy.meshes.abstractMesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[208, "fipy.meshes.abstractMesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__div__"]], "__getattribute__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[208, "fipy.meshes.abstractMesh.MeshAdditionError.__getattribute__"]], "__getstate__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__getstate__"]], "__radd__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__radd__"]], "__reduce__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[208, "fipy.meshes.abstractMesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__repr__"]], "__repr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[208, "fipy.meshes.abstractMesh.MeshAdditionError.__repr__"]], "__setattr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[208, "fipy.meshes.abstractMesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[208, "fipy.meshes.abstractMesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__sub__"]], "__truediv__() (fipy.meshes.abstractmesh.abstractmesh method)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.__truediv__"]], "add_note() (fipy.meshes.abstractmesh.meshadditionerror method)": [[208, "fipy.meshes.abstractMesh.MeshAdditionError.add_note"]], "aspect2d (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.aspect2D"]], "cellcenters (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.cellCenters"]], "cellfaceids (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.cellFaceIDs"]], "facesback (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesBack"]], "facesbottom (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesBottom"]], "facesdown (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesDown"]], "facesfront (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesFront"]], "facesleft (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesLeft"]], "facesright (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesRight"]], "facestop (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesTop"]], "facesup (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.facesUp"]], "fipy.meshes.abstractmesh": [[208, "module-fipy.meshes.abstractMesh"]], "with_traceback() (fipy.meshes.abstractmesh.meshadditionerror method)": [[208, "fipy.meshes.abstractMesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.x"]], "y (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.y"]], "z (fipy.meshes.abstractmesh.abstractmesh property)": [[208, "fipy.meshes.abstractMesh.AbstractMesh.z"]], "fipy.meshes.builders": [[209, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractgridbuilder": [[210, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1dbuilder": [[211, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2dbuilder": [[212, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3dbuilder": [[213, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicgrid1dbuilder": [[214, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityclasses": [[215, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalgrid1d": [[216, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalgrid2d": [[217, "module-fipy.meshes.cylindricalGrid2D"]], "cylindricalnonuniformgrid1d (class in fipy.meshes.cylindricalnonuniformgrid1d)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid1d": [[218, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "x (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.z"]], "cylindricalnonuniformgrid2d (class in fipy.meshes.cylindricalnonuniformgrid2d)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__getstate__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.extrude"]], "facesback (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid2d": [[219, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "x (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[219, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.z"]], "cylindricaluniformgrid1d (class in fipy.meshes.cylindricaluniformgrid1d)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesUp"]], "fipy.meshes.cylindricaluniformgrid1d": [[220, "module-fipy.meshes.cylindricalUniformGrid1D"]], "x (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.x"]], "y (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.y"]], "z (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[220, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.z"]], "cylindricaluniformgrid2d (class in fipy.meshes.cylindricaluniformgrid2d)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__getstate__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesUp"]], "fipy.meshes.cylindricaluniformgrid2d": [[221, "module-fipy.meshes.cylindricalUniformGrid2D"]], "x (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.x"]], "y (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.y"]], "z (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[221, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.z"]], "cylindricalgrid1d() (in module fipy.meshes.factorymeshes)": [[222, "fipy.meshes.factoryMeshes.CylindricalGrid1D"]], "cylindricalgrid2d() (in module fipy.meshes.factorymeshes)": [[222, "fipy.meshes.factoryMeshes.CylindricalGrid2D"]], "grid1d() (in module fipy.meshes.factorymeshes)": [[222, "fipy.meshes.factoryMeshes.Grid1D"]], "grid2d() (in module fipy.meshes.factorymeshes)": [[222, "fipy.meshes.factoryMeshes.Grid2D"]], "grid3d() (in module fipy.meshes.factorymeshes)": [[222, "fipy.meshes.factoryMeshes.Grid3D"]], "sphericalgrid1d() (in module fipy.meshes.factorymeshes)": [[222, "fipy.meshes.factoryMeshes.SphericalGrid1D"]], "fipy.meshes.factorymeshes": [[222, "module-fipy.meshes.factoryMeshes"]], "gmsh2d (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.Gmsh2D"]], "gmsh2din3dspace (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace"]], "gmsh3d (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.Gmsh3D"]], "gmshexception": [[223, "fipy.meshes.gmshMesh.GmshException"]], "gmshfile (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.GmshFile"]], "gmshgrid2d (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D"]], "gmshgrid3d (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D"]], "mshfile (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.MSHFile"]], "meshexporterror": [[223, "fipy.meshes.gmshMesh.MeshExportError"]], "posfile (class in fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.POSFile"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__add__"]], "__cause__ (fipy.meshes.gmshmesh.gmshexception attribute)": [[223, "fipy.meshes.gmshMesh.GmshException.__cause__"]], "__cause__ (fipy.meshes.gmshmesh.meshexporterror attribute)": [[223, "fipy.meshes.gmshMesh.MeshExportError.__cause__"]], "__context__ (fipy.meshes.gmshmesh.gmshexception attribute)": [[223, "fipy.meshes.gmshMesh.GmshException.__context__"]], "__context__ (fipy.meshes.gmshmesh.meshexporterror attribute)": [[223, "fipy.meshes.gmshMesh.MeshExportError.__context__"]], "__delattr__() (fipy.meshes.gmshmesh.gmshexception method)": [[223, "fipy.meshes.gmshMesh.GmshException.__delattr__"]], "__delattr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[223, "fipy.meshes.gmshMesh.MeshExportError.__delattr__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__div__"]], "__getattribute__() (fipy.meshes.gmshmesh.gmshexception method)": [[223, "fipy.meshes.gmshMesh.GmshException.__getattribute__"]], "__getattribute__() (fipy.meshes.gmshmesh.meshexporterror method)": [[223, "fipy.meshes.gmshMesh.MeshExportError.__getattribute__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__getstate__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__mul__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__radd__"]], "__reduce__() (fipy.meshes.gmshmesh.gmshexception method)": [[223, "fipy.meshes.gmshMesh.GmshException.__reduce__"]], "__reduce__() (fipy.meshes.gmshmesh.meshexporterror method)": [[223, "fipy.meshes.gmshMesh.MeshExportError.__reduce__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshexception method)": [[223, "fipy.meshes.gmshMesh.GmshException.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[223, "fipy.meshes.gmshMesh.MeshExportError.__repr__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__rmul__"]], "__setattr__() (fipy.meshes.gmshmesh.gmshexception method)": [[223, "fipy.meshes.gmshMesh.GmshException.__setattr__"]], "__setattr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[223, "fipy.meshes.gmshMesh.MeshExportError.__setattr__"]], "__str__() (fipy.meshes.gmshmesh.gmshexception method)": [[223, "fipy.meshes.gmshMesh.GmshException.__str__"]], "__str__() (fipy.meshes.gmshmesh.meshexporterror method)": [[223, "fipy.meshes.gmshMesh.MeshExportError.__str__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__sub__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh3d method)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.__truediv__"]], "add_note() (fipy.meshes.gmshmesh.gmshexception method)": [[223, "fipy.meshes.gmshMesh.GmshException.add_note"]], "add_note() (fipy.meshes.gmshmesh.meshexporterror method)": [[223, "fipy.meshes.gmshMesh.MeshExportError.add_note"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.aspect2D"]], "cellcenters (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.cellFaceIDs"]], "extrude() (fipy.meshes.gmshmesh.gmsh2d method)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.extrude"]], "facesback (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesBack"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesBottom"]], "facesdown (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesDown"]], "facesfront (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesFront"]], "facesleft (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesLeft"]], "facesright (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesRight"]], "facestop (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesTop"]], "facesup (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.facesUp"]], "fipy.meshes.gmshmesh": [[223, "module-fipy.meshes.gmshMesh"]], "gmshversion() (in module fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.gmshVersion"]], "makemapvariables() (fipy.meshes.gmshmesh.mshfile method)": [[223, "fipy.meshes.gmshMesh.MSHFile.makeMapVariables"]], "openmshfile() (in module fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.openMSHFile"]], "openposfile() (in module fipy.meshes.gmshmesh)": [[223, "fipy.meshes.gmshMesh.openPOSFile"]], "read() (fipy.meshes.gmshmesh.mshfile method)": [[223, "fipy.meshes.gmshMesh.MSHFile.read"]], "with_traceback() (fipy.meshes.gmshmesh.gmshexception method)": [[223, "fipy.meshes.gmshMesh.GmshException.with_traceback"]], "with_traceback() (fipy.meshes.gmshmesh.meshexporterror method)": [[223, "fipy.meshes.gmshMesh.MeshExportError.with_traceback"]], "x (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.x"]], "x (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.x"]], "x (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.x"]], "y (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.y"]], "y (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.y"]], "y (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.y"]], "z (fipy.meshes.gmshmesh.gmsh2d property)": [[223, "fipy.meshes.gmshMesh.Gmsh2D.z"]], "z (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[223, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.z"]], "z (fipy.meshes.gmshmesh.gmsh3d property)": [[223, "fipy.meshes.gmshMesh.Gmsh3D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid2d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid2D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid3d property)": [[223, "fipy.meshes.gmshMesh.GmshGrid3D.z"]], "fipy.meshes.grid1d": [[224, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2d": [[225, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3d": [[226, "module-fipy.meshes.grid3D"]], "mesh (class in fipy.meshes.mesh)": [[227, "fipy.meshes.mesh.Mesh"]], "vtkcelldataset (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__add__"]], "__cause__ (fipy.meshes.mesh.meshadditionerror attribute)": [[227, "fipy.meshes.mesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.mesh.meshadditionerror attribute)": [[227, "fipy.meshes.mesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__div__"]], "__getattribute__() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.__getattribute__"]], "__getstate__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__getstate__"]], "__mul__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__mul__"]], "__radd__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__radd__"]], "__reduce__() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__repr__"]], "__repr__() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.__repr__"]], "__rmul__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__rmul__"]], "__setattr__() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__sub__"]], "__truediv__() (fipy.meshes.mesh.mesh method)": [[227, "fipy.meshes.mesh.Mesh.__truediv__"]], "add_note() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.add_note"]], "aspect2d (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.aspect2D"]], "cellcenters (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.cellCenters"]], "cellfaceids (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.cellFaceIDs"]], "facesback (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesBack"]], "facesbottom (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesBottom"]], "facesdown (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesDown"]], "facesfront (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesFront"]], "facesleft (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesLeft"]], "facesright (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesRight"]], "facestop (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesTop"]], "facesup (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.facesUp"]], "fipy.meshes.mesh": [[227, "module-fipy.meshes.mesh"]], "with_traceback() (fipy.meshes.mesh.meshadditionerror method)": [[227, "fipy.meshes.mesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.x"]], "y (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.y"]], "z (fipy.meshes.mesh.mesh property)": [[227, "fipy.meshes.mesh.Mesh.z"]], "mesh1d (class in fipy.meshes.mesh1d)": [[228, "fipy.meshes.mesh1D.Mesh1D"]], "vtkcelldataset (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__add__"]], "__div__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__div__"]], "__getstate__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__getstate__"]], "__mul__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__mul__"]], "__radd__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__radd__"]], "__repr__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__repr__"]], "__rmul__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__rmul__"]], "__sub__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__sub__"]], "__truediv__() (fipy.meshes.mesh1d.mesh1d method)": [[228, "fipy.meshes.mesh1D.Mesh1D.__truediv__"]], "aspect2d (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.aspect2D"]], "cellcenters (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.cellCenters"]], "cellfaceids (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.cellFaceIDs"]], "facesback (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesBack"]], "facesbottom (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesBottom"]], "facesdown (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesDown"]], "facesfront (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesFront"]], "facesleft (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesLeft"]], "facesright (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesRight"]], "facestop (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesTop"]], "facesup (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.facesUp"]], "fipy.meshes.mesh1d": [[228, "module-fipy.meshes.mesh1D"]], "x (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.x"]], "y (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.y"]], "z (fipy.meshes.mesh1d.mesh1d property)": [[228, "fipy.meshes.mesh1D.Mesh1D.z"]], "mesh2d (class in fipy.meshes.mesh2d)": [[229, "fipy.meshes.mesh2D.Mesh2D"]], "vtkcelldataset (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__add__"]], "__div__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__div__"]], "__getstate__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__getstate__"]], "__mul__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__mul__"]], "__radd__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__radd__"]], "__repr__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__repr__"]], "__rmul__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__rmul__"]], "__sub__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__sub__"]], "__truediv__() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.__truediv__"]], "aspect2d (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.aspect2D"]], "cellcenters (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.cellCenters"]], "cellfaceids (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.cellFaceIDs"]], "extrude() (fipy.meshes.mesh2d.mesh2d method)": [[229, "fipy.meshes.mesh2D.Mesh2D.extrude"]], "facesback (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesBack"]], "facesbottom (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesBottom"]], "facesdown (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesDown"]], "facesfront (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesFront"]], "facesleft (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesLeft"]], "facesright (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesRight"]], "facestop (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesTop"]], "facesup (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.facesUp"]], "fipy.meshes.mesh2d": [[229, "module-fipy.meshes.mesh2D"]], "x (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.x"]], "y (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.y"]], "z (fipy.meshes.mesh2d.mesh2d property)": [[229, "fipy.meshes.mesh2D.Mesh2D.z"]], "nonuniformgrid1d (class in fipy.meshes.nonuniformgrid1d)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesUp"]], "fipy.meshes.nonuniformgrid1d": [[230, "module-fipy.meshes.nonUniformGrid1D"]], "x (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.x"]], "y (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.y"]], "z (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[230, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.z"]], "nonuniformgrid2d (class in fipy.meshes.nonuniformgrid2d)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.extrude"]], "facesback (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesUp"]], "fipy.meshes.nonuniformgrid2d": [[231, "module-fipy.meshes.nonUniformGrid2D"]], "x (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.x"]], "y (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.y"]], "z (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[231, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.z"]], "nonuniformgrid3d (class in fipy.meshes.nonuniformgrid3d)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesUp"]], "fipy.meshes.nonuniformgrid3d": [[232, "module-fipy.meshes.nonUniformGrid3D"]], "x (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.x"]], "y (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.y"]], "z (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[232, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.z"]], "periodicgrid1d (class in fipy.meshes.periodicgrid1d)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D"]], "vtkcelldataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__add__"]], "__div__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__div__"]], "__getstate__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__mul__"]], "__radd__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__radd__"]], "__repr__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBack"]], "facesbottom (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBottom"]], "facesdown (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesDown"]], "facesfront (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesFront"]], "facesleft (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesLeft"]], "facesright (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesRight"]], "facestop (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesTop"]], "facesup (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesUp"]], "fipy.meshes.periodicgrid1d": [[233, "module-fipy.meshes.periodicGrid1D"]], "x (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.x"]], "y (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.y"]], "z (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[233, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.z"]], "periodicgrid2d (class in fipy.meshes.periodicgrid2d)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D"]], "periodicgrid2dleftright (class in fipy.meshes.periodicgrid2d)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight"]], "periodicgrid2dtopbottom (class in fipy.meshes.periodicgrid2d)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__add__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__div__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__mul__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__radd__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellFaceIDs"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.extrude"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBack"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBottom"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesDown"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesFront"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesLeft"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesRight"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesTop"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesUp"]], "fipy.meshes.periodicgrid2d": [[234, "module-fipy.meshes.periodicGrid2D"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.x"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.y"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[234, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.z"]], "periodicgrid3d (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D"]], "periodicgrid3dfrontback (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack"]], "periodicgrid3dleftright (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight"]], "periodicgrid3dleftrightfrontback (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack"]], "periodicgrid3dleftrighttopbottom (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom"]], "periodicgrid3dtopbottom (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom"]], "periodicgrid3dtopbottomfrontback (class in fipy.meshes.periodicgrid3d)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__add__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__div__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__mul__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__radd__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBack"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBottom"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesDown"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesFront"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesLeft"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesRight"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesTop"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesUp"]], "fipy.meshes.periodicgrid3d": [[235, "module-fipy.meshes.periodicGrid3D"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.x"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.y"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[235, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.z"]], "fipy.meshes.representations": [[236, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractrepresentation": [[237, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridrepresentation": [[238, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshrepresentation": [[239, "module-fipy.meshes.representations.meshRepresentation"]], "skewedgrid2d (class in fipy.meshes.skewedgrid2d)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D"]], "vtkcelldataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__add__"]], "__div__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__div__"]], "__getstate__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__getstate__"]], "__mul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__mul__"]], "__radd__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__radd__"]], "__repr__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__repr__"]], "__rmul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__rmul__"]], "__sub__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__sub__"]], "__truediv__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__truediv__"]], "aspect2d (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.aspect2D"]], "cellcenters (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.extrude"]], "facesback (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBack"]], "facesbottom (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBottom"]], "facesdown (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesDown"]], "facesfront (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesFront"]], "facesleft (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesLeft"]], "facesright (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesRight"]], "facestop (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesTop"]], "facesup (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesUp"]], "fipy.meshes.skewedgrid2d": [[240, "module-fipy.meshes.skewedGrid2D"]], "physicalshape (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.physicalShape"]], "x (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.x"]], "y (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.y"]], "z (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[240, "fipy.meshes.skewedGrid2D.SkewedGrid2D.z"]], "sphericalnonuniformgrid1d (class in fipy.meshes.sphericalnonuniformgrid1d)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesUp"]], "fipy.meshes.sphericalnonuniformgrid1d": [[241, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "x (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.x"]], "y (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.y"]], "z (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[241, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.z"]], "sphericaluniformgrid1d (class in fipy.meshes.sphericaluniformgrid1d)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesUp"]], "fipy.meshes.sphericaluniformgrid1d": [[242, "module-fipy.meshes.sphericalUniformGrid1D"]], "x (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.x"]], "y (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.y"]], "z (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[242, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.z"]], "fipy.meshes.test": [[243, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[244, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstracttopology": [[245, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridtopology": [[246, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshtopology": [[247, "module-fipy.meshes.topologies.meshTopology"]], "tri2d (class in fipy.meshes.tri2d)": [[248, "fipy.meshes.tri2D.Tri2D"]], "vtkcelldataset (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__add__"]], "__div__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__div__"]], "__getstate__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__getstate__"]], "__mul__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__mul__"]], "__radd__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__radd__"]], "__repr__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__repr__"]], "__rmul__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__rmul__"]], "__sub__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__sub__"]], "__truediv__() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.__truediv__"]], "aspect2d (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.aspect2D"]], "cellcenters (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.cellCenters"]], "cellfaceids (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.cellFaceIDs"]], "extrude() (fipy.meshes.tri2d.tri2d method)": [[248, "fipy.meshes.tri2D.Tri2D.extrude"]], "facesback (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesBack"]], "facesbottom (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesBottom"]], "facesdown (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesDown"]], "facesfront (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesFront"]], "facesleft (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesLeft"]], "facesright (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesRight"]], "facestop (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesTop"]], "facesup (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.facesUp"]], "fipy.meshes.tri2d": [[248, "module-fipy.meshes.tri2D"]], "physicalshape (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.physicalShape"]], "x (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.x"]], "y (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.y"]], "z (fipy.meshes.tri2d.tri2d property)": [[248, "fipy.meshes.tri2D.Tri2D.z"]], "uniformgrid (class in fipy.meshes.uniformgrid)": [[249, "fipy.meshes.uniformGrid.UniformGrid"]], "vtkcelldataset (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__add__"]], "__div__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__div__"]], "__getstate__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__radd__"]], "__repr__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__repr__"]], "__sub__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid.uniformgrid method)": [[249, "fipy.meshes.uniformGrid.UniformGrid.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesBack"]], "facesbottom (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesBottom"]], "facesdown (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesDown"]], "facesfront (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesFront"]], "facesleft (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesLeft"]], "facesright (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesRight"]], "facestop (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesTop"]], "facesup (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.facesUp"]], "fipy.meshes.uniformgrid": [[249, "module-fipy.meshes.uniformGrid"]], "x (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.x"]], "y (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.y"]], "z (fipy.meshes.uniformgrid.uniformgrid property)": [[249, "fipy.meshes.uniformGrid.UniformGrid.z"]], "uniformgrid1d (class in fipy.meshes.uniformgrid1d)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D"]], "vtkcelldataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__add__"]], "__div__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesDown"]], "facesfront (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesFront"]], "facesleft (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesLeft"]], "facesright (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesRight"]], "facestop (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesTop"]], "facesup (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesUp"]], "fipy.meshes.uniformgrid1d": [[250, "module-fipy.meshes.uniformGrid1D"]], "x (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.x"]], "y (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.y"]], "z (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[250, "fipy.meshes.uniformGrid1D.UniformGrid1D.z"]], "uniformgrid2d (class in fipy.meshes.uniformgrid2d)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D"]], "vtkcelldataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__add__"]], "__div__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesDown"]], "facesfront (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesFront"]], "facesleft (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesLeft"]], "facesright (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesRight"]], "facestop (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesTop"]], "facesup (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesUp"]], "fipy.meshes.uniformgrid2d": [[251, "module-fipy.meshes.uniformGrid2D"]], "x (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.x"]], "y (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.y"]], "z (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[251, "fipy.meshes.uniformGrid2D.UniformGrid2D.z"]], "defaultasymmetricsolver (in module fipy.solvers)": [[252, "fipy.solvers.DefaultAsymmetricSolver"]], "defaultsolver (in module fipy.solvers)": [[252, "fipy.solvers.DefaultSolver"]], "dummysolver (in module fipy.solvers)": [[252, "fipy.solvers.DummySolver"]], "generalsolver (in module fipy.solvers)": [[252, "fipy.solvers.GeneralSolver"]], "serialsolvererror": [[252, "fipy.solvers.SerialSolverError"]], "__cause__ (fipy.solvers.serialsolvererror attribute)": [[252, "fipy.solvers.SerialSolverError.__cause__"]], "__context__ (fipy.solvers.serialsolvererror attribute)": [[252, "fipy.solvers.SerialSolverError.__context__"]], "__delattr__() (fipy.solvers.serialsolvererror method)": [[252, "fipy.solvers.SerialSolverError.__delattr__"]], "__getattribute__() (fipy.solvers.serialsolvererror method)": [[252, "fipy.solvers.SerialSolverError.__getattribute__"]], "__reduce__() (fipy.solvers.serialsolvererror method)": [[252, "fipy.solvers.SerialSolverError.__reduce__"]], "__repr__() (fipy.solvers.serialsolvererror method)": [[252, "fipy.solvers.SerialSolverError.__repr__"]], "__setattr__() (fipy.solvers.serialsolvererror method)": [[252, "fipy.solvers.SerialSolverError.__setattr__"]], "__str__() (fipy.solvers.serialsolvererror method)": [[252, "fipy.solvers.SerialSolverError.__str__"]], "add_note() (fipy.solvers.serialsolvererror method)": [[252, "fipy.solvers.SerialSolverError.add_note"]], "fipy.solvers": [[252, "module-fipy.solvers"]], "with_traceback() (fipy.solvers.serialsolvererror method)": [[252, "fipy.solvers.SerialSolverError.with_traceback"]], "absolutetoleranceconvergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.AbsoluteToleranceConvergence"]], "breakdowndivergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.BreakdownDivergence"]], "convergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.Convergence"]], "convergencebase (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.ConvergenceBase"]], "divergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.Divergence"]], "happybreakdownconvergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.HappyBreakdownConvergence"]], "illconditioneddivergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.IllConditionedDivergence"]], "illconditionedpreconditionerdivergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.IllConditionedPreconditionerDivergence"]], "iteratingconvergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.IteratingConvergence"]], "iterationconvergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.IterationConvergence"]], "iterationdivergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.IterationDivergence"]], "lossofaccuracyconvergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.LossOfAccuracyConvergence"]], "nulldivergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.NullDivergence"]], "outofrangedivergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.OutOfRangeDivergence"]], "preconditioningdivergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.PreconditioningDivergence"]], "rhszeroconvergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.RHSZeroConvergence"]], "relativetoleranceconvergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.RelativeToleranceConvergence"]], "stagnateddivergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.StagnatedDivergence"]], "tolerancedivergence (class in fipy.solvers.convergence)": [[253, "fipy.solvers.convergence.ToleranceDivergence"]], "__str__() (fipy.solvers.convergence.absolutetoleranceconvergence method)": [[253, "fipy.solvers.convergence.AbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.convergence.breakdowndivergence method)": [[253, "fipy.solvers.convergence.BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.convergence.convergence method)": [[253, "fipy.solvers.convergence.Convergence.__str__"]], "__str__() (fipy.solvers.convergence.convergencebase method)": [[253, "fipy.solvers.convergence.ConvergenceBase.__str__"]], "__str__() (fipy.solvers.convergence.divergence method)": [[253, "fipy.solvers.convergence.Divergence.__str__"]], "__str__() (fipy.solvers.convergence.happybreakdownconvergence method)": [[253, "fipy.solvers.convergence.HappyBreakdownConvergence.__str__"]], "__str__() (fipy.solvers.convergence.illconditioneddivergence method)": [[253, "fipy.solvers.convergence.IllConditionedDivergence.__str__"]], "__str__() (fipy.solvers.convergence.illconditionedpreconditionerdivergence method)": [[253, "fipy.solvers.convergence.IllConditionedPreconditionerDivergence.__str__"]], "__str__() (fipy.solvers.convergence.iteratingconvergence method)": [[253, "fipy.solvers.convergence.IteratingConvergence.__str__"]], "__str__() (fipy.solvers.convergence.iterationconvergence method)": [[253, "fipy.solvers.convergence.IterationConvergence.__str__"]], "__str__() (fipy.solvers.convergence.iterationdivergence method)": [[253, "fipy.solvers.convergence.IterationDivergence.__str__"]], "__str__() (fipy.solvers.convergence.lossofaccuracyconvergence method)": [[253, "fipy.solvers.convergence.LossOfAccuracyConvergence.__str__"]], "__str__() (fipy.solvers.convergence.nulldivergence method)": [[253, "fipy.solvers.convergence.NullDivergence.__str__"]], "__str__() (fipy.solvers.convergence.outofrangedivergence method)": [[253, "fipy.solvers.convergence.OutOfRangeDivergence.__str__"]], "__str__() (fipy.solvers.convergence.preconditioningdivergence method)": [[253, "fipy.solvers.convergence.PreconditioningDivergence.__str__"]], "__str__() (fipy.solvers.convergence.rhszeroconvergence method)": [[253, "fipy.solvers.convergence.RHSZeroConvergence.__str__"]], "__str__() (fipy.solvers.convergence.relativetoleranceconvergence method)": [[253, "fipy.solvers.convergence.RelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.convergence.stagnateddivergence method)": [[253, "fipy.solvers.convergence.StagnatedDivergence.__str__"]], "__str__() (fipy.solvers.convergence.tolerancedivergence method)": [[253, "fipy.solvers.convergence.ToleranceDivergence.__str__"]], "actual_code (fipy.solvers.convergence.convergencebase attribute)": [[253, "fipy.solvers.convergence.ConvergenceBase.actual_code"]], "criterion (fipy.solvers.convergence.convergencebase attribute)": [[253, "fipy.solvers.convergence.ConvergenceBase.criterion"]], "fipy.solvers.convergence": [[253, "module-fipy.solvers.convergence"]], "iterations (fipy.solvers.convergence.convergencebase attribute)": [[253, "fipy.solvers.convergence.ConvergenceBase.iterations"]], "residual (fipy.solvers.convergence.convergencebase attribute)": [[253, "fipy.solvers.convergence.ConvergenceBase.residual"]], "solver (fipy.solvers.convergence.convergencebase attribute)": [[253, "fipy.solvers.convergence.ConvergenceBase.solver"]], "status_code (fipy.solvers.convergence.convergencebase attribute)": [[253, "fipy.solvers.convergence.ConvergenceBase.status_code"]], "status_name (fipy.solvers.convergence.convergencebase attribute)": [[253, "fipy.solvers.convergence.ConvergenceBase.status_name"]], "tolerance_scale (fipy.solvers.convergence.convergencebase attribute)": [[253, "fipy.solvers.convergence.ConvergenceBase.tolerance_scale"]], "fipy.solvers.petsc": [[254, "module-fipy.solvers.petsc"]], "fipy.solvers.petsc.comms": [[255, "module-fipy.solvers.petsc.comms"]], "parallelpetsccommwrapper (class in fipy.solvers.petsc.comms.parallelpetsccommwrapper)": [[256, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.parallelpetsccommwrapper.parallelpetsccommwrapper method)": [[256, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.parallelpetsccommwrapper.parallelpetsccommwrapper method)": [[256, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.parallelpetsccommwrapper": [[256, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"]], "petsccommwrapper (class in fipy.solvers.petsc.comms.petsccommwrapper)": [[257, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.petsccommwrapper.petsccommwrapper method)": [[257, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.petsccommwrapper.petsccommwrapper method)": [[257, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.petsccommwrapper": [[257, "module-fipy.solvers.petsc.comms.petscCommWrapper"]], "serialpetsccommwrapper (class in fipy.solvers.petsc.comms.serialpetsccommwrapper)": [[258, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.serialpetsccommwrapper.serialpetsccommwrapper method)": [[258, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.serialpetsccommwrapper.serialpetsccommwrapper method)": [[258, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.serialpetsccommwrapper": [[258, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"]], "default_iterations (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[259, "fipy.solvers.petsc.dummySolver.DummySolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[259, "fipy.solvers.petsc.dummySolver.DummySolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[259, "fipy.solvers.petsc.dummySolver.DummySolver.DEFAULT_TOLERANCE"]], "dummysolver (class in fipy.solvers.petsc.dummysolver)": [[259, "fipy.solvers.petsc.dummySolver.DummySolver"]], "legacy_tolerance (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[259, "fipy.solvers.petsc.dummySolver.DummySolver.LEGACY_TOLERANCE"]], "__repr__() (fipy.solvers.petsc.dummysolver.dummysolver method)": [[259, "fipy.solvers.petsc.dummySolver.DummySolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.dummysolver.dummysolver property)": [[259, "fipy.solvers.petsc.dummySolver.DummySolver.default_tolerance"]], "fipy.solvers.petsc.dummysolver": [[259, "module-fipy.solvers.petsc.dummySolver"]], "default_iterations (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[260, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[260, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[260, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[260, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.LEGACY_TOLERANCE"]], "linearbicgsolver (class in fipy.solvers.petsc.linearbicgsolver)": [[260, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver"]], "__repr__() (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver method)": [[260, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver property)": [[260, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.default_tolerance"]], "fipy.solvers.petsc.linearbicgsolver": [[260, "module-fipy.solvers.petsc.linearBicgSolver"]], "default_iterations (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[261, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[261, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[261, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[261, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.petsc.linearcgssolver)": [[261, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.petsc.linearcgssolver.linearcgssolver method)": [[261, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearcgssolver.linearcgssolver property)": [[261, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.petsc.linearcgssolver": [[261, "module-fipy.solvers.petsc.linearCGSSolver"]], "default_iterations (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[262, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[262, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[262, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[262, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.petsc.lineargmressolver)": [[262, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.petsc.lineargmressolver.lineargmressolver method)": [[262, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.lineargmressolver.lineargmressolver property)": [[262, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.petsc.lineargmressolver": [[262, "module-fipy.solvers.petsc.linearGMRESSolver"]], "default_iterations (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[263, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[263, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[263, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[263, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.petsc.linearlusolver)": [[263, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.petsc.linearlusolver.linearlusolver method)": [[263, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearlusolver.linearlusolver property)": [[263, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.petsc.linearlusolver": [[263, "module-fipy.solvers.petsc.linearLUSolver"]], "default_iterations (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver attribute)": [[264, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver attribute)": [[264, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver attribute)": [[264, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver attribute)": [[264, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.petsc.linearpcgsolver)": [[264, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver method)": [[264, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver property)": [[264, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.petsc.linearpcgsolver": [[264, "module-fipy.solvers.petsc.linearPCGSolver"]], "ksp_absolutetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_AbsoluteToleranceConvergence"]], "ksp_breakdownbicgdivergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownBICGDivergence"]], "ksp_breakdowndivergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownDivergence"]], "ksp_happybreakdownconvergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_HappyBreakdownConvergence"]], "ksp_indefinitematrixdivergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_IndefiniteMatrixDivergence"]], "ksp_indefinitepreconditionerdivergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_IndefinitePreconditionerDivergence"]], "ksp_iteratingconvergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_IteratingConvergence"]], "ksp_iterationconvergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_IterationConvergence"]], "ksp_iterationdivergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_IterationDivergence"]], "ksp_nanorinfdivergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_NanOrInfDivergence"]], "ksp_nonsymmetricdivergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_NonSymmetricDivergence"]], "ksp_normalabsolutetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_NormalAbsoluteToleranceConvergence"]], "ksp_normalrelativetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_NormalRelativeToleranceConvergence"]], "ksp_nulldivergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_NullDivergence"]], "ksp_preconditioningdivergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_PreconditioningDivergence"]], "ksp_relativetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_RelativeToleranceConvergence"]], "ksp_tolerancedivergence (class in fipy.solvers.petsc.petscconvergence)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_ToleranceDivergence"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_absolutetoleranceconvergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_AbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_breakdownbicgdivergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownBICGDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_breakdowndivergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_happybreakdownconvergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_HappyBreakdownConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_indefinitematrixdivergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_IndefiniteMatrixDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_indefinitepreconditionerdivergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_IndefinitePreconditionerDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_iteratingconvergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_IteratingConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_iterationconvergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_IterationConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_iterationdivergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_IterationDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_nanorinfdivergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_NanOrInfDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_nonsymmetricdivergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_NonSymmetricDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_normalabsolutetoleranceconvergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_NormalAbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_normalrelativetoleranceconvergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_NormalRelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_nulldivergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_NullDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_preconditioningdivergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_PreconditioningDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_relativetoleranceconvergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_RelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_tolerancedivergence method)": [[265, "fipy.solvers.petsc.petscConvergence.KSP_ToleranceDivergence.__str__"]], "fipy.solvers.petsc.petscconvergence": [[265, "module-fipy.solvers.petsc.petscConvergence"]], "default_iterations (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[266, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[266, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[266, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[266, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.LEGACY_TOLERANCE"]], "petsckrylovsolver (class in fipy.solvers.petsc.petsckrylovsolver)": [[266, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver"]], "__repr__() (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver method)": [[266, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver property)": [[266, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.default_tolerance"]], "fipy.solvers.petsc.petsckrylovsolver": [[266, "module-fipy.solvers.petsc.petscKrylovSolver"]], "default_iterations (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[267, "fipy.solvers.petsc.petscSolver.PETScSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[267, "fipy.solvers.petsc.petscSolver.PETScSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[267, "fipy.solvers.petsc.petscSolver.PETScSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[267, "fipy.solvers.petsc.petscSolver.PETScSolver.LEGACY_TOLERANCE"]], "petscsolver (class in fipy.solvers.petsc.petscsolver)": [[267, "fipy.solvers.petsc.petscSolver.PETScSolver"]], "__repr__() (fipy.solvers.petsc.petscsolver.petscsolver method)": [[267, "fipy.solvers.petsc.petscSolver.PETScSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.petscsolver.petscsolver property)": [[267, "fipy.solvers.petsc.petscSolver.PETScSolver.default_tolerance"]], "fipy.solvers.petsc.petscsolver": [[267, "module-fipy.solvers.petsc.petscSolver"]], "defaultpreconditioner (class in fipy.solvers.petsc.preconditioners)": [[268, "fipy.solvers.petsc.preconditioners.DefaultPreconditioner"]], "icpreconditioner (class in fipy.solvers.petsc.preconditioners)": [[268, "fipy.solvers.petsc.preconditioners.ICPreconditioner"]], "ilupreconditioner (class in fipy.solvers.petsc.preconditioners)": [[268, "fipy.solvers.petsc.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.petsc.preconditioners)": [[268, "fipy.solvers.petsc.preconditioners.JacobiPreconditioner"]], "lupreconditioner (class in fipy.solvers.petsc.preconditioners)": [[268, "fipy.solvers.petsc.preconditioners.LUPreconditioner"]], "ssorpreconditioner (class in fipy.solvers.petsc.preconditioners)": [[268, "fipy.solvers.petsc.preconditioners.SSORPreconditioner"]], "fipy.solvers.petsc.preconditioners": [[268, "module-fipy.solvers.petsc.preconditioners"]], "defaultpreconditioner (class in fipy.solvers.petsc.preconditioners.defaultpreconditioner)": [[269, "fipy.solvers.petsc.preconditioners.defaultPreconditioner.DefaultPreconditioner"]], "fipy.solvers.petsc.preconditioners.defaultpreconditioner": [[269, "module-fipy.solvers.petsc.preconditioners.defaultPreconditioner"]], "icpreconditioner (class in fipy.solvers.petsc.preconditioners.icpreconditioner)": [[270, "fipy.solvers.petsc.preconditioners.icPreconditioner.ICPreconditioner"]], "fipy.solvers.petsc.preconditioners.icpreconditioner": [[270, "module-fipy.solvers.petsc.preconditioners.icPreconditioner"]], "ilupreconditioner (class in fipy.solvers.petsc.preconditioners.ilupreconditioner)": [[271, "fipy.solvers.petsc.preconditioners.iluPreconditioner.ILUPreconditioner"]], "fipy.solvers.petsc.preconditioners.ilupreconditioner": [[271, "module-fipy.solvers.petsc.preconditioners.iluPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.petsc.preconditioners.jacobipreconditioner)": [[272, "fipy.solvers.petsc.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.petsc.preconditioners.jacobipreconditioner": [[272, "module-fipy.solvers.petsc.preconditioners.jacobiPreconditioner"]], "lupreconditioner (class in fipy.solvers.petsc.preconditioners.lupreconditioner)": [[273, "fipy.solvers.petsc.preconditioners.luPreconditioner.LUPreconditioner"]], "fipy.solvers.petsc.preconditioners.lupreconditioner": [[273, "module-fipy.solvers.petsc.preconditioners.luPreconditioner"]], "petscpreconditioner (class in fipy.solvers.petsc.preconditioners.petscpreconditioner)": [[274, "fipy.solvers.petsc.preconditioners.petscPreconditioner.PETScPreconditioner"]], "fipy.solvers.petsc.preconditioners.petscpreconditioner": [[274, "module-fipy.solvers.petsc.preconditioners.petscPreconditioner"]], "ssorpreconditioner (class in fipy.solvers.petsc.preconditioners.ssorpreconditioner)": [[275, "fipy.solvers.petsc.preconditioners.ssorPreconditioner.SSORPreconditioner"]], "fipy.solvers.petsc.preconditioners.ssorpreconditioner": [[275, "module-fipy.solvers.petsc.preconditioners.ssorPreconditioner"]], "matrixmodifyingpreconditioner (class in fipy.solvers.preconditioner)": [[276, "fipy.solvers.preconditioner.MatrixModifyingPreconditioner"]], "preconditioner (class in fipy.solvers.preconditioner)": [[276, "fipy.solvers.preconditioner.Preconditioner"]], "solvermodifyingpreconditioner (class in fipy.solvers.preconditioner)": [[276, "fipy.solvers.preconditioner.SolverModifyingPreconditioner"]], "fipy.solvers.preconditioner": [[276, "module-fipy.solvers.preconditioner"]], "fipy.solvers.pyamg": [[277, "module-fipy.solvers.pyAMG"]], "default_iterations (fipy.solvers.pyamg.linearcgssolver.linearcgssolver attribute)": [[278, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.linearcgssolver.linearcgssolver attribute)": [[278, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.linearcgssolver.linearcgssolver attribute)": [[278, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.linearcgssolver.linearcgssolver attribute)": [[278, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.pyamg.linearcgssolver)": [[278, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.pyamg.linearcgssolver.linearcgssolver method)": [[278, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.linearcgssolver.linearcgssolver property)": [[278, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.pyamg.linearcgssolver": [[278, "module-fipy.solvers.pyAMG.linearCGSSolver"]], "default_iterations (fipy.solvers.pyamg.lineargmressolver.lineargmressolver attribute)": [[279, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.lineargmressolver.lineargmressolver attribute)": [[279, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.lineargmressolver.lineargmressolver attribute)": [[279, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.lineargmressolver.lineargmressolver attribute)": [[279, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.pyamg.lineargmressolver)": [[279, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamg.lineargmressolver.lineargmressolver method)": [[279, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.lineargmressolver.lineargmressolver property)": [[279, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.pyamg.lineargmressolver": [[279, "module-fipy.solvers.pyAMG.linearGMRESSolver"]], "default_iterations (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver attribute)": [[280, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver attribute)": [[280, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver attribute)": [[280, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver attribute)": [[280, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.LEGACY_TOLERANCE"]], "lineargeneralsolver (class in fipy.solvers.pyamg.lineargeneralsolver)": [[280, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver"]], "__repr__() (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver method)": [[280, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver property)": [[280, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.default_tolerance"]], "fipy.solvers.pyamg.lineargeneralsolver": [[280, "module-fipy.solvers.pyAMG.linearGeneralSolver"]], "default_iterations (fipy.solvers.pyamg.linearlusolver.linearlusolver attribute)": [[281, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.linearlusolver.linearlusolver attribute)": [[281, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.linearlusolver.linearlusolver attribute)": [[281, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.linearlusolver.linearlusolver attribute)": [[281, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.pyamg.linearlusolver)": [[281, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamg.linearlusolver.linearlusolver method)": [[281, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.linearlusolver.linearlusolver property)": [[281, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.pyamg.linearlusolver": [[281, "module-fipy.solvers.pyAMG.linearLUSolver"]], "default_iterations (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver attribute)": [[282, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver attribute)": [[282, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver attribute)": [[282, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver attribute)": [[282, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.pyamg.linearpcgsolver)": [[282, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver method)": [[282, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver property)": [[282, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.pyamg.linearpcgsolver": [[282, "module-fipy.solvers.pyAMG.linearPCGSolver"]], "fipy.solvers.pyamg.preconditioners": [[283, "module-fipy.solvers.pyAMG.preconditioners"]], "smoothedaggregationpreconditioner (class in fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner)": [[284, "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.SmoothedAggregationPreconditioner"]], "fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner": [[284, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[285, "module-fipy.solvers.pyamgx"]], "aggregationamgsolver (class in fipy.solvers.pyamgx.aggregationamgsolver)": [[286, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver"]], "default_iterations (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[286, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[286, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[286, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[286, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[286, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.LEGACY_TOLERANCE"]], "__repr__() (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver method)": [[286, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver property)": [[286, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.default_tolerance"]], "fipy.solvers.pyamgx.aggregationamgsolver": [[286, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "classicalamgsolver (class in fipy.solvers.pyamgx.classicalamgsolver)": [[287, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver"]], "default_iterations (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[287, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[287, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[287, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[287, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[287, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.LEGACY_TOLERANCE"]], "__repr__() (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver method)": [[287, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver property)": [[287, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.default_tolerance"]], "fipy.solvers.pyamgx.classicalamgsolver": [[287, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "default_iterations (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[288, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[288, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[288, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[288, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[288, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.LEGACY_TOLERANCE"]], "linearbicgstabsolver (class in fipy.solvers.pyamgx.linearbicgstabsolver)": [[288, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver"]], "__repr__() (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver method)": [[288, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver property)": [[288, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearbicgstabsolver": [[288, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "default_iterations (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.LEGACY_TOLERANCE"]], "linearfgmressolver (class in fipy.solvers.pyamgx.linearfgmressolver)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver method)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver property)": [[289, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearfgmressolver": [[289, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "default_iterations (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.pyamgx.lineargmressolver)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver method)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver property)": [[290, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.pyamgx.lineargmressolver": [[290, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "default_iterations (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.pyamgx.linearlusolver)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamgx.linearlusolver.linearlusolver method)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearlusolver.linearlusolver property)": [[291, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearlusolver": [[291, "module-fipy.solvers.pyamgx.linearLUSolver"]], "default_iterations (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[292, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[292, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[292, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[292, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[292, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.pyamgx.linearpcgsolver)": [[292, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver method)": [[292, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver property)": [[292, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearpcgsolver": [[292, "module-fipy.solvers.pyamgx.linearPCGSolver"]], "amgpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[293, "fipy.solvers.pyamgx.preconditioners.AMGPreconditioner"]], "aggregationamgpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[293, "fipy.solvers.pyamgx.preconditioners.AggregationAMGPreconditioner"]], "bicgstabpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[293, "fipy.solvers.pyamgx.preconditioners.BiCGStabPreconditioner"]], "cgpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[293, "fipy.solvers.pyamgx.preconditioners.CGPreconditioner"]], "dilupreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[293, "fipy.solvers.pyamgx.preconditioners.DILUPreconditioner"]], "fgmrespreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[293, "fipy.solvers.pyamgx.preconditioners.FGMRESPreconditioner"]], "gaussseidelpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[293, "fipy.solvers.pyamgx.preconditioners.GaussSeidelPreconditioner"]], "ilupreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[293, "fipy.solvers.pyamgx.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[293, "fipy.solvers.pyamgx.preconditioners.JacobiPreconditioner"]], "polynomialpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[293, "fipy.solvers.pyamgx.preconditioners.PolynomialPreconditioner"]], "pyamgxpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[293, "fipy.solvers.pyamgx.preconditioners.PyAMGXPreconditioner"]], "fipy.solvers.pyamgx.preconditioners": [[293, "module-fipy.solvers.pyamgx.preconditioners"]], "default_iterations (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[294, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[294, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[294, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[294, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[294, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.LEGACY_TOLERANCE"]], "pyamgxsolver (class in fipy.solvers.pyamgx.pyamgxsolver)": [[294, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver"]], "__repr__() (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver method)": [[294, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver property)": [[294, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.default_tolerance"]], "fipy.solvers.pyamgx.pyamgxsolver": [[294, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "__str__() (fipy.solvers.pyamgx.pyamgxconvergence.pyamgx_breakdowndivergence method)": [[295, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.pyamgx.pyamgxconvergence.pyamgx_convergence method)": [[295, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_Convergence.__str__"]], "__str__() (fipy.solvers.pyamgx.pyamgxconvergence.pyamgx_iterationdivergence method)": [[295, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_IterationDivergence.__str__"]], "fipy.solvers.pyamgx.pyamgxconvergence": [[295, "module-fipy.solvers.pyamgx.pyamgxConvergence"]], "pyamgx_breakdowndivergence (class in fipy.solvers.pyamgx.pyamgxconvergence)": [[295, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_BreakdownDivergence"]], "pyamgx_convergence (class in fipy.solvers.pyamgx.pyamgxconvergence)": [[295, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_Convergence"]], "pyamgx_iterationdivergence (class in fipy.solvers.pyamgx.pyamgxconvergence)": [[295, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_IterationDivergence"]], "smoother (class in fipy.solvers.pyamgx.smoothers)": [[296, "fipy.solvers.pyamgx.smoothers.Smoother"]], "fipy.solvers.pyamgx.smoothers": [[296, "module-fipy.solvers.pyamgx.smoothers"]], "fipy.solvers.pysparse": [[297, "module-fipy.solvers.pysparse"]], "default_iterations (fipy.solvers.pysparse.linearcgssolver.linearcgssolver attribute)": [[298, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearcgssolver.linearcgssolver attribute)": [[298, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearcgssolver.linearcgssolver attribute)": [[298, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearcgssolver.linearcgssolver attribute)": [[298, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.pysparse.linearcgssolver)": [[298, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.pysparse.linearcgssolver.linearcgssolver method)": [[298, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearcgssolver.linearcgssolver property)": [[298, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.pysparse.linearcgssolver": [[298, "module-fipy.solvers.pysparse.linearCGSSolver"]], "default_iterations (fipy.solvers.pysparse.lineargmressolver.lineargmressolver attribute)": [[299, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.lineargmressolver.lineargmressolver attribute)": [[299, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.lineargmressolver.lineargmressolver attribute)": [[299, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.lineargmressolver.lineargmressolver attribute)": [[299, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.pysparse.lineargmressolver)": [[299, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pysparse.lineargmressolver.lineargmressolver method)": [[299, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.lineargmressolver.lineargmressolver property)": [[299, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.pysparse.lineargmressolver": [[299, "module-fipy.solvers.pysparse.linearGMRESSolver"]], "default_iterations (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver attribute)": [[300, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver attribute)": [[300, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver attribute)": [[300, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver attribute)": [[300, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.LEGACY_TOLERANCE"]], "linearinitialsolver (class in fipy.solvers.pysparse.linearinitialsolver)": [[300, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver"]], "__repr__() (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver method)": [[300, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver property)": [[300, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.default_tolerance"]], "fipy.solvers.pysparse.linearinitialsolver": [[300, "module-fipy.solvers.pysparse.linearInitialSolver"]], "default_iterations (fipy.solvers.pysparse.linearjorsolver.linearjorsolver attribute)": [[301, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearjorsolver.linearjorsolver attribute)": [[301, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearjorsolver.linearjorsolver attribute)": [[301, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearjorsolver.linearjorsolver attribute)": [[301, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.LEGACY_TOLERANCE"]], "linearjorsolver (class in fipy.solvers.pysparse.linearjorsolver)": [[301, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver"]], "__repr__() (fipy.solvers.pysparse.linearjorsolver.linearjorsolver method)": [[301, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearjorsolver.linearjorsolver property)": [[301, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.default_tolerance"]], "fipy.solvers.pysparse.linearjorsolver": [[301, "module-fipy.solvers.pysparse.linearJORSolver"]], "default_iterations (fipy.solvers.pysparse.linearlusolver.linearlusolver attribute)": [[302, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearlusolver.linearlusolver attribute)": [[302, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearlusolver.linearlusolver attribute)": [[302, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearlusolver.linearlusolver attribute)": [[302, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.pysparse.linearlusolver)": [[302, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pysparse.linearlusolver.linearlusolver method)": [[302, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearlusolver.linearlusolver property)": [[302, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.pysparse.linearlusolver": [[302, "module-fipy.solvers.pysparse.linearLUSolver"]], "default_iterations (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver attribute)": [[303, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver attribute)": [[303, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver attribute)": [[303, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver attribute)": [[303, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.pysparse.linearpcgsolver)": [[303, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver method)": [[303, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver property)": [[303, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.pysparse.linearpcgsolver": [[303, "module-fipy.solvers.pysparse.linearPCGSolver"]], "default_iterations (fipy.solvers.pysparse.linearrhssolver.linearrhssolver attribute)": [[304, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearrhssolver.linearrhssolver attribute)": [[304, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearrhssolver.linearrhssolver attribute)": [[304, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearrhssolver.linearrhssolver attribute)": [[304, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.LEGACY_TOLERANCE"]], "linearrhssolver (class in fipy.solvers.pysparse.linearrhssolver)": [[304, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver"]], "__repr__() (fipy.solvers.pysparse.linearrhssolver.linearrhssolver method)": [[304, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearrhssolver.linearrhssolver property)": [[304, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.default_tolerance"]], "fipy.solvers.pysparse.linearrhssolver": [[304, "module-fipy.solvers.pysparse.linearRHSSolver"]], "jacobipreconditioner (class in fipy.solvers.pysparse.preconditioners)": [[305, "fipy.solvers.pysparse.preconditioners.JacobiPreconditioner"]], "ssorpreconditioner (class in fipy.solvers.pysparse.preconditioners)": [[305, "fipy.solvers.pysparse.preconditioners.SSORPreconditioner"]], "fipy.solvers.pysparse.preconditioners": [[305, "module-fipy.solvers.pysparse.preconditioners"]], "jacobipreconditioner (class in fipy.solvers.pysparse.preconditioners.jacobipreconditioner)": [[306, "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.jacobipreconditioner": [[306, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"]], "pysparsepreconditioner (class in fipy.solvers.pysparse.preconditioners.pysparsepreconditioner)": [[307, "fipy.solvers.pysparse.preconditioners.pysparsePreconditioner.PysparsePreconditioner"]], "fipy.solvers.pysparse.preconditioners.pysparsepreconditioner": [[307, "module-fipy.solvers.pysparse.preconditioners.pysparsePreconditioner"]], "ssorpreconditioner (class in fipy.solvers.pysparse.preconditioners.ssorpreconditioner)": [[308, "fipy.solvers.pysparse.preconditioners.ssorPreconditioner.SSORPreconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorpreconditioner": [[308, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"]], "pysparse_absolutetoleranceconvergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_AbsoluteToleranceConvergence"]], "pysparse_illconditioneddivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedDivergence"]], "pysparse_illconditionedpreconditionerdivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedPreconditionerDivergence"]], "pysparse_iterationdivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IterationDivergence"]], "pysparse_nonposdefpreconditioningdivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_NonPosDefPreconditioningDivergence"]], "pysparse_outofrangedivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_OutOfRangeDivergence"]], "pysparse_rhszeroconvergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RHSZeroConvergence"]], "pysparse_relativetoleranceconvergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RelativeToleranceConvergence"]], "pysparse_stagnateddivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_StagnatedDivergence"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_absolutetoleranceconvergence method)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_AbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_illconditioneddivergence method)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_illconditionedpreconditionerdivergence method)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedPreconditionerDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_iterationdivergence method)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IterationDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_nonposdefpreconditioningdivergence method)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_NonPosDefPreconditioningDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_outofrangedivergence method)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_OutOfRangeDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_rhszeroconvergence method)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RHSZeroConvergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_relativetoleranceconvergence method)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_stagnateddivergence method)": [[309, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_StagnatedDivergence.__str__"]], "fipy.solvers.pysparse.pysparseconvergence": [[309, "module-fipy.solvers.pysparse.pysparseConvergence"]], "default_iterations (fipy.solvers.pysparse.pysparsesolver.pysparsesolver attribute)": [[310, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.pysparsesolver.pysparsesolver attribute)": [[310, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.pysparsesolver.pysparsesolver attribute)": [[310, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.pysparsesolver.pysparsesolver attribute)": [[310, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.LEGACY_TOLERANCE"]], "pysparsesolver (class in fipy.solvers.pysparse.pysparsesolver)": [[310, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver"]], "__repr__() (fipy.solvers.pysparse.pysparsesolver.pysparsesolver method)": [[310, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.pysparsesolver.pysparsesolver property)": [[310, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.default_tolerance"]], "fipy.solvers.pysparse.pysparsesolver": [[310, "module-fipy.solvers.pysparse.pysparseSolver"]], "fipy.solvers.pysparsematrixsolver": [[311, "module-fipy.solvers.pysparseMatrixSolver"]], "fipy.solvers.scipy": [[312, "module-fipy.solvers.scipy"]], "default_iterations (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[313, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[313, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[313, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[313, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.LEGACY_TOLERANCE"]], "linearbicgstabsolver (class in fipy.solvers.scipy.linearbicgstabsolver)": [[313, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver method)": [[313, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver property)": [[313, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.default_tolerance"]], "fipy.solvers.scipy.linearbicgstabsolver": [[313, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "default_iterations (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[314, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[314, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[314, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[314, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.scipy.linearcgssolver)": [[314, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.scipy.linearcgssolver.linearcgssolver method)": [[314, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearcgssolver.linearcgssolver property)": [[314, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.scipy.linearcgssolver": [[314, "module-fipy.solvers.scipy.linearCGSSolver"]], "default_iterations (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[315, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[315, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[315, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[315, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.scipy.lineargmressolver)": [[315, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.scipy.lineargmressolver.lineargmressolver method)": [[315, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.lineargmressolver.lineargmressolver property)": [[315, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.scipy.lineargmressolver": [[315, "module-fipy.solvers.scipy.linearGMRESSolver"]], "default_iterations (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[316, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[316, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[316, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[316, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.scipy.linearlusolver)": [[316, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.scipy.linearlusolver.linearlusolver method)": [[316, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearlusolver.linearlusolver property)": [[316, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.scipy.linearlusolver": [[316, "module-fipy.solvers.scipy.linearLUSolver"]], "default_iterations (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver attribute)": [[317, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver attribute)": [[317, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver attribute)": [[317, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver attribute)": [[317, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.scipy.linearpcgsolver)": [[317, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver method)": [[317, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver property)": [[317, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.scipy.linearpcgsolver": [[317, "module-fipy.solvers.scipy.linearPCGSolver"]], "ilupreconditioner (class in fipy.solvers.scipy.preconditioners)": [[318, "fipy.solvers.scipy.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.scipy.preconditioners)": [[318, "fipy.solvers.scipy.preconditioners.JacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners": [[318, "module-fipy.solvers.scipy.preconditioners"]], "ilupreconditioner (class in fipy.solvers.scipy.preconditioners.ilupreconditioner)": [[319, "fipy.solvers.scipy.preconditioners.iluPreconditioner.ILUPreconditioner"]], "fipy.solvers.scipy.preconditioners.ilupreconditioner": [[319, "module-fipy.solvers.scipy.preconditioners.iluPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.scipy.preconditioners.jacobipreconditioner)": [[320, "fipy.solvers.scipy.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners.jacobipreconditioner": [[320, "module-fipy.solvers.scipy.preconditioners.jacobiPreconditioner"]], "scipypreconditioner (class in fipy.solvers.scipy.preconditioners.scipypreconditioner)": [[321, "fipy.solvers.scipy.preconditioners.scipyPreconditioner.ScipyPreconditioner"]], "fipy.solvers.scipy.preconditioners.scipypreconditioner": [[321, "module-fipy.solvers.scipy.preconditioners.scipyPreconditioner"]], "scipy_breakdowndivergence (class in fipy.solvers.scipy.scipyconvergence)": [[322, "fipy.solvers.scipy.scipyConvergence.SciPy_BreakdownDivergence"]], "scipy_convergence (class in fipy.solvers.scipy.scipyconvergence)": [[322, "fipy.solvers.scipy.scipyConvergence.SciPy_Convergence"]], "scipy_iterationdivergence (class in fipy.solvers.scipy.scipyconvergence)": [[322, "fipy.solvers.scipy.scipyConvergence.SciPy_IterationDivergence"]], "__str__() (fipy.solvers.scipy.scipyconvergence.scipy_breakdowndivergence method)": [[322, "fipy.solvers.scipy.scipyConvergence.SciPy_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.scipy.scipyconvergence.scipy_convergence method)": [[322, "fipy.solvers.scipy.scipyConvergence.SciPy_Convergence.__str__"]], "__str__() (fipy.solvers.scipy.scipyconvergence.scipy_iterationdivergence method)": [[322, "fipy.solvers.scipy.scipyConvergence.SciPy_IterationDivergence.__str__"]], "fipy.solvers.scipy.scipyconvergence": [[322, "module-fipy.solvers.scipy.scipyConvergence"]], "default_iterations (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[323, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[323, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[323, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[323, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.LEGACY_TOLERANCE"]], "scipykrylovsolver (class in fipy.solvers.scipy.scipykrylovsolver)": [[323, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver"]], "__repr__() (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver method)": [[323, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver property)": [[323, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.default_tolerance"]], "fipy.solvers.scipy.scipykrylovsolver": [[323, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "default_iterations (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[324, "fipy.solvers.scipy.scipySolver.ScipySolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[324, "fipy.solvers.scipy.scipySolver.ScipySolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[324, "fipy.solvers.scipy.scipySolver.ScipySolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[324, "fipy.solvers.scipy.scipySolver.ScipySolver.LEGACY_TOLERANCE"]], "scipysolver (class in fipy.solvers.scipy.scipysolver)": [[324, "fipy.solvers.scipy.scipySolver.ScipySolver"]], "__repr__() (fipy.solvers.scipy.scipysolver.scipysolver method)": [[324, "fipy.solvers.scipy.scipySolver.ScipySolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.scipysolver.scipysolver property)": [[324, "fipy.solvers.scipy.scipySolver.ScipySolver.default_tolerance"]], "fipy.solvers.scipy.scipysolver": [[324, "module-fipy.solvers.scipy.scipySolver"]], "breakdownwarning": [[325, "fipy.solvers.solver.BreakdownWarning"]], "default_iterations (fipy.solvers.solver.solver attribute)": [[325, "fipy.solvers.solver.Solver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.solver.solver attribute)": [[325, "fipy.solvers.solver.Solver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.solver.solver attribute)": [[325, "fipy.solvers.solver.Solver.DEFAULT_TOLERANCE"]], "illconditionedpreconditionerwarning": [[325, "fipy.solvers.solver.IllConditionedPreconditionerWarning"]], "illegalinputorbreakdownwarning": [[325, "fipy.solvers.solver.IllegalInputOrBreakdownWarning"]], "legacy_tolerance (fipy.solvers.solver.solver attribute)": [[325, "fipy.solvers.solver.Solver.LEGACY_TOLERANCE"]], "lossofprecisionwarning": [[325, "fipy.solvers.solver.LossOfPrecisionWarning"]], "matrixillconditionedwarning": [[325, "fipy.solvers.solver.MatrixIllConditionedWarning"]], "maximumiterationwarning": [[325, "fipy.solvers.solver.MaximumIterationWarning"]], "normalconvergence": [[325, "fipy.solvers.solver.NormalConvergence"]], "parameterwarning": [[325, "fipy.solvers.solver.ParameterWarning"]], "preconditionernotpositivedefinitewarning": [[325, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning"]], "preconditionerwarning": [[325, "fipy.solvers.solver.PreconditionerWarning"]], "scalarquantityoutofrangewarning": [[325, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning"]], "solver (class in fipy.solvers.solver)": [[325, "fipy.solvers.solver.Solver"]], "solverconvergencewarning": [[325, "fipy.solvers.solver.SolverConvergenceWarning"]], "stagnatedsolverwarning": [[325, "fipy.solvers.solver.StagnatedSolverWarning"]], "__cause__ (fipy.solvers.solver.breakdownwarning attribute)": [[325, "fipy.solvers.solver.BreakdownWarning.__cause__"]], "__cause__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[325, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.illegalinputorbreakdownwarning attribute)": [[325, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__cause__"]], "__cause__ (fipy.solvers.solver.lossofprecisionwarning attribute)": [[325, "fipy.solvers.solver.LossOfPrecisionWarning.__cause__"]], "__cause__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[325, "fipy.solvers.solver.MatrixIllConditionedWarning.__cause__"]], "__cause__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[325, "fipy.solvers.solver.MaximumIterationWarning.__cause__"]], "__cause__ (fipy.solvers.solver.normalconvergence attribute)": [[325, "fipy.solvers.solver.NormalConvergence.__cause__"]], "__cause__ (fipy.solvers.solver.parameterwarning attribute)": [[325, "fipy.solvers.solver.ParameterWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[325, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionerwarning attribute)": [[325, "fipy.solvers.solver.PreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[325, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__cause__"]], "__cause__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[325, "fipy.solvers.solver.SolverConvergenceWarning.__cause__"]], "__cause__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[325, "fipy.solvers.solver.StagnatedSolverWarning.__cause__"]], "__context__ (fipy.solvers.solver.breakdownwarning attribute)": [[325, "fipy.solvers.solver.BreakdownWarning.__context__"]], "__context__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[325, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.illegalinputorbreakdownwarning attribute)": [[325, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__context__"]], "__context__ (fipy.solvers.solver.lossofprecisionwarning attribute)": [[325, "fipy.solvers.solver.LossOfPrecisionWarning.__context__"]], "__context__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[325, "fipy.solvers.solver.MatrixIllConditionedWarning.__context__"]], "__context__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[325, "fipy.solvers.solver.MaximumIterationWarning.__context__"]], "__context__ (fipy.solvers.solver.normalconvergence attribute)": [[325, "fipy.solvers.solver.NormalConvergence.__context__"]], "__context__ (fipy.solvers.solver.parameterwarning attribute)": [[325, "fipy.solvers.solver.ParameterWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[325, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionerwarning attribute)": [[325, "fipy.solvers.solver.PreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[325, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__context__"]], "__context__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[325, "fipy.solvers.solver.SolverConvergenceWarning.__context__"]], "__context__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[325, "fipy.solvers.solver.StagnatedSolverWarning.__context__"]], "__delattr__() (fipy.solvers.solver.breakdownwarning method)": [[325, "fipy.solvers.solver.BreakdownWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[325, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[325, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.lossofprecisionwarning method)": [[325, "fipy.solvers.solver.LossOfPrecisionWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[325, "fipy.solvers.solver.MatrixIllConditionedWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[325, "fipy.solvers.solver.MaximumIterationWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.normalconvergence method)": [[325, "fipy.solvers.solver.NormalConvergence.__delattr__"]], "__delattr__() (fipy.solvers.solver.parameterwarning method)": [[325, "fipy.solvers.solver.ParameterWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[325, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionerwarning method)": [[325, "fipy.solvers.solver.PreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[325, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[325, "fipy.solvers.solver.SolverConvergenceWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[325, "fipy.solvers.solver.StagnatedSolverWarning.__delattr__"]], "__getattribute__() (fipy.solvers.solver.breakdownwarning method)": [[325, "fipy.solvers.solver.BreakdownWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[325, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[325, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.lossofprecisionwarning method)": [[325, "fipy.solvers.solver.LossOfPrecisionWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[325, "fipy.solvers.solver.MatrixIllConditionedWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.maximumiterationwarning method)": [[325, "fipy.solvers.solver.MaximumIterationWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.normalconvergence method)": [[325, "fipy.solvers.solver.NormalConvergence.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.parameterwarning method)": [[325, "fipy.solvers.solver.ParameterWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[325, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionerwarning method)": [[325, "fipy.solvers.solver.PreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[325, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.solverconvergencewarning method)": [[325, "fipy.solvers.solver.SolverConvergenceWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[325, "fipy.solvers.solver.StagnatedSolverWarning.__getattribute__"]], "__reduce__() (fipy.solvers.solver.breakdownwarning method)": [[325, "fipy.solvers.solver.BreakdownWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[325, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[325, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.lossofprecisionwarning method)": [[325, "fipy.solvers.solver.LossOfPrecisionWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[325, "fipy.solvers.solver.MatrixIllConditionedWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.maximumiterationwarning method)": [[325, "fipy.solvers.solver.MaximumIterationWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.normalconvergence method)": [[325, "fipy.solvers.solver.NormalConvergence.__reduce__"]], "__reduce__() (fipy.solvers.solver.parameterwarning method)": [[325, "fipy.solvers.solver.ParameterWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[325, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionerwarning method)": [[325, "fipy.solvers.solver.PreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[325, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.solverconvergencewarning method)": [[325, "fipy.solvers.solver.SolverConvergenceWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[325, "fipy.solvers.solver.StagnatedSolverWarning.__reduce__"]], "__repr__() (fipy.solvers.solver.breakdownwarning method)": [[325, "fipy.solvers.solver.BreakdownWarning.__repr__"]], "__repr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[325, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[325, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__repr__"]], "__repr__() (fipy.solvers.solver.lossofprecisionwarning method)": [[325, "fipy.solvers.solver.LossOfPrecisionWarning.__repr__"]], "__repr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[325, "fipy.solvers.solver.MatrixIllConditionedWarning.__repr__"]], "__repr__() (fipy.solvers.solver.maximumiterationwarning method)": [[325, "fipy.solvers.solver.MaximumIterationWarning.__repr__"]], "__repr__() (fipy.solvers.solver.normalconvergence method)": [[325, "fipy.solvers.solver.NormalConvergence.__repr__"]], "__repr__() (fipy.solvers.solver.parameterwarning method)": [[325, "fipy.solvers.solver.ParameterWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[325, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionerwarning method)": [[325, "fipy.solvers.solver.PreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[325, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__repr__"]], "__repr__() (fipy.solvers.solver.solver method)": [[325, "fipy.solvers.solver.Solver.__repr__"]], "__repr__() (fipy.solvers.solver.solverconvergencewarning method)": [[325, "fipy.solvers.solver.SolverConvergenceWarning.__repr__"]], "__repr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[325, "fipy.solvers.solver.StagnatedSolverWarning.__repr__"]], "__setattr__() (fipy.solvers.solver.breakdownwarning method)": [[325, "fipy.solvers.solver.BreakdownWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[325, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[325, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.lossofprecisionwarning method)": [[325, "fipy.solvers.solver.LossOfPrecisionWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[325, "fipy.solvers.solver.MatrixIllConditionedWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[325, "fipy.solvers.solver.MaximumIterationWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.normalconvergence method)": [[325, "fipy.solvers.solver.NormalConvergence.__setattr__"]], "__setattr__() (fipy.solvers.solver.parameterwarning method)": [[325, "fipy.solvers.solver.ParameterWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[325, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionerwarning method)": [[325, "fipy.solvers.solver.PreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[325, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[325, "fipy.solvers.solver.SolverConvergenceWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[325, "fipy.solvers.solver.StagnatedSolverWarning.__setattr__"]], "__str__() (fipy.solvers.solver.breakdownwarning method)": [[325, "fipy.solvers.solver.BreakdownWarning.__str__"]], "__str__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[325, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[325, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__str__"]], "__str__() (fipy.solvers.solver.lossofprecisionwarning method)": [[325, "fipy.solvers.solver.LossOfPrecisionWarning.__str__"]], "__str__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[325, "fipy.solvers.solver.MatrixIllConditionedWarning.__str__"]], "__str__() (fipy.solvers.solver.maximumiterationwarning method)": [[325, "fipy.solvers.solver.MaximumIterationWarning.__str__"]], "__str__() (fipy.solvers.solver.normalconvergence method)": [[325, "fipy.solvers.solver.NormalConvergence.__str__"]], "__str__() (fipy.solvers.solver.parameterwarning method)": [[325, "fipy.solvers.solver.ParameterWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[325, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionerwarning method)": [[325, "fipy.solvers.solver.PreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[325, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__str__"]], "__str__() (fipy.solvers.solver.solverconvergencewarning method)": [[325, "fipy.solvers.solver.SolverConvergenceWarning.__str__"]], "__str__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[325, "fipy.solvers.solver.StagnatedSolverWarning.__str__"]], "add_note() (fipy.solvers.solver.breakdownwarning method)": [[325, "fipy.solvers.solver.BreakdownWarning.add_note"]], "add_note() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[325, "fipy.solvers.solver.IllConditionedPreconditionerWarning.add_note"]], "add_note() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[325, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.add_note"]], "add_note() (fipy.solvers.solver.lossofprecisionwarning method)": [[325, "fipy.solvers.solver.LossOfPrecisionWarning.add_note"]], "add_note() (fipy.solvers.solver.matrixillconditionedwarning method)": [[325, "fipy.solvers.solver.MatrixIllConditionedWarning.add_note"]], "add_note() (fipy.solvers.solver.maximumiterationwarning method)": [[325, "fipy.solvers.solver.MaximumIterationWarning.add_note"]], "add_note() (fipy.solvers.solver.normalconvergence method)": [[325, "fipy.solvers.solver.NormalConvergence.add_note"]], "add_note() (fipy.solvers.solver.parameterwarning method)": [[325, "fipy.solvers.solver.ParameterWarning.add_note"]], "add_note() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[325, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.add_note"]], "add_note() (fipy.solvers.solver.preconditionerwarning method)": [[325, "fipy.solvers.solver.PreconditionerWarning.add_note"]], "add_note() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[325, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.add_note"]], "add_note() (fipy.solvers.solver.solverconvergencewarning method)": [[325, "fipy.solvers.solver.SolverConvergenceWarning.add_note"]], "add_note() (fipy.solvers.solver.stagnatedsolverwarning method)": [[325, "fipy.solvers.solver.StagnatedSolverWarning.add_note"]], "default_tolerance (fipy.solvers.solver.solver property)": [[325, "fipy.solvers.solver.Solver.default_tolerance"]], "fipy.solvers.solver": [[325, "module-fipy.solvers.solver"]], "with_traceback() (fipy.solvers.solver.breakdownwarning method)": [[325, "fipy.solvers.solver.BreakdownWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[325, "fipy.solvers.solver.IllConditionedPreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[325, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.lossofprecisionwarning method)": [[325, "fipy.solvers.solver.LossOfPrecisionWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.matrixillconditionedwarning method)": [[325, "fipy.solvers.solver.MatrixIllConditionedWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.maximumiterationwarning method)": [[325, "fipy.solvers.solver.MaximumIterationWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.normalconvergence method)": [[325, "fipy.solvers.solver.NormalConvergence.with_traceback"]], "with_traceback() (fipy.solvers.solver.parameterwarning method)": [[325, "fipy.solvers.solver.ParameterWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[325, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionerwarning method)": [[325, "fipy.solvers.solver.PreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[325, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.solverconvergencewarning method)": [[325, "fipy.solvers.solver.SolverConvergenceWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.stagnatedsolverwarning method)": [[325, "fipy.solvers.solver.StagnatedSolverWarning.with_traceback"]], "fipy.solvers.test": [[326, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[327, "module-fipy.solvers.trilinos"]], "az_breakdowndivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[328, "fipy.solvers.trilinos.aztecConvergence.AZ_BreakdownDivergence"]], "az_illconditioneddivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[328, "fipy.solvers.trilinos.aztecConvergence.AZ_IllConditionedDivergence"]], "az_iterationdivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[328, "fipy.solvers.trilinos.aztecConvergence.AZ_IterationDivergence"]], "az_lossofaccuracyconvergence (class in fipy.solvers.trilinos.aztecconvergence)": [[328, "fipy.solvers.trilinos.aztecConvergence.AZ_LossOfAccuracyConvergence"]], "az_normalconvergence (class in fipy.solvers.trilinos.aztecconvergence)": [[328, "fipy.solvers.trilinos.aztecConvergence.AZ_NormalConvergence"]], "az_parameterdivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[328, "fipy.solvers.trilinos.aztecConvergence.AZ_ParameterDivergence"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_breakdowndivergence method)": [[328, "fipy.solvers.trilinos.aztecConvergence.AZ_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_illconditioneddivergence method)": [[328, "fipy.solvers.trilinos.aztecConvergence.AZ_IllConditionedDivergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_iterationdivergence method)": [[328, "fipy.solvers.trilinos.aztecConvergence.AZ_IterationDivergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_lossofaccuracyconvergence method)": [[328, "fipy.solvers.trilinos.aztecConvergence.AZ_LossOfAccuracyConvergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_normalconvergence method)": [[328, "fipy.solvers.trilinos.aztecConvergence.AZ_NormalConvergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_parameterdivergence method)": [[328, "fipy.solvers.trilinos.aztecConvergence.AZ_ParameterDivergence.__str__"]], "fipy.solvers.trilinos.aztecconvergence": [[328, "module-fipy.solvers.trilinos.aztecConvergence"]], "fipy.solvers.trilinos.comms": [[329, "module-fipy.solvers.trilinos.comms"]], "epetracommwrapper (class in fipy.solvers.trilinos.comms.epetracommwrapper)": [[330, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[330, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[330, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.epetracommwrapper": [[330, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "maxall() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[331, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.MaxAll"]], "minall() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[331, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.MinAll"]], "parallelepetracommwrapper (class in fipy.solvers.trilinos.comms.parallelepetracommwrapper)": [[331, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[331, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[331, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.__repr__"]], "allgather() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[331, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.allgather"]], "fipy.solvers.trilinos.comms.parallelepetracommwrapper": [[331, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"]], "serialepetracommwrapper (class in fipy.solvers.trilinos.comms.serialepetracommwrapper)": [[332, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[332, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[332, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.serialepetracommwrapper": [[332, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "default_iterations (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[333, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[333, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[333, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[333, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.LEGACY_TOLERANCE"]], "linearbicgstabsolver (class in fipy.solvers.trilinos.linearbicgstabsolver)": [[333, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver method)": [[333, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver property)": [[333, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.default_tolerance"]], "fipy.solvers.trilinos.linearbicgstabsolver": [[333, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "default_iterations (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[334, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[334, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[334, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[334, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.trilinos.linearcgssolver)": [[334, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.trilinos.linearcgssolver.linearcgssolver method)": [[334, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearcgssolver.linearcgssolver property)": [[334, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.trilinos.linearcgssolver": [[334, "module-fipy.solvers.trilinos.linearCGSSolver"]], "default_iterations (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[335, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[335, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[335, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[335, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.trilinos.lineargmressolver)": [[335, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.trilinos.lineargmressolver.lineargmressolver method)": [[335, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.lineargmressolver.lineargmressolver property)": [[335, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.trilinos.lineargmressolver": [[335, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "default_iterations (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[336, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[336, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[336, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[336, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.trilinos.linearlusolver)": [[336, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.trilinos.linearlusolver.linearlusolver method)": [[336, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearlusolver.linearlusolver property)": [[336, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.trilinos.linearlusolver": [[336, "module-fipy.solvers.trilinos.linearLUSolver"]], "default_iterations (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver attribute)": [[337, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver attribute)": [[337, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver attribute)": [[337, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver attribute)": [[337, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.trilinos.linearpcgsolver)": [[337, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver method)": [[337, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver property)": [[337, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.trilinos.linearpcgsolver": [[337, "module-fipy.solvers.trilinos.linearPCGSolver"]], "domdecomppreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[338, "fipy.solvers.trilinos.preconditioners.DomDecompPreconditioner"]], "icpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[338, "fipy.solvers.trilinos.preconditioners.ICPreconditioner"]], "ilupreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[338, "fipy.solvers.trilinos.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[338, "fipy.solvers.trilinos.preconditioners.JacobiPreconditioner"]], "multilevelddmlpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[338, "fipy.solvers.trilinos.preconditioners.MultilevelDDMLPreconditioner"]], "multilevelddpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[338, "fipy.solvers.trilinos.preconditioners.MultilevelDDPreconditioner"]], "multilevelnssapreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[338, "fipy.solvers.trilinos.preconditioners.MultilevelNSSAPreconditioner"]], "multilevelsapreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[338, "fipy.solvers.trilinos.preconditioners.MultilevelSAPreconditioner"]], "multilevelsgspreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[338, "fipy.solvers.trilinos.preconditioners.MultilevelSGSPreconditioner"]], "multilevelsolversmootherpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[338, "fipy.solvers.trilinos.preconditioners.MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners": [[338, "module-fipy.solvers.trilinos.preconditioners"]], "domdecomppreconditioner (class in fipy.solvers.trilinos.preconditioners.domdecomppreconditioner)": [[339, "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.domdecomppreconditioner": [[339, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "icpreconditioner (class in fipy.solvers.trilinos.preconditioners.icpreconditioner)": [[340, "fipy.solvers.trilinos.preconditioners.icPreconditioner.ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icpreconditioner": [[340, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "ilupreconditioner (class in fipy.solvers.trilinos.preconditioners.ilupreconditioner)": [[341, "fipy.solvers.trilinos.preconditioners.iluPreconditioner.ILUPreconditioner"]], "fipy.solvers.trilinos.preconditioners.ilupreconditioner": [[341, "module-fipy.solvers.trilinos.preconditioners.iluPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.trilinos.preconditioners.jacobipreconditioner)": [[342, "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobipreconditioner": [[342, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "multilevelddmlpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner)": [[343, "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner": [[343, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "multilevelddpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner)": [[344, "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner": [[344, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "multilevelnssapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner)": [[345, "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner": [[345, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "multilevelpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelpreconditioner)": [[346, "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner.MultilevelPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelpreconditioner": [[346, "module-fipy.solvers.trilinos.preconditioners.multilevelPreconditioner"]], "multilevelsapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner)": [[347, "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner": [[347, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "multilevelsgspreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner)": [[348, "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner": [[348, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "multilevelsolversmootherpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner)": [[349, "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner": [[349, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "trilinospreconditioner (class in fipy.solvers.trilinos.preconditioners.trilinospreconditioner)": [[350, "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner.TrilinosPreconditioner"]], "fipy.solvers.trilinos.preconditioners.trilinospreconditioner": [[350, "module-fipy.solvers.trilinos.preconditioners.trilinosPreconditioner"]], "default_iterations (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[351, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[351, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[351, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[351, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.LEGACY_TOLERANCE"]], "trilinosaztecoosolver (class in fipy.solvers.trilinos.trilinosaztecoosolver)": [[351, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver method)": [[351, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver property)": [[351, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.default_tolerance"]], "fipy.solvers.trilinos.trilinosaztecoosolver": [[351, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "default_iterations (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[352, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[352, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[352, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[352, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.LEGACY_TOLERANCE"]], "trilinosmltest (class in fipy.solvers.trilinos.trilinosmltest)": [[352, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest"]], "__repr__() (fipy.solvers.trilinos.trilinosmltest.trilinosmltest method)": [[352, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinosmltest.trilinosmltest property)": [[352, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.default_tolerance"]], "fipy.solvers.trilinos.trilinosmltest": [[352, "module-fipy.solvers.trilinos.trilinosMLTest"]], "default_iterations (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[353, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[353, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[353, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[353, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.LEGACY_TOLERANCE"]], "trilinosnonlinearsolver (class in fipy.solvers.trilinos.trilinosnonlinearsolver)": [[353, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver method)": [[353, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver property)": [[353, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.default_tolerance"]], "fipy.solvers.trilinos.trilinosnonlinearsolver": [[353, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "default_iterations (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[354, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[354, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[354, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[354, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.LEGACY_TOLERANCE"]], "trilinossolver (class in fipy.solvers.trilinos.trilinossolver)": [[354, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver"]], "__repr__() (fipy.solvers.trilinos.trilinossolver.trilinossolver method)": [[354, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinossolver.trilinossolver property)": [[354, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.default_tolerance"]], "fipy.solvers.trilinos.trilinossolver": [[354, "module-fipy.solvers.trilinos.trilinosSolver"]], "l1error() (in module fipy.steppers)": [[355, "fipy.steppers.L1error"]], "l2error() (in module fipy.steppers)": [[355, "fipy.steppers.L2error"]], "linferror() (in module fipy.steppers)": [[355, "fipy.steppers.LINFerror"]], "error() (in module fipy.steppers)": [[355, "fipy.steppers.error"]], "fipy.steppers": [[355, "module-fipy.steppers"]], "residual() (in module fipy.steppers)": [[355, "fipy.steppers.residual"]], "sweepmonotonic() (in module fipy.steppers)": [[355, "fipy.steppers.sweepMonotonic"]], "pidstepper (class in fipy.steppers.pidstepper)": [[356, "fipy.steppers.pidStepper.PIDStepper"]], "fipy.steppers.pidstepper": [[356, "module-fipy.steppers.pidStepper"]], "pseudorkqsstepper (class in fipy.steppers.pseudorkqsstepper)": [[357, "fipy.steppers.pseudoRKQSStepper.PseudoRKQSStepper"]], "fipy.steppers.pseudorkqsstepper": [[357, "module-fipy.steppers.pseudoRKQSStepper"]], "stepper (class in fipy.steppers.stepper)": [[358, "fipy.steppers.stepper.Stepper"]], "fipy.steppers.stepper": [[358, "module-fipy.steppers.stepper"]], "abstractbaseclasserror": [[359, "fipy.terms.AbstractBaseClassError"]], "explicitvariableerror": [[359, "fipy.terms.ExplicitVariableError"]], "incorrectsolutionvariable": [[359, "fipy.terms.IncorrectSolutionVariable"]], "solutionvariablenumbererror": [[359, "fipy.terms.SolutionVariableNumberError"]], "solutionvariablerequirederror": [[359, "fipy.terms.SolutionVariableRequiredError"]], "termmultiplyerror": [[359, "fipy.terms.TermMultiplyError"]], "transienttermerror": [[359, "fipy.terms.TransientTermError"]], "vectorcoefferror": [[359, "fipy.terms.VectorCoeffError"]], "__cause__ (fipy.terms.abstractbaseclasserror attribute)": [[359, "fipy.terms.AbstractBaseClassError.__cause__"]], "__cause__ (fipy.terms.explicitvariableerror attribute)": [[359, "fipy.terms.ExplicitVariableError.__cause__"]], "__cause__ (fipy.terms.incorrectsolutionvariable attribute)": [[359, "fipy.terms.IncorrectSolutionVariable.__cause__"]], "__cause__ (fipy.terms.solutionvariablenumbererror attribute)": [[359, "fipy.terms.SolutionVariableNumberError.__cause__"]], "__cause__ (fipy.terms.solutionvariablerequirederror attribute)": [[359, "fipy.terms.SolutionVariableRequiredError.__cause__"]], "__cause__ (fipy.terms.termmultiplyerror attribute)": [[359, "fipy.terms.TermMultiplyError.__cause__"]], "__cause__ (fipy.terms.transienttermerror attribute)": [[359, "fipy.terms.TransientTermError.__cause__"]], "__cause__ (fipy.terms.vectorcoefferror attribute)": [[359, "fipy.terms.VectorCoeffError.__cause__"]], "__context__ (fipy.terms.abstractbaseclasserror attribute)": [[359, "fipy.terms.AbstractBaseClassError.__context__"]], "__context__ (fipy.terms.explicitvariableerror attribute)": [[359, "fipy.terms.ExplicitVariableError.__context__"]], "__context__ (fipy.terms.incorrectsolutionvariable attribute)": [[359, "fipy.terms.IncorrectSolutionVariable.__context__"]], "__context__ (fipy.terms.solutionvariablenumbererror attribute)": [[359, "fipy.terms.SolutionVariableNumberError.__context__"]], "__context__ (fipy.terms.solutionvariablerequirederror attribute)": [[359, "fipy.terms.SolutionVariableRequiredError.__context__"]], "__context__ (fipy.terms.termmultiplyerror attribute)": [[359, "fipy.terms.TermMultiplyError.__context__"]], "__context__ (fipy.terms.transienttermerror attribute)": [[359, "fipy.terms.TransientTermError.__context__"]], "__context__ (fipy.terms.vectorcoefferror attribute)": [[359, "fipy.terms.VectorCoeffError.__context__"]], "__delattr__() (fipy.terms.abstractbaseclasserror method)": [[359, "fipy.terms.AbstractBaseClassError.__delattr__"]], "__delattr__() (fipy.terms.explicitvariableerror method)": [[359, "fipy.terms.ExplicitVariableError.__delattr__"]], "__delattr__() (fipy.terms.incorrectsolutionvariable method)": [[359, "fipy.terms.IncorrectSolutionVariable.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablenumbererror method)": [[359, "fipy.terms.SolutionVariableNumberError.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablerequirederror method)": [[359, "fipy.terms.SolutionVariableRequiredError.__delattr__"]], "__delattr__() (fipy.terms.termmultiplyerror method)": [[359, "fipy.terms.TermMultiplyError.__delattr__"]], "__delattr__() (fipy.terms.transienttermerror method)": [[359, "fipy.terms.TransientTermError.__delattr__"]], "__delattr__() (fipy.terms.vectorcoefferror method)": [[359, "fipy.terms.VectorCoeffError.__delattr__"]], "__getattribute__() (fipy.terms.abstractbaseclasserror method)": [[359, "fipy.terms.AbstractBaseClassError.__getattribute__"]], "__getattribute__() (fipy.terms.explicitvariableerror method)": [[359, "fipy.terms.ExplicitVariableError.__getattribute__"]], "__getattribute__() (fipy.terms.incorrectsolutionvariable method)": [[359, "fipy.terms.IncorrectSolutionVariable.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablenumbererror method)": [[359, "fipy.terms.SolutionVariableNumberError.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablerequirederror method)": [[359, "fipy.terms.SolutionVariableRequiredError.__getattribute__"]], "__getattribute__() (fipy.terms.termmultiplyerror method)": [[359, "fipy.terms.TermMultiplyError.__getattribute__"]], "__getattribute__() (fipy.terms.transienttermerror method)": [[359, "fipy.terms.TransientTermError.__getattribute__"]], "__getattribute__() (fipy.terms.vectorcoefferror method)": [[359, "fipy.terms.VectorCoeffError.__getattribute__"]], "__reduce__() (fipy.terms.abstractbaseclasserror method)": [[359, "fipy.terms.AbstractBaseClassError.__reduce__"]], "__reduce__() (fipy.terms.explicitvariableerror method)": [[359, "fipy.terms.ExplicitVariableError.__reduce__"]], "__reduce__() (fipy.terms.incorrectsolutionvariable method)": [[359, "fipy.terms.IncorrectSolutionVariable.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablenumbererror method)": [[359, "fipy.terms.SolutionVariableNumberError.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablerequirederror method)": [[359, "fipy.terms.SolutionVariableRequiredError.__reduce__"]], "__reduce__() (fipy.terms.termmultiplyerror method)": [[359, "fipy.terms.TermMultiplyError.__reduce__"]], "__reduce__() (fipy.terms.transienttermerror method)": [[359, "fipy.terms.TransientTermError.__reduce__"]], "__reduce__() (fipy.terms.vectorcoefferror method)": [[359, "fipy.terms.VectorCoeffError.__reduce__"]], "__repr__() (fipy.terms.abstractbaseclasserror method)": [[359, "fipy.terms.AbstractBaseClassError.__repr__"]], "__repr__() (fipy.terms.explicitvariableerror method)": [[359, "fipy.terms.ExplicitVariableError.__repr__"]], "__repr__() (fipy.terms.incorrectsolutionvariable method)": [[359, "fipy.terms.IncorrectSolutionVariable.__repr__"]], "__repr__() (fipy.terms.solutionvariablenumbererror method)": [[359, "fipy.terms.SolutionVariableNumberError.__repr__"]], "__repr__() (fipy.terms.solutionvariablerequirederror method)": [[359, "fipy.terms.SolutionVariableRequiredError.__repr__"]], "__repr__() (fipy.terms.termmultiplyerror method)": [[359, "fipy.terms.TermMultiplyError.__repr__"]], "__repr__() (fipy.terms.transienttermerror method)": [[359, "fipy.terms.TransientTermError.__repr__"]], "__repr__() (fipy.terms.vectorcoefferror method)": [[359, "fipy.terms.VectorCoeffError.__repr__"]], "__setattr__() (fipy.terms.abstractbaseclasserror method)": [[359, "fipy.terms.AbstractBaseClassError.__setattr__"]], "__setattr__() (fipy.terms.explicitvariableerror method)": [[359, "fipy.terms.ExplicitVariableError.__setattr__"]], "__setattr__() (fipy.terms.incorrectsolutionvariable method)": [[359, "fipy.terms.IncorrectSolutionVariable.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablenumbererror method)": [[359, "fipy.terms.SolutionVariableNumberError.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablerequirederror method)": [[359, "fipy.terms.SolutionVariableRequiredError.__setattr__"]], "__setattr__() (fipy.terms.termmultiplyerror method)": [[359, "fipy.terms.TermMultiplyError.__setattr__"]], "__setattr__() (fipy.terms.transienttermerror method)": [[359, "fipy.terms.TransientTermError.__setattr__"]], "__setattr__() (fipy.terms.vectorcoefferror method)": [[359, "fipy.terms.VectorCoeffError.__setattr__"]], "__str__() (fipy.terms.abstractbaseclasserror method)": [[359, "fipy.terms.AbstractBaseClassError.__str__"]], "__str__() (fipy.terms.explicitvariableerror method)": [[359, "fipy.terms.ExplicitVariableError.__str__"]], "__str__() (fipy.terms.incorrectsolutionvariable method)": [[359, "fipy.terms.IncorrectSolutionVariable.__str__"]], "__str__() (fipy.terms.solutionvariablenumbererror method)": [[359, "fipy.terms.SolutionVariableNumberError.__str__"]], "__str__() (fipy.terms.solutionvariablerequirederror method)": [[359, "fipy.terms.SolutionVariableRequiredError.__str__"]], "__str__() (fipy.terms.termmultiplyerror method)": [[359, "fipy.terms.TermMultiplyError.__str__"]], "__str__() (fipy.terms.transienttermerror method)": [[359, "fipy.terms.TransientTermError.__str__"]], "__str__() (fipy.terms.vectorcoefferror method)": [[359, "fipy.terms.VectorCoeffError.__str__"]], "add_note() (fipy.terms.abstractbaseclasserror method)": [[359, "fipy.terms.AbstractBaseClassError.add_note"]], "add_note() (fipy.terms.explicitvariableerror method)": [[359, "fipy.terms.ExplicitVariableError.add_note"]], "add_note() (fipy.terms.incorrectsolutionvariable method)": [[359, "fipy.terms.IncorrectSolutionVariable.add_note"]], "add_note() (fipy.terms.solutionvariablenumbererror method)": [[359, "fipy.terms.SolutionVariableNumberError.add_note"]], "add_note() (fipy.terms.solutionvariablerequirederror method)": [[359, "fipy.terms.SolutionVariableRequiredError.add_note"]], "add_note() (fipy.terms.termmultiplyerror method)": [[359, "fipy.terms.TermMultiplyError.add_note"]], "add_note() (fipy.terms.transienttermerror method)": [[359, "fipy.terms.TransientTermError.add_note"]], "add_note() (fipy.terms.vectorcoefferror method)": [[359, "fipy.terms.VectorCoeffError.add_note"]], "fipy.terms": [[359, "module-fipy.terms"]], "with_traceback() (fipy.terms.abstractbaseclasserror method)": [[359, "fipy.terms.AbstractBaseClassError.with_traceback"]], "with_traceback() (fipy.terms.explicitvariableerror method)": [[359, "fipy.terms.ExplicitVariableError.with_traceback"]], "with_traceback() (fipy.terms.incorrectsolutionvariable method)": [[359, "fipy.terms.IncorrectSolutionVariable.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablenumbererror method)": [[359, "fipy.terms.SolutionVariableNumberError.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablerequirederror method)": [[359, "fipy.terms.SolutionVariableRequiredError.with_traceback"]], "with_traceback() (fipy.terms.termmultiplyerror method)": [[359, "fipy.terms.TermMultiplyError.with_traceback"]], "with_traceback() (fipy.terms.transienttermerror method)": [[359, "fipy.terms.TransientTermError.with_traceback"]], "with_traceback() (fipy.terms.vectorcoefferror method)": [[359, "fipy.terms.VectorCoeffError.with_traceback"]], "fipy.terms.abstractbinaryterm": [[360, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractconvectionterm": [[361, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractdiffusionterm": [[362, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractupwindconvectionterm": [[363, "module-fipy.terms.abstractUpwindConvectionTerm"]], "advectionterm (class in fipy.terms.advectionterm)": [[364, "fipy.terms.advectionTerm.AdvectionTerm"]], "rhsvector (fipy.terms.advectionterm.advectionterm property)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.__eq__"]], "__hash__() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.__hash__"]], "__mul__() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.__mul__"]], "__neg__() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.__neg__"]], "__repr__() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.cacheRHSvector"]], "fipy.terms.advectionterm": [[364, "module-fipy.terms.advectionTerm"]], "justerrorvector() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.justResidualVector"]], "matrix (fipy.terms.advectionterm.advectionterm property)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.solve"]], "sweep() (fipy.terms.advectionterm.advectionterm method)": [[364, "fipy.terms.advectionTerm.AdvectionTerm.sweep"]], "fipy.terms.asymmetricconvectionterm": [[365, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryterm": [[366, "module-fipy.terms.binaryTerm"]], "cellterm (class in fipy.terms.cellterm)": [[367, "fipy.terms.cellTerm.CellTerm"]], "rhsvector (fipy.terms.cellterm.cellterm property)": [[367, "fipy.terms.cellTerm.CellTerm.RHSvector"]], "__eq__() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.__eq__"]], "__hash__() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.__hash__"]], "__mul__() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.__mul__"]], "__neg__() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.__neg__"]], "__repr__() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.__repr__"]], "__rmul__() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.__rmul__"]], "cachematrix() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.cacheRHSvector"]], "fipy.terms.cellterm": [[367, "module-fipy.terms.cellTerm"]], "justerrorvector() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.justErrorVector"]], "justresidualvector() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.justResidualVector"]], "matrix (fipy.terms.cellterm.cellterm property)": [[367, "fipy.terms.cellTerm.CellTerm.matrix"]], "residualvectorandnorm() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.residualVectorAndNorm"]], "solve() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.solve"]], "sweep() (fipy.terms.cellterm.cellterm method)": [[367, "fipy.terms.cellTerm.CellTerm.sweep"]], "centraldifferenceconvectionterm (class in fipy.terms.centraldiffconvectionterm)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm"]], "rhsvector (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__eq__"]], "__hash__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__hash__"]], "__mul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__mul__"]], "__neg__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__neg__"]], "__repr__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheRHSvector"]], "fipy.terms.centraldiffconvectionterm": [[368, "module-fipy.terms.centralDiffConvectionTerm"]], "justerrorvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justResidualVector"]], "matrix (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.solve"]], "sweep() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[368, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.sweep"]], "fipy.terms.coupledbinaryterm": [[369, "module-fipy.terms.coupledBinaryTerm"]], "diffusionterm (class in fipy.terms.diffusionterm)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm"]], "rhsvector (fipy.terms.diffusionterm.diffusionterm property)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.diffusionterm.diffusionterm method)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm.__eq__"]], "__hash__() (fipy.terms.diffusionterm.diffusionterm method)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm.__hash__"]], "__repr__() (fipy.terms.diffusionterm.diffusionterm method)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.diffusionterm.diffusionterm method)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusionterm.diffusionterm method)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm.cacheRHSvector"]], "fipy.terms.diffusionterm": [[370, "module-fipy.terms.diffusionTerm"]], "justerrorvector() (fipy.terms.diffusionterm.diffusionterm method)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.diffusionterm.diffusionterm method)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm.justResidualVector"]], "matrix (fipy.terms.diffusionterm.diffusionterm property)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.diffusionterm.diffusionterm method)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.diffusionterm.diffusionterm method)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm.solve"]], "sweep() (fipy.terms.diffusionterm.diffusionterm method)": [[370, "fipy.terms.diffusionTerm.DiffusionTerm.sweep"]], "diffusiontermcorrection (class in fipy.terms.diffusiontermcorrection)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection"]], "rhsvector (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermcorrection": [[371, "module-fipy.terms.diffusionTermCorrection"]], "justerrorvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.solve"]], "sweep() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[371, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.sweep"]], "diffusiontermnocorrection (class in fipy.terms.diffusiontermnocorrection)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection"]], "rhsvector (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermnocorrection": [[372, "module-fipy.terms.diffusionTermNoCorrection"]], "justerrorvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.solve"]], "sweep() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[372, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.sweep"]], "explicitdiffusionterm (class in fipy.terms.explicitdiffusionterm)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm"]], "rhsvector (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__eq__"]], "__hash__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__hash__"]], "__repr__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheRHSvector"]], "fipy.terms.explicitdiffusionterm": [[373, "module-fipy.terms.explicitDiffusionTerm"]], "justerrorvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justResidualVector"]], "matrix (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.solve"]], "sweep() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[373, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.sweep"]], "fipy.terms.explicitsourceterm": [[374, "module-fipy.terms.explicitSourceTerm"]], "explicitupwindconvectionterm (class in fipy.terms.explicitupwindconvectionterm)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm"]], "rhsvector (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.explicitupwindconvectionterm": [[375, "module-fipy.terms.explicitUpwindConvectionTerm"]], "justerrorvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.solve"]], "sweep() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[375, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.sweep"]], "exponentialconvectionterm (class in fipy.terms.exponentialconvectionterm)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm"]], "rhsvector (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__eq__"]], "__hash__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__hash__"]], "__mul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__mul__"]], "__neg__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__neg__"]], "__repr__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheRHSvector"]], "fipy.terms.exponentialconvectionterm": [[376, "module-fipy.terms.exponentialConvectionTerm"]], "justerrorvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justResidualVector"]], "matrix (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.solve"]], "sweep() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[376, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.sweep"]], "faceterm (class in fipy.terms.faceterm)": [[377, "fipy.terms.faceTerm.FaceTerm"]], "rhsvector (fipy.terms.faceterm.faceterm property)": [[377, "fipy.terms.faceTerm.FaceTerm.RHSvector"]], "__eq__() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.__eq__"]], "__hash__() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.__hash__"]], "__mul__() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.__mul__"]], "__neg__() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.__neg__"]], "__repr__() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.__repr__"]], "__rmul__() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.__rmul__"]], "cachematrix() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.cacheRHSvector"]], "fipy.terms.faceterm": [[377, "module-fipy.terms.faceTerm"]], "justerrorvector() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.justResidualVector"]], "matrix (fipy.terms.faceterm.faceterm property)": [[377, "fipy.terms.faceTerm.FaceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.solve"]], "sweep() (fipy.terms.faceterm.faceterm method)": [[377, "fipy.terms.faceTerm.FaceTerm.sweep"]], "firstorderadvectionterm (class in fipy.terms.firstorderadvectionterm)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm"]], "rhsvector (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__eq__"]], "__hash__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__hash__"]], "__mul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__mul__"]], "__neg__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__neg__"]], "__repr__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheRHSvector"]], "fipy.terms.firstorderadvectionterm": [[378, "module-fipy.terms.firstOrderAdvectionTerm"]], "justerrorvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justResidualVector"]], "matrix (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.solve"]], "sweep() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[378, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.sweep"]], "hybridconvectionterm (class in fipy.terms.hybridconvectionterm)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm"]], "rhsvector (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__eq__"]], "__hash__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__hash__"]], "__mul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__mul__"]], "__neg__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__neg__"]], "__repr__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheRHSvector"]], "fipy.terms.hybridconvectionterm": [[379, "module-fipy.terms.hybridConvectionTerm"]], "justerrorvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justResidualVector"]], "matrix (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.solve"]], "sweep() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[379, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.sweep"]], "implicitdiffusionterm (in module fipy.terms.implicitdiffusionterm)": [[380, "fipy.terms.implicitDiffusionTerm.ImplicitDiffusionTerm"]], "fipy.terms.implicitdiffusionterm": [[380, "module-fipy.terms.implicitDiffusionTerm"]], "implicitsourceterm (class in fipy.terms.implicitsourceterm)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm"]], "rhsvector (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.RHSvector"]], "__eq__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__eq__"]], "__hash__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__hash__"]], "__mul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__mul__"]], "__neg__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__neg__"]], "__repr__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__repr__"]], "__rmul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__rmul__"]], "cachematrix() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheRHSvector"]], "fipy.terms.implicitsourceterm": [[381, "module-fipy.terms.implicitSourceTerm"]], "justerrorvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justResidualVector"]], "matrix (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.solve"]], "sweep() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[381, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.sweep"]], "fipy.terms.nondiffusionterm": [[382, "module-fipy.terms.nonDiffusionTerm"]], "powerlawconvectionterm (class in fipy.terms.powerlawconvectionterm)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm"]], "rhsvector (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__eq__"]], "__hash__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__hash__"]], "__mul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__mul__"]], "__neg__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__neg__"]], "__repr__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheRHSvector"]], "fipy.terms.powerlawconvectionterm": [[383, "module-fipy.terms.powerLawConvectionTerm"]], "justerrorvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justResidualVector"]], "matrix (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.solve"]], "sweep() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[383, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.sweep"]], "rhsvector (fipy.terms.residualterm.residualterm property)": [[384, "fipy.terms.residualTerm.ResidualTerm.RHSvector"]], "residualterm (class in fipy.terms.residualterm)": [[384, "fipy.terms.residualTerm.ResidualTerm"]], "__eq__() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.__eq__"]], "__hash__() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.__hash__"]], "__mul__() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.__mul__"]], "__neg__() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.__neg__"]], "__repr__() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.__repr__"]], "__rmul__() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.__rmul__"]], "cachematrix() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.cacheRHSvector"]], "fipy.terms.residualterm": [[384, "module-fipy.terms.residualTerm"]], "justerrorvector() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.justErrorVector"]], "justresidualvector() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.justResidualVector"]], "matrix (fipy.terms.residualterm.residualterm property)": [[384, "fipy.terms.residualTerm.ResidualTerm.matrix"]], "residualvectorandnorm() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.residualVectorAndNorm"]], "solve() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.solve"]], "sweep() (fipy.terms.residualterm.residualterm method)": [[384, "fipy.terms.residualTerm.ResidualTerm.sweep"]], "rhsvector (fipy.terms.sourceterm.sourceterm property)": [[385, "fipy.terms.sourceTerm.SourceTerm.RHSvector"]], "sourceterm (class in fipy.terms.sourceterm)": [[385, "fipy.terms.sourceTerm.SourceTerm"]], "__eq__() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.__eq__"]], "__hash__() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.__hash__"]], "__mul__() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.__mul__"]], "__neg__() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.__neg__"]], "__repr__() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.__repr__"]], "__rmul__() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.__rmul__"]], "cachematrix() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.cacheRHSvector"]], "fipy.terms.sourceterm": [[385, "module-fipy.terms.sourceTerm"]], "justerrorvector() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.justResidualVector"]], "matrix (fipy.terms.sourceterm.sourceterm property)": [[385, "fipy.terms.sourceTerm.SourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.solve"]], "sweep() (fipy.terms.sourceterm.sourceterm method)": [[385, "fipy.terms.sourceTerm.SourceTerm.sweep"]], "rhsvector (fipy.terms.term.term property)": [[386, "fipy.terms.term.Term.RHSvector"]], "term (class in fipy.terms.term)": [[386, "fipy.terms.term.Term"]], "__eq__() (fipy.terms.term.term method)": [[386, "fipy.terms.term.Term.__eq__"]], "__hash__() (fipy.terms.term.term method)": [[386, "fipy.terms.term.Term.__hash__"]], "__repr__() (fipy.terms.term.term method)": [[386, "fipy.terms.term.Term.__repr__"]], "cachematrix() (fipy.terms.term.term method)": [[386, "fipy.terms.term.Term.cacheMatrix"]], "cacherhsvector() (fipy.terms.term.term method)": [[386, "fipy.terms.term.Term.cacheRHSvector"]], "fipy.terms.term": [[386, "module-fipy.terms.term"]], "justerrorvector() (fipy.terms.term.term method)": [[386, "fipy.terms.term.Term.justErrorVector"]], "justresidualvector() (fipy.terms.term.term method)": [[386, "fipy.terms.term.Term.justResidualVector"]], "matrix (fipy.terms.term.term property)": [[386, "fipy.terms.term.Term.matrix"]], "residualvectorandnorm() (fipy.terms.term.term method)": [[386, "fipy.terms.term.Term.residualVectorAndNorm"]], "solve() (fipy.terms.term.term method)": [[386, "fipy.terms.term.Term.solve"]], "sweep() (fipy.terms.term.term method)": [[386, "fipy.terms.term.Term.sweep"]], "fipy.terms.test": [[387, "module-fipy.terms.test"]], "rhsvector (fipy.terms.transientterm.transientterm property)": [[388, "fipy.terms.transientTerm.TransientTerm.RHSvector"]], "transientterm (class in fipy.terms.transientterm)": [[388, "fipy.terms.transientTerm.TransientTerm"]], "__eq__() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.__eq__"]], "__hash__() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.__hash__"]], "__mul__() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.__mul__"]], "__neg__() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.__neg__"]], "__repr__() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.__repr__"]], "__rmul__() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.__rmul__"]], "cachematrix() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.cacheRHSvector"]], "fipy.terms.transientterm": [[388, "module-fipy.terms.transientTerm"]], "justerrorvector() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.justErrorVector"]], "justresidualvector() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.justResidualVector"]], "matrix (fipy.terms.transientterm.transientterm property)": [[388, "fipy.terms.transientTerm.TransientTerm.matrix"]], "residualvectorandnorm() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.residualVectorAndNorm"]], "solve() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.solve"]], "sweep() (fipy.terms.transientterm.transientterm method)": [[388, "fipy.terms.transientTerm.TransientTerm.sweep"]], "fipy.terms.unaryterm": [[389, "module-fipy.terms.unaryTerm"]], "rhsvector (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.RHSvector"]], "upwindconvectionterm (class in fipy.terms.upwindconvectionterm)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm"]], "__eq__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.upwindconvectionterm": [[390, "module-fipy.terms.upwindConvectionTerm"]], "justerrorvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.solve"]], "sweep() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[390, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.sweep"]], "rhsvector (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.RHSvector"]], "vanleerconvectionterm (class in fipy.terms.vanleerconvectionterm)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm"]], "__eq__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__eq__"]], "__hash__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__hash__"]], "__mul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__mul__"]], "__neg__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__neg__"]], "__repr__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheRHSvector"]], "fipy.terms.vanleerconvectionterm": [[391, "module-fipy.terms.vanLeerConvectionTerm"]], "justerrorvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justResidualVector"]], "matrix (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.solve"]], "sweep() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[391, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.sweep"]], "fipy.testfipy": [[392, "module-fipy.testFiPy"]], "fipy.tests": [[393, "module-fipy.tests"]], "execbutnotest() (in module fipy.tests.doctestplus)": [[394, "fipy.tests.doctestPlus.execButNoTest"]], "fipy.tests.doctestplus": [[394, "module-fipy.tests.doctestPlus"]], "register_skipper() (in module fipy.tests.doctestplus)": [[394, "fipy.tests.doctestPlus.register_skipper"]], "report_skips() (in module fipy.tests.doctestplus)": [[394, "fipy.tests.doctestPlus.report_skips"]], "testmod() (in module fipy.tests.doctestplus)": [[394, "fipy.tests.doctestPlus.testmod"]], "fipy.tests.lateimporttest": [[395, "module-fipy.tests.lateImportTest"]], "deprecationerroringtestprogram (class in fipy.tests.test)": [[396, "fipy.tests.test.DeprecationErroringTestProgram"]], "finalize_options() (fipy.tests.test.test method)": [[396, "fipy.tests.test.test.finalize_options"]], "fipy.tests.test": [[396, "module-fipy.tests.test"]], "initialize_options() (fipy.tests.test.test method)": [[396, "fipy.tests.test.test.initialize_options"]], "test (class in fipy.tests.test)": [[396, "fipy.tests.test.test"]], "testprogram (class in fipy.tests.testprogram)": [[397, "fipy.tests.testProgram.TestProgram"]], "fipy.tests.testprogram": [[397, "module-fipy.tests.testProgram"]], "main (in module fipy.tests.testprogram)": [[397, "fipy.tests.testProgram.main"]], "physicalfield (class in fipy.tools)": [[398, "fipy.tools.PhysicalField"]], "sharedtemporaryfile() (in module fipy.tools)": [[398, "fipy.tools.SharedTemporaryFile"]], "__abs__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__abs__"]], "__add__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__add__"]], "__array__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__bool__"]], "__div__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__div__"]], "__eq__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__eq__"]], "__float__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__float__"]], "__ge__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__ge__"]], "__getitem__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__gt__"]], "__hash__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__hash__"]], "__le__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__le__"]], "__lt__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__lt__"]], "__mod__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__mod__"]], "__mul__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__mul__"]], "__ne__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__ne__"]], "__neg__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__pow__"]], "__radd__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__radd__"]], "__repr__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__repr__"]], "__rmul__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__rmul__"]], "__setitem__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__setitem__"]], "__str__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__str__"]], "__sub__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.__truediv__"]], "add() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.add"]], "allclose() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.allclose"]], "allequal() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.allequal"]], "arccos() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.arccos"]], "arccosh() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.arccosh"]], "arcsin() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.arcsin"]], "arctan() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.arctan"]], "arctan2() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.arctan2"]], "arctanh() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.arctanh"]], "ceil() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.ceil"]], "conjugate() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.conjugate"]], "converttounit() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.convertToUnit"]], "copy() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.copy"]], "cos() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.cos"]], "cosh() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.cosh"]], "divide() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.divide"]], "dot() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.dot"]], "fipy.tools": [[398, "module-fipy.tools"]], "floor() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.floor"]], "getsctype() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.getsctype"]], "inbaseunits() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.inRadians"]], "insiunits() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.inUnitsOf"]], "itemset() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.itemset"]], "log() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.log"]], "log10() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.log10"]], "multiply() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.multiply"]], "numericvalue (fipy.tools.physicalfield property)": [[398, "fipy.tools.PhysicalField.numericValue"]], "parallelcomm (in module fipy.tools)": [[398, "fipy.tools.parallelComm"]], "put() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.put"]], "reshape() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.reshape"]], "serialcomm (in module fipy.tools)": [[398, "fipy.tools.serialComm"]], "shape (fipy.tools.physicalfield property)": [[398, "fipy.tools.PhysicalField.shape"]], "sign() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.sign"]], "sin() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.sin"]], "sinh() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.sinh"]], "sqrt() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.sqrt"]], "subtract() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.subtract"]], "sum() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.sum"]], "take() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.take"]], "tan() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.tan"]], "tanh() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.tanh"]], "tostring() (fipy.tools.physicalfield method)": [[398, "fipy.tools.PhysicalField.tostring"]], "unit (fipy.tools.physicalfield property)": [[398, "fipy.tools.PhysicalField.unit"]], "fipy.tools.comms": [[399, "module-fipy.tools.comms"]], "commwrapper (class in fipy.tools.comms.commwrapper)": [[400, "fipy.tools.comms.commWrapper.CommWrapper"]], "__getstate__() (fipy.tools.comms.commwrapper.commwrapper method)": [[400, "fipy.tools.comms.commWrapper.CommWrapper.__getstate__"]], "__repr__() (fipy.tools.comms.commwrapper.commwrapper method)": [[400, "fipy.tools.comms.commWrapper.CommWrapper.__repr__"]], "fipy.tools.comms.commwrapper": [[400, "module-fipy.tools.comms.commWrapper"]], "dummycomm (class in fipy.tools.comms.dummycomm)": [[401, "fipy.tools.comms.dummyComm.DummyComm"]], "__getstate__() (fipy.tools.comms.dummycomm.dummycomm method)": [[401, "fipy.tools.comms.dummyComm.DummyComm.__getstate__"]], "__repr__() (fipy.tools.comms.dummycomm.dummycomm method)": [[401, "fipy.tools.comms.dummyComm.DummyComm.__repr__"]], "fipy.tools.comms.dummycomm": [[401, "module-fipy.tools.comms.dummyComm"]], "print() (in module fipy.tools.debug)": [[402, "fipy.tools.debug.PRINT"]], "fipy.tools.debug": [[402, "module-fipy.tools.debug"]], "deprecate() (in module fipy.tools.decorators)": [[403, "fipy.tools.decorators.deprecate"]], "fipy.tools.decorators": [[403, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[404, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.dictwithdefault": [[405, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.numberdict": [[406, "module-fipy.tools.dimensions.NumberDict"]], "physicalfield (class in fipy.tools.dimensions.physicalfield)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField"]], "physicalunit (class in fipy.tools.dimensions.physicalfield)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit"]], "__abs__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__abs__"]], "__add__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__add__"]], "__array__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__bool__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__div__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__div__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__eq__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__eq__"]], "__float__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__float__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__ge__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ge__"]], "__getitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__gt__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__gt__"]], "__hash__ (fipy.tools.dimensions.physicalfield.physicalunit attribute)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__hash__"]], "__hash__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__hash__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__le__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__le__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__lt__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__lt__"]], "__mod__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__mod__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__mul__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__mul__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__ne__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ne__"]], "__neg__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__pow__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__pow__"]], "__radd__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__radd__"]], "__rdiv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rdiv__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__repr__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__repr__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__rmul__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rmul__"]], "__rtruediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rtruediv__"]], "__setitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__setitem__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__str__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__str__"]], "__sub__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.__truediv__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.__truediv__"]], "add() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.add"]], "allclose() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.allclose"]], "allequal() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.allequal"]], "arccos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.arccos"]], "arccosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.arccosh"]], "arcsin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.arcsin"]], "arctan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.arctan"]], "arctan2() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.arctan2"]], "arctanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.arctanh"]], "ceil() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.ceil"]], "conjugate() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.conjugate"]], "conversionfactorto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionFactorTo"]], "conversiontupleto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionTupleTo"]], "converttounit() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.convertToUnit"]], "copy() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.copy"]], "cos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.cos"]], "cosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.cosh"]], "divide() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.divide"]], "dot() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.dot"]], "fipy.tools.dimensions.physicalfield": [[407, "module-fipy.tools.dimensions.physicalField"]], "floor() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.floor"]], "getsctype() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.getsctype"]], "inbaseunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.inRadians"]], "insiunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.inUnitsOf"]], "isangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.isAngle"]], "iscompatible() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.isCompatible"]], "isdimensionless() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionless"]], "isdimensionlessorangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionlessOrAngle"]], "isinverseangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.isInverseAngle"]], "itemset() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.itemset"]], "log() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.log"]], "log10() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.log10"]], "multiply() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.multiply"]], "name() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.name"]], "numericvalue (fipy.tools.dimensions.physicalfield.physicalfield property)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.numericValue"]], "put() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.put"]], "reshape() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.reshape"]], "setname() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalUnit.setName"]], "shape (fipy.tools.dimensions.physicalfield.physicalfield property)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.shape"]], "sign() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.sign"]], "sin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.sin"]], "sinh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.sinh"]], "sqrt() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.sqrt"]], "subtract() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.subtract"]], "sum() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.sum"]], "take() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.take"]], "tan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.tan"]], "tanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.tanh"]], "tostring() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.tostring"]], "unit (fipy.tools.dimensions.physicalfield.physicalfield property)": [[407, "fipy.tools.dimensions.physicalField.PhysicalField.unit"]], "read() (in module fipy.tools.dump)": [[408, "fipy.tools.dump.read"]], "write() (in module fipy.tools.dump)": [[408, "fipy.tools.dump.write"]], "fipy.tools.inline": [[409, "module-fipy.tools.inline"]], "fipy.tools.logging": [[410, "module-fipy.tools.logging"]], "conda_info() (in module fipy.tools.logging.environment)": [[411, "fipy.tools.logging.environment.conda_info"]], "fipy.tools.logging.environment": [[411, "module-fipy.tools.logging.environment"]], "package_info() (in module fipy.tools.logging.environment)": [[411, "fipy.tools.logging.environment.package_info"]], "platform_info() (in module fipy.tools.logging.environment)": [[411, "fipy.tools.logging.environment.platform_info"]], "l1norm() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.L1norm"]], "l2norm() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.L2norm"]], "linfnorm() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.LINFnorm"]], "all() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.all"]], "allclose() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.allclose"]], "allequal() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.allequal"]], "dot() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.dot"]], "fipy.tools.numerix": [[412, "module-fipy.tools.numerix"]], "getshape() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.getShape"]], "getunit() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.getUnit"]], "isclose() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.isclose"]], "nearest() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.nearest"]], "put() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.put"]], "rank() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.rank"]], "reshape() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.reshape"]], "sqrtdot() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.sqrtDot"]], "sum() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.sum"]], "take() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.take"]], "tostring() (in module fipy.tools.numerix)": [[412, "fipy.tools.numerix.tostring"]], "parse() (in module fipy.tools.parser)": [[413, "fipy.tools.parser.parse"]], "sharedtemporaryfile() (in module fipy.tools.sharedtempfile)": [[414, "fipy.tools.sharedtempfile.SharedTemporaryFile"]], "fipy.tools.sharedtempfile": [[414, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[415, "module-fipy.tools.test"]], "fipy.tools.vector": [[416, "module-fipy.tools.vector"]], "prune() (in module fipy.tools.vector)": [[416, "fipy.tools.vector.prune"]], "putadd() (in module fipy.tools.vector)": [[416, "fipy.tools.vector.putAdd"]], "fipy.tools.version": [[417, "module-fipy.tools.version"]], "fipy.variables": [[418, "module-fipy.variables"]], "fipy.variables.addoverfacesvariable": [[419, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticcelltofacevariable": [[420, "module-fipy.variables.arithmeticCellToFaceVariable"]], "betanoisevariable (class in fipy.variables.betanoisevariable)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable"]], "__abs__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__abs__"]], "__and__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__and__"]], "__array__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__bool__"]], "__call__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__call__"]], "__eq__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__invert__"]], "__le__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__le__"]], "__lt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ne__"]], "__new__() (fipy.variables.betanoisevariable.betanoisevariable static method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__or__"]], "__pow__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__str__"]], "all() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.all"]], "allclose() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.allclose"]], "any() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constrain"]], "constraintmask (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constraintMask"]], "copy() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.copy"]], "dot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.dot"]], "facegrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceValue"]], "fipy.variables.betanoisevariable": [[421, "module-fipy.variables.betaNoiseVariable"]], "gaussgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.getsctype"]], "globalvalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.globalValue"]], "grad (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.mag"]], "max() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.max"]], "min() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.old"]], "rdot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.rdot"]], "release() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.release"]], "scramble() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.scramble"]], "setvalue() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.setValue"]], "shape (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.shape"]], "std() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.std"]], "unit (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.unit"]], "updateold() (fipy.variables.betanoisevariable.betanoisevariable method)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.updateOld"]], "value (fipy.variables.betanoisevariable.betanoisevariable property)": [[421, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.value"]], "fipy.variables.binaryoperatorvariable": [[422, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.celltofacevariable": [[423, "module-fipy.variables.cellToFaceVariable"]], "cellvariable (class in fipy.variables.cellvariable)": [[424, "fipy.variables.cellVariable.CellVariable"]], "__abs__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__abs__"]], "__and__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__and__"]], "__array__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__array__"]], "__array_wrap__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__array_wrap__"]], "__bool__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__bool__"]], "__call__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__call__"]], "__eq__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__eq__"]], "__ge__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__ge__"]], "__getitem__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__getitem__"]], "__getstate__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__getstate__"]], "__gt__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__gt__"]], "__hash__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__hash__"]], "__invert__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__invert__"]], "__le__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__le__"]], "__lt__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__lt__"]], "__ne__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__ne__"]], "__new__() (fipy.variables.cellvariable.cellvariable static method)": [[424, "fipy.variables.cellVariable.CellVariable.__new__"]], "__nonzero__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__nonzero__"]], "__or__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__or__"]], "__pow__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__pow__"]], "__repr__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__repr__"]], "__setstate__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__setstate__"]], "__str__() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.__str__"]], "all() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.all"]], "allclose() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.allclose"]], "any() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.any"]], "arithmeticfacevalue (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.cellVolumeAverage"]], "constrain() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.constrain"]], "constraintmask (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.constraintMask"]], "copy() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.copy"]], "dot() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.dot"]], "facegrad (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.faceGrad"]], "facegradaverage (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.faceGradAverage"]], "facevalue (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.faceValue"]], "fipy.variables.cellvariable": [[424, "module-fipy.variables.cellVariable"]], "gaussgrad (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.gaussGrad"]], "getsctype() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.getsctype"]], "globalvalue (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.globalValue"]], "grad (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.grad"]], "harmonicfacevalue (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.inBaseUnits"]], "inunitsof() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.leastSquaresGrad"]], "mag (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.mag"]], "max() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.max"]], "min() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.min"]], "minmodfacevalue (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.minmodFaceValue"]], "old (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.old"]], "rdot() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.rdot"]], "release() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.release"]], "setvalue() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.setValue"]], "shape (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.shape"]], "std() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.std"]], "unit (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.unit"]], "updateold() (fipy.variables.cellvariable.cellvariable method)": [[424, "fipy.variables.cellVariable.CellVariable.updateOld"]], "value (fipy.variables.cellvariable.cellvariable property)": [[424, "fipy.variables.cellVariable.CellVariable.value"]], "fipy.variables.constant": [[425, "module-fipy.variables.constant"]], "fipy.variables.constraintmask": [[426, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledcellvariable": [[427, "module-fipy.variables.coupledCellVariable"]], "distancevariable (class in fipy.variables.distancevariable)": [[428, "fipy.variables.distanceVariable.DistanceVariable"]], "__abs__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__abs__"]], "__and__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__and__"]], "__array__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__array__"]], "__array_wrap__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__array_wrap__"]], "__bool__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__bool__"]], "__call__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__call__"]], "__eq__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__eq__"]], "__ge__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__ge__"]], "__getitem__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__getitem__"]], "__getstate__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__getstate__"]], "__gt__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__gt__"]], "__hash__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__hash__"]], "__invert__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__invert__"]], "__le__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__le__"]], "__lt__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__lt__"]], "__ne__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__ne__"]], "__new__() (fipy.variables.distancevariable.distancevariable static method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__new__"]], "__nonzero__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__nonzero__"]], "__or__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__or__"]], "__pow__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__pow__"]], "__repr__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__repr__"]], "__setstate__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__setstate__"]], "__str__() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.__str__"]], "all() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.all"]], "allclose() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.allclose"]], "any() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.any"]], "arithmeticfacevalue (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.arithmeticFaceValue"]], "calcdistancefunction() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.calcDistanceFunction"]], "cellinterfaceareas (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.cellInterfaceAreas"]], "cellvolumeaverage (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.cellVolumeAverage"]], "constrain() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.constrain"]], "constraintmask (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.constraintMask"]], "copy() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.copy"]], "dot() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.dot"]], "extendvariable() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.extendVariable"]], "facegrad (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.faceGrad"]], "facegradaverage (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.faceGradAverage"]], "facevalue (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.faceValue"]], "fipy.variables.distancevariable": [[428, "module-fipy.variables.distanceVariable"]], "gaussgrad (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.gaussGrad"]], "getsctype() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.getsctype"]], "globalvalue (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.globalValue"]], "grad (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.grad"]], "harmonicfacevalue (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.leastSquaresGrad"]], "mag (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.mag"]], "max() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.max"]], "min() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.min"]], "minmodfacevalue (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.minmodFaceValue"]], "old (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.old"]], "rdot() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.rdot"]], "release() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.release"]], "setvalue() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.setValue"]], "shape (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.shape"]], "std() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.std"]], "unit (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.unit"]], "updateold() (fipy.variables.distancevariable.distancevariable method)": [[428, "fipy.variables.distanceVariable.DistanceVariable.updateOld"]], "value (fipy.variables.distancevariable.distancevariable property)": [[428, "fipy.variables.distanceVariable.DistanceVariable.value"]], "exponentialnoisevariable (class in fipy.variables.exponentialnoisevariable)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable"]], "__abs__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__abs__"]], "__and__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__and__"]], "__array__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__bool__"]], "__call__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__call__"]], "__eq__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__eq__"]], "__ge__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__gt__"]], "__hash__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__hash__"]], "__invert__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__invert__"]], "__le__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__le__"]], "__lt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__lt__"]], "__ne__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ne__"]], "__new__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable static method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__or__"]], "__pow__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__pow__"]], "__repr__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__setstate__"]], "__str__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__str__"]], "all() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.all"]], "allclose() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.allclose"]], "any() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constrain"]], "constraintmask (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constraintMask"]], "copy() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.copy"]], "dot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.dot"]], "facegrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceValue"]], "fipy.variables.exponentialnoisevariable": [[429, "module-fipy.variables.exponentialNoiseVariable"]], "gaussgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.getsctype"]], "globalvalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.globalValue"]], "grad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.mag"]], "max() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.max"]], "min() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.min"]], "minmodfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.minmodFaceValue"]], "old (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.old"]], "rdot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.rdot"]], "release() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.release"]], "scramble() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.scramble"]], "setvalue() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.setValue"]], "shape (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.shape"]], "std() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.std"]], "unit (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.unit"]], "updateold() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.updateOld"]], "value (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[429, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.value"]], "fipy.variables.facegradcontributionsvariable": [[430, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.facegradvariable": [[431, "module-fipy.variables.faceGradVariable"]], "facevariable (class in fipy.variables.facevariable)": [[432, "fipy.variables.faceVariable.FaceVariable"]], "__abs__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__abs__"]], "__and__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__and__"]], "__array__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__array__"]], "__array_wrap__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__bool__"]], "__call__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__call__"]], "__eq__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__eq__"]], "__ge__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__ge__"]], "__getitem__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__getitem__"]], "__getstate__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__getstate__"]], "__gt__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__gt__"]], "__hash__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__hash__"]], "__invert__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__invert__"]], "__le__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__le__"]], "__lt__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__lt__"]], "__ne__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__ne__"]], "__new__() (fipy.variables.facevariable.facevariable static method)": [[432, "fipy.variables.faceVariable.FaceVariable.__new__"]], "__nonzero__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__nonzero__"]], "__or__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__or__"]], "__pow__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__pow__"]], "__repr__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__repr__"]], "__setstate__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__setstate__"]], "__str__() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.__str__"]], "all() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.all"]], "allclose() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.allclose"]], "any() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.any"]], "constrain() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.constrain"]], "constraintmask (fipy.variables.facevariable.facevariable property)": [[432, "fipy.variables.faceVariable.FaceVariable.constraintMask"]], "copy() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.copy"]], "divergence (fipy.variables.facevariable.facevariable property)": [[432, "fipy.variables.faceVariable.FaceVariable.divergence"]], "dot() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.dot"]], "fipy.variables.facevariable": [[432, "module-fipy.variables.faceVariable"]], "getsctype() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.getsctype"]], "inbaseunits() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.inUnitsOf"]], "mag (fipy.variables.facevariable.facevariable property)": [[432, "fipy.variables.faceVariable.FaceVariable.mag"]], "max() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.max"]], "min() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.min"]], "rdot() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.rdot"]], "release() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.release"]], "setvalue() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.setValue"]], "shape (fipy.variables.facevariable.facevariable property)": [[432, "fipy.variables.faceVariable.FaceVariable.shape"]], "std() (fipy.variables.facevariable.facevariable method)": [[432, "fipy.variables.faceVariable.FaceVariable.std"]], "unit (fipy.variables.facevariable.facevariable property)": [[432, "fipy.variables.faceVariable.FaceVariable.unit"]], "value (fipy.variables.facevariable.facevariable property)": [[432, "fipy.variables.faceVariable.FaceVariable.value"]], "gammanoisevariable (class in fipy.variables.gammanoisevariable)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable"]], "__abs__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__abs__"]], "__and__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__and__"]], "__array__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__bool__"]], "__call__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__call__"]], "__eq__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__invert__"]], "__le__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__le__"]], "__lt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ne__"]], "__new__() (fipy.variables.gammanoisevariable.gammanoisevariable static method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__or__"]], "__pow__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__str__"]], "all() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.all"]], "allclose() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.allclose"]], "any() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constrain"]], "constraintmask (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constraintMask"]], "copy() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.copy"]], "dot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.dot"]], "facegrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceValue"]], "fipy.variables.gammanoisevariable": [[433, "module-fipy.variables.gammaNoiseVariable"]], "gaussgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.getsctype"]], "globalvalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.globalValue"]], "grad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.mag"]], "max() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.max"]], "min() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.old"]], "rdot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.rdot"]], "release() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.release"]], "scramble() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.scramble"]], "setvalue() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.setValue"]], "shape (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.shape"]], "std() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.std"]], "unit (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.unit"]], "updateold() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.updateOld"]], "value (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[433, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.value"]], "fipy.variables.gausscellgradvariable": [[434, "module-fipy.variables.gaussCellGradVariable"]], "gaussiannoisevariable (class in fipy.variables.gaussiannoisevariable)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable"]], "__abs__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__abs__"]], "__and__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__and__"]], "__array__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__bool__"]], "__call__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__call__"]], "__eq__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__invert__"]], "__le__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__le__"]], "__lt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ne__"]], "__new__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable static method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__or__"]], "__pow__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__str__"]], "all() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.all"]], "allclose() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.allclose"]], "any() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constrain"]], "constraintmask (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constraintMask"]], "copy() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.copy"]], "dot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.dot"]], "facegrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceValue"]], "fipy.variables.gaussiannoisevariable": [[435, "module-fipy.variables.gaussianNoiseVariable"]], "gaussgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.getsctype"]], "globalvalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.globalValue"]], "grad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.mag"]], "max() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.max"]], "min() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.old"]], "rdot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.rdot"]], "release() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.release"]], "scramble() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.scramble"]], "setvalue() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.setValue"]], "shape (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.shape"]], "std() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.std"]], "unit (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.unit"]], "updateold() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.updateOld"]], "value (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[435, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.value"]], "fipy.variables.harmoniccelltofacevariable": [[436, "module-fipy.variables.harmonicCellToFaceVariable"]], "histogramvariable (class in fipy.variables.histogramvariable)": [[437, "fipy.variables.histogramVariable.HistogramVariable"]], "__abs__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__abs__"]], "__and__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__and__"]], "__array__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__array__"]], "__array_wrap__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__array_wrap__"]], "__bool__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__bool__"]], "__call__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__call__"]], "__eq__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__eq__"]], "__ge__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__ge__"]], "__getitem__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__getitem__"]], "__getstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__getstate__"]], "__gt__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__gt__"]], "__hash__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__hash__"]], "__invert__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__invert__"]], "__le__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__le__"]], "__lt__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__lt__"]], "__ne__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__ne__"]], "__new__() (fipy.variables.histogramvariable.histogramvariable static method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__new__"]], "__nonzero__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__nonzero__"]], "__or__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__or__"]], "__pow__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__pow__"]], "__repr__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__repr__"]], "__setstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__setstate__"]], "__str__() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.__str__"]], "all() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.all"]], "allclose() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.allclose"]], "any() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.any"]], "arithmeticfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.cellVolumeAverage"]], "constrain() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.constrain"]], "constraintmask (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.constraintMask"]], "copy() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.copy"]], "dot() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.dot"]], "facegrad (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.faceGrad"]], "facegradaverage (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.faceGradAverage"]], "facevalue (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.faceValue"]], "fipy.variables.histogramvariable": [[437, "module-fipy.variables.histogramVariable"]], "gaussgrad (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.gaussGrad"]], "getsctype() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.getsctype"]], "globalvalue (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.globalValue"]], "grad (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.grad"]], "harmonicfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.inBaseUnits"]], "inunitsof() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.leastSquaresGrad"]], "mag (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.mag"]], "max() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.max"]], "min() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.min"]], "minmodfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.minmodFaceValue"]], "old (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.old"]], "rdot() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.rdot"]], "release() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.release"]], "setvalue() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.setValue"]], "shape (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.shape"]], "std() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.std"]], "unit (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.unit"]], "updateold() (fipy.variables.histogramvariable.histogramvariable method)": [[437, "fipy.variables.histogramVariable.HistogramVariable.updateOld"]], "value (fipy.variables.histogramvariable.histogramvariable property)": [[437, "fipy.variables.histogramVariable.HistogramVariable.value"]], "fipy.variables.interfaceareavariable": [[438, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceflagvariable": [[439, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastsquarescellgradvariable": [[440, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelsetdiffusionvariable": [[441, "module-fipy.variables.levelSetDiffusionVariable"]], "meshvariable (class in fipy.variables.meshvariable)": [[442, "fipy.variables.meshVariable.MeshVariable"]], "__abs__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__abs__"]], "__and__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__and__"]], "__array__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__array__"]], "__array_wrap__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__array_wrap__"]], "__bool__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__bool__"]], "__call__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__call__"]], "__eq__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__eq__"]], "__ge__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__ge__"]], "__getitem__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__getitem__"]], "__getstate__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__getstate__"]], "__gt__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__gt__"]], "__hash__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__hash__"]], "__invert__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__invert__"]], "__le__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__le__"]], "__lt__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__lt__"]], "__ne__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__ne__"]], "__new__() (fipy.variables.meshvariable.meshvariable static method)": [[442, "fipy.variables.meshVariable.MeshVariable.__new__"]], "__nonzero__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__nonzero__"]], "__or__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__or__"]], "__pow__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__pow__"]], "__repr__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__repr__"]], "__setstate__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__setstate__"]], "__str__() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.__str__"]], "all() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.all"]], "allclose() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.allclose"]], "any() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.any"]], "constrain() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.constrain"]], "constraintmask (fipy.variables.meshvariable.meshvariable property)": [[442, "fipy.variables.meshVariable.MeshVariable.constraintMask"]], "copy() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.copy"]], "dot() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.dot"]], "fipy.variables.meshvariable": [[442, "module-fipy.variables.meshVariable"]], "getsctype() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.getsctype"]], "inbaseunits() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.inBaseUnits"]], "inunitsof() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.inUnitsOf"]], "mag (fipy.variables.meshvariable.meshvariable property)": [[442, "fipy.variables.meshVariable.MeshVariable.mag"]], "max() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.max"]], "min() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.min"]], "rdot() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.rdot"]], "release() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.release"]], "setvalue() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.setValue"]], "shape (fipy.variables.meshvariable.meshvariable property)": [[442, "fipy.variables.meshVariable.MeshVariable.shape"]], "std() (fipy.variables.meshvariable.meshvariable method)": [[442, "fipy.variables.meshVariable.MeshVariable.std"]], "unit (fipy.variables.meshvariable.meshvariable property)": [[442, "fipy.variables.meshVariable.MeshVariable.unit"]], "value (fipy.variables.meshvariable.meshvariable property)": [[442, "fipy.variables.meshVariable.MeshVariable.value"]], "fipy.variables.minmodcelltofacevariable": [[443, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modcellgradvariable": [[444, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modcelltofacevariable": [[445, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modfacegradvariable": [[446, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modphysicalfield": [[447, "module-fipy.variables.modPhysicalField"]], "modularvariable (class in fipy.variables.modularvariable)": [[448, "fipy.variables.modularVariable.ModularVariable"]], "__abs__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__abs__"]], "__and__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__and__"]], "__array__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__array__"]], "__array_wrap__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__array_wrap__"]], "__bool__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__bool__"]], "__call__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__call__"]], "__eq__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__eq__"]], "__ge__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__ge__"]], "__getitem__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__getitem__"]], "__getstate__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__getstate__"]], "__gt__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__gt__"]], "__hash__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__hash__"]], "__invert__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__invert__"]], "__le__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__le__"]], "__lt__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__lt__"]], "__ne__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__ne__"]], "__new__() (fipy.variables.modularvariable.modularvariable static method)": [[448, "fipy.variables.modularVariable.ModularVariable.__new__"]], "__nonzero__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__nonzero__"]], "__or__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__or__"]], "__pow__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__pow__"]], "__repr__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__repr__"]], "__setstate__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__setstate__"]], "__str__() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.__str__"]], "all() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.all"]], "allclose() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.allclose"]], "any() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.any"]], "arithmeticfacevalue (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.cellVolumeAverage"]], "constrain() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.constrain"]], "constraintmask (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.constraintMask"]], "copy() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.copy"]], "dot() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.dot"]], "facegrad (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.faceGrad"]], "facegradaverage (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.faceGradAverage"]], "facegradnomod (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.faceGradNoMod"]], "facevalue (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.faceValue"]], "fipy.variables.modularvariable": [[448, "module-fipy.variables.modularVariable"]], "gaussgrad (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.gaussGrad"]], "getsctype() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.getsctype"]], "globalvalue (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.globalValue"]], "grad (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.grad"]], "harmonicfacevalue (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.inBaseUnits"]], "inunitsof() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.leastSquaresGrad"]], "mag (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.mag"]], "max() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.max"]], "min() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.min"]], "minmodfacevalue (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.minmodFaceValue"]], "old (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.old"]], "rdot() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.rdot"]], "release() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.release"]], "setvalue() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.setValue"]], "shape (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.shape"]], "std() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.std"]], "unit (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.unit"]], "updateold() (fipy.variables.modularvariable.modularvariable method)": [[448, "fipy.variables.modularVariable.ModularVariable.updateOld"]], "value (fipy.variables.modularvariable.modularvariable property)": [[448, "fipy.variables.modularVariable.ModularVariable.value"]], "noisevariable (class in fipy.variables.noisevariable)": [[449, "fipy.variables.noiseVariable.NoiseVariable"]], "__abs__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__abs__"]], "__and__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__and__"]], "__array__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__bool__"]], "__call__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__call__"]], "__eq__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__eq__"]], "__ge__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__ge__"]], "__getitem__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__getstate__"]], "__gt__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__gt__"]], "__hash__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__hash__"]], "__invert__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__invert__"]], "__le__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__le__"]], "__lt__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__lt__"]], "__ne__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__ne__"]], "__new__() (fipy.variables.noisevariable.noisevariable static method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__new__"]], "__nonzero__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__nonzero__"]], "__or__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__or__"]], "__pow__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__pow__"]], "__repr__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__repr__"]], "__setstate__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__setstate__"]], "__str__() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.__str__"]], "all() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.all"]], "allclose() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.allclose"]], "any() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.constrain"]], "constraintmask (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.constraintMask"]], "copy() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.copy"]], "dot() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.dot"]], "facegrad (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.faceValue"]], "fipy.variables.noisevariable": [[449, "module-fipy.variables.noiseVariable"]], "gaussgrad (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.getsctype"]], "globalvalue (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.globalValue"]], "grad (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.mag"]], "max() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.max"]], "min() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.min"]], "minmodfacevalue (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.minmodFaceValue"]], "old (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.old"]], "rdot() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.rdot"]], "release() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.release"]], "scramble() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.scramble"]], "setvalue() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.setValue"]], "shape (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.shape"]], "std() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.std"]], "unit (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.unit"]], "updateold() (fipy.variables.noisevariable.noisevariable method)": [[449, "fipy.variables.noiseVariable.NoiseVariable.updateOld"]], "value (fipy.variables.noisevariable.noisevariable property)": [[449, "fipy.variables.noiseVariable.NoiseVariable.value"]], "fipy.variables.operatorvariable": [[450, "module-fipy.variables.operatorVariable"]], "scharfettergummelfacevariable (class in fipy.variables.scharfettergummelfacevariable)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable"]], "__abs__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__abs__"]], "__and__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__and__"]], "__array__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array__"]], "__array_wrap__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__bool__"]], "__call__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__call__"]], "__eq__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__eq__"]], "__ge__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ge__"]], "__getitem__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getitem__"]], "__getstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getstate__"]], "__gt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__gt__"]], "__hash__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__hash__"]], "__invert__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__invert__"]], "__le__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__le__"]], "__lt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__lt__"]], "__ne__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ne__"]], "__new__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable static method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__new__"]], "__nonzero__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__nonzero__"]], "__or__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__or__"]], "__pow__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__pow__"]], "__repr__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__repr__"]], "__setstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__setstate__"]], "__str__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__str__"]], "all() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.all"]], "allclose() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.allclose"]], "any() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.any"]], "constrain() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constrain"]], "constraintmask (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constraintMask"]], "copy() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.copy"]], "divergence (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.divergence"]], "dot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.dot"]], "fipy.variables.scharfettergummelfacevariable": [[451, "module-fipy.variables.scharfetterGummelFaceVariable"]], "getsctype() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.getsctype"]], "inbaseunits() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inUnitsOf"]], "mag (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.mag"]], "max() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.max"]], "min() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.min"]], "rdot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.rdot"]], "release() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.release"]], "setvalue() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.setValue"]], "shape (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.shape"]], "std() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.std"]], "unit (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.unit"]], "value (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[451, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.value"]], "surfactantconvectionvariable (class in fipy.variables.surfactantconvectionvariable)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable"]], "__abs__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__abs__"]], "__and__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__and__"]], "__array__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__bool__"]], "__call__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__call__"]], "__eq__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__eq__"]], "__ge__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__gt__"]], "__hash__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__hash__"]], "__invert__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__invert__"]], "__le__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__le__"]], "__lt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__lt__"]], "__ne__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ne__"]], "__new__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable static method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__or__"]], "__pow__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__pow__"]], "__repr__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__setstate__"]], "__str__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__str__"]], "all() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.all"]], "allclose() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.allclose"]], "any() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.any"]], "constrain() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constrain"]], "constraintmask (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constraintMask"]], "copy() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.copy"]], "divergence (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.divergence"]], "dot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.dot"]], "fipy.variables.surfactantconvectionvariable": [[452, "module-fipy.variables.surfactantConvectionVariable"]], "getsctype() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.getsctype"]], "inbaseunits() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inUnitsOf"]], "mag (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.mag"]], "max() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.max"]], "min() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.min"]], "rdot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.rdot"]], "release() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.release"]], "setvalue() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.setValue"]], "shape (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.shape"]], "std() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.std"]], "unit (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.unit"]], "value (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[452, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.value"]], "surfactantvariable (class in fipy.variables.surfactantvariable)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable"]], "__abs__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__abs__"]], "__and__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__and__"]], "__array__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__bool__"]], "__call__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__call__"]], "__eq__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__eq__"]], "__ge__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__gt__"]], "__hash__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__hash__"]], "__invert__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__invert__"]], "__le__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__le__"]], "__lt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__lt__"]], "__ne__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__ne__"]], "__new__() (fipy.variables.surfactantvariable.surfactantvariable static method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__or__"]], "__pow__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__pow__"]], "__repr__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__setstate__"]], "__str__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.__str__"]], "all() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.all"]], "allclose() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.allclose"]], "any() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.any"]], "arithmeticfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.cellVolumeAverage"]], "constrain() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.constrain"]], "constraintmask (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.constraintMask"]], "copy() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.copy"]], "dot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.dot"]], "facegrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.faceGrad"]], "facegradaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.faceGradAverage"]], "facevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.faceValue"]], "fipy.variables.surfactantvariable": [[453, "module-fipy.variables.surfactantVariable"]], "gaussgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.gaussGrad"]], "getsctype() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.getsctype"]], "globalvalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.globalValue"]], "grad (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.grad"]], "harmonicfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.inUnitsOf"]], "interfacevar (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.interfaceVar"]], "leastsquaresgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.leastSquaresGrad"]], "mag (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.mag"]], "max() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.max"]], "min() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.min"]], "minmodfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.minmodFaceValue"]], "old (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.old"]], "rdot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.rdot"]], "release() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.release"]], "setvalue() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.setValue"]], "shape (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.shape"]], "std() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.std"]], "unit (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.unit"]], "updateold() (fipy.variables.surfactantvariable.surfactantvariable method)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.updateOld"]], "value (fipy.variables.surfactantvariable.surfactantvariable property)": [[453, "fipy.variables.surfactantVariable.SurfactantVariable.value"]], "fipy.variables.test": [[454, "module-fipy.variables.test"]], "fipy.variables.unaryoperatorvariable": [[455, "module-fipy.variables.unaryOperatorVariable"]], "uniformnoisevariable (class in fipy.variables.uniformnoisevariable)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable"]], "__abs__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__abs__"]], "__and__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__and__"]], "__array__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__bool__"]], "__call__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__call__"]], "__eq__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__eq__"]], "__ge__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__gt__"]], "__hash__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__hash__"]], "__invert__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__invert__"]], "__le__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__le__"]], "__lt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__lt__"]], "__ne__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ne__"]], "__new__() (fipy.variables.uniformnoisevariable.uniformnoisevariable static method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__or__"]], "__pow__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__pow__"]], "__repr__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__setstate__"]], "__str__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__str__"]], "all() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.all"]], "allclose() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.allclose"]], "any() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constrain"]], "constraintmask (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constraintMask"]], "copy() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.copy"]], "dot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.dot"]], "facegrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceValue"]], "fipy.variables.uniformnoisevariable": [[456, "module-fipy.variables.uniformNoiseVariable"]], "gaussgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.getsctype"]], "globalvalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.globalValue"]], "grad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.mag"]], "max() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.max"]], "min() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.min"]], "minmodfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.minmodFaceValue"]], "old (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.old"]], "rdot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.rdot"]], "release() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.release"]], "scramble() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.scramble"]], "setvalue() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.setValue"]], "shape (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.shape"]], "std() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.std"]], "unit (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.unit"]], "updateold() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.updateOld"]], "value (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[456, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.value"]], "variable (class in fipy.variables.variable)": [[457, "fipy.variables.variable.Variable"]], "__abs__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__abs__"]], "__and__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__and__"]], "__array__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__array__"]], "__array_wrap__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__array_wrap__"]], "__bool__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__bool__"]], "__call__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__call__"]], "__eq__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__eq__"]], "__ge__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__ge__"]], "__getitem__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__getitem__"]], "__getstate__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__getstate__"]], "__gt__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__gt__"]], "__hash__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__hash__"]], "__invert__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__invert__"]], "__le__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__le__"]], "__lt__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__lt__"]], "__ne__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__ne__"]], "__new__() (fipy.variables.variable.variable static method)": [[457, "fipy.variables.variable.Variable.__new__"]], "__nonzero__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__nonzero__"]], "__or__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__or__"]], "__pow__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__pow__"]], "__repr__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__repr__"]], "__setstate__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__setstate__"]], "__str__() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.__str__"]], "all() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.all"]], "allclose() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.allclose"]], "any() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.any"]], "constrain() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.constrain"]], "copy() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.copy"]], "fipy.variables.variable": [[457, "module-fipy.variables.variable"]], "getsctype() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.getsctype"]], "inbaseunits() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.inBaseUnits"]], "inunitsof() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.inUnitsOf"]], "mag (fipy.variables.variable.variable property)": [[457, "fipy.variables.variable.Variable.mag"]], "max() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.max"]], "min() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.min"]], "release() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.release"]], "setvalue() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.setValue"]], "shape (fipy.variables.variable.variable property)": [[457, "fipy.variables.variable.Variable.shape"]], "std() (fipy.variables.variable.variable method)": [[457, "fipy.variables.variable.Variable.std"]], "unit (fipy.variables.variable.variable property)": [[457, "fipy.variables.variable.Variable.unit"]], "value (fipy.variables.variable.variable property)": [[457, "fipy.variables.variable.Variable.value"]], "dummyviewer (class in fipy.viewers)": [[458, "fipy.viewers.DummyViewer"]], "meshdimensionerror": [[458, "fipy.viewers.MeshDimensionError"]], "viewer() (in module fipy.viewers)": [[458, "fipy.viewers.Viewer"]], "__cause__ (fipy.viewers.meshdimensionerror attribute)": [[458, "fipy.viewers.MeshDimensionError.__cause__"]], "__context__ (fipy.viewers.meshdimensionerror attribute)": [[458, "fipy.viewers.MeshDimensionError.__context__"]], "__delattr__() (fipy.viewers.meshdimensionerror method)": [[458, "fipy.viewers.MeshDimensionError.__delattr__"]], "__getattribute__() (fipy.viewers.meshdimensionerror method)": [[458, "fipy.viewers.MeshDimensionError.__getattribute__"]], "__reduce__() (fipy.viewers.meshdimensionerror method)": [[458, "fipy.viewers.MeshDimensionError.__reduce__"]], "__repr__() (fipy.viewers.meshdimensionerror method)": [[458, "fipy.viewers.MeshDimensionError.__repr__"]], "__setattr__() (fipy.viewers.meshdimensionerror method)": [[458, "fipy.viewers.MeshDimensionError.__setattr__"]], "__str__() (fipy.viewers.meshdimensionerror method)": [[458, "fipy.viewers.MeshDimensionError.__str__"]], "add_note() (fipy.viewers.meshdimensionerror method)": [[458, "fipy.viewers.MeshDimensionError.add_note"]], "plot() (fipy.viewers.dummyviewer method)": [[458, "fipy.viewers.DummyViewer.plot"]], "plotmesh() (fipy.viewers.dummyviewer method)": [[458, "fipy.viewers.DummyViewer.plotMesh"]], "setlimits() (fipy.viewers.dummyviewer method)": [[458, "fipy.viewers.DummyViewer.setLimits"]], "title (fipy.viewers.dummyviewer property)": [[458, "fipy.viewers.DummyViewer.title"]], "vars (fipy.viewers.dummyviewer property)": [[458, "fipy.viewers.DummyViewer.vars"]], "with_traceback() (fipy.viewers.meshdimensionerror method)": [[458, "fipy.viewers.MeshDimensionError.with_traceback"]], "matplotlibviewer() (in module fipy.viewers.matplotlibviewer)": [[459, "fipy.viewers.matplotlibViewer.MatplotlibViewer"]], "fipy.viewers.matplotlibviewer": [[459, "module-fipy.viewers.matplotlibViewer"]], "abstractmatplotlib2dviewer (class in fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer"]], "axes (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.fig"]], "fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer": [[460, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"]], "id (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.id"]], "log (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.vars"]], "abstractmatplotlibviewer (class in fipy.viewers.matplotlibviewer.abstractmatplotlibviewer)": [[461, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer"]], "axes (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[461, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[461, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[461, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[461, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.fig"]], "fipy.viewers.matplotlibviewer.abstractmatplotlibviewer": [[461, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"]], "id (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[461, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.id"]], "log (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[461, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[461, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[461, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[461, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[461, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.title"]], "vars (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[461, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.vars"]], "matplotlib1dviewer (class in fipy.viewers.matplotlibviewer.matplotlib1dviewer)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib1dviewer": [[462, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.id"]], "lines (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.lines"]], "log (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.vars"]], "matplotlib2dcontourviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer": [[463, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.id"]], "levels (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.levels"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.vars"]], "matplotlib2dgridcontourviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer": [[464, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.id"]], "levels (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.levels"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.vars"]], "matplotlib2dgridviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dgridviewer)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dgridviewer": [[465, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.vars"]], "matplotlib2dviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dviewer)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.cmap"]], "collection (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.collection"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dviewer": [[466, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[466, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.vars"]], "matplotlibsparsematrixviewer (class in fipy.viewers.matplotlibviewer.matplotlibsparsematrixviewer)": [[467, "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer.MatplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibviewer.matplotlibsparsematrixviewer": [[467, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"]], "matplotlibstreamviewer (class in fipy.viewers.matplotlibviewer.matplotlibstreamviewer)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlibstreamviewer": [[468, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.id"]], "kwargs (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.kwargs"]], "log (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.vars"]], "matplotlibvectorviewer (class in fipy.viewers.matplotlibviewer.matplotlibvectorviewer)": [[469, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[469, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[469, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[469, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[469, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlibvectorviewer": [[469, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[469, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[469, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[469, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[469, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[469, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[469, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[469, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.vars"]], "fipy.viewers.matplotlibviewer.test": [[470, "module-fipy.viewers.matplotlibViewer.test"]], "mayaviclient (class in fipy.viewers.mayaviviewer)": [[471, "fipy.viewers.mayaviViewer.MayaviClient"]], "fipy.viewers.mayaviviewer": [[471, "module-fipy.viewers.mayaviViewer"]], "fps (fipy.viewers.mayaviviewer.mayaviclient property)": [[471, "fipy.viewers.mayaviViewer.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient method)": [[471, "fipy.viewers.mayaviViewer.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient method)": [[471, "fipy.viewers.mayaviViewer.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient method)": [[471, "fipy.viewers.mayaviViewer.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient property)": [[471, "fipy.viewers.mayaviViewer.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient property)": [[471, "fipy.viewers.mayaviViewer.MayaviClient.vars"]], "mayaviclient (class in fipy.viewers.mayaviviewer.mayaviclient)": [[472, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient"]], "fipy.viewers.mayaviviewer.mayaviclient": [[472, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fps (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[472, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[472, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[472, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[472, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[472, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[472, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.vars"]], "mayavidaemon (class in fipy.viewers.mayaviviewer.mayavidaemon)": [[473, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon"]], "fipy.viewers.mayaviviewer.mayavidaemon": [[473, "module-fipy.viewers.mayaviViewer.mayaviDaemon"]], "main() (in module fipy.viewers.mayaviviewer.mayavidaemon)": [[473, "fipy.viewers.mayaviViewer.mayaviDaemon.main"]], "parse_command_line() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[473, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.parse_command_line"]], "setup_source() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[473, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.setup_source"]], "update_pipeline() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[473, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.update_pipeline"]], "view_data() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[473, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.view_data"]], "fipy.viewers.mayaviviewer.test": [[474, "module-fipy.viewers.mayaviViewer.test"]], "multiviewer (class in fipy.viewers.multiviewer)": [[475, "fipy.viewers.multiViewer.MultiViewer"]], "fipy.viewers.multiviewer": [[475, "module-fipy.viewers.multiViewer"]], "plot() (fipy.viewers.multiviewer.multiviewer method)": [[475, "fipy.viewers.multiViewer.MultiViewer.plot"]], "plotmesh() (fipy.viewers.multiviewer.multiviewer method)": [[475, "fipy.viewers.multiViewer.MultiViewer.plotMesh"]], "setlimits() (fipy.viewers.multiviewer.multiviewer method)": [[475, "fipy.viewers.multiViewer.MultiViewer.setLimits"]], "title (fipy.viewers.multiviewer.multiviewer property)": [[475, "fipy.viewers.multiViewer.MultiViewer.title"]], "vars (fipy.viewers.multiviewer.multiviewer property)": [[475, "fipy.viewers.multiViewer.MultiViewer.vars"]], "fipy.viewers.test": [[476, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[477, "module-fipy.viewers.testinteractive"]], "tsvviewer (class in fipy.viewers.tsvviewer)": [[478, "fipy.viewers.tsvViewer.TSVViewer"]], "fipy.viewers.tsvviewer": [[478, "module-fipy.viewers.tsvViewer"]], "plot() (fipy.viewers.tsvviewer.tsvviewer method)": [[478, "fipy.viewers.tsvViewer.TSVViewer.plot"]], "plotmesh() (fipy.viewers.tsvviewer.tsvviewer method)": [[478, "fipy.viewers.tsvViewer.TSVViewer.plotMesh"]], "setlimits() (fipy.viewers.tsvviewer.tsvviewer method)": [[478, "fipy.viewers.tsvViewer.TSVViewer.setLimits"]], "title (fipy.viewers.tsvviewer.tsvviewer property)": [[478, "fipy.viewers.tsvViewer.TSVViewer.title"]], "vars (fipy.viewers.tsvviewer.tsvviewer property)": [[478, "fipy.viewers.tsvViewer.TSVViewer.vars"]], "abstractviewer (class in fipy.viewers.viewer)": [[479, "fipy.viewers.viewer.AbstractViewer"]], "fipy.viewers.viewer": [[479, "module-fipy.viewers.viewer"]], "plot() (fipy.viewers.viewer.abstractviewer method)": [[479, "fipy.viewers.viewer.AbstractViewer.plot"]], "plotmesh() (fipy.viewers.viewer.abstractviewer method)": [[479, "fipy.viewers.viewer.AbstractViewer.plotMesh"]], "setlimits() (fipy.viewers.viewer.abstractviewer method)": [[479, "fipy.viewers.viewer.AbstractViewer.setLimits"]], "title (fipy.viewers.viewer.abstractviewer property)": [[479, "fipy.viewers.viewer.AbstractViewer.title"]], "vars (fipy.viewers.viewer.abstractviewer property)": [[479, "fipy.viewers.viewer.AbstractViewer.vars"]], "vtkcellviewer (class in fipy.viewers.vtkviewer)": [[480, "fipy.viewers.vtkViewer.VTKCellViewer"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer)": [[480, "fipy.viewers.vtkViewer.VTKFaceViewer"]], "vtkviewer() (in module fipy.viewers.vtkviewer)": [[480, "fipy.viewers.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer": [[480, "module-fipy.viewers.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[480, "fipy.viewers.vtkViewer.VTKCellViewer.plot"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[480, "fipy.viewers.vtkViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[480, "fipy.viewers.vtkViewer.VTKCellViewer.plotMesh"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[480, "fipy.viewers.vtkViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[480, "fipy.viewers.vtkViewer.VTKCellViewer.setLimits"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[480, "fipy.viewers.vtkViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer property)": [[480, "fipy.viewers.vtkViewer.VTKCellViewer.title"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[480, "fipy.viewers.vtkViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer property)": [[480, "fipy.viewers.vtkViewer.VTKCellViewer.vars"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[480, "fipy.viewers.vtkViewer.VTKFaceViewer.vars"]], "fipy.viewers.vtkviewer.test": [[481, "module-fipy.viewers.vtkViewer.test"]], "vtkcellviewer (class in fipy.viewers.vtkviewer.vtkcellviewer)": [[482, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer"]], "fipy.viewers.vtkviewer.vtkcellviewer": [[482, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[482, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[482, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[482, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[482, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[482, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.vars"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer.vtkfaceviewer)": [[483, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer"]], "fipy.viewers.vtkviewer.vtkfaceviewer": [[483, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[483, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[483, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[483, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[483, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[483, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.vars"]], "vtkviewer (class in fipy.viewers.vtkviewer.vtkviewer)": [[484, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer.vtkviewer": [[484, "module-fipy.viewers.vtkViewer.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[484, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[484, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[484, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[484, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[484, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.vars"]], "appveyor": [[485, "term-AppVeyor"]], "azure": [[485, "term-Azure"]], "buildbot": [[485, "term-Buildbot"]], "circleci": [[485, "term-CircleCI"]], "continuous integration": [[485, "term-Continuous-Integration"]], "github actions": [[485, "term-GitHub-Actions"]], "ipython": [[485, "term-IPython"]], "json": [[485, "term-JSON"]], "mpi": [[485, "term-MPI"]], "matplotlib": [[485, "term-Matplotlib"]], "mayavi": [[485, "term-MayaVi"], [485, "term-Mayavi"]], "numpy": [[485, "term-NumPy"]], "numeric": [[485, "term-Numeric"]], "openmp": [[485, "term-OpenMP"]], "pep 3000": [[485, "index-0"]], "petsc": [[485, "term-PETSc"]], "pyamg": [[485, "term-PyAMG"]], "pypi": [[485, "term-PyPI"]], "pytrilinos": [[485, "term-PyTrilinos"]], "pyrex": [[485, "term-Pyrex"]], "pysparse": [[485, "term-Pysparse"]], "python": [[485, "term-Python"]], "python 3": [[485, "term-Python-3"]], "pyxviewer": [[485, "term-PyxViewer"]], "scientificpython": [[485, "term-ScientificPython"]], "sphinx": [[485, "term-Sphinx"]], "travisci": [[485, "term-TravisCI"]], "trilinos": [[485, "term-Trilinos"]], "weave": [[485, "term-Weave"]], "windows": [[485, "term-Windows"]], "conda": [[485, "term-conda"]], "linux": [[485, "term-linux"]], "macos": [[485, "term-macOS"]], "mpi4py": [[485, "term-mpi4py"]], "numarray": [[485, "term-numarray"]], "pandas": [[485, "term-pandas"]], "petsc4py": [[485, "term-petsc4py"]], "pip": [[485, "term-pip"]], "pyamgx": [[485, "term-pyamgx"]], "package": [[493, "module-package"]], "package.subpackage": [[494, "module-package.subpackage"]], "base (class in package.subpackage.base)": [[495, "package.subpackage.base.Base"]], "method1() (package.subpackage.base.base method)": [[495, "package.subpackage.base.Base.method1"]], "method2() (package.subpackage.base.base method)": [[495, "package.subpackage.base.Base.method2"]], "package.subpackage.base": [[495, "module-package.subpackage.base"]], "object (class in package.subpackage.object)": [[496, "package.subpackage.object.Object"]], "method1() (package.subpackage.object.object method)": [[496, "package.subpackage.object.Object.method1"]], "method2() (package.subpackage.object.object method)": [[496, "package.subpackage.object.Object.method2"]], "package.subpackage.object": [[496, "module-package.subpackage.object"]]}})