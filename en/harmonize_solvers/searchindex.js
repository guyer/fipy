Search.setIndex({"docnames": ["ADMINISTRATA", "API", "CHANGELOG", "CONTACT", "CREDITS", "DISCLAIMER", "EFFICIENCY", "EXAMPLES", "FAQ", "GIT", "GUIDELINES", "INSTALLATION", "LICENSE", "NIX-README", "PUBLICATIONS", "README", "SOLVERS", "USAGE", "VIEWERS", "VKML", "contents", "design", "external_definitions", "generated/examples", "generated/examples.benchmarking", "generated/examples.benchmarking.benchmarker", "generated/examples.benchmarking.size", "generated/examples.benchmarking.steps", "generated/examples.benchmarking.utils", "generated/examples.benchmarking.versions", "generated/examples.cahnHilliard", "generated/examples.cahnHilliard.mesh2D", "generated/examples.cahnHilliard.mesh2DCoupled", "generated/examples.cahnHilliard.mesh3D", "generated/examples.cahnHilliard.sphere", "generated/examples.cahnHilliard.sphereDaemon", "generated/examples.cahnHilliard.tanh1D", "generated/examples.cahnHilliard.test", "generated/examples.chemotaxis", "generated/examples.chemotaxis.input", "generated/examples.chemotaxis.input2D", "generated/examples.chemotaxis.parameters", "generated/examples.chemotaxis.test", "generated/examples.convection", "generated/examples.convection.advection", "generated/examples.convection.advection.explicitUpwind", "generated/examples.convection.advection.implicitUpwind", "generated/examples.convection.advection.vanLeerUpwind", "generated/examples.convection.exponential1D", "generated/examples.convection.exponential1D.cylindricalMesh1D", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform", "generated/examples.convection.exponential1D.mesh1D", "generated/examples.convection.exponential1D.tri2D", "generated/examples.convection.exponential1DBack", "generated/examples.convection.exponential1DBack.mesh1D", "generated/examples.convection.exponential1DSource", "generated/examples.convection.exponential1DSource.mesh1D", "generated/examples.convection.exponential1DSource.tri2D", "generated/examples.convection.exponential2D", "generated/examples.convection.exponential2D.cylindricalMesh2D", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform", "generated/examples.convection.exponential2D.mesh2D", "generated/examples.convection.exponential2D.tri2D", "generated/examples.convection.peclet", "generated/examples.convection.powerLaw1D", "generated/examples.convection.powerLaw1D.mesh1D", "generated/examples.convection.powerLaw1D.tri2D", "generated/examples.convection.robin", "generated/examples.convection.source", "generated/examples.convection.test", "generated/examples.diffusion", "generated/examples.diffusion.anisotropy", "generated/examples.diffusion.circle", "generated/examples.diffusion.circleQuad", "generated/examples.diffusion.coupled", "generated/examples.diffusion.electrostatics", "generated/examples.diffusion.explicit", "generated/examples.diffusion.explicit.mesh1D", "generated/examples.diffusion.explicit.mixedelement", "generated/examples.diffusion.explicit.test", "generated/examples.diffusion.explicit.tri2D", "generated/examples.diffusion.mesh1D", "generated/examples.diffusion.mesh20x20", "generated/examples.diffusion.mesh20x20Coupled", "generated/examples.diffusion.nthOrder", "generated/examples.diffusion.nthOrder.input4thOrder1D", "generated/examples.diffusion.nthOrder.input4thOrder_line", "generated/examples.diffusion.nthOrder.test", "generated/examples.diffusion.steadyState", "generated/examples.diffusion.steadyState.mesh1D", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic", "generated/examples.diffusion.steadyState.mesh1D.tri2Dinput", "generated/examples.diffusion.steadyState.mesh20x20", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput", "generated/examples.diffusion.steadyState.mesh20x20.isotropy", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror", "generated/examples.diffusion.steadyState.mesh20x20.tri2Dinput", "generated/examples.diffusion.steadyState.mesh50x50", "generated/examples.diffusion.steadyState.mesh50x50.input", "generated/examples.diffusion.steadyState.mesh50x50.tri2Dinput", "generated/examples.diffusion.steadyState.otherMeshes", "generated/examples.diffusion.steadyState.otherMeshes.prism", "generated/examples.diffusion.steadyState.test", "generated/examples.diffusion.test", "generated/examples.diffusion.variable", "generated/examples.elphf", "generated/examples.elphf.diffusion", "generated/examples.elphf.diffusion.mesh1D", "generated/examples.elphf.diffusion.mesh1Ddimensional", "generated/examples.elphf.diffusion.mesh2D", "generated/examples.elphf.input", "generated/examples.elphf.phase", "generated/examples.elphf.phaseDiffusion", "generated/examples.elphf.poisson", "generated/examples.elphf.test", "generated/examples.flow", "generated/examples.flow.stokesCavity", "generated/examples.flow.test", "generated/examples.levelSet", "generated/examples.levelSet.advection", "generated/examples.levelSet.advection.circle", "generated/examples.levelSet.advection.mesh1D", "generated/examples.levelSet.advection.test", "generated/examples.levelSet.advection.trench", "generated/examples.levelSet.distanceFunction", "generated/examples.levelSet.distanceFunction.circle", "generated/examples.levelSet.distanceFunction.interior", "generated/examples.levelSet.distanceFunction.mesh1D", "generated/examples.levelSet.distanceFunction.square", "generated/examples.levelSet.distanceFunction.test", "generated/examples.levelSet.electroChem", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation", "generated/examples.levelSet.electroChem.adsorption", "generated/examples.levelSet.electroChem.gapFillDistanceVariable", "generated/examples.levelSet.electroChem.gapFillMesh", "generated/examples.levelSet.electroChem.gold", "generated/examples.levelSet.electroChem.howToWriteAScript", "generated/examples.levelSet.electroChem.leveler", "generated/examples.levelSet.electroChem.lines", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation", "generated/examples.levelSet.electroChem.simpleTrenchSystem", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "generated/examples.levelSet.electroChem.test", "generated/examples.levelSet.electroChem.trenchMesh", "generated/examples.levelSet.surfactant", "generated/examples.levelSet.surfactant.circle", "generated/examples.levelSet.surfactant.expandingCircle", "generated/examples.levelSet.surfactant.square", "generated/examples.levelSet.surfactant.test", "generated/examples.levelSet.test", "generated/examples.meshing", "generated/examples.meshing.gmshRefinement", "generated/examples.meshing.inputGrid2D", "generated/examples.meshing.sphere", "generated/examples.meshing.test", "generated/examples.parallel", "generated/examples.phase", "generated/examples.phase.anisotropy", "generated/examples.phase.anisotropyOLD", "generated/examples.phase.binary", "generated/examples.phase.binaryCoupled", "generated/examples.phase.impingement", "generated/examples.phase.impingement.mesh20x20", "generated/examples.phase.impingement.mesh40x1", "generated/examples.phase.impingement.test", "generated/examples.phase.missOrientation", "generated/examples.phase.missOrientation.circle", "generated/examples.phase.missOrientation.mesh1D", "generated/examples.phase.missOrientation.modCircle", "generated/examples.phase.missOrientation.test", "generated/examples.phase.polyxtal", "generated/examples.phase.polyxtalCoupled", "generated/examples.phase.quaternary", "generated/examples.phase.simple", "generated/examples.phase.symmetry", "generated/examples.phase.test", "generated/examples.reactiveWetting", "generated/examples.reactiveWetting.liquidVapor1D", "generated/examples.reactiveWetting.liquidVapor2D", "generated/examples.reactiveWetting.test", "generated/examples.riemann", "generated/examples.riemann.test", "generated/examples.test", "generated/examples.updating", "generated/examples.updating.update0_1to1_0", "generated/examples.updating.update1_0to2_0", "generated/examples.updating.update2_0to3_0", "generated/fipy", "generated/fipy.boundaryConditions", "generated/fipy.boundaryConditions.boundaryCondition", "generated/fipy.boundaryConditions.constraint", "generated/fipy.boundaryConditions.fixedFlux", "generated/fipy.boundaryConditions.fixedValue", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition", "generated/fipy.boundaryConditions.test", "generated/fipy.matrices", "generated/fipy.matrices.offsetSparseMatrix", "generated/fipy.matrices.petscMatrix", "generated/fipy.matrices.pysparseMatrix", "generated/fipy.matrices.scipyMatrix", "generated/fipy.matrices.sparseMatrix", "generated/fipy.matrices.test", "generated/fipy.matrices.trilinosMatrix", "generated/fipy.meshes", "generated/fipy.meshes.abstractMesh", "generated/fipy.meshes.builders", "generated/fipy.meshes.builders.abstractGridBuilder", "generated/fipy.meshes.builders.grid1DBuilder", "generated/fipy.meshes.builders.grid2DBuilder", "generated/fipy.meshes.builders.grid3DBuilder", "generated/fipy.meshes.builders.periodicGrid1DBuilder", "generated/fipy.meshes.builders.utilityClasses", "generated/fipy.meshes.cylindricalGrid1D", "generated/fipy.meshes.cylindricalGrid2D", "generated/fipy.meshes.cylindricalNonUniformGrid1D", "generated/fipy.meshes.cylindricalNonUniformGrid2D", "generated/fipy.meshes.cylindricalUniformGrid1D", "generated/fipy.meshes.cylindricalUniformGrid2D", "generated/fipy.meshes.factoryMeshes", "generated/fipy.meshes.gmshMesh", "generated/fipy.meshes.grid1D", "generated/fipy.meshes.grid2D", "generated/fipy.meshes.grid3D", "generated/fipy.meshes.mesh", "generated/fipy.meshes.mesh1D", "generated/fipy.meshes.mesh2D", "generated/fipy.meshes.nonUniformGrid1D", "generated/fipy.meshes.nonUniformGrid2D", "generated/fipy.meshes.nonUniformGrid3D", "generated/fipy.meshes.periodicGrid1D", "generated/fipy.meshes.periodicGrid2D", "generated/fipy.meshes.periodicGrid3D", "generated/fipy.meshes.representations", "generated/fipy.meshes.representations.abstractRepresentation", "generated/fipy.meshes.representations.gridRepresentation", "generated/fipy.meshes.representations.meshRepresentation", "generated/fipy.meshes.skewedGrid2D", "generated/fipy.meshes.sphericalNonUniformGrid1D", "generated/fipy.meshes.sphericalUniformGrid1D", "generated/fipy.meshes.test", "generated/fipy.meshes.topologies", "generated/fipy.meshes.topologies.abstractTopology", "generated/fipy.meshes.topologies.gridTopology", "generated/fipy.meshes.topologies.meshTopology", "generated/fipy.meshes.tri2D", "generated/fipy.meshes.uniformGrid", "generated/fipy.meshes.uniformGrid1D", "generated/fipy.meshes.uniformGrid2D", "generated/fipy.solvers", "generated/fipy.solvers.convergence", "generated/fipy.solvers.petsc", "generated/fipy.solvers.petsc.comms", "generated/fipy.solvers.petsc.comms.parallelPETScCommWrapper", "generated/fipy.solvers.petsc.comms.petscCommWrapper", "generated/fipy.solvers.petsc.comms.serialPETScCommWrapper", "generated/fipy.solvers.petsc.dummySolver", "generated/fipy.solvers.petsc.linearBicgSolver", "generated/fipy.solvers.petsc.linearCGSSolver", "generated/fipy.solvers.petsc.linearGMRESSolver", "generated/fipy.solvers.petsc.linearLUSolver", "generated/fipy.solvers.petsc.linearPCGSolver", "generated/fipy.solvers.petsc.petscConvergence", "generated/fipy.solvers.petsc.petscKrylovSolver", "generated/fipy.solvers.petsc.petscSolver", "generated/fipy.solvers.petsc.preconditioners", "generated/fipy.solvers.petsc.preconditioners.defaultPreconditioner", "generated/fipy.solvers.petsc.preconditioners.icPreconditioner", "generated/fipy.solvers.petsc.preconditioners.iluPreconditioner", "generated/fipy.solvers.petsc.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.petsc.preconditioners.luPreconditioner", "generated/fipy.solvers.petsc.preconditioners.petscPreconditioner", "generated/fipy.solvers.petsc.preconditioners.ssorPreconditioner", "generated/fipy.solvers.preconditioner", "generated/fipy.solvers.pyAMG", "generated/fipy.solvers.pyAMG.linearCGSSolver", "generated/fipy.solvers.pyAMG.linearGMRESSolver", "generated/fipy.solvers.pyAMG.linearGeneralSolver", "generated/fipy.solvers.pyAMG.linearLUSolver", "generated/fipy.solvers.pyAMG.linearPCGSolver", "generated/fipy.solvers.pyAMG.preconditioners", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "generated/fipy.solvers.pyamgx", "generated/fipy.solvers.pyamgx.aggregationAMGSolver", "generated/fipy.solvers.pyamgx.classicalAMGSolver", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver", "generated/fipy.solvers.pyamgx.linearFGMRESSolver", "generated/fipy.solvers.pyamgx.linearGMRESSolver", "generated/fipy.solvers.pyamgx.linearLUSolver", "generated/fipy.solvers.pyamgx.linearPCGSolver", "generated/fipy.solvers.pyamgx.preconditioners", "generated/fipy.solvers.pyamgx.pyAMGXSolver", "generated/fipy.solvers.pyamgx.pyamgxConvergence", "generated/fipy.solvers.pyamgx.smoothers", "generated/fipy.solvers.pysparse", "generated/fipy.solvers.pysparse.linearCGSSolver", "generated/fipy.solvers.pysparse.linearGMRESSolver", "generated/fipy.solvers.pysparse.linearInitialSolver", "generated/fipy.solvers.pysparse.linearJORSolver", "generated/fipy.solvers.pysparse.linearLUSolver", "generated/fipy.solvers.pysparse.linearPCGSolver", "generated/fipy.solvers.pysparse.linearRHSSolver", "generated/fipy.solvers.pysparse.preconditioners", "generated/fipy.solvers.pysparse.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.pysparse.preconditioners.pysparsePreconditioner", "generated/fipy.solvers.pysparse.preconditioners.ssorPreconditioner", "generated/fipy.solvers.pysparse.pysparseConvergence", "generated/fipy.solvers.pysparse.pysparseSolver", "generated/fipy.solvers.pysparseMatrixSolver", "generated/fipy.solvers.scipy", "generated/fipy.solvers.scipy.linearBicgstabSolver", "generated/fipy.solvers.scipy.linearCGSSolver", "generated/fipy.solvers.scipy.linearGMRESSolver", "generated/fipy.solvers.scipy.linearLUSolver", "generated/fipy.solvers.scipy.linearPCGSolver", "generated/fipy.solvers.scipy.preconditioners", "generated/fipy.solvers.scipy.preconditioners.iluPreconditioner", "generated/fipy.solvers.scipy.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.scipy.preconditioners.scipyPreconditioner", "generated/fipy.solvers.scipy.scipyConvergence", "generated/fipy.solvers.scipy.scipyKrylovSolver", "generated/fipy.solvers.scipy.scipySolver", "generated/fipy.solvers.solver", "generated/fipy.solvers.test", "generated/fipy.solvers.trilinos", "generated/fipy.solvers.trilinos.aztecConvergence", "generated/fipy.solvers.trilinos.comms", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper", "generated/fipy.solvers.trilinos.comms.parallelEpetraCommWrapper", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "generated/fipy.solvers.trilinos.linearBicgstabSolver", "generated/fipy.solvers.trilinos.linearCGSSolver", "generated/fipy.solvers.trilinos.linearGMRESSolver", "generated/fipy.solvers.trilinos.linearLUSolver", "generated/fipy.solvers.trilinos.linearPCGSolver", "generated/fipy.solvers.trilinos.preconditioners", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.iluPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "generated/fipy.solvers.trilinos.preconditioners.trilinosPreconditioner", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver", "generated/fipy.solvers.trilinos.trilinosMLTest", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver", "generated/fipy.solvers.trilinos.trilinosSolver", "generated/fipy.steppers", "generated/fipy.steppers.pidStepper", "generated/fipy.steppers.pseudoRKQSStepper", "generated/fipy.steppers.stepper", "generated/fipy.terms", "generated/fipy.terms.abstractBinaryTerm", "generated/fipy.terms.abstractConvectionTerm", "generated/fipy.terms.abstractDiffusionTerm", "generated/fipy.terms.abstractUpwindConvectionTerm", "generated/fipy.terms.advectionTerm", "generated/fipy.terms.asymmetricConvectionTerm", "generated/fipy.terms.binaryTerm", "generated/fipy.terms.cellTerm", "generated/fipy.terms.centralDiffConvectionTerm", "generated/fipy.terms.coupledBinaryTerm", "generated/fipy.terms.diffusionTerm", "generated/fipy.terms.diffusionTermCorrection", "generated/fipy.terms.diffusionTermNoCorrection", "generated/fipy.terms.explicitDiffusionTerm", "generated/fipy.terms.explicitSourceTerm", "generated/fipy.terms.explicitUpwindConvectionTerm", "generated/fipy.terms.exponentialConvectionTerm", "generated/fipy.terms.faceTerm", "generated/fipy.terms.firstOrderAdvectionTerm", "generated/fipy.terms.hybridConvectionTerm", "generated/fipy.terms.implicitDiffusionTerm", "generated/fipy.terms.implicitSourceTerm", "generated/fipy.terms.nonDiffusionTerm", "generated/fipy.terms.powerLawConvectionTerm", "generated/fipy.terms.residualTerm", "generated/fipy.terms.sourceTerm", "generated/fipy.terms.term", "generated/fipy.terms.test", "generated/fipy.terms.transientTerm", "generated/fipy.terms.unaryTerm", "generated/fipy.terms.upwindConvectionTerm", "generated/fipy.terms.vanLeerConvectionTerm", "generated/fipy.testFiPy", "generated/fipy.tests", "generated/fipy.tests.doctestPlus", "generated/fipy.tests.lateImportTest", "generated/fipy.tests.test", "generated/fipy.tests.testProgram", "generated/fipy.tools", "generated/fipy.tools.comms", "generated/fipy.tools.comms.commWrapper", "generated/fipy.tools.comms.dummyComm", "generated/fipy.tools.debug", "generated/fipy.tools.decorators", "generated/fipy.tools.dimensions", "generated/fipy.tools.dimensions.DictWithDefault", "generated/fipy.tools.dimensions.NumberDict", "generated/fipy.tools.dimensions.physicalField", "generated/fipy.tools.dump", "generated/fipy.tools.inline", "generated/fipy.tools.logging", "generated/fipy.tools.logging.environment", "generated/fipy.tools.numerix", "generated/fipy.tools.parser", "generated/fipy.tools.sharedtempfile", "generated/fipy.tools.test", "generated/fipy.tools.vector", "generated/fipy.tools.version", "generated/fipy.variables", "generated/fipy.variables.addOverFacesVariable", "generated/fipy.variables.arithmeticCellToFaceVariable", "generated/fipy.variables.betaNoiseVariable", "generated/fipy.variables.binaryOperatorVariable", "generated/fipy.variables.cellToFaceVariable", "generated/fipy.variables.cellVariable", "generated/fipy.variables.constant", "generated/fipy.variables.constraintMask", "generated/fipy.variables.coupledCellVariable", "generated/fipy.variables.distanceVariable", "generated/fipy.variables.exponentialNoiseVariable", "generated/fipy.variables.faceGradContributionsVariable", "generated/fipy.variables.faceGradVariable", "generated/fipy.variables.faceVariable", "generated/fipy.variables.gammaNoiseVariable", "generated/fipy.variables.gaussCellGradVariable", "generated/fipy.variables.gaussianNoiseVariable", "generated/fipy.variables.harmonicCellToFaceVariable", "generated/fipy.variables.histogramVariable", "generated/fipy.variables.interfaceAreaVariable", "generated/fipy.variables.interfaceFlagVariable", "generated/fipy.variables.leastSquaresCellGradVariable", "generated/fipy.variables.levelSetDiffusionVariable", "generated/fipy.variables.meshVariable", "generated/fipy.variables.minmodCellToFaceVariable", "generated/fipy.variables.modCellGradVariable", "generated/fipy.variables.modCellToFaceVariable", "generated/fipy.variables.modFaceGradVariable", "generated/fipy.variables.modPhysicalField", "generated/fipy.variables.modularVariable", "generated/fipy.variables.noiseVariable", "generated/fipy.variables.operatorVariable", "generated/fipy.variables.scharfetterGummelFaceVariable", "generated/fipy.variables.surfactantConvectionVariable", "generated/fipy.variables.surfactantVariable", "generated/fipy.variables.test", "generated/fipy.variables.unaryOperatorVariable", "generated/fipy.variables.uniformNoiseVariable", "generated/fipy.variables.variable", "generated/fipy.viewers", "generated/fipy.viewers.matplotlibViewer", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlibViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib1DViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DContourViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridViewer", "generated/fipy.viewers.matplotlibViewer.matplotlib2DViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibStreamViewer", "generated/fipy.viewers.matplotlibViewer.matplotlibVectorViewer", "generated/fipy.viewers.matplotlibViewer.test", "generated/fipy.viewers.mayaviViewer", "generated/fipy.viewers.mayaviViewer.mayaviClient", "generated/fipy.viewers.mayaviViewer.mayaviDaemon", "generated/fipy.viewers.mayaviViewer.test", "generated/fipy.viewers.multiViewer", "generated/fipy.viewers.test", "generated/fipy.viewers.testinteractive", "generated/fipy.viewers.tsvViewer", "generated/fipy.viewers.viewer", "generated/fipy.viewers.vtkViewer", "generated/fipy.viewers.vtkViewer.test", "generated/fipy.viewers.vtkViewer.vtkCellViewer", "generated/fipy.viewers.vtkViewer.vtkFaceViewer", "generated/fipy.viewers.vtkViewer.vtkViewer", "glossary", "introduction", "manual", "numerical/discret", "numerical/equation", "numerical/index", "numerical/scheme", "references", "tutorial/generated/package", "tutorial/generated/package.subpackage", "tutorial/generated/package.subpackage.base", "tutorial/generated/package.subpackage.object", "tutorial/index"], "filenames": ["ADMINISTRATA.rst", "API.rst", "CHANGELOG.rst", "CONTACT.rst", "CREDITS.rst", "DISCLAIMER.rst", "EFFICIENCY.rst", "EXAMPLES.rst", "FAQ.rst", "GIT.rst", "GUIDELINES.rst", "INSTALLATION.rst", "LICENSE.rst", "NIX-README.rst", "PUBLICATIONS.rst", "README.rst", "SOLVERS.rst", "USAGE.rst", "VIEWERS.rst", "VKML.rst", "contents.rst", "design.rst", "external_definitions.rst", "generated/examples.rst", "generated/examples.benchmarking.rst", "generated/examples.benchmarking.benchmarker.rst", "generated/examples.benchmarking.size.rst", "generated/examples.benchmarking.steps.rst", "generated/examples.benchmarking.utils.rst", "generated/examples.benchmarking.versions.rst", "generated/examples.cahnHilliard.rst", "generated/examples.cahnHilliard.mesh2D.rst", "generated/examples.cahnHilliard.mesh2DCoupled.rst", "generated/examples.cahnHilliard.mesh3D.rst", "generated/examples.cahnHilliard.sphere.rst", "generated/examples.cahnHilliard.sphereDaemon.rst", "generated/examples.cahnHilliard.tanh1D.rst", "generated/examples.cahnHilliard.test.rst", "generated/examples.chemotaxis.rst", "generated/examples.chemotaxis.input.rst", "generated/examples.chemotaxis.input2D.rst", "generated/examples.chemotaxis.parameters.rst", "generated/examples.chemotaxis.test.rst", "generated/examples.convection.rst", "generated/examples.convection.advection.rst", "generated/examples.convection.advection.explicitUpwind.rst", "generated/examples.convection.advection.implicitUpwind.rst", "generated/examples.convection.advection.vanLeerUpwind.rst", "generated/examples.convection.exponential1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1D.rst", "generated/examples.convection.exponential1D.cylindricalMesh1DNonUniform.rst", "generated/examples.convection.exponential1D.mesh1D.rst", "generated/examples.convection.exponential1D.tri2D.rst", "generated/examples.convection.exponential1DBack.rst", "generated/examples.convection.exponential1DBack.mesh1D.rst", "generated/examples.convection.exponential1DSource.rst", "generated/examples.convection.exponential1DSource.mesh1D.rst", "generated/examples.convection.exponential1DSource.tri2D.rst", "generated/examples.convection.exponential2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2D.rst", "generated/examples.convection.exponential2D.cylindricalMesh2DNonUniform.rst", "generated/examples.convection.exponential2D.mesh2D.rst", "generated/examples.convection.exponential2D.tri2D.rst", "generated/examples.convection.peclet.rst", "generated/examples.convection.powerLaw1D.rst", "generated/examples.convection.powerLaw1D.mesh1D.rst", "generated/examples.convection.powerLaw1D.tri2D.rst", "generated/examples.convection.robin.rst", "generated/examples.convection.source.rst", "generated/examples.convection.test.rst", "generated/examples.diffusion.rst", "generated/examples.diffusion.anisotropy.rst", "generated/examples.diffusion.circle.rst", "generated/examples.diffusion.circleQuad.rst", "generated/examples.diffusion.coupled.rst", "generated/examples.diffusion.electrostatics.rst", "generated/examples.diffusion.explicit.rst", "generated/examples.diffusion.explicit.mesh1D.rst", "generated/examples.diffusion.explicit.mixedelement.rst", "generated/examples.diffusion.explicit.test.rst", "generated/examples.diffusion.explicit.tri2D.rst", "generated/examples.diffusion.mesh1D.rst", "generated/examples.diffusion.mesh20x20.rst", "generated/examples.diffusion.mesh20x20Coupled.rst", "generated/examples.diffusion.nthOrder.rst", "generated/examples.diffusion.nthOrder.input4thOrder1D.rst", "generated/examples.diffusion.nthOrder.input4thOrder_line.rst", "generated/examples.diffusion.nthOrder.test.rst", "generated/examples.diffusion.steadyState.rst", "generated/examples.diffusion.steadyState.mesh1D.rst", "generated/examples.diffusion.steadyState.mesh1D.inputPeriodic.rst", "generated/examples.diffusion.steadyState.mesh1D.tri2Dinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.rst", "generated/examples.diffusion.steadyState.mesh20x20.gmshinput.rst", "generated/examples.diffusion.steadyState.mesh20x20.isotropy.rst", "generated/examples.diffusion.steadyState.mesh20x20.modifiedMeshInput.rst", "generated/examples.diffusion.steadyState.mesh20x20.orthoerror.rst", "generated/examples.diffusion.steadyState.mesh20x20.tri2Dinput.rst", "generated/examples.diffusion.steadyState.mesh50x50.rst", "generated/examples.diffusion.steadyState.mesh50x50.input.rst", "generated/examples.diffusion.steadyState.mesh50x50.tri2Dinput.rst", "generated/examples.diffusion.steadyState.otherMeshes.rst", "generated/examples.diffusion.steadyState.otherMeshes.prism.rst", "generated/examples.diffusion.steadyState.test.rst", "generated/examples.diffusion.test.rst", "generated/examples.diffusion.variable.rst", "generated/examples.elphf.rst", "generated/examples.elphf.diffusion.rst", "generated/examples.elphf.diffusion.mesh1D.rst", "generated/examples.elphf.diffusion.mesh1Ddimensional.rst", "generated/examples.elphf.diffusion.mesh2D.rst", "generated/examples.elphf.input.rst", "generated/examples.elphf.phase.rst", "generated/examples.elphf.phaseDiffusion.rst", "generated/examples.elphf.poisson.rst", "generated/examples.elphf.test.rst", "generated/examples.flow.rst", "generated/examples.flow.stokesCavity.rst", "generated/examples.flow.test.rst", "generated/examples.levelSet.rst", "generated/examples.levelSet.advection.rst", "generated/examples.levelSet.advection.circle.rst", "generated/examples.levelSet.advection.mesh1D.rst", "generated/examples.levelSet.advection.test.rst", "generated/examples.levelSet.advection.trench.rst", "generated/examples.levelSet.distanceFunction.rst", "generated/examples.levelSet.distanceFunction.circle.rst", "generated/examples.levelSet.distanceFunction.interior.rst", "generated/examples.levelSet.distanceFunction.mesh1D.rst", "generated/examples.levelSet.distanceFunction.square.rst", "generated/examples.levelSet.distanceFunction.test.rst", "generated/examples.levelSet.electroChem.rst", "generated/examples.levelSet.electroChem.adsorbingSurfactantEquation.rst", "generated/examples.levelSet.electroChem.adsorption.rst", "generated/examples.levelSet.electroChem.gapFillDistanceVariable.rst", "generated/examples.levelSet.electroChem.gapFillMesh.rst", "generated/examples.levelSet.electroChem.gold.rst", "generated/examples.levelSet.electroChem.howToWriteAScript.rst", "generated/examples.levelSet.electroChem.leveler.rst", "generated/examples.levelSet.electroChem.lines.rst", "generated/examples.levelSet.electroChem.matplotlibSurfactantViewer.rst", "generated/examples.levelSet.electroChem.mayaviSurfactantViewer.rst", "generated/examples.levelSet.electroChem.metalIonDiffusionEquation.rst", "generated/examples.levelSet.electroChem.simpleTrenchSystem.rst", "generated/examples.levelSet.electroChem.surfactantBulkDiffusionEquation.rst", "generated/examples.levelSet.electroChem.test.rst", "generated/examples.levelSet.electroChem.trenchMesh.rst", "generated/examples.levelSet.surfactant.rst", "generated/examples.levelSet.surfactant.circle.rst", "generated/examples.levelSet.surfactant.expandingCircle.rst", "generated/examples.levelSet.surfactant.square.rst", "generated/examples.levelSet.surfactant.test.rst", "generated/examples.levelSet.test.rst", "generated/examples.meshing.rst", "generated/examples.meshing.gmshRefinement.rst", "generated/examples.meshing.inputGrid2D.rst", "generated/examples.meshing.sphere.rst", "generated/examples.meshing.test.rst", "generated/examples.parallel.rst", "generated/examples.phase.rst", "generated/examples.phase.anisotropy.rst", "generated/examples.phase.anisotropyOLD.rst", "generated/examples.phase.binary.rst", "generated/examples.phase.binaryCoupled.rst", "generated/examples.phase.impingement.rst", "generated/examples.phase.impingement.mesh20x20.rst", "generated/examples.phase.impingement.mesh40x1.rst", "generated/examples.phase.impingement.test.rst", "generated/examples.phase.missOrientation.rst", "generated/examples.phase.missOrientation.circle.rst", "generated/examples.phase.missOrientation.mesh1D.rst", "generated/examples.phase.missOrientation.modCircle.rst", "generated/examples.phase.missOrientation.test.rst", "generated/examples.phase.polyxtal.rst", "generated/examples.phase.polyxtalCoupled.rst", "generated/examples.phase.quaternary.rst", "generated/examples.phase.simple.rst", "generated/examples.phase.symmetry.rst", "generated/examples.phase.test.rst", "generated/examples.reactiveWetting.rst", "generated/examples.reactiveWetting.liquidVapor1D.rst", "generated/examples.reactiveWetting.liquidVapor2D.rst", "generated/examples.reactiveWetting.test.rst", "generated/examples.riemann.rst", "generated/examples.riemann.test.rst", "generated/examples.test.rst", "generated/examples.updating.rst", "generated/examples.updating.update0_1to1_0.rst", "generated/examples.updating.update1_0to2_0.rst", "generated/examples.updating.update2_0to3_0.rst", "generated/fipy.rst", "generated/fipy.boundaryConditions.rst", "generated/fipy.boundaryConditions.boundaryCondition.rst", "generated/fipy.boundaryConditions.constraint.rst", "generated/fipy.boundaryConditions.fixedFlux.rst", "generated/fipy.boundaryConditions.fixedValue.rst", "generated/fipy.boundaryConditions.nthOrderBoundaryCondition.rst", "generated/fipy.boundaryConditions.test.rst", "generated/fipy.matrices.rst", "generated/fipy.matrices.offsetSparseMatrix.rst", "generated/fipy.matrices.petscMatrix.rst", "generated/fipy.matrices.pysparseMatrix.rst", "generated/fipy.matrices.scipyMatrix.rst", "generated/fipy.matrices.sparseMatrix.rst", "generated/fipy.matrices.test.rst", "generated/fipy.matrices.trilinosMatrix.rst", "generated/fipy.meshes.rst", "generated/fipy.meshes.abstractMesh.rst", "generated/fipy.meshes.builders.rst", "generated/fipy.meshes.builders.abstractGridBuilder.rst", "generated/fipy.meshes.builders.grid1DBuilder.rst", "generated/fipy.meshes.builders.grid2DBuilder.rst", "generated/fipy.meshes.builders.grid3DBuilder.rst", "generated/fipy.meshes.builders.periodicGrid1DBuilder.rst", "generated/fipy.meshes.builders.utilityClasses.rst", "generated/fipy.meshes.cylindricalGrid1D.rst", "generated/fipy.meshes.cylindricalGrid2D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid1D.rst", "generated/fipy.meshes.cylindricalNonUniformGrid2D.rst", "generated/fipy.meshes.cylindricalUniformGrid1D.rst", "generated/fipy.meshes.cylindricalUniformGrid2D.rst", "generated/fipy.meshes.factoryMeshes.rst", "generated/fipy.meshes.gmshMesh.rst", "generated/fipy.meshes.grid1D.rst", "generated/fipy.meshes.grid2D.rst", "generated/fipy.meshes.grid3D.rst", "generated/fipy.meshes.mesh.rst", "generated/fipy.meshes.mesh1D.rst", "generated/fipy.meshes.mesh2D.rst", "generated/fipy.meshes.nonUniformGrid1D.rst", "generated/fipy.meshes.nonUniformGrid2D.rst", "generated/fipy.meshes.nonUniformGrid3D.rst", "generated/fipy.meshes.periodicGrid1D.rst", "generated/fipy.meshes.periodicGrid2D.rst", "generated/fipy.meshes.periodicGrid3D.rst", "generated/fipy.meshes.representations.rst", "generated/fipy.meshes.representations.abstractRepresentation.rst", "generated/fipy.meshes.representations.gridRepresentation.rst", "generated/fipy.meshes.representations.meshRepresentation.rst", "generated/fipy.meshes.skewedGrid2D.rst", "generated/fipy.meshes.sphericalNonUniformGrid1D.rst", "generated/fipy.meshes.sphericalUniformGrid1D.rst", "generated/fipy.meshes.test.rst", "generated/fipy.meshes.topologies.rst", "generated/fipy.meshes.topologies.abstractTopology.rst", "generated/fipy.meshes.topologies.gridTopology.rst", "generated/fipy.meshes.topologies.meshTopology.rst", "generated/fipy.meshes.tri2D.rst", "generated/fipy.meshes.uniformGrid.rst", "generated/fipy.meshes.uniformGrid1D.rst", "generated/fipy.meshes.uniformGrid2D.rst", "generated/fipy.solvers.rst", "generated/fipy.solvers.convergence.rst", "generated/fipy.solvers.petsc.rst", "generated/fipy.solvers.petsc.comms.rst", "generated/fipy.solvers.petsc.comms.parallelPETScCommWrapper.rst", "generated/fipy.solvers.petsc.comms.petscCommWrapper.rst", "generated/fipy.solvers.petsc.comms.serialPETScCommWrapper.rst", "generated/fipy.solvers.petsc.dummySolver.rst", "generated/fipy.solvers.petsc.linearBicgSolver.rst", "generated/fipy.solvers.petsc.linearCGSSolver.rst", "generated/fipy.solvers.petsc.linearGMRESSolver.rst", "generated/fipy.solvers.petsc.linearLUSolver.rst", "generated/fipy.solvers.petsc.linearPCGSolver.rst", "generated/fipy.solvers.petsc.petscConvergence.rst", "generated/fipy.solvers.petsc.petscKrylovSolver.rst", "generated/fipy.solvers.petsc.petscSolver.rst", "generated/fipy.solvers.petsc.preconditioners.rst", "generated/fipy.solvers.petsc.preconditioners.defaultPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.icPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.iluPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.luPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.petscPreconditioner.rst", "generated/fipy.solvers.petsc.preconditioners.ssorPreconditioner.rst", "generated/fipy.solvers.preconditioner.rst", "generated/fipy.solvers.pyAMG.rst", "generated/fipy.solvers.pyAMG.linearCGSSolver.rst", "generated/fipy.solvers.pyAMG.linearGMRESSolver.rst", "generated/fipy.solvers.pyAMG.linearGeneralSolver.rst", "generated/fipy.solvers.pyAMG.linearLUSolver.rst", "generated/fipy.solvers.pyAMG.linearPCGSolver.rst", "generated/fipy.solvers.pyAMG.preconditioners.rst", "generated/fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.rst", "generated/fipy.solvers.pyamgx.rst", "generated/fipy.solvers.pyamgx.aggregationAMGSolver.rst", "generated/fipy.solvers.pyamgx.classicalAMGSolver.rst", "generated/fipy.solvers.pyamgx.linearBiCGStabSolver.rst", "generated/fipy.solvers.pyamgx.linearFGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearGMRESSolver.rst", "generated/fipy.solvers.pyamgx.linearLUSolver.rst", "generated/fipy.solvers.pyamgx.linearPCGSolver.rst", "generated/fipy.solvers.pyamgx.preconditioners.rst", "generated/fipy.solvers.pyamgx.pyAMGXSolver.rst", "generated/fipy.solvers.pyamgx.pyamgxConvergence.rst", "generated/fipy.solvers.pyamgx.smoothers.rst", "generated/fipy.solvers.pysparse.rst", "generated/fipy.solvers.pysparse.linearCGSSolver.rst", "generated/fipy.solvers.pysparse.linearGMRESSolver.rst", "generated/fipy.solvers.pysparse.linearInitialSolver.rst", "generated/fipy.solvers.pysparse.linearJORSolver.rst", "generated/fipy.solvers.pysparse.linearLUSolver.rst", "generated/fipy.solvers.pysparse.linearPCGSolver.rst", "generated/fipy.solvers.pysparse.linearRHSSolver.rst", "generated/fipy.solvers.pysparse.preconditioners.rst", "generated/fipy.solvers.pysparse.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.pysparse.preconditioners.pysparsePreconditioner.rst", "generated/fipy.solvers.pysparse.preconditioners.ssorPreconditioner.rst", "generated/fipy.solvers.pysparse.pysparseConvergence.rst", "generated/fipy.solvers.pysparse.pysparseSolver.rst", "generated/fipy.solvers.pysparseMatrixSolver.rst", "generated/fipy.solvers.scipy.rst", "generated/fipy.solvers.scipy.linearBicgstabSolver.rst", "generated/fipy.solvers.scipy.linearCGSSolver.rst", "generated/fipy.solvers.scipy.linearGMRESSolver.rst", "generated/fipy.solvers.scipy.linearLUSolver.rst", "generated/fipy.solvers.scipy.linearPCGSolver.rst", "generated/fipy.solvers.scipy.preconditioners.rst", "generated/fipy.solvers.scipy.preconditioners.iluPreconditioner.rst", "generated/fipy.solvers.scipy.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.scipy.preconditioners.scipyPreconditioner.rst", "generated/fipy.solvers.scipy.scipyConvergence.rst", "generated/fipy.solvers.scipy.scipyKrylovSolver.rst", "generated/fipy.solvers.scipy.scipySolver.rst", "generated/fipy.solvers.solver.rst", "generated/fipy.solvers.test.rst", "generated/fipy.solvers.trilinos.rst", "generated/fipy.solvers.trilinos.aztecConvergence.rst", "generated/fipy.solvers.trilinos.comms.rst", "generated/fipy.solvers.trilinos.comms.epetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.comms.serialEpetraCommWrapper.rst", "generated/fipy.solvers.trilinos.linearBicgstabSolver.rst", "generated/fipy.solvers.trilinos.linearCGSSolver.rst", "generated/fipy.solvers.trilinos.linearGMRESSolver.rst", "generated/fipy.solvers.trilinos.linearLUSolver.rst", "generated/fipy.solvers.trilinos.linearPCGSolver.rst", "generated/fipy.solvers.trilinos.preconditioners.rst", "generated/fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.icPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.iluPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.rst", "generated/fipy.solvers.trilinos.preconditioners.trilinosPreconditioner.rst", "generated/fipy.solvers.trilinos.trilinosAztecOOSolver.rst", "generated/fipy.solvers.trilinos.trilinosMLTest.rst", "generated/fipy.solvers.trilinos.trilinosNonlinearSolver.rst", "generated/fipy.solvers.trilinos.trilinosSolver.rst", "generated/fipy.steppers.rst", "generated/fipy.steppers.pidStepper.rst", "generated/fipy.steppers.pseudoRKQSStepper.rst", "generated/fipy.steppers.stepper.rst", "generated/fipy.terms.rst", "generated/fipy.terms.abstractBinaryTerm.rst", "generated/fipy.terms.abstractConvectionTerm.rst", "generated/fipy.terms.abstractDiffusionTerm.rst", "generated/fipy.terms.abstractUpwindConvectionTerm.rst", "generated/fipy.terms.advectionTerm.rst", "generated/fipy.terms.asymmetricConvectionTerm.rst", "generated/fipy.terms.binaryTerm.rst", "generated/fipy.terms.cellTerm.rst", "generated/fipy.terms.centralDiffConvectionTerm.rst", "generated/fipy.terms.coupledBinaryTerm.rst", "generated/fipy.terms.diffusionTerm.rst", "generated/fipy.terms.diffusionTermCorrection.rst", "generated/fipy.terms.diffusionTermNoCorrection.rst", "generated/fipy.terms.explicitDiffusionTerm.rst", "generated/fipy.terms.explicitSourceTerm.rst", "generated/fipy.terms.explicitUpwindConvectionTerm.rst", "generated/fipy.terms.exponentialConvectionTerm.rst", "generated/fipy.terms.faceTerm.rst", "generated/fipy.terms.firstOrderAdvectionTerm.rst", "generated/fipy.terms.hybridConvectionTerm.rst", "generated/fipy.terms.implicitDiffusionTerm.rst", "generated/fipy.terms.implicitSourceTerm.rst", "generated/fipy.terms.nonDiffusionTerm.rst", "generated/fipy.terms.powerLawConvectionTerm.rst", "generated/fipy.terms.residualTerm.rst", "generated/fipy.terms.sourceTerm.rst", "generated/fipy.terms.term.rst", "generated/fipy.terms.test.rst", "generated/fipy.terms.transientTerm.rst", "generated/fipy.terms.unaryTerm.rst", "generated/fipy.terms.upwindConvectionTerm.rst", "generated/fipy.terms.vanLeerConvectionTerm.rst", "generated/fipy.testFiPy.rst", "generated/fipy.tests.rst", "generated/fipy.tests.doctestPlus.rst", "generated/fipy.tests.lateImportTest.rst", "generated/fipy.tests.test.rst", "generated/fipy.tests.testProgram.rst", "generated/fipy.tools.rst", "generated/fipy.tools.comms.rst", "generated/fipy.tools.comms.commWrapper.rst", "generated/fipy.tools.comms.dummyComm.rst", "generated/fipy.tools.debug.rst", "generated/fipy.tools.decorators.rst", "generated/fipy.tools.dimensions.rst", "generated/fipy.tools.dimensions.DictWithDefault.rst", "generated/fipy.tools.dimensions.NumberDict.rst", "generated/fipy.tools.dimensions.physicalField.rst", "generated/fipy.tools.dump.rst", "generated/fipy.tools.inline.rst", "generated/fipy.tools.logging.rst", "generated/fipy.tools.logging.environment.rst", "generated/fipy.tools.numerix.rst", "generated/fipy.tools.parser.rst", "generated/fipy.tools.sharedtempfile.rst", "generated/fipy.tools.test.rst", "generated/fipy.tools.vector.rst", "generated/fipy.tools.version.rst", "generated/fipy.variables.rst", "generated/fipy.variables.addOverFacesVariable.rst", "generated/fipy.variables.arithmeticCellToFaceVariable.rst", "generated/fipy.variables.betaNoiseVariable.rst", "generated/fipy.variables.binaryOperatorVariable.rst", "generated/fipy.variables.cellToFaceVariable.rst", "generated/fipy.variables.cellVariable.rst", "generated/fipy.variables.constant.rst", "generated/fipy.variables.constraintMask.rst", "generated/fipy.variables.coupledCellVariable.rst", "generated/fipy.variables.distanceVariable.rst", "generated/fipy.variables.exponentialNoiseVariable.rst", "generated/fipy.variables.faceGradContributionsVariable.rst", "generated/fipy.variables.faceGradVariable.rst", "generated/fipy.variables.faceVariable.rst", "generated/fipy.variables.gammaNoiseVariable.rst", "generated/fipy.variables.gaussCellGradVariable.rst", "generated/fipy.variables.gaussianNoiseVariable.rst", "generated/fipy.variables.harmonicCellToFaceVariable.rst", "generated/fipy.variables.histogramVariable.rst", "generated/fipy.variables.interfaceAreaVariable.rst", "generated/fipy.variables.interfaceFlagVariable.rst", "generated/fipy.variables.leastSquaresCellGradVariable.rst", "generated/fipy.variables.levelSetDiffusionVariable.rst", "generated/fipy.variables.meshVariable.rst", "generated/fipy.variables.minmodCellToFaceVariable.rst", "generated/fipy.variables.modCellGradVariable.rst", "generated/fipy.variables.modCellToFaceVariable.rst", "generated/fipy.variables.modFaceGradVariable.rst", "generated/fipy.variables.modPhysicalField.rst", "generated/fipy.variables.modularVariable.rst", "generated/fipy.variables.noiseVariable.rst", "generated/fipy.variables.operatorVariable.rst", "generated/fipy.variables.scharfetterGummelFaceVariable.rst", "generated/fipy.variables.surfactantConvectionVariable.rst", "generated/fipy.variables.surfactantVariable.rst", "generated/fipy.variables.test.rst", "generated/fipy.variables.unaryOperatorVariable.rst", "generated/fipy.variables.uniformNoiseVariable.rst", "generated/fipy.variables.variable.rst", "generated/fipy.viewers.rst", "generated/fipy.viewers.matplotlibViewer.rst", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.rst", "generated/fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib1DViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlib2DViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibStreamViewer.rst", "generated/fipy.viewers.matplotlibViewer.matplotlibVectorViewer.rst", "generated/fipy.viewers.matplotlibViewer.test.rst", "generated/fipy.viewers.mayaviViewer.rst", "generated/fipy.viewers.mayaviViewer.mayaviClient.rst", "generated/fipy.viewers.mayaviViewer.mayaviDaemon.rst", "generated/fipy.viewers.mayaviViewer.test.rst", "generated/fipy.viewers.multiViewer.rst", "generated/fipy.viewers.test.rst", "generated/fipy.viewers.testinteractive.rst", "generated/fipy.viewers.tsvViewer.rst", "generated/fipy.viewers.viewer.rst", "generated/fipy.viewers.vtkViewer.rst", "generated/fipy.viewers.vtkViewer.test.rst", "generated/fipy.viewers.vtkViewer.vtkCellViewer.rst", "generated/fipy.viewers.vtkViewer.vtkFaceViewer.rst", "generated/fipy.viewers.vtkViewer.vtkViewer.rst", "glossary.rst", "introduction.rst", "manual.rst", "numerical/discret.rst", "numerical/equation.rst", "numerical/index.rst", "numerical/scheme.rst", "references.rst", "tutorial/generated/package.rst", "tutorial/generated/package.subpackage.rst", "tutorial/generated/package.subpackage.base.rst", "tutorial/generated/package.subpackage.object.rst", "tutorial/index.rst"], "titles": ["Git practices", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fipy</span></code> Package Documentation", "Change Log", "Contact", "Contributors", "Disclaimer", "Efficiency", "Examples", "Frequently Asked Questions", "Git usage", "Development Guidelines", "Installation", "Terms of Use", "Nix Installation", "Publications", "Overview", "Solvers", "Using FiPy", "Viewers", "Virtual Kinetics of Materials Laboratory", "FiPy Contents", "Design and Implementation", "External Command-line Flags", "examples", "examples.benchmarking", "examples.benchmarking.benchmarker", "examples.benchmarking.size", "examples.benchmarking.steps", "examples.benchmarking.utils", "examples.benchmarking.versions", "examples.cahnHilliard", "examples.cahnHilliard.mesh2D", "examples.cahnHilliard.mesh2DCoupled", "examples.cahnHilliard.mesh3D", "examples.cahnHilliard.sphere", "examples.cahnHilliard.sphereDaemon", "examples.cahnHilliard.tanh1D", "examples.cahnHilliard.test", "examples.chemotaxis", "examples.chemotaxis.input", "examples.chemotaxis.input2D", "examples.chemotaxis.parameters", "examples.chemotaxis.test", "examples.convection", "examples.convection.advection", "examples.convection.advection.explicitUpwind", "examples.convection.advection.implicitUpwind", "examples.convection.advection.vanLeerUpwind", "examples.convection.exponential1D", "examples.convection.exponential1D.cylindricalMesh1D", "examples.convection.exponential1D.cylindricalMesh1DNonUniform", "examples.convection.exponential1D.mesh1D", "examples.convection.exponential1D.tri2D", "examples.convection.exponential1DBack", "examples.convection.exponential1DBack.mesh1D", "examples.convection.exponential1DSource", "examples.convection.exponential1DSource.mesh1D", "examples.convection.exponential1DSource.tri2D", "examples.convection.exponential2D", "examples.convection.exponential2D.cylindricalMesh2D", "examples.convection.exponential2D.cylindricalMesh2DNonUniform", "examples.convection.exponential2D.mesh2D", "examples.convection.exponential2D.tri2D", "examples.convection.peclet", "examples.convection.powerLaw1D", "examples.convection.powerLaw1D.mesh1D", "examples.convection.powerLaw1D.tri2D", "examples.convection.robin", "examples.convection.source", "examples.convection.test", "examples.diffusion", "examples.diffusion.anisotropy", "examples.diffusion.circle", "examples.diffusion.circleQuad", "examples.diffusion.coupled", "examples.diffusion.electrostatics", "examples.diffusion.explicit", "examples.diffusion.explicit.mesh1D", "examples.diffusion.explicit.mixedelement", "examples.diffusion.explicit.test", "examples.diffusion.explicit.tri2D", "examples.diffusion.mesh1D", "examples.diffusion.mesh20x20", "examples.diffusion.mesh20x20Coupled", "examples.diffusion.nthOrder", "examples.diffusion.nthOrder.input4thOrder1D", "examples.diffusion.nthOrder.input4thOrder_line", "examples.diffusion.nthOrder.test", "examples.diffusion.steadyState", "examples.diffusion.steadyState.mesh1D", "examples.diffusion.steadyState.mesh1D.inputPeriodic", "examples.diffusion.steadyState.mesh1D.tri2Dinput", "examples.diffusion.steadyState.mesh20x20", "examples.diffusion.steadyState.mesh20x20.gmshinput", "examples.diffusion.steadyState.mesh20x20.isotropy", "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput", "examples.diffusion.steadyState.mesh20x20.orthoerror", "examples.diffusion.steadyState.mesh20x20.tri2Dinput", "examples.diffusion.steadyState.mesh50x50", "examples.diffusion.steadyState.mesh50x50.input", "examples.diffusion.steadyState.mesh50x50.tri2Dinput", "examples.diffusion.steadyState.otherMeshes", "examples.diffusion.steadyState.otherMeshes.prism", "examples.diffusion.steadyState.test", "examples.diffusion.test", "examples.diffusion.variable", "examples.elphf", "examples.elphf.diffusion", "examples.elphf.diffusion.mesh1D", "examples.elphf.diffusion.mesh1Ddimensional", "examples.elphf.diffusion.mesh2D", "examples.elphf.input", "examples.elphf.phase", "examples.elphf.phaseDiffusion", "examples.elphf.poisson", "examples.elphf.test", "examples.flow", "examples.flow.stokesCavity", "examples.flow.test", "examples.levelSet", "examples.levelSet.advection", "examples.levelSet.advection.circle", "examples.levelSet.advection.mesh1D", "examples.levelSet.advection.test", "examples.levelSet.advection.trench", "examples.levelSet.distanceFunction", "examples.levelSet.distanceFunction.circle", "examples.levelSet.distanceFunction.interior", "examples.levelSet.distanceFunction.mesh1D", "examples.levelSet.distanceFunction.square", "examples.levelSet.distanceFunction.test", "examples.levelSet.electroChem", "examples.levelSet.electroChem.adsorbingSurfactantEquation", "examples.levelSet.electroChem.adsorption", "examples.levelSet.electroChem.gapFillDistanceVariable", "examples.levelSet.electroChem.gapFillMesh", "examples.levelSet.electroChem.gold", "examples.levelSet.electroChem.howToWriteAScript", "examples.levelSet.electroChem.leveler", "examples.levelSet.electroChem.lines", "examples.levelSet.electroChem.matplotlibSurfactantViewer", "examples.levelSet.electroChem.mayaviSurfactantViewer", "examples.levelSet.electroChem.metalIonDiffusionEquation", "examples.levelSet.electroChem.simpleTrenchSystem", "examples.levelSet.electroChem.surfactantBulkDiffusionEquation", "examples.levelSet.electroChem.test", "examples.levelSet.electroChem.trenchMesh", "examples.levelSet.surfactant", "examples.levelSet.surfactant.circle", "examples.levelSet.surfactant.expandingCircle", "examples.levelSet.surfactant.square", "examples.levelSet.surfactant.test", "examples.levelSet.test", "examples.meshing", "examples.meshing.gmshRefinement", "examples.meshing.inputGrid2D", "examples.meshing.sphere", "examples.meshing.test", "examples.parallel", "examples.phase", "examples.phase.anisotropy", "examples.phase.anisotropyOLD", "examples.phase.binary", "examples.phase.binaryCoupled", "examples.phase.impingement", "examples.phase.impingement.mesh20x20", "examples.phase.impingement.mesh40x1", "examples.phase.impingement.test", "examples.phase.missOrientation", "examples.phase.missOrientation.circle", "examples.phase.missOrientation.mesh1D", "examples.phase.missOrientation.modCircle", "examples.phase.missOrientation.test", "examples.phase.polyxtal", "examples.phase.polyxtalCoupled", "examples.phase.quaternary", "examples.phase.simple", "examples.phase.symmetry", "examples.phase.test", "examples.reactiveWetting", "examples.reactiveWetting.liquidVapor1D", "examples.reactiveWetting.liquidVapor2D", "examples.reactiveWetting.test", "examples.riemann", "examples.riemann.test", "examples.test", "examples.updating", "examples.updating.update0_1to1_0", "examples.updating.update1_0to2_0", "examples.updating.update2_0to3_0", "fipy", "fipy.boundaryConditions", "fipy.boundaryConditions.boundaryCondition", "fipy.boundaryConditions.constraint", "fipy.boundaryConditions.fixedFlux", "fipy.boundaryConditions.fixedValue", "fipy.boundaryConditions.nthOrderBoundaryCondition", "fipy.boundaryConditions.test", "fipy.matrices", "fipy.matrices.offsetSparseMatrix", "fipy.matrices.petscMatrix", "fipy.matrices.pysparseMatrix", "fipy.matrices.scipyMatrix", "fipy.matrices.sparseMatrix", "fipy.matrices.test", "fipy.matrices.trilinosMatrix", "fipy.meshes", "fipy.meshes.abstractMesh", "fipy.meshes.builders", "fipy.meshes.builders.abstractGridBuilder", "fipy.meshes.builders.grid1DBuilder", "fipy.meshes.builders.grid2DBuilder", "fipy.meshes.builders.grid3DBuilder", "fipy.meshes.builders.periodicGrid1DBuilder", "fipy.meshes.builders.utilityClasses", "fipy.meshes.cylindricalGrid1D", "fipy.meshes.cylindricalGrid2D", "fipy.meshes.cylindricalNonUniformGrid1D", "fipy.meshes.cylindricalNonUniformGrid2D", "fipy.meshes.cylindricalUniformGrid1D", "fipy.meshes.cylindricalUniformGrid2D", "fipy.meshes.factoryMeshes", "fipy.meshes.gmshMesh", "fipy.meshes.grid1D", "fipy.meshes.grid2D", "fipy.meshes.grid3D", "fipy.meshes.mesh", "fipy.meshes.mesh1D", "fipy.meshes.mesh2D", "fipy.meshes.nonUniformGrid1D", "fipy.meshes.nonUniformGrid2D", "fipy.meshes.nonUniformGrid3D", "fipy.meshes.periodicGrid1D", "fipy.meshes.periodicGrid2D", "fipy.meshes.periodicGrid3D", "fipy.meshes.representations", "fipy.meshes.representations.abstractRepresentation", "fipy.meshes.representations.gridRepresentation", "fipy.meshes.representations.meshRepresentation", "fipy.meshes.skewedGrid2D", "fipy.meshes.sphericalNonUniformGrid1D", "fipy.meshes.sphericalUniformGrid1D", "fipy.meshes.test", "fipy.meshes.topologies", "fipy.meshes.topologies.abstractTopology", "fipy.meshes.topologies.gridTopology", "fipy.meshes.topologies.meshTopology", "fipy.meshes.tri2D", "fipy.meshes.uniformGrid", "fipy.meshes.uniformGrid1D", "fipy.meshes.uniformGrid2D", "fipy.solvers", "fipy.solvers.convergence", "fipy.solvers.petsc", "fipy.solvers.petsc.comms", "fipy.solvers.petsc.comms.parallelPETScCommWrapper", "fipy.solvers.petsc.comms.petscCommWrapper", "fipy.solvers.petsc.comms.serialPETScCommWrapper", "fipy.solvers.petsc.dummySolver", "fipy.solvers.petsc.linearBicgSolver", "fipy.solvers.petsc.linearCGSSolver", "fipy.solvers.petsc.linearGMRESSolver", "fipy.solvers.petsc.linearLUSolver", "fipy.solvers.petsc.linearPCGSolver", "fipy.solvers.petsc.petscConvergence", "fipy.solvers.petsc.petscKrylovSolver", "fipy.solvers.petsc.petscSolver", "fipy.solvers.petsc.preconditioners", "fipy.solvers.petsc.preconditioners.defaultPreconditioner", "fipy.solvers.petsc.preconditioners.icPreconditioner", "fipy.solvers.petsc.preconditioners.iluPreconditioner", "fipy.solvers.petsc.preconditioners.jacobiPreconditioner", "fipy.solvers.petsc.preconditioners.luPreconditioner", "fipy.solvers.petsc.preconditioners.petscPreconditioner", "fipy.solvers.petsc.preconditioners.ssorPreconditioner", "fipy.solvers.preconditioner", "fipy.solvers.pyAMG", "fipy.solvers.pyAMG.linearCGSSolver", "fipy.solvers.pyAMG.linearGMRESSolver", "fipy.solvers.pyAMG.linearGeneralSolver", "fipy.solvers.pyAMG.linearLUSolver", "fipy.solvers.pyAMG.linearPCGSolver", "fipy.solvers.pyAMG.preconditioners", "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner", "fipy.solvers.pyamgx", "fipy.solvers.pyamgx.aggregationAMGSolver", "fipy.solvers.pyamgx.classicalAMGSolver", "fipy.solvers.pyamgx.linearBiCGStabSolver", "fipy.solvers.pyamgx.linearFGMRESSolver", "fipy.solvers.pyamgx.linearGMRESSolver", "fipy.solvers.pyamgx.linearLUSolver", "fipy.solvers.pyamgx.linearPCGSolver", "fipy.solvers.pyamgx.preconditioners", "fipy.solvers.pyamgx.pyAMGXSolver", "fipy.solvers.pyamgx.pyamgxConvergence", "fipy.solvers.pyamgx.smoothers", "fipy.solvers.pysparse", "fipy.solvers.pysparse.linearCGSSolver", "fipy.solvers.pysparse.linearGMRESSolver", "fipy.solvers.pysparse.linearInitialSolver", "fipy.solvers.pysparse.linearJORSolver", "fipy.solvers.pysparse.linearLUSolver", "fipy.solvers.pysparse.linearPCGSolver", "fipy.solvers.pysparse.linearRHSSolver", "fipy.solvers.pysparse.preconditioners", "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner", "fipy.solvers.pysparse.preconditioners.pysparsePreconditioner", "fipy.solvers.pysparse.preconditioners.ssorPreconditioner", "fipy.solvers.pysparse.pysparseConvergence", "fipy.solvers.pysparse.pysparseSolver", "fipy.solvers.pysparseMatrixSolver", "fipy.solvers.scipy", "fipy.solvers.scipy.linearBicgstabSolver", "fipy.solvers.scipy.linearCGSSolver", "fipy.solvers.scipy.linearGMRESSolver", "fipy.solvers.scipy.linearLUSolver", "fipy.solvers.scipy.linearPCGSolver", "fipy.solvers.scipy.preconditioners", "fipy.solvers.scipy.preconditioners.iluPreconditioner", "fipy.solvers.scipy.preconditioners.jacobiPreconditioner", "fipy.solvers.scipy.preconditioners.scipyPreconditioner", "fipy.solvers.scipy.scipyConvergence", "fipy.solvers.scipy.scipyKrylovSolver", "fipy.solvers.scipy.scipySolver", "fipy.solvers.solver", "fipy.solvers.test", "fipy.solvers.trilinos", "fipy.solvers.trilinos.aztecConvergence", "fipy.solvers.trilinos.comms", "fipy.solvers.trilinos.comms.epetraCommWrapper", "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper", "fipy.solvers.trilinos.comms.serialEpetraCommWrapper", "fipy.solvers.trilinos.linearBicgstabSolver", "fipy.solvers.trilinos.linearCGSSolver", "fipy.solvers.trilinos.linearGMRESSolver", "fipy.solvers.trilinos.linearLUSolver", "fipy.solvers.trilinos.linearPCGSolver", "fipy.solvers.trilinos.preconditioners", "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner", "fipy.solvers.trilinos.preconditioners.icPreconditioner", "fipy.solvers.trilinos.preconditioners.iluPreconditioner", "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner", "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner", "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner", "fipy.solvers.trilinos.trilinosAztecOOSolver", "fipy.solvers.trilinos.trilinosMLTest", "fipy.solvers.trilinos.trilinosNonlinearSolver", "fipy.solvers.trilinos.trilinosSolver", "fipy.steppers", "fipy.steppers.pidStepper", "fipy.steppers.pseudoRKQSStepper", "fipy.steppers.stepper", "fipy.terms", "fipy.terms.abstractBinaryTerm", "fipy.terms.abstractConvectionTerm", "fipy.terms.abstractDiffusionTerm", "fipy.terms.abstractUpwindConvectionTerm", "fipy.terms.advectionTerm", "fipy.terms.asymmetricConvectionTerm", "fipy.terms.binaryTerm", "fipy.terms.cellTerm", "fipy.terms.centralDiffConvectionTerm", "fipy.terms.coupledBinaryTerm", "fipy.terms.diffusionTerm", "fipy.terms.diffusionTermCorrection", "fipy.terms.diffusionTermNoCorrection", "fipy.terms.explicitDiffusionTerm", "fipy.terms.explicitSourceTerm", "fipy.terms.explicitUpwindConvectionTerm", "fipy.terms.exponentialConvectionTerm", "fipy.terms.faceTerm", "fipy.terms.firstOrderAdvectionTerm", "fipy.terms.hybridConvectionTerm", "fipy.terms.implicitDiffusionTerm", "fipy.terms.implicitSourceTerm", "fipy.terms.nonDiffusionTerm", "fipy.terms.powerLawConvectionTerm", "fipy.terms.residualTerm", "fipy.terms.sourceTerm", "fipy.terms.term", "fipy.terms.test", "fipy.terms.transientTerm", "fipy.terms.unaryTerm", "fipy.terms.upwindConvectionTerm", "fipy.terms.vanLeerConvectionTerm", "fipy.testFiPy", "fipy.tests", "fipy.tests.doctestPlus", "fipy.tests.lateImportTest", "fipy.tests.test", "fipy.tests.testProgram", "fipy.tools", "fipy.tools.comms", "fipy.tools.comms.commWrapper", "fipy.tools.comms.dummyComm", "fipy.tools.debug", "fipy.tools.decorators", "fipy.tools.dimensions", "fipy.tools.dimensions.DictWithDefault", "fipy.tools.dimensions.NumberDict", "fipy.tools.dimensions.physicalField", "fipy.tools.dump", "fipy.tools.inline", "fipy.tools.logging", "fipy.tools.logging.environment", "fipy.tools.numerix", "fipy.tools.parser", "fipy.tools.sharedtempfile", "fipy.tools.test", "fipy.tools.vector", "fipy.tools.version", "fipy.variables", "fipy.variables.addOverFacesVariable", "fipy.variables.arithmeticCellToFaceVariable", "fipy.variables.betaNoiseVariable", "fipy.variables.binaryOperatorVariable", "fipy.variables.cellToFaceVariable", "fipy.variables.cellVariable", "fipy.variables.constant", "fipy.variables.constraintMask", "fipy.variables.coupledCellVariable", "fipy.variables.distanceVariable", "fipy.variables.exponentialNoiseVariable", "fipy.variables.faceGradContributionsVariable", "fipy.variables.faceGradVariable", "fipy.variables.faceVariable", "fipy.variables.gammaNoiseVariable", "fipy.variables.gaussCellGradVariable", "fipy.variables.gaussianNoiseVariable", "fipy.variables.harmonicCellToFaceVariable", "fipy.variables.histogramVariable", "fipy.variables.interfaceAreaVariable", "fipy.variables.interfaceFlagVariable", "fipy.variables.leastSquaresCellGradVariable", "fipy.variables.levelSetDiffusionVariable", "fipy.variables.meshVariable", "fipy.variables.minmodCellToFaceVariable", "fipy.variables.modCellGradVariable", "fipy.variables.modCellToFaceVariable", "fipy.variables.modFaceGradVariable", "fipy.variables.modPhysicalField", "fipy.variables.modularVariable", "fipy.variables.noiseVariable", "fipy.variables.operatorVariable", "fipy.variables.scharfetterGummelFaceVariable", "fipy.variables.surfactantConvectionVariable", "fipy.variables.surfactantVariable", "fipy.variables.test", "fipy.variables.unaryOperatorVariable", "fipy.variables.uniformNoiseVariable", "fipy.variables.variable", "fipy.viewers", "fipy.viewers.matplotlibViewer", "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer", "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer", "fipy.viewers.matplotlibViewer.matplotlib1DViewer", "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer", "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer", "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer", "fipy.viewers.matplotlibViewer.matplotlib2DViewer", "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer", "fipy.viewers.matplotlibViewer.matplotlibStreamViewer", "fipy.viewers.matplotlibViewer.matplotlibVectorViewer", "fipy.viewers.matplotlibViewer.test", "fipy.viewers.mayaviViewer", "fipy.viewers.mayaviViewer.mayaviClient", "fipy.viewers.mayaviViewer.mayaviDaemon", "fipy.viewers.mayaviViewer.test", "fipy.viewers.multiViewer", "fipy.viewers.test", "fipy.viewers.testinteractive", "fipy.viewers.tsvViewer", "fipy.viewers.viewer", "fipy.viewers.vtkViewer", "fipy.viewers.vtkViewer.test", "fipy.viewers.vtkViewer.vtkCellViewer", "fipy.viewers.vtkViewer.vtkFaceViewer", "fipy.viewers.vtkViewer.vtkViewer", "Glossary", "Introduction", "FiPy Manual", "Finite Volume Method", "General Conservation Equation", "Theoretical and Numerical Background", "Numerical Schemes", "References", "package", "package.subpackage", "package.subpackage.base", "package.subpackage.object", "How to Read the Modules Documentation"], "terms": {"refer": [0, 2, 8, 15, 16, 20, 21, 71, 81, 117, 176, 180, 189, 232, 247, 292, 486, 494, 495], "usag": [0, 5, 6, 20, 485], "current": [0, 2, 8, 9, 11, 13, 15, 16, 17, 19, 47, 136, 137, 138, 143, 180, 188, 190, 351, 354, 393, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "convent": [0, 20, 485, 488], "whether": [0, 8, 10, 12, 19, 21, 74, 133, 138, 140, 141, 143, 252, 393, 397, 406, 407, 411, 413, 427, 456, 459, 460, 461, 462, 463, 464, 465, 467, 468], "fix": [0, 8, 9, 11, 20, 72, 73, 75, 81, 90, 114, 160, 173, 174, 176, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 485], "bug": [0, 2, 3, 8, 21, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "ad": [0, 2, 4, 9, 11, 17, 21, 112, 117, 165, 166, 173, 174, 176, 187, 194, 195, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 372, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 494], "featur": [0, 3, 8, 21, 117, 484, 491], "all": [0, 2, 3, 6, 8, 9, 10, 11, 12, 15, 16, 17, 18, 20, 21, 31, 32, 75, 81, 96, 104, 108, 114, 137, 140, 141, 143, 152, 155, 157, 160, 162, 163, 173, 174, 180, 182, 185, 187, 188, 189, 207, 222, 258, 265, 266, 279, 280, 290, 298, 299, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 330, 332, 333, 334, 336, 350, 352, 353, 363, 393, 395, 397, 401, 406, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484, 487, 488, 490, 494, 495], "work": [0, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 47, 63, 74, 81, 117, 161, 162, 163, 176, 180, 187, 188, 190, 351, 356, 387, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484, 485, 487, 494], "fipi": [0, 2, 3, 4, 6, 9, 10, 13, 14, 15, 16, 18, 19, 21, 23, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 91, 94, 95, 102, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 136, 137, 138, 140, 141, 143, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 188, 189, 484, 485, 487, 488, 489, 490, 492, 493, 494, 496], "should": [0, 2, 6, 8, 9, 10, 11, 15, 17, 47, 72, 73, 74, 81, 91, 136, 143, 162, 163, 176, 180, 187, 188, 189, 222, 251, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 402, 406, 411, 412, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 494, 495], "conduct": [0, 8, 81, 487, 490], "pull": [0, 20, 485], "request": [0, 2, 3, 16, 252, 264], "If": [0, 3, 7, 8, 11, 14, 16, 17, 21, 34, 36, 49, 50, 51, 56, 59, 60, 65, 72, 73, 74, 75, 77, 78, 81, 85, 108, 109, 110, 111, 112, 113, 114, 121, 136, 137, 138, 140, 141, 143, 161, 162, 163, 165, 166, 175, 176, 187, 188, 189, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 324, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 401, 402, 406, 407, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 487, 494, 495], "i": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 56, 57, 59, 60, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 93, 94, 95, 97, 99, 100, 102, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 129, 133, 135, 136, 137, 138, 143, 148, 149, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 187, 188, 189, 190, 192, 194, 196, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 273, 275, 277, 278, 279, 281, 285, 286, 287, 288, 289, 290, 291, 297, 298, 299, 301, 302, 303, 306, 308, 309, 312, 313, 314, 315, 316, 320, 322, 323, 324, 330, 332, 333, 334, 335, 336, 349, 350, 351, 353, 354, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 395, 396, 397, 401, 402, 406, 407, 410, 411, 412, 413, 415, 416, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 459, 460, 462, 464, 465, 467, 468, 472, 477, 478, 484, 485, 487, 488, 489, 490, 491, 494, 495], "alreadi": [0, 3, 10, 187, 397, 406], "report": [0, 2, 3, 17, 20, 393, 485], "github": [0, 2, 8, 9, 11, 13, 15, 16, 20, 173, 174, 484], "issu": [0, 2, 8, 9, 11, 15, 17, 20, 21, 162, 163, 188, 189, 402, 427, 467], "name": [0, 2, 5, 8, 10, 11, 17, 20, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 102, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 140, 141, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 189, 207, 222, 226, 251, 324, 358, 393, 397, 402, 406, 407, 410, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 494, 495], "accordingli": 0, "issue12345": 0, "summary_of_what_branch_address": 0, "checkout": [0, 9, 11], "b": [0, 2, 14, 16, 17, 21, 31, 32, 138, 162, 163, 165, 176, 222, 252, 279, 308, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 487, 491], "edit": [0, 2, 137, 356, 491], "add": [0, 2, 11, 14, 17, 20, 56, 111, 112, 176, 194, 195, 196, 207, 222, 226, 251, 324, 358, 383, 397, 406, 457, 472], "emac": 0, "commit": 0, "m": [0, 11, 13, 14, 17, 20, 74, 109, 111, 133, 138, 140, 143, 160, 161, 173, 174, 175, 176, 180, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 355, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 477, 485, 491], "refactoring_stage_a": 0, "refactoring_stage_b": 0, "sure": [0, 9, 11, 16, 17, 133, 188], "up": [0, 2, 3, 6, 8, 11, 13, 14, 16, 17, 18, 21, 31, 32, 72, 73, 117, 137, 161, 175, 222, 457, 472, 487], "date": [0, 2], "fetch": [0, 9, 11], "origin": [0, 2, 21, 165, 173, 174, 217, 218, 219, 220, 221, 240, 241, 249, 250, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "state": [0, 2, 8, 9, 11, 12, 31, 32, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 72, 73, 75, 81, 82, 83, 85, 91, 94, 105, 112, 137, 143, 176, 180, 187, 488, 489], "diff": [0, 36, 188, 189], "resolv": [0, 2, 8, 11, 187, 363], "ani": [0, 2, 7, 8, 9, 10, 11, 12, 15, 16, 17, 20, 21, 31, 32, 75, 114, 137, 138, 140, 141, 143, 176, 187, 188, 189, 196, 222, 232, 251, 264, 308, 363, 395, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 484, 487, 488, 494, 495], "conflict": [0, 2, 11], "test": [0, 2, 4, 6, 7, 8, 9, 11, 13, 16, 20, 23, 32, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 68, 72, 73, 77, 78, 80, 81, 82, 83, 91, 93, 95, 96, 97, 99, 100, 102, 105, 108, 112, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 148, 149, 161, 162, 163, 165, 166, 169, 170, 171, 177, 187, 190, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 252, 264, 351, 363, 366, 367, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 391, 397, 406, 407, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 461, 463, 464, 465, 467, 468, 470, 471, 476, 484, 485], "python": [0, 2, 3, 6, 7, 8, 13, 14, 15, 16, 18, 20, 22, 81, 91, 136, 137, 138, 140, 141, 143, 155, 160, 173, 174, 175, 176, 180, 188, 190, 324, 397, 406, 410, 412, 416, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 470, 471, 472, 484, 485, 487, 491, 494, 495], "setup": [0, 2, 7, 11, 13, 17, 81, 106, 108, 112, 114, 121, 122, 126, 128, 137, 190, 395], "py": [0, 2, 6, 7, 10, 11, 13, 15, 16, 17, 34, 78, 80, 81, 90, 91, 93, 94, 95, 100, 102, 105, 109, 111, 136, 137, 138, 143, 155, 173, 174, 176, 187, 190, 324, 470, 471, 472, 494], "necessari": [0, 2, 8, 11, 16, 17, 21, 67, 77, 80, 81, 160, 161, 162, 163, 166, 173, 174, 180, 187, 188, 189, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 488, 494], "fork": 0, "repositori": [0, 2, 8, 9, 11, 21, 484], "remot": 0, "link": [0, 2, 3, 9, 11, 21], "your": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 17, 19, 74, 81, 187, 188, 189, 324, 406, 411, 484, 494], "myfork": 0, "myforkurl": 0, "push": 0, "now": [0, 2, 3, 8, 9, 11, 13, 17, 32, 63, 72, 73, 75, 81, 108, 109, 110, 114, 117, 137, 161, 162, 163, 176, 187, 188, 189, 484, 487], "creat": [0, 2, 6, 8, 12, 17, 20, 34, 36, 49, 50, 51, 59, 60, 71, 72, 73, 77, 81, 82, 83, 85, 108, 109, 110, 111, 112, 113, 124, 128, 137, 140, 141, 156, 160, 161, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 187, 188, 192, 196, 217, 218, 219, 220, 221, 222, 229, 230, 232, 233, 234, 239, 240, 241, 247, 249, 250, 258, 265, 266, 273, 275, 279, 280, 290, 297, 298, 299, 300, 301, 302, 303, 306, 309, 312, 313, 314, 315, 316, 320, 322, 323, 324, 330, 332, 333, 334, 336, 349, 350, 352, 353, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 382, 384, 385, 387, 389, 390, 393, 397, 406, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 470, 471, 472, 477, 478, 479, 481, 482, 483, 484, 485, 487, 494, 495], "against": [0, 6, 17, 49, 50, 51, 54, 56, 59, 60, 61, 65, 68, 77, 78, 81, 161, 162, 163, 165, 176, 187, 397, 406, 458], "usnistgov": [0, 3, 8, 9, 11], "The": [0, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 31, 32, 33, 34, 36, 47, 49, 50, 51, 52, 56, 57, 59, 60, 62, 66, 67, 68, 72, 73, 74, 75, 77, 78, 80, 81, 85, 90, 91, 94, 95, 97, 99, 100, 102, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 135, 136, 137, 138, 140, 141, 143, 148, 149, 150, 155, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 187, 188, 189, 190, 194, 195, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 252, 259, 260, 261, 262, 263, 267, 268, 277, 278, 279, 281, 285, 286, 287, 288, 289, 290, 291, 297, 298, 300, 301, 302, 308, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 354, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 402, 406, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 493, 496], "initi": [0, 2, 8, 11, 16, 17, 21, 31, 32, 49, 50, 51, 56, 59, 60, 71, 77, 81, 82, 83, 85, 90, 110, 117, 121, 124, 128, 136, 137, 140, 141, 143, 149, 150, 161, 162, 163, 165, 166, 169, 170, 171, 175, 176, 180, 187, 188, 222, 258, 259, 260, 261, 262, 263, 264, 265, 266, 279, 280, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 352, 353, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 423, 427, 431, 441, 447, 448, 450, 452], "autom": [0, 2, 4, 6, 21, 188, 484], "check": [0, 2, 9, 10, 11, 17, 21, 47, 78, 81, 109, 124, 150, 222, 407, 416, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "statu": [0, 9, 11, 252], "absolut": [0, 8, 16, 95, 109, 124, 252, 259, 260, 261, 263, 265, 279, 280, 290, 312, 313, 314, 315, 316, 322, 323, 397, 406, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "document": [0, 2, 3, 5, 7, 9, 11, 12, 16, 17, 20, 21, 81, 351, 411, 412, 484, 486, 494], "failur": [0, 2, 8, 45, 46, 81, 264, 393, 394], "still": [0, 2, 6, 8, 11, 16, 74, 112, 176, 187, 188, 252, 264, 395, 411, 487], "an": [0, 2, 3, 6, 7, 9, 11, 12, 14, 15, 16, 17, 19, 20, 21, 31, 32, 36, 49, 50, 59, 60, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 91, 106, 108, 109, 110, 111, 112, 113, 114, 117, 127, 133, 136, 137, 149, 156, 160, 161, 162, 163, 166, 169, 170, 171, 173, 174, 176, 180, 187, 188, 190, 196, 222, 259, 260, 261, 262, 263, 265, 277, 278, 279, 281, 285, 286, 287, 288, 289, 291, 308, 312, 313, 314, 316, 332, 333, 334, 335, 336, 363, 393, 397, 406, 407, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 462, 463, 464, 479, 484, 485, 487, 488, 490, 491, 494, 495], "experiment": [0, 2, 81, 136, 137, 138, 143, 160, 173, 174], "you": [0, 2, 3, 7, 8, 9, 10, 11, 13, 14, 16, 17, 19, 20, 31, 32, 33, 34, 74, 81, 136, 138, 143, 160, 161, 173, 174, 187, 188, 189, 222, 264, 324, 411, 485, 494, 495], "would": [0, 10, 11, 15, 16, 17, 31, 33, 34, 81, 117, 162, 163, 176, 188, 190, 397, 413, 487], "like": [0, 6, 8, 11, 15, 17, 19, 21, 56, 81, 117, 176, 187, 196, 264, 397, 406, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 472, 484, 487, 488, 494, 495], "its": [0, 2, 6, 11, 12, 16, 17, 19, 21, 47, 81, 128, 137, 160, 173, 174, 188, 192, 196, 222, 265, 266, 273, 275, 299, 303, 306, 309, 320, 322, 323, 324, 349, 350, 353, 354, 366, 376, 384, 385, 397, 406, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 460, 467, 478, 487, 494], "impact": 0, "mai": [0, 3, 6, 8, 9, 11, 12, 14, 15, 16, 17, 21, 47, 81, 162, 163, 188, 189, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 324, 395, 402, 411, 487, 495], "prepend": 0, "wip": 0, "titl": [0, 2, 12, 20, 39, 40, 140, 141, 160, 173, 174, 355, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "thi": [0, 2, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 31, 32, 34, 36, 45, 46, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 91, 93, 94, 95, 96, 97, 99, 100, 102, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 133, 135, 136, 137, 138, 143, 148, 149, 150, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 187, 188, 189, 190, 192, 194, 195, 196, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 252, 264, 265, 266, 273, 275, 299, 300, 301, 303, 306, 309, 320, 322, 323, 324, 349, 350, 351, 353, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 395, 396, 397, 402, 406, 411, 412, 413, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 472, 478, 484, 485, 487, 489, 490, 494, 495], "prevent": [0, 6, 16, 138, 180, 394, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 494], "being": [0, 9, 11, 12, 17, 49, 50, 51, 59, 60, 77, 81, 94, 95, 99, 100, 102, 176, 187, 247, 427, 484, 487, 494, 495], "befor": [0, 2, 8, 9, 10, 11, 16, 17, 22, 31, 32, 81, 162, 163, 175, 187, 188, 199, 264, 308, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 401, 495], "": [0, 2, 3, 4, 6, 7, 10, 11, 14, 16, 17, 20, 21, 31, 32, 39, 67, 72, 73, 81, 106, 109, 111, 114, 137, 138, 140, 143, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 187, 188, 195, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 267, 268, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 459, 460, 462, 463, 464, 465, 467, 468, 484, 485, 489, 491, 494], "allow": [0, 2, 6, 8, 11, 16, 17, 19, 21, 86, 96, 114, 169, 170, 171, 176, 393, 406, 412, 484, 490], "run": [0, 2, 6, 7, 9, 10, 11, 16, 18, 19, 20, 21, 36, 49, 50, 51, 56, 59, 60, 65, 72, 73, 75, 77, 81, 85, 91, 96, 104, 108, 109, 110, 111, 112, 113, 114, 136, 137, 138, 143, 152, 155, 157, 161, 165, 166, 175, 176, 182, 185, 187, 190, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 264, 393, 396, 397, 410, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 470, 471, 472, 484, 485], "pleas": [0, 2, 3, 7, 8, 11, 14, 15, 187, 188, 189], "respect": [0, 2, 106, 111, 113, 161, 162, 163, 166, 175, 180, 196, 487, 488], "resourc": [0, 2, 3, 11, 17, 190], "do": [0, 2, 3, 7, 9, 10, 11, 17, 20, 21, 47, 81, 127, 129, 137, 138, 176, 180, 187, 188, 189, 196, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 258, 356, 397, 413, 415, 457, 472, 477, 485, 494, 495], "bulk": [0, 133, 136, 137, 143, 162, 163], "local": [0, 11, 13, 19, 72, 73, 81, 95, 149, 222, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 484], "machin": [0, 16, 17, 19, 21], "own": [0, 7, 9, 11, 13, 16, 17, 21, 81, 187, 188, 406, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 492, 493, 496], "account": [0, 3, 11, 17, 136, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "have": [0, 2, 3, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 32, 68, 71, 77, 78, 80, 81, 86, 106, 108, 109, 110, 111, 112, 113, 117, 128, 136, 138, 143, 160, 162, 163, 173, 174, 175, 176, 187, 188, 189, 196, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 258, 363, 395, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 467, 477, 487, 488, 494], "lot": [0, 96, 393], "enabl": [0, 2, 15, 16, 17, 20, 21, 190, 394, 485], "servic": [0, 12], "can": [0, 2, 3, 6, 7, 9, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 31, 32, 34, 36, 49, 50, 51, 56, 59, 60, 65, 68, 71, 72, 73, 74, 77, 81, 82, 83, 85, 90, 105, 106, 108, 109, 110, 112, 113, 117, 121, 122, 124, 126, 128, 138, 143, 148, 149, 155, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 187, 188, 189, 190, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 264, 302, 324, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 467, 484, 485, 487, 488, 489, 490, 492, 493, 494, 495, 496], "avoid": [0, 2, 11, 117, 187, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "individu": [0, 2, 7, 8, 21, 189], "skip": [0, 17, 393], "ci": [0, 2, 484], "messag": [0, 3, 16, 17, 20, 81, 402, 484, 485], "when": [0, 2, 6, 7, 8, 9, 11, 13, 15, 16, 17, 19, 21, 81, 108, 117, 124, 137, 138, 162, 163, 176, 187, 188, 189, 207, 221, 222, 252, 264, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 412, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 487, 488, 495], "readi": [0, 9, 11, 222], "successfulli": [0, 9, 11], "pass": [0, 2, 9, 11, 16, 17, 51, 117, 187, 188, 189, 190, 351, 393, 397, 406, 462, 463, 467, 484, 494], "send": [0, 3], "mail": [0, 2, 8, 15, 17, 20, 188, 189], "list": [0, 2, 8, 9, 10, 11, 13, 14, 15, 20, 21, 22, 72, 73, 81, 108, 109, 110, 140, 141, 188, 189, 190, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 330, 406, 420, 423, 427, 428, 431, 432, 434, 436, 447, 448, 450, 451, 452, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 484, 487, 495], "about": [0, 2, 3, 6, 7, 8, 9, 11, 13, 14, 16, 17, 21, 31, 32, 33, 34, 36, 81, 155, 160, 162, 163, 176, 187, 188, 190, 252, 292, 324, 351, 363, 410], "develop": [0, 2, 3, 4, 9, 12, 14, 15, 17, 19, 20, 190, 485, 491], "automat": [0, 2, 7, 8, 11, 17, 21, 31, 32, 33, 34, 81, 82, 83, 162, 163, 180, 187, 188, 397, 407, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 462, 463, 472, 494, 495], "see": [0, 2, 3, 6, 7, 11, 16, 17, 18, 19, 20, 21, 22, 36, 72, 73, 81, 82, 83, 108, 109, 110, 117, 136, 138, 143, 160, 161, 162, 163, 165, 166, 173, 174, 176, 187, 188, 189, 193, 258, 259, 260, 261, 262, 263, 265, 266, 279, 280, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 367, 374, 375, 378, 382, 389, 393, 412, 467, 472, 484, 485, 487, 489], "respond": 0, "without": [0, 2, 6, 11, 12, 17, 19, 21, 68, 81, 165, 166, 173, 174, 180, 188, 393, 394, 397, 406, 413, 447, 467, 494], "further": [0, 2, 3, 10, 11, 17, 21, 47, 117, 143, 367, 374, 375, 378, 382, 389], "action": [0, 21, 137, 155, 165, 412, 484, 494], "part": [0, 8, 9, 11, 13, 19, 21, 36, 81, 106, 136, 180, 222, 247, 487], "administr": [0, 14], "onli": [0, 2, 6, 7, 9, 10, 11, 16, 17, 18, 19, 20, 21, 33, 34, 74, 75, 81, 110, 112, 114, 117, 135, 136, 138, 140, 141, 161, 162, 163, 176, 180, 187, 194, 195, 222, 239, 363, 366, 369, 370, 371, 372, 376, 377, 385, 387, 393, 397, 406, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 451, 452, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484, 487, 490], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 14, 15, 16, 18, 20, 21, 31, 32, 33, 34, 36, 47, 51, 52, 57, 65, 66, 68, 71, 72, 73, 74, 78, 80, 81, 82, 83, 85, 86, 90, 93, 94, 95, 102, 105, 109, 117, 121, 122, 128, 135, 136, 137, 138, 140, 141, 143, 160, 161, 162, 163, 165, 166, 175, 176, 180, 187, 188, 189, 190, 196, 199, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 252, 258, 264, 266, 277, 278, 279, 280, 281, 290, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 336, 337, 347, 348, 350, 352, 353, 354, 355, 357, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 402, 406, 407, 410, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 494, 495], "interfac": [0, 2, 4, 7, 8, 11, 14, 16, 17, 19, 21, 106, 124, 133, 136, 137, 148, 149, 150, 160, 162, 163, 173, 174, 176, 259, 260, 261, 262, 263, 277, 278, 279, 281, 285, 286, 287, 288, 289, 291, 292, 295, 312, 313, 314, 316, 332, 333, 334, 335, 336, 413, 427, 452, 484, 491], "particularli": [0, 9, 11, 72, 73, 81], "long": [0, 2, 17, 47, 109, 162, 163, 188, 395, 397, 406, 411, 495], "histori": 0, "consid": [0, 2, 8, 11, 68, 75, 81, 117, 160, 173, 174, 175, 188, 324, 487], "squash": 0, "we": [0, 2, 3, 6, 8, 9, 10, 11, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 47, 49, 50, 51, 54, 56, 59, 60, 61, 65, 67, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 108, 109, 110, 111, 112, 113, 114, 117, 127, 129, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 187, 188, 189, 222, 232, 356, 387, 406, 411, 415, 420, 427, 428, 432, 434, 455, 487, 494, 495], "azur": [0, 2, 484], "cloud": [0, 2, 484], "These": [0, 2, 6, 7, 8, 10, 11, 17, 19, 21, 31, 32, 72, 73, 113, 117, 488, 492, 493, 494, 496], "ar": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 19, 21, 32, 36, 39, 40, 47, 52, 57, 68, 72, 73, 74, 75, 81, 82, 83, 91, 106, 108, 109, 110, 111, 112, 113, 114, 117, 133, 136, 137, 138, 143, 149, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 187, 188, 189, 190, 195, 222, 233, 234, 239, 247, 251, 256, 324, 329, 351, 363, 366, 369, 370, 371, 372, 376, 377, 385, 387, 393, 395, 397, 399, 406, 411, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 461, 467, 484, 487, 488, 489, 490, 494, 495], "configur": [0, 2, 3, 16, 17, 292, 295], "fipysourc": [0, 17], "pipelin": [0, 2, 4, 472], "yml": [0, 11], "workflow": 0, "nistthedocs2death": 0, "nix": [0, 2, 20, 485], "lock": [0, 11, 17], "environ": [0, 2, 8, 14, 16, 20, 21, 189, 457, 484, 485, 489], "solver": [0, 2, 4, 6, 8, 11, 14, 17, 20, 21, 31, 33, 34, 36, 47, 52, 54, 56, 57, 61, 66, 80, 81, 82, 83, 85, 86, 90, 108, 109, 111, 117, 137, 162, 163, 165, 175, 176, 187, 188, 190, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 484, 485, 486, 487], "petsc": [0, 2, 17, 20, 32, 108, 484, 485], "pyspars": [0, 2, 11, 17, 20, 21, 32, 36, 85, 86, 188, 484, 485, 487], "scipi": [0, 2, 8, 10, 17, 20, 21, 49, 50, 59, 60, 72, 73, 77, 78, 81, 162, 163, 176, 277, 278, 281, 290, 393, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 484, 485, 487], "trilino": [0, 2, 4, 11, 13, 17, 20, 32, 86, 190, 484, 485], "file": [0, 2, 7, 9, 10, 11, 13, 15, 17, 20, 21, 39, 40, 41, 72, 73, 77, 78, 80, 93, 94, 95, 96, 97, 99, 100, 102, 136, 137, 138, 140, 141, 143, 161, 165, 166, 169, 170, 171, 222, 395, 397, 407, 413, 420, 428, 432, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 494], "render": [0, 2, 8, 15, 21, 81, 190, 452, 479, 481, 482, 483], "filenam": [0, 8, 17, 72, 73, 111, 140, 141, 165, 222, 407, 423, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "templat": [0, 7], "platform": [0, 2, 8, 9, 11, 17, 18, 410, 484], "done": [0, 8, 9, 11, 17, 188, 395], "new": [0, 2, 6, 8, 11, 13, 16, 21, 71, 81, 112, 113, 137, 143, 166, 176, 188, 189, 218, 222, 228, 230, 233, 239, 247, 393, 397, 402, 406, 407, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484, 495], "valid": [0, 2, 17, 484], "everyth": [0, 11, 188], "log": [0, 20, 113, 140, 162, 163, 175, 180, 181, 397, 406, 459, 460, 461, 462, 463, 464, 465, 467, 468, 485, 486], "changelog": [0, 2], "txt": [0, 2, 397, 413], "rel": [0, 2, 16, 17, 21, 31, 32, 109, 180, 252, 259, 260, 261, 263, 265, 279, 280, 290, 312, 313, 314, 315, 316, 322, 323, 397, 406, 411], "after": [0, 2, 10, 11, 13, 16, 17, 21, 32, 47, 111, 113, 117, 176, 188, 264, 395, 397, 402, 406, 411, 427], "x": [0, 2, 7, 8, 9, 11, 13, 15, 16, 17, 18, 20, 22, 36, 40, 51, 54, 56, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 94, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 140, 141, 148, 149, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 187, 188, 189, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 252, 308, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 461, 463, 464, 465, 467, 468, 470, 471, 472, 477, 484], "y": [0, 7, 8, 9, 11, 14, 15, 17, 18, 20, 40, 52, 57, 71, 72, 73, 82, 83, 94, 110, 117, 121, 124, 126, 127, 129, 137, 140, 141, 148, 149, 156, 160, 161, 165, 169, 171, 173, 174, 176, 177, 188, 189, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 461, 463, 464, 465, 467, 468, 470, 471, 477, 484], "mileston": 0, "z": [0, 9, 11, 20, 156, 160, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 406, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 470, 471], "obtain": [0, 2, 7, 8, 9, 17, 20, 31, 33, 34, 75, 81, 114, 117, 137, 138, 155, 161, 162, 163, 176, 187, 189, 222, 434, 447, 485, 487, 489, 490], "rest": [0, 137], "format": [0, 2, 16, 17, 32, 36, 397, 406, 407, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 477, 479, 481, 482, 483, 484], "everi": [0, 19, 21, 81, 136, 143, 330, 397, 406, 411], "close": [0, 2, 11, 13, 19, 21, 74, 81, 117, 180, 222, 397, 413, 467], "sinc": [0, 2, 6, 21, 108, 109, 110, 112, 114, 176, 188, 189, 232, 356, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 490], "last": [0, 2, 8, 117, 180, 187, 188, 189, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 367, 374, 375, 378, 382, 389, 390, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "major": [0, 2, 8, 180], "curat": [0, 7], "output": [0, 2, 15, 16, 19, 31, 32, 33, 34, 36, 117, 222, 324, 351, 411, 477], "so": [0, 3, 6, 10, 11, 13, 16, 17, 19, 20, 21, 31, 33, 34, 67, 74, 111, 113, 117, 137, 140, 141, 160, 162, 163, 165, 173, 174, 176, 180, 187, 188, 222, 252, 308, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 406, 411, 427, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 485, 487, 490, 495], "clear": [0, 2, 17, 21], "what": [0, 2, 10, 16, 17, 20, 21, 81, 180, 188, 351, 411, 415, 485, 494], "big": 0, "deal": [0, 10, 11, 17, 21, 135], "sometim": [0, 2, 8, 72, 73], "redund": [0, 21], "e": [0, 2, 8, 10, 11, 14, 15, 17, 19, 54, 56, 57, 61, 66, 74, 75, 81, 106, 111, 112, 114, 137, 162, 163, 166, 176, 180, 181, 187, 189, 251, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 462, 463, 477, 487, 488, 489, 491, 492, 493, 496], "g": [0, 8, 10, 11, 14, 15, 17, 19, 39, 72, 73, 81, 95, 106, 111, 112, 162, 163, 175, 176, 189, 222, 251, 355, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 462, 463, 477, 487, 489, 491, 492, 493, 496], "issue123": 0, "blah": 0, "prefer": [0, 2, 8, 10, 11, 17, 72, 73, 487], "given": [0, 2, 6, 7, 11, 15, 17, 21, 36, 49, 50, 51, 52, 57, 59, 60, 62, 66, 67, 71, 75, 77, 78, 81, 100, 106, 113, 117, 126, 127, 129, 133, 136, 137, 138, 143, 149, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 187, 188, 194, 195, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 393, 397, 402, 406, 407, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 472, 487, 488, 492, 493, 496], "correspond": [0, 15, 67, 81, 138, 143, 194, 195, 196, 222, 397, 406, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "under": [0, 2, 14, 16, 20, 21, 31, 32, 81, 160, 173, 174, 175, 180, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 485, 495], "altern": [0, 7, 11, 17, 140, 141, 221, 302, 411, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 494], "item": [0, 188, 189], "remov": [0, 2, 8, 9, 11, 19, 117, 138, 160, 407, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467], "appropri": [0, 2, 8, 11, 17, 81, 85, 111, 113, 165, 175, 176, 187, 196, 220, 356, 397, 406, 487, 494], "move": [0, 2, 7, 8, 11, 14, 81, 93, 117, 140, 141, 162, 163, 176, 187], "thank": [0, 2, 17, 117], "mention": [0, 11, 81, 490], "recogn": 0, "outsid": [0, 156, 232, 477], "contributor": [0, 20, 485, 486], "requir": [0, 2, 6, 8, 15, 16, 17, 18, 19, 20, 21, 32, 49, 50, 59, 60, 68, 74, 77, 80, 81, 91, 117, 136, 137, 138, 143, 156, 162, 163, 165, 166, 173, 174, 176, 180, 188, 189, 221, 222, 232, 258, 259, 260, 261, 262, 263, 264, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484, 485, 487, 495], "pygithub": 0, "panda": [0, 17, 484], "doesn": [0, 2, 3, 17, 20, 31, 32, 33, 34, 180, 222, 258, 457, 485], "t": [0, 2, 3, 9, 10, 11, 14, 16, 17, 20, 21, 31, 32, 33, 34, 36, 71, 72, 73, 74, 77, 78, 81, 106, 108, 112, 121, 122, 133, 137, 138, 143, 148, 149, 160, 161, 162, 163, 166, 169, 170, 171, 173, 174, 175, 176, 180, 188, 189, 222, 251, 258, 308, 358, 363, 377, 387, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 485, 488, 489, 491, 494, 495], "show": [0, 2, 3, 6, 17, 45, 46, 117, 138, 140, 141, 143, 165, 447], "green": [0, 2], "box": [0, 2, 19, 81, 160, 173, 174, 177, 187, 247, 279], "note": [0, 3, 11, 13, 21, 31, 32, 67, 81, 160, 176, 207, 222, 226, 251, 267, 268, 324, 358, 395, 434, 457], "readm": [0, 2], "instal": [0, 2, 5, 8, 9, 10, 16, 17, 19, 20, 21, 22, 136, 143, 160, 173, 174, 410, 484, 485, 486, 491], "tag": [0, 2, 3, 9, 11], "abov": [0, 6, 8, 10, 15, 17, 21, 36, 81, 117, 137, 138, 143, 176, 177, 247, 363, 397, 406, 494], "annot": [0, 401], "upon": [0, 12, 17, 21, 72, 73], "success": [0, 6, 8, 9, 11, 74, 302], "system": [0, 2, 9, 11, 13, 15, 16, 17, 74, 81, 108, 109, 110, 113, 133, 136, 160, 161, 165, 166, 173, 174, 175, 176, 180, 194, 195, 196, 231, 251, 252, 279, 290, 297, 298, 300, 301, 302, 308, 315, 337, 346, 351, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484, 487, 488, 489, 491], "build": [0, 2, 6, 9, 11, 16, 17, 18, 21, 77, 117, 137, 155, 161, 165, 175, 176, 222, 251, 264, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "product": [0, 2, 5, 11, 16, 17, 21, 308, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "artifact": 0, "place": [0, 2, 8, 10, 11, 21, 32, 356, 395, 397, 406, 407, 411, 461], "dist": [0, 2, 395], "linux": [0, 2, 11, 13, 19, 22, 108, 484], "none": [0, 2, 10, 33, 34, 72, 73, 85, 108, 109, 110, 111, 113, 114, 137, 140, 141, 160, 163, 173, 174, 180, 181, 193, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 299, 300, 301, 303, 308, 309, 312, 313, 314, 315, 316, 321, 322, 323, 324, 327, 335, 351, 352, 353, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 395, 396, 397, 402, 406, 407, 411, 412, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 495], "whl": 0, "tar": 0, "gz": [0, 137, 161, 165, 166, 169, 170, 171, 407, 423], "windows_nt": 0, "zip": [0, 173, 174, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "doc": [0, 2, 16, 17, 393, 412, 484, 491], "pdf": [0, 2, 14, 16, 17, 491], "html": [0, 3, 8, 11, 13, 17, 351, 412], "directori": [0, 6, 7, 8, 9, 11, 13, 15, 17, 22, 81, 91, 136, 137, 138, 143, 155, 176, 492, 493, 496], "unpack": [0, 2, 11, 17], "xzf": 0, "c": [0, 2, 6, 11, 14, 16, 17, 21, 67, 81, 133, 137, 138, 143, 160, 161, 162, 163, 173, 174, 180, 356, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484, 491], "attach": [0, 2, 494], "associ": [0, 17, 21, 136, 137, 162, 163], "pypi": [0, 2, 484], "twine": 0, "fipy_vers": 0, "web": [0, 2, 11, 19], "site": [0, 3, 11, 137, 138, 143], "ctcm": [0, 8, 190, 484], "export": [0, 2, 4, 17, 20, 72, 73, 222, 410, 485], "fipy_wwwhost": 0, "bunter": [0, 2], "u": [0, 2, 3, 7, 8, 14, 17, 20, 21, 49, 50, 51, 52, 54, 56, 57, 59, 60, 81, 117, 121, 122, 148, 162, 163, 176, 180, 181, 187, 188, 189, 363, 367, 374, 375, 377, 378, 382, 389, 427, 431, 450, 451, 485, 488, 489, 494], "www": [0, 3, 8, 11, 16, 17, 34, 47, 484, 491], "wd15": [0, 11, 13], "fipy_wwwactiv": 0, "updatewww": 0, "upload_product": 0, "some": [0, 2, 6, 8, 9, 10, 11, 15, 16, 17, 21, 31, 32, 33, 34, 39, 40, 72, 73, 81, 90, 117, 137, 165, 180, 188, 189, 251, 256, 324, 329, 363, 377, 399, 484, 491], "version": [0, 6, 7, 9, 10, 11, 13, 15, 16, 17, 19, 20, 21, 81, 117, 181, 187, 188, 189, 222, 232, 410, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 485], "rsync": 0, "mac": [0, 2, 11, 13, 19, 22], "o": [0, 2, 4, 11, 13, 17, 22, 71, 72, 73, 137, 161, 165, 166, 169, 170, 171], "caus": [0, 2, 8, 15, 16, 17, 117, 160, 173, 174, 187, 188, 207, 222, 226, 251, 324, 358, 457], "problem": [0, 2, 4, 6, 7, 8, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 49, 50, 51, 52, 56, 57, 59, 60, 62, 65, 66, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 93, 94, 95, 96, 97, 99, 100, 102, 108, 109, 110, 111, 112, 113, 114, 121, 122, 126, 128, 137, 156, 160, 162, 163, 166, 173, 174, 175, 176, 180, 187, 188, 190, 252, 324, 337, 344, 363, 377, 427, 484, 488], "thei": [0, 3, 8, 10, 11, 15, 16, 17, 21, 74, 81, 162, 163, 188, 189, 190, 363, 393, 406, 495], "try": [0, 2, 9, 11, 16, 34, 49, 50, 59, 60, 72, 73, 78, 81, 117, 137, 160, 162, 163, 173, 174, 176, 188, 264, 397, 406], "erron": 0, "rsrc": 0, "2": [0, 6, 8, 10, 11, 14, 15, 16, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 59, 60, 63, 65, 66, 67, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 95, 102, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 138, 140, 141, 143, 148, 149, 150, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 187, 188, 189, 190, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 264, 308, 337, 343, 354, 356, 363, 366, 367, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 393, 397, 406, 407, 411, 412, 415, 416, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 461, 463, 465, 467, 468, 470, 471, 477, 485, 487, 488, 490, 491], "6": [0, 2, 6, 8, 14, 15, 16, 17, 31, 32, 33, 34, 36, 47, 52, 72, 73, 81, 85, 95, 108, 109, 110, 111, 113, 117, 124, 137, 138, 140, 141, 143, 148, 160, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 188, 190, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 377, 397, 406, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 477, 490, 491], "doe": [0, 2, 9, 11, 16, 17, 18, 20, 21, 63, 81, 111, 113, 117, 176, 187, 196, 222, 247, 308, 351, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 411, 412, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 484, 485, 487, 494], "onc": [0, 3, 6, 11, 13, 75, 81, 111, 113, 128, 155, 175, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406], "receiv": [0, 2, 17], "amend": 0, "ask": [0, 2, 3, 10, 15, 20, 188, 189, 485, 486], "maintain": [0, 17, 108, 109, 110, 188, 189, 427, 452], "process": [0, 2, 6, 11, 14, 15, 17, 19, 20, 21, 31, 32, 160, 173, 174, 175, 190, 222, 267, 268, 330, 355, 406, 470, 471, 484, 485, 488, 489], "hour": [0, 17, 19, 21, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "don": [0, 2, 10, 17, 20, 160, 173, 174, 176, 188, 189, 251, 363, 485, 494, 495], "wish": [0, 7, 8, 11, 17, 67, 71, 136, 138, 143, 161, 177, 188], "wait": [0, 21, 162, 163], "trigger": [0, 456], "reason": [0, 2, 8, 11, 16, 17, 21, 32, 78, 81, 117, 137, 176, 188, 324, 397, 406, 477, 487], "manual": [0, 2, 7, 8, 11, 16, 19, 20, 31, 32, 33, 34, 72, 73, 187, 434, 485, 491, 495], "gener": [0, 2, 6, 9, 11, 14, 16, 17, 20, 21, 81, 96, 114, 137, 162, 163, 176, 187, 188, 189, 192, 196, 221, 222, 226, 227, 228, 264, 279, 292, 297, 298, 300, 301, 395, 402, 406, 413, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 457, 458, 479, 484, 485, 487, 489, 490, 494], "revis": [0, 2, 9, 11], "number": [0, 2, 8, 9, 11, 13, 16, 17, 21, 51, 63, 75, 78, 80, 81, 86, 105, 108, 109, 110, 113, 114, 117, 133, 136, 137, 138, 140, 143, 155, 175, 176, 187, 188, 218, 221, 222, 228, 230, 231, 233, 234, 239, 247, 250, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 337, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 358, 369, 387, 397, 401, 406, 411, 420, 423, 428, 431, 432, 434, 436, 441, 447, 448, 450, 455, 459, 460, 461, 462, 463, 464, 465, 467, 468, 487, 488, 490], "sha256": 0, "openssl": 0, "dgst": 0, "path": [0, 10, 15, 17, 71, 137, 161, 165, 166, 169, 170, 171, 222, 470, 471], "reset": [0, 81, 143, 161, 165], "0": [0, 6, 8, 10, 11, 16, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 138, 140, 141, 143, 148, 149, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 187, 188, 189, 195, 196, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 252, 264, 267, 268, 279, 280, 290, 300, 308, 312, 313, 314, 315, 316, 322, 323, 355, 356, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 406, 411, 413, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 477, 485, 487, 490], "nist": [0, 2, 3, 6, 8, 11, 12, 17, 190, 406, 484], "gov": [0, 3, 8, 11, 16, 17, 351, 484], "how": [1, 2, 3, 7, 11, 17, 20, 21, 31, 32, 67, 72, 73, 81, 137, 155, 156, 162, 163, 165, 187, 188, 189, 393, 447, 485, 486, 494], "read": [1, 2, 3, 11, 20, 21, 165, 187, 188, 189, 222, 397, 407, 413, 423, 485, 486], "modul": [1, 2, 4, 7, 8, 10, 11, 15, 16, 17, 19, 20, 21, 23, 24, 30, 38, 43, 44, 48, 53, 55, 58, 64, 70, 76, 84, 88, 89, 92, 98, 101, 106, 107, 116, 119, 120, 125, 131, 147, 153, 159, 164, 168, 179, 183, 186, 187, 188, 189, 190, 191, 198, 206, 208, 235, 243, 251, 253, 254, 267, 276, 282, 284, 290, 296, 304, 311, 315, 317, 326, 328, 337, 354, 358, 391, 392, 393, 395, 396, 397, 398, 403, 406, 409, 411, 412, 413, 417, 420, 428, 432, 434, 448, 457, 458, 470, 479, 486, 487, 491, 492, 493, 494], "mainten": 2, "releas": [2, 6, 9, 11, 16, 17, 20, 21, 160, 173, 174, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 485, 486], "compat": [2, 17, 109, 188, 189, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "recent": [2, 6, 9, 11, 21, 187, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 367, 374, 375, 378, 382, 389, 390, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "numpi": [2, 16, 20, 21, 31, 32, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484, 485, 487], "25": [2, 17, 31, 32, 33, 117, 121, 160, 161, 173, 174, 175, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 356, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 477, 491], "930": 2, "get": [2, 3, 8, 17, 18, 20, 21, 117, 162, 163, 411, 427], "again": [2, 72, 73, 75, 77, 78, 80, 81, 93, 95, 97, 99, 100, 102, 109, 110, 111, 113, 114, 117, 162, 163, 175, 176, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 377], "925": 2, "discourag": 2, "stackoverflow": [2, 15, 20, 317, 318, 319], "876": 2, "875": [2, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "791": 2, "896": 2, "poor": [2, 17, 113, 488], "garbag": 2, "collect": [2, 11, 20, 160, 410, 417, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 461, 465, 474, 484], "petsc4pi": [2, 11, 16, 17, 256, 484], "18": [2, 81, 105, 173, 174, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 406, 451, 488, 491], "wa": [2, 4, 6, 8, 10, 12, 16, 17, 21, 63, 81, 161, 162, 163, 165, 166, 169, 170, 171, 187, 188, 252, 264, 308, 393, 395, 397, 406, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484], "memori": [2, 6, 32, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "leak": 2, "term": [2, 15, 17, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 59, 60, 68, 74, 78, 86, 111, 112, 117, 136, 137, 138, 162, 163, 165, 166, 173, 174, 176, 180, 187, 188, 190, 195, 196, 199, 485, 488, 489, 490], "justerrorvector": [2, 20, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "isn": [2, 11, 20, 485], "strictli": 2, "exampl": [2, 3, 6, 8, 10, 11, 13, 15, 16, 17, 19, 20, 21, 190, 393, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 472, 486, 487, 488, 495], "contribut": [2, 4, 17, 21, 74, 194, 195, 196, 363, 372, 377], "jon83carvalho": 2, "clarifi": 2, "mani": [2, 7, 8, 9, 11, 17, 19, 21, 77, 78, 80, 81, 117, 162, 163, 176, 187, 188, 190, 393, 484, 489, 494], "point": [2, 7, 8, 10, 17, 21, 34, 71, 72, 73, 75, 81, 90, 95, 114, 117, 137, 156, 160, 162, 163, 173, 174, 176, 188, 222, 239, 406, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "migrat": [2, 3, 7], "continu": [2, 8, 9, 11, 15, 16, 17, 20, 68, 75, 90, 111, 114, 117, 188, 308, 484, 485, 486, 487], "integr": [2, 7, 9, 11, 17, 20, 21, 162, 163, 355, 397, 406, 484, 485, 486, 487], "updat": [2, 4, 8, 11, 16, 20, 36, 81, 117, 136, 140, 141, 143, 180, 300, 395, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 484, 485], "wheel": 2, "distribut": [2, 11, 12, 15, 17, 19, 21, 75, 114, 420, 428, 432, 434, 436, 448, 455, 472, 484], "substanti": [2, 6], "refactor": [2, 4, 20, 222, 485], "matric": [2, 17, 20, 21, 190, 196, 251, 267, 268, 487], "more": [2, 3, 6, 7, 9, 10, 11, 16, 17, 20, 21, 31, 33, 34, 49, 50, 51, 59, 60, 72, 73, 74, 81, 86, 111, 113, 121, 136, 138, 143, 162, 163, 176, 180, 187, 188, 189, 221, 222, 252, 258, 259, 260, 261, 262, 263, 265, 266, 279, 280, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 352, 353, 363, 377, 397, 406, 412, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 461, 462, 463, 477, 485, 487, 494], "consist": [2, 7, 8, 11, 16, 113, 135, 222, 487, 489], "across": [2, 330, 467, 487], "863": 2, "refin": [2, 8, 222], "851": 2, "debug": [2, 17, 20, 21, 393], "848": 2, "contact": [2, 7, 14, 15, 20, 187, 485, 491], "inform": [2, 11, 16, 17, 155, 173, 174, 187, 252, 258, 259, 260, 261, 262, 263, 265, 266, 279, 280, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 410, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484], "singl": [2, 8, 10, 17, 19, 21, 31, 32, 33, 34, 74, 75, 108, 112, 114, 162, 163, 176, 180, 217, 218, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 247, 264, 354, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 474], "page": [2, 11, 13, 17, 355], "847": 2, "set": [2, 4, 8, 13, 15, 16, 17, 19, 20, 21, 32, 68, 71, 72, 73, 75, 81, 83, 105, 106, 114, 117, 121, 122, 124, 126, 127, 128, 129, 137, 138, 140, 141, 149, 155, 161, 162, 163, 165, 166, 176, 177, 188, 189, 190, 199, 207, 222, 226, 249, 251, 264, 324, 351, 358, 395, 396, 397, 406, 407, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 484, 485, 487, 489, 491, 494], "822": 2, "replac": [2, 17, 81, 117, 176, 188, 189, 190, 222, 411, 415, 477], "deprec": [2, 3, 8, 17, 20, 140, 141, 402, 416, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "type": [2, 7, 8, 11, 15, 17, 18, 21, 49, 50, 51, 59, 60, 81, 91, 136, 137, 138, 143, 155, 165, 176, 187, 195, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 252, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 402, 406, 407, 410, 411, 412, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 484], "798": 2, "py3k": [2, 484], "797": 2, "7": [2, 6, 11, 15, 17, 31, 34, 72, 73, 95, 100, 108, 109, 110, 113, 117, 137, 138, 143, 156, 162, 163, 165, 180, 190, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 377, 397, 406, 411, 415, 416, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 491], "conda": [2, 17, 20, 410, 484, 485, 486], "795": 2, "stop": [2, 16, 394], "divid": [2, 17, 20, 247, 397, 406, 411, 452, 467, 487, 489], "zero": [2, 8, 17, 67, 68, 81, 82, 83, 124, 128, 136, 176, 177, 180, 251, 258, 264, 363, 377, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 462, 463], "warn": [2, 8, 16, 17, 109, 188, 324, 395, 396, 402], "lu": [2, 6, 16, 262, 267, 272, 290, 301, 315, 487], "790": 2, "introduc": [2, 21, 63, 67, 109, 110, 117, 160, 173, 174, 188, 189], "sharedtemporaryfil": [2, 20, 397, 413], "bi": 2, "769": 2, "rais": [2, 10, 11, 111, 207, 222, 393, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "importerror": [2, 49, 50, 59, 60, 72, 73, 78, 81, 160, 162, 163, 173, 174, 176, 187], "768": 2, "disabl": 2, "tvtk": [2, 10, 17, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 393], "prerequisit": [2, 9, 11, 16, 17], "aren": 2, "met": [2, 16], "764": 2, "tabul": 2, "depend": [2, 6, 9, 11, 17, 19, 20, 21, 72, 73, 81, 113, 117, 137, 149, 162, 163, 176, 188, 195, 222, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 395, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 456, 484, 485, 487, 490, 494], "763": 2, "749": 2, "stoke": [2, 117], "caviti": [2, 117], "non": [2, 8, 11, 12, 16, 17, 31, 32, 33, 34, 36, 47, 50, 60, 72, 73, 81, 93, 95, 96, 136, 160, 162, 163, 173, 174, 180, 226, 227, 228, 297, 298, 300, 301, 337, 344, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 407, 434, 487], "newtonian": 2, "748": 2, "721": 2, "862": 2, "could": [2, 6, 8, 15, 17, 72, 73, 114, 162, 163, 175, 180, 187, 188, 427], "load": [2, 95, 102, 407, 484], "qt": [2, 406], "plugin": 2, "xcb": 2, "858": 2, "856": 2, "facevari": [2, 17, 20, 67, 81, 108, 109, 110, 111, 113, 117, 188, 192, 194, 195, 196, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 382, 385, 387, 389, 390, 420, 423, 427, 428, 432, 434, 436, 447, 448, 451, 452, 455, 467, 468, 477, 479, 481, 482, 483, 485, 487], "accumul": [2, 136, 394], "properli": [2, 8, 11, 17, 180, 188, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "parallel": [2, 4, 10, 11, 16, 20, 190, 221, 222, 256, 267, 268, 329, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 399, 484, 485], "850": 2, "switch": [2, 6, 117, 190, 484], "849": 2, "py27": 2, "fail": [2, 10, 16, 17, 187, 397, 406, 427], "841": 2, "matplotlib2dview": [2, 20, 463, 468], "accept": [2, 8, 9, 11, 16, 188, 363, 366, 369, 370, 371, 372, 376, 377, 385, 387, 406], "color": [2, 10, 173, 174, 458, 459, 460, 462, 463, 464, 465, 467], "map": [2, 17, 166, 222, 393], "string": [2, 16, 222, 393, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 495], "836": 2, "coupl": [2, 7, 8, 14, 15, 20, 21, 32, 83, 106, 117, 160, 161, 162, 163, 166, 173, 174, 180, 190, 355, 485, 487, 489], "high": [2, 4, 20, 23, 86, 117, 413, 484, 485], "order": [2, 3, 5, 8, 9, 11, 16, 17, 20, 21, 31, 32, 33, 34, 36, 45, 46, 72, 73, 74, 81, 85, 86, 93, 117, 126, 127, 129, 137, 143, 160, 162, 163, 176, 180, 187, 188, 194, 195, 196, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 252, 363, 369, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 462, 463, 488, 489, 495], "diffus": [2, 4, 14, 15, 17, 19, 20, 31, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 106, 111, 113, 114, 117, 133, 135, 137, 138, 143, 156, 160, 162, 163, 173, 174, 175, 176, 187, 190, 355, 363, 366, 369, 370, 371, 372, 376, 377, 385, 387, 485, 488, 489, 490], "incompat": [2, 11, 187, 188, 189, 397, 406], "833": 2, "tool": [2, 3, 11, 14, 17, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 77, 78, 81, 82, 83, 95, 109, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 188, 189, 190, 222, 387, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 484, 487], "dump": [2, 8, 20, 165, 423], "undocu": 2, "alwai": [2, 7, 8, 9, 11, 15, 17, 31, 32, 33, 34, 81, 192, 221, 265, 266, 273, 275, 299, 303, 306, 309, 320, 322, 323, 324, 349, 350, 353, 366, 376, 384, 385, 395, 411, 441, 448, 456, 460, 478, 487, 494], "gzip": [2, 407], "828": [2, 6], "colorbar": [2, 20, 117, 140, 173, 174, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468], "true": [2, 8, 17, 21, 31, 32, 63, 67, 68, 71, 74, 81, 95, 108, 111, 126, 133, 136, 138, 143, 156, 160, 162, 163, 173, 174, 175, 176, 180, 181, 187, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 395, 396, 397, 401, 406, 407, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 461, 463, 464, 465, 467, 468], "longer": [2, 6, 9, 11, 18, 21, 81, 176, 187, 188, 354, 484], "flow": [2, 8, 17, 20, 176, 180, 337, 344, 355, 488, 491], "826": 2, "gmsh": [2, 4, 10, 20, 71, 72, 73, 102, 136, 138, 143, 189, 222, 393, 484, 485], "818": 2, "gridnd": 2, "mesh": [2, 4, 8, 10, 11, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 96, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 135, 136, 137, 138, 140, 141, 143, 148, 149, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 188, 189, 195, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 407, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 474, 477, 478, 479, 480, 481, 482, 483, 485, 487, 491], "cartesian": [2, 160, 173, 174, 221, 247, 420, 428, 432, 434, 455, 489], "811": [2, 406], "In": [2, 3, 7, 8, 9, 11, 13, 15, 16, 17, 19, 21, 47, 71, 72, 73, 74, 77, 78, 80, 81, 86, 93, 106, 109, 117, 136, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 176, 180, 187, 393, 427, 448, 487, 488, 492, 493, 494, 496], "9": [2, 6, 8, 9, 11, 14, 72, 73, 81, 82, 83, 95, 99, 105, 109, 111, 137, 138, 143, 160, 161, 162, 163, 173, 174, 180, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 356, 397, 406, 411, 415, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 458, 463, 464, 465, 470, 471, 491], "__repr__": [2, 20, 192, 193, 194, 195, 196, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 329, 330, 331, 332, 333, 334, 335, 336, 350, 351, 352, 353, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 399, 400, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457], "throw": [2, 8, 72, 73, 395], "except": [2, 10, 34, 49, 50, 59, 60, 72, 73, 78, 81, 137, 160, 162, 163, 173, 174, 176, 207, 222, 226, 251, 252, 324, 358, 393, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 494], "ab": [2, 36, 71, 81, 95, 117, 122, 126, 127, 129, 162, 163, 176, 180, 181, 222, 363, 377, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "801": 2, "circleci": [2, 484], "36": 2, "serial": [2, 10, 11, 16, 17, 221, 222, 239, 393, 397], "extrem": [2, 17, 188, 324], "slow": [2, 8, 11, 17, 31, 32, 33, 34, 162, 163, 188, 490], "800": [2, 137, 160], "conda2_env": 2, "realli": [2, 8, 11, 19, 356], "end": [2, 3, 7, 17, 36, 49, 51, 56, 59, 60, 71, 74, 75, 81, 111, 113, 114, 127, 129, 136, 137, 138, 143, 160, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 187, 393, 407, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 490, 495], "796": 2, "phase": [2, 4, 6, 8, 14, 15, 17, 19, 20, 21, 31, 32, 36, 106, 108, 110, 111, 113, 180, 188, 190, 488, 491], "polyxt": [2, 7, 8, 20], "freez": [2, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "792": 2, "circlequad": [2, 20], "781": 2, "matplolibview": 2, "ax": [2, 8, 20, 52, 57, 140, 160, 161, 173, 174, 279, 411, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 474], "properti": [2, 4, 12, 16, 21, 31, 32, 136, 137, 138, 140, 141, 143, 173, 174, 189, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "778": 2, "binder": [2, 20, 485], "762": 2, "equat": [2, 14, 16, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 126, 127, 128, 129, 133, 136, 137, 138, 143, 148, 149, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 187, 189, 190, 194, 195, 196, 221, 222, 290, 297, 298, 300, 301, 302, 315, 352, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 484, 485, 489, 490], "websit": [2, 9, 11], "right": [2, 8, 16, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 68, 71, 75, 81, 82, 83, 85, 106, 112, 114, 117, 121, 124, 127, 129, 133, 136, 137, 138, 148, 160, 161, 162, 163, 166, 173, 174, 175, 176, 180, 187, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 264, 303, 308, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 485, 488, 489], "742": 2, "No": [2, 11, 81, 187, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 484], "variabl": [2, 4, 6, 7, 11, 16, 20, 21, 32, 36, 49, 50, 51, 56, 59, 60, 63, 72, 73, 81, 82, 83, 85, 90, 94, 95, 102, 109, 117, 121, 122, 124, 126, 128, 137, 140, 141, 148, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 176, 180, 187, 188, 189, 193, 354, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 411, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484, 485, 487, 488, 489], "mag": [2, 20, 165, 166, 173, 174, 180, 181, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "735": 2, "pip": [2, 17, 20, 484], "734": 2, "residu": [2, 8, 20, 81, 111, 117, 162, 163, 176, 180, 181, 252, 258, 264, 266, 292, 294, 298, 299, 302, 303, 308, 309, 321, 324, 327, 332, 333, 334, 336, 350, 352, 353, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "688": [2, 491], "need": [2, 3, 8, 9, 10, 11, 17, 19, 21, 31, 32, 33, 34, 47, 51, 74, 81, 110, 117, 137, 160, 162, 163, 173, 174, 176, 180, 187, 188, 189, 199, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 255, 256, 329, 330, 358, 399, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 472, 491, 494, 495], "circl": [2, 7, 8, 17, 20, 34, 73, 156, 165, 166, 173, 174, 222, 427, 447], "viewer": [2, 11, 17, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 138, 140, 141, 143, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 188, 420, 428, 432, 434, 455, 484, 485, 486], "676": 2, "default": [2, 6, 11, 13, 19, 20, 22, 63, 67, 81, 82, 83, 136, 137, 140, 141, 155, 162, 165, 173, 174, 187, 188, 221, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 395, 397, 402, 406, 410, 411, 412, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 485, 495], "flux": [2, 8, 20, 31, 33, 34, 67, 81, 117, 160, 162, 163, 173, 174, 176, 180, 485, 487], "condit": [2, 10, 16, 20, 21, 31, 32, 36, 49, 50, 51, 56, 59, 60, 67, 68, 72, 73, 74, 77, 81, 82, 83, 85, 86, 90, 110, 117, 126, 128, 137, 140, 141, 162, 163, 165, 166, 169, 170, 171, 176, 180, 187, 188, 189, 191, 192, 194, 195, 196, 197, 222, 252, 308, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 413, 427, 485, 488, 489], "explicitli": [2, 8, 16, 77, 81, 114, 160, 162, 163, 173, 174, 176, 187, 411], "609": 2, "clearli": [2, 8, 21, 162, 163], "400": [2, 6, 108, 112, 113, 162, 163, 165, 175, 176], "globalvalu": [2, 17, 20, 31, 47, 117, 176, 363, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 451, 452, 455], "method": [2, 6, 8, 10, 16, 17, 19, 20, 21, 74, 80, 81, 117, 128, 155, 162, 163, 176, 180, 187, 188, 189, 190, 252, 264, 297, 298, 300, 301, 302, 308, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 395, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 485, 488, 489, 491, 494, 495], "assort": 2, "convect": [2, 15, 17, 20, 106, 162, 163, 175, 187, 190, 337, 344, 355, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 382, 385, 387, 389, 390, 451, 485, 488, 489, 490], "boundari": [2, 20, 21, 36, 49, 50, 51, 56, 59, 60, 67, 68, 72, 73, 74, 77, 81, 82, 83, 85, 90, 111, 113, 117, 126, 128, 135, 136, 137, 138, 140, 141, 143, 162, 163, 165, 166, 169, 170, 171, 175, 176, 180, 187, 188, 189, 191, 192, 194, 195, 196, 197, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 485, 489], "spheric": [2, 221, 240, 241], "There": [2, 11, 13, 17, 133, 136, 162, 163, 176, 188, 427], "known": [2, 7, 8, 17, 21, 31, 32, 160, 162, 163, 173, 174, 427, 487, 489], "vtk": [2, 18, 457, 472, 479, 481, 482, 483], "bitrot": 2, "ha": [2, 6, 7, 8, 11, 13, 16, 17, 18, 19, 21, 31, 32, 33, 34, 47, 50, 60, 63, 72, 73, 74, 75, 81, 90, 110, 111, 112, 113, 114, 117, 136, 137, 138, 140, 155, 165, 166, 175, 176, 188, 189, 190, 196, 264, 324, 395, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 459, 460, 461, 462, 463, 464, 465, 467, 468, 484, 487], "start": [2, 9, 17, 20, 31, 32, 33, 34, 111, 113, 117, 133, 160, 161, 162, 163, 173, 174, 175, 177, 188, 247, 393, 415, 472], "demis": 2, "also": [2, 3, 4, 6, 8, 11, 13, 16, 17, 18, 19, 21, 31, 32, 72, 73, 74, 81, 82, 83, 117, 136, 138, 140, 141, 143, 148, 162, 163, 180, 188, 264, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 402, 406, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484, 487, 488], "nonuniformgrid1d": [2, 20, 217, 221, 232, 240], "figur": [2, 6, 17, 140, 160, 173, 174, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 487], "out": [2, 11, 12, 17, 67, 160, 162, 173, 174, 180, 247, 264, 279, 308, 393, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 487], "747": 2, "spherical1d": 2, "uniform": [2, 75, 81, 108, 109, 110, 112, 113, 114, 160, 162, 163, 165, 173, 174, 175, 407, 420, 428, 432, 434, 455], "nonuniform": [2, 491], "732": 2, "klkuhlm": 2, "neumann": [2, 20, 82, 83, 194, 485], "bc": [2, 36, 85, 86], "constraint": [2, 11, 17, 20, 68, 137, 175, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "719": 2, "atism": 2, "vertex": [2, 20, 93, 218, 222, 228, 230, 233, 239, 247, 485, 489], "index": [2, 8, 11, 162, 163, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484], "invers": [2, 397, 406, 432], "716": 2, "726": 2, "mayavicli": [2, 20, 34, 156, 470], "663": 2, "datamin": [2, 31, 32, 33, 34, 36, 40, 71, 72, 73, 81, 82, 83, 90, 108, 109, 110, 111, 113, 121, 122, 124, 126, 128, 137, 140, 141, 160, 161, 162, 163, 165, 166, 173, 174, 175, 177, 188, 420, 428, 432, 434, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "datamax": [2, 31, 32, 33, 34, 36, 40, 71, 72, 73, 81, 82, 83, 90, 108, 109, 110, 111, 113, 121, 122, 124, 126, 128, 137, 140, 141, 160, 161, 162, 163, 165, 166, 173, 174, 175, 177, 188, 420, 428, 432, 434, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "argument": [2, 8, 16, 117, 136, 138, 140, 141, 143, 155, 188, 189, 292, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 412, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 494, 495], "ignor": [2, 17, 162, 163, 175, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 262, 301, 335, 354, 363, 412], "662": 2, "scale": [2, 16, 17, 21, 109, 111, 117, 140, 162, 163, 248, 252, 432, 459, 460, 461, 462, 463, 464, 465, 467, 468], "arg": [2, 176, 190, 217, 218, 219, 220, 222, 232, 233, 234, 239, 240, 241, 354, 393, 401, 402, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 459, 460, 462, 464, 465, 467, 468, 472], "primarili": [2, 7, 17, 81, 396, 487], "711": 2, "broken": [2, 9, 11, 16, 21, 137], "plm_rsh_agent": 2, "error": [2, 11, 12, 16, 17, 20, 21, 36, 72, 73, 81, 93, 95, 96, 112, 117, 148, 149, 187, 222, 259, 260, 261, 262, 263, 265, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 300, 301, 312, 313, 314, 315, 316, 322, 323, 335, 351, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 395, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 485, 487], "710": 2, "708": 2, "703": [2, 491], "fortran": [2, 6, 21, 160, 161, 165, 166, 169, 170, 171, 484], "arrai": [2, 6, 8, 17, 21, 36, 52, 71, 91, 121, 126, 127, 129, 137, 162, 163, 173, 174, 181, 190, 354, 363, 366, 367, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 397, 406, 411, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484], "support": [2, 4, 8, 11, 16, 17, 18, 20, 180, 187, 188, 222, 258, 266, 279, 280, 290, 298, 299, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 336, 350, 351, 352, 353, 395, 406, 417, 457, 485, 487, 495], "solv": [2, 6, 14, 16, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 93, 94, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 148, 149, 150, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 187, 188, 189, 251, 252, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 484, 485, 487, 488, 489], "701": 2, "while": [2, 4, 6, 8, 16, 17, 21, 31, 32, 33, 34, 63, 67, 71, 74, 81, 111, 137, 162, 163, 173, 174, 176, 180, 181, 264, 397, 406, 487, 490], "700": 2, "print": [2, 15, 16, 17, 20, 21, 31, 32, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 105, 108, 109, 111, 113, 114, 117, 122, 124, 126, 127, 128, 129, 137, 148, 149, 150, 161, 162, 163, 165, 166, 169, 170, 171, 175, 176, 180, 181, 187, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 393, 397, 401, 406, 407, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "statement": [2, 187], "processor": [2, 10, 17, 108, 397, 413, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 484], "write": [2, 8, 20, 21, 72, 73, 74, 81, 117, 137, 143, 162, 163, 165, 180, 187, 188, 222, 397, 407, 413, 423], "timetest": 2, "forg": [2, 11, 17, 20, 485], "upload": [2, 20, 485], "option": [2, 6, 8, 10, 16, 17, 20, 22, 140, 141, 190, 258, 259, 260, 261, 263, 265, 266, 277, 278, 281, 285, 286, 287, 288, 289, 291, 292, 293, 298, 299, 302, 303, 309, 324, 332, 333, 334, 336, 350, 351, 352, 353, 393, 395, 397, 402, 406, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 485, 495], "fipy_display_matrix": [2, 17], "legaci": [2, 9, 11, 17, 20, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 485], "matplotlib": [2, 8, 11, 17, 20, 140, 173, 174, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 484, 485], "built": [2, 9, 11, 21, 121, 137, 155, 161, 165, 166, 173, 174, 226, 227, 228], "symlog": 2, "clean": [2, 222, 393], "benchmark": [2, 20], "8": [2, 6, 10, 11, 16, 34, 72, 73, 80, 81, 90, 95, 97, 105, 117, 137, 138, 143, 156, 160, 162, 163, 175, 176, 180, 181, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 387, 397, 406, 411, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 491], "699": [2, 491], "stipul": 2, "forc": [2, 16, 17], "miniconda": 2, "url": [2, 491], "_cellvolumeaveragevari": 2, "class": [2, 4, 8, 10, 16, 17, 21, 85, 108, 109, 110, 111, 112, 113, 114, 117, 140, 141, 160, 173, 174, 187, 188, 189, 192, 193, 194, 195, 196, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 394, 395, 396, 397, 399, 400, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 494, 495], "express": [2, 6, 8, 11, 12, 13, 17, 21, 32, 36, 108, 117, 160, 162, 163, 173, 174, 176, 180, 222, 358, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 487], "bad": [2, 3], "call": [2, 15, 16, 17, 21, 81, 137, 180, 187, 188, 189, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 264, 265, 350, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 395, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 494, 495], "stack": [2, 11], "make": [2, 6, 7, 10, 11, 13, 16, 17, 20, 21, 31, 33, 34, 36, 71, 106, 113, 117, 133, 162, 163, 173, 174, 175, 176, 180, 187, 188, 189, 222, 252, 372, 396, 397, 406, 423, 427, 431, 434, 436, 441, 447, 450, 451, 452, 456, 484, 485, 486, 487, 494], "698": 2, "nick": [2, 489], "croft": [2, 489, 491], "thesi": [2, 489, 491], "681": 2, "header": 2, "footer": 2, "680": 2, "nixpkg": [2, 11, 13], "661": 2, "recip": [2, 11, 13, 356, 491], "658": 2, "692": 2, "copi": [2, 3, 7, 9, 11, 12, 17, 20, 81, 108, 109, 110, 111, 112, 113, 114, 180, 181, 330, 393, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484], "script": [2, 7, 15, 17, 20, 23, 31, 32, 72, 73, 81, 121, 122, 126, 128, 137, 143, 175, 180, 187, 188, 189, 222, 392, 395, 470, 471, 472, 484, 485, 494], "command": [2, 7, 8, 9, 11, 13, 15, 16, 20, 81, 91, 121, 126, 128, 136, 137, 138, 143, 155, 176, 190, 395, 396, 412, 472, 485], "line": [2, 8, 10, 11, 15, 16, 20, 21, 34, 72, 73, 78, 81, 90, 91, 95, 136, 137, 138, 143, 155, 156, 160, 176, 190, 222, 247, 395, 396, 411, 412, 457, 461, 462, 463, 467, 472, 485, 487], "669": 2, "input": [2, 7, 8, 15, 16, 19, 20, 21, 32, 40, 41, 63, 68, 72, 73, 75, 77, 78, 80, 81, 82, 83, 90, 93, 94, 95, 97, 100, 102, 105, 114, 136, 137, 138, 143, 162, 163, 176, 180, 181, 187, 397, 406, 411], "deadlock": 2, "643": 2, "bring": 2, "from": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 94, 95, 102, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 133, 135, 136, 137, 138, 140, 141, 143, 148, 149, 150, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 187, 188, 189, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 264, 265, 308, 317, 318, 319, 330, 337, 339, 350, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 394, 395, 397, 406, 407, 410, 411, 412, 413, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 470, 471, 477, 485, 487, 490, 491, 494, 495], "same": [2, 8, 16, 17, 19, 32, 74, 80, 81, 90, 95, 97, 99, 100, 102, 109, 110, 111, 112, 113, 137, 138, 162, 163, 165, 175, 176, 187, 190, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 395, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 477, 487], "sourc": [2, 7, 9, 11, 14, 15, 17, 18, 20, 32, 56, 57, 67, 71, 74, 106, 111, 112, 117, 137, 160, 162, 163, 165, 166, 173, 174, 175, 176, 188, 190, 383, 384, 448, 472, 484, 485, 488, 489], "translat": [2, 6, 21, 162, 163, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "pya": [2, 17], "woodscn": [2, 17], "thing": [2, 3, 8, 10, 11, 16, 17, 187, 188, 252, 487, 494, 495], "spell": [2, 17], "657": 2, "window": [2, 11, 17, 19, 140, 141, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 477, 478, 479, 481, 482, 483, 484], "648": 2, "sphinx": [2, 17, 484], "647": 2, "645": 2, "gmshmesh": [2, 20], "644": 2, "xfong": 2, "655": 2, "mayavi": [2, 8, 11, 17, 20, 136, 141, 143, 457, 470, 471, 472, 484, 485], "wont": 2, "hendrik410": 2, "646": 2, "branch": [2, 20, 160, 173, 174, 485], "601": 2, "content": [2, 222, 477, 492, 493, 496], "rst": 2, "recurs": [2, 16, 487], "mess": 2, "597": 2, "compress": [2, 11, 407, 491], "archiv": [2, 9, 11, 15, 17, 20], "557": 2, "facegradaverag": [2, 20, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "stupid": 2, "552": 2, "458": 2, "wrong": [2, 8, 188], "preced": [2, 16, 17], "lx": [2, 74, 77, 80, 90, 91, 94, 95, 97, 99, 100, 102, 124, 126, 140, 141, 166, 180, 181, 188, 221, 406], "dx": [2, 17, 31, 32, 33, 36, 39, 40, 51, 52, 54, 56, 57, 63, 65, 66, 67, 68, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 97, 99, 100, 102, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 137, 140, 141, 149, 155, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 188, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 367, 374, 375, 377, 378, 382, 389, 390, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 458, 463, 464, 465, 467, 468, 470, 471, 477], "nonuniformgrid": 2, "457": 2, "special": [2, 12, 17, 21, 49, 50, 59, 60, 72, 73, 77, 78, 81, 160, 162, 163, 173, 174, 383, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 494, 495], "includ": [2, 4, 7, 11, 12, 13, 15, 16, 17, 19, 68, 117, 136, 160, 162, 163, 173, 174, 175, 188, 189, 190, 222, 477, 487, 488, 494], "432": 2, "340": 2, "packag": [2, 8, 10, 16, 17, 18, 20, 21, 23, 72, 73, 140, 141, 160, 173, 174, 265, 350, 351, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 410, 416, 427, 460, 470, 471, 484, 485, 486, 496], "just": [2, 7, 8, 16, 17, 21, 78, 81, 162, 163, 175, 176, 252, 395, 397, 406, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 462, 463, 489], "master": [2, 9, 11, 13, 20, 485], "predominantli": 2, "devop": 2, "focu": [2, 175], "been": [2, 6, 7, 8, 11, 13, 15, 17, 21, 63, 75, 81, 128, 136, 137, 138, 143, 155, 175, 187, 188, 189, 190, 222, 395, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 487], "easier": [2, 8, 21, 180, 187, 188, 189, 222], "It": [2, 3, 6, 8, 11, 16, 17, 18, 19, 31, 32, 49, 50, 59, 60, 74, 81, 96, 117, 137, 138, 162, 163, 176, 187, 188, 196, 222, 247, 264, 265, 350, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 472, 477, 484], "possibl": [2, 8, 10, 16, 17, 21, 74, 81, 109, 162, 163, 176, 222, 264, 292, 351, 393, 395, 397, 406, 458, 467, 488], "minim": [2, 3, 6, 8, 298, 337, 344, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "base": [2, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 81, 91, 117, 136, 137, 138, 140, 141, 143, 155, 161, 176, 190, 192, 193, 194, 195, 196, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 395, 396, 397, 399, 400, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 484, 485, 487, 491, 495], "maco": [2, 108, 484], "travisci": [2, 484], "appveyor": [2, 484], "badg": 2, "636": 2, "robin": [2, 7, 20, 485], "615": 2, "issue555": 2, "inclus": [2, 17, 455], "licens": [2, 11, 21], "613": [2, 491], "607": 2, "600": [2, 434], "explain": [2, 7, 8, 11, 17, 137], "where": [2, 10, 15, 17, 19, 20, 21, 31, 32, 33, 34, 36, 63, 67, 71, 75, 78, 81, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 136, 137, 138, 140, 141, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 181, 187, 188, 192, 193, 194, 195, 196, 354, 363, 367, 372, 374, 375, 378, 380, 382, 387, 389, 397, 406, 411, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 485, 487, 488, 490], "596": 2, "correct": [2, 8, 10, 17, 36, 75, 81, 110, 112, 114, 117, 149, 165, 166, 173, 174, 180, 222, 406, 407, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 458, 479, 487], "en_u": [2, 17], "dictionari": [2, 17, 393], "594": 2, "smoothedaggregationsolv": 2, "593": 2, "585": 2, "tarbal": 2, "582": 2, "navier": [2, 117], "viscou": [2, 117], "limit": [2, 8, 12, 16, 17, 81, 117, 133, 140, 141, 160, 162, 163, 173, 174, 176, 180, 188, 190, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "580": 2, "stokescav": [2, 7, 8, 20], "579": 2, "rowin": 2, "inlin": [2, 4, 6, 8, 11, 17, 20, 190, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484], "578": 2, "577": 2, "epetra": [2, 329, 330], "vector": [2, 8, 20, 32, 72, 73, 74, 117, 187, 188, 195, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 354, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 411, 427, 468, 485, 487], "numarrai": [2, 484], "574": 2, "codaci": 2, "572": 2, "pytrilino": [2, 16, 17, 484, 487], "unavail": [2, 11, 13, 49, 50, 59, 60, 176, 416], "570": 2, "shwina": 2, "569": 2, "gpu": [2, 16, 484], "via": [2, 8, 11, 14, 17, 135, 487], "pyamgx": [2, 17, 20, 36, 484, 485], "567": 2, "dedic": 2, "public": [2, 8, 12, 18, 20, 21, 406, 484, 485, 486, 491], "domain": [2, 17, 21, 31, 32, 36, 71, 72, 73, 75, 78, 81, 82, 90, 91, 108, 109, 110, 114, 117, 128, 137, 160, 161, 162, 163, 165, 166, 169, 173, 174, 176, 177, 180, 206, 221, 222, 337, 338, 340, 342, 343, 467, 487, 489], "556": 2, "550": 2, "546": 2, "ensur": [2, 81, 397, 401, 406], "dtype": 2, "float": [2, 10, 21, 50, 60, 71, 140, 141, 188, 192, 194, 195, 196, 221, 247, 252, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 354, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "matrix": [2, 6, 8, 11, 16, 17, 20, 21, 71, 74, 81, 86, 117, 160, 162, 163, 173, 174, 176, 180, 181, 188, 195, 251, 252, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 308, 309, 312, 313, 314, 315, 316, 317, 319, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 484, 487, 488], "multipli": [2, 20, 21, 252, 358, 363, 366, 367, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 397, 406], "544": 2, "revert": [2, 222], "issue534": 2, "physic": [2, 8, 14, 19, 21, 74, 109, 137, 176, 180, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 488, 490, 491], "field": [2, 4, 6, 8, 14, 15, 17, 19, 20, 21, 36, 68, 74, 81, 106, 110, 111, 112, 113, 117, 137, 138, 143, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 188, 190, 363, 397, 406, 411, 423, 467, 488, 491], "mishandl": 2, "compound": 2, "unit": [2, 12, 20, 21, 109, 117, 124, 137, 138, 143, 162, 163, 392, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "536": 2, "532": 2, "race": [2, 413], "524": 2, "max": [2, 4, 16, 20, 31, 47, 71, 74, 95, 111, 117, 127, 137, 149, 156, 180, 181, 188, 330, 363, 377, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467], "min": [2, 20, 31, 32, 33, 34, 36, 111, 126, 156, 180, 181, 188, 330, 363, 377, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467], "global": [2, 14, 17, 21, 149, 150, 393], "520": 2, "gitter": 2, "chat": 2, "516": 2, "badger": 2, "489": 2, "631": 2, "628": 2, "627": 2, "omp_num_thread": [2, 17], "625": [2, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "import": [2, 4, 8, 10, 16, 17, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 94, 95, 102, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 133, 137, 140, 141, 148, 149, 150, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 187, 188, 189, 190, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 330, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 394, 397, 406, 407, 410, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 461, 463, 464, 465, 467, 468, 470, 471, 477, 494], "623": 2, "621": 2, "plot": [2, 17, 18, 20, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 91, 94, 95, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 136, 137, 138, 140, 141, 143, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 420, 428, 432, 434, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484, 485], "617": 2, "pick": [2, 11], "1st": 2, "valu": [2, 6, 7, 8, 10, 19, 20, 21, 31, 32, 36, 39, 40, 52, 54, 57, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 136, 137, 138, 140, 141, 143, 149, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 188, 192, 193, 194, 195, 196, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 252, 259, 260, 261, 263, 265, 299, 324, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 395, 397, 406, 411, 412, 417, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 485, 487, 490, 495], "1d": [2, 18, 36, 49, 50, 51, 56, 59, 60, 77, 78, 80, 81, 85, 93, 94, 95, 96, 99, 100, 102, 105, 108, 109, 111, 112, 113, 114, 133, 140, 141, 155, 162, 163, 175, 176, 181, 187, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 427, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484], "cellvari": [2, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 102, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 140, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 188, 222, 232, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 411, 420, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 477, 478, 479, 481, 482, 483, 485], "611": 2, "coeffici": [2, 4, 17, 20, 32, 36, 49, 50, 51, 59, 60, 67, 71, 77, 81, 94, 106, 108, 112, 117, 136, 137, 138, 143, 160, 161, 162, 163, 173, 174, 176, 187, 195, 196, 297, 298, 300, 301, 302, 354, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 451, 485, 487, 488, 490], "cannot": [2, 6, 8, 9, 11, 16, 17, 21, 32, 74, 117, 162, 188, 207, 217, 218, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 247, 358, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 484, 487], "610": 2, "anisotropi": [2, 6, 7, 8, 17, 19, 20, 161, 173, 174], "contour": [2, 18, 91, 138, 140, 141, 160, 462, 463, 465, 484], "displai": [2, 17, 18, 20, 21, 36, 72, 73, 81, 96, 111, 113, 136, 137, 138, 140, 141, 143, 160, 173, 174, 401, 402, 411, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484], "legend": [2, 17, 458, 461], "608": 2, "var": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 137, 140, 141, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 188, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 395, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "object": [2, 4, 6, 8, 14, 16, 17, 20, 68, 72, 73, 81, 91, 95, 121, 122, 126, 128, 135, 137, 140, 141, 155, 160, 173, 174, 176, 177, 187, 188, 190, 192, 193, 196, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 252, 258, 266, 275, 277, 278, 279, 280, 281, 285, 286, 290, 295, 297, 298, 299, 300, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 330, 332, 333, 334, 336, 350, 351, 352, 353, 357, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 395, 396, 397, 399, 406, 407, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 484, 485, 487, 494], "callabl": 2, "603": 2, "basic": [2, 8, 11, 16, 17, 19, 21, 155, 222, 412], "602": 2, "592": 2, "590": 2, "pyamgsolv": 2, "584": 2, "anim": [2, 140, 141], "jupyt": [2, 11], "notebook": [2, 11], "566": 2, "565": 2, "empti": [2, 173, 174, 393], "env": [2, 11, 410], "564": 2, "board": 2, "561": 2, "cast": [2, 8, 397, 406, 487, 491], "data": [2, 16, 18, 20, 21, 36, 137, 140, 141, 161, 165, 166, 169, 170, 171, 190, 222, 406, 407, 410, 411, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 484, 485, 494], "int64": 2, "int32": 2, "accord": [2, 176], "rule": [2, 34, 156, 162, 163], "safe": [2, 67, 395], "555": 2, "551": 2, "spew": 2, "545": 2, "543": 2, "integ": [2, 81, 188, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "539": 2, "explicit": [2, 8, 11, 17, 20, 32, 45, 74, 81, 137, 161, 162, 163, 166, 169, 170, 171, 176, 180, 188, 189, 358, 367, 374, 375, 378, 382, 383, 389, 390, 487, 490], "mixedel": [2, 20], "538": 2, "534": 2, "physicalfield": [2, 20, 109, 111, 397, 456], "533": 2, "531": 2, "drop_tol": 2, "spars": [2, 11, 16, 176, 190, 198, 251, 267, 268, 290, 315, 317, 318, 319, 484, 487], "linalg": [2, 16, 290, 315, 317, 318, 319], "splu": [2, 290, 315], "gone": 2, "530": 2, "instruct": [2, 7, 9, 11, 17, 494, 495], "528": 2, "525": [2, 110], "guyer": [2, 4, 14, 106, 491], "osx": 2, "513": 2, "give": [2, 8, 11, 16, 17, 21, 111, 113, 143, 175, 176, 222, 363, 393, 427], "510": 2, "weav": [2, 8, 11, 17, 21, 484], "509": 2, "unabl": 2, "506": 2, "spatial": [2, 8, 20, 31, 33, 34, 81, 117, 485], "vari": [2, 8, 20, 21, 72, 73, 81, 90, 165, 467, 485], "anisotrop": [2, 4, 19, 20, 71, 160, 173, 174, 485], "488": 2, "break": [2, 10, 17, 31, 111, 180, 181], "gmshgrid": 2, "435": 2, "fatal": 2, "spmatrix": 2, "h": [2, 14, 17, 173, 174, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 488, 491], "found": [2, 7, 9, 11, 16, 17, 21, 49, 50, 51, 59, 60, 81, 91, 117, 138, 160, 162, 163, 173, 174, 176, 187, 188, 189, 252, 484, 492, 493, 494, 496], "434": 2, "ez_setup": 2, "502": 2, "gmane": [2, 3, 8], "defunct": [2, 3, 484], "recvobj": 2, "allgath": [2, 20, 330], "sendobj": [2, 330], "492": 2, "restor": [2, 16], "trail": 2, "whitespac": 2, "expect": [2, 7, 8, 17, 77, 78, 81, 162, 163, 176, 411, 487], "485": 2, "pep": [2, 10, 484], "440": 2, "483": 2, "provid": [2, 3, 6, 8, 9, 11, 12, 15, 16, 17, 19, 21, 86, 90, 108, 109, 110, 133, 137, 190, 222, 265, 350, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 411, 413, 477, 484, 487, 494, 495], "_facetocelldistanceratio": [2, 17], "why": [2, 16, 17, 20, 252, 393, 485], "scalar": [2, 16, 17, 188, 217, 218, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 247, 308, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "481": 2, "strip": 2, "white": 2, "space": [2, 21, 50, 60, 81, 138, 143, 156, 162, 163, 176, 188, 220, 221, 250, 434, 488], "eof": 2, "r": [2, 14, 19, 31, 32, 33, 34, 39, 40, 49, 50, 59, 60, 68, 71, 81, 117, 137, 138, 140, 143, 149, 156, 160, 162, 163, 173, 174, 175, 180, 181, 222, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 470, 471, 491], "479": 2, "uniformgrid3d": [2, 221], "_celltocellid": 2, "concaten": [2, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "478": 2, "pkgw": 2, "incorrect": [2, 81, 358, 411], "axi": [2, 8, 19, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 124, 187, 188, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406, 411, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 461], "477": 2, "472": 2, "471": 2, "sort": 2, "entri": [2, 17, 194, 195, 406], "469": 2, "syntax": [2, 11, 15, 17, 21, 162, 163, 187, 188, 189], "466": 2, "465": 2, "implement": [2, 6, 11, 14, 15, 16, 17, 20, 117, 143, 161, 162, 163, 190, 194, 195, 196, 207, 222, 226, 242, 251, 324, 351, 358, 395, 453, 457, 469, 473, 475, 480, 485, 486], "cahnhilliard": [2, 6, 7, 8, 17, 20], "mesh2dcoupl": [2, 7, 8, 17, 20], "463": [2, 14], "typeset": 2, "analyt": [2, 8, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 81, 85, 91, 105, 111, 112, 113, 114, 133, 176, 187, 387], "solut": [2, 6, 8, 15, 16, 17, 21, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 102, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 126, 128, 133, 149, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 176, 187, 188, 190, 196, 252, 258, 266, 298, 299, 302, 303, 308, 309, 324, 332, 333, 334, 336, 350, 352, 353, 354, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 484, 487, 489, 490], "460": 2, "pdflatex": 2, "head": [2, 6], "459": [2, 406], "purg": 2, "gist": 2, "456": [2, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390], "duplic": [2, 3, 393, 397, 406, 423, 427, 431, 436, 441, 447, 450, 451, 452, 456], "ufunc": [2, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "454": 2, "452": 2, "getter": [2, 189], "setter": [2, 189], "450": 2, "448": 2, "ipython": [2, 17, 484], "447": 2, "proper": [2, 117, 222], "446": 2, "robust": [2, 251], "distutil": [2, 416], "strictvers": 2, "442": 2, "compar": [2, 6, 11, 17, 36, 47, 71, 81, 91, 133, 138, 160, 161, 165, 166, 169, 170, 171, 176, 222, 387, 397, 406, 411, 420, 428, 432, 434], "tupl": [2, 8, 108, 109, 110, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 407, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 487], "441": 2, "two": [2, 8, 10, 11, 16, 17, 19, 21, 31, 32, 74, 82, 83, 99, 108, 109, 110, 111, 113, 117, 126, 127, 129, 160, 162, 163, 165, 166, 169, 173, 174, 175, 180, 187, 189, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406, 411, 427, 451, 487, 491, 494], "439": 2, "alfrenardi": 2, "issue426": 2, "typo": 2, "431": 2, "raybsmith": 2, "429": 2, "matplotlibview": [2, 8, 20, 173, 174], "428": 2, "period": [2, 47, 90, 166, 232, 233, 234], "3d": [2, 18, 33, 111, 156, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 484], "424": 2, "419": 2, "498": 2, "nonlinear": [2, 8], "496": 2, "linearbicgstabsolv": [2, 20], "take": [2, 6, 16, 17, 20, 21, 77, 81, 111, 124, 160, 162, 163, 173, 174, 175, 176, 180, 188, 189, 218, 222, 228, 230, 233, 239, 247, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 485], "494": 2, "493": 2, "review": [2, 14, 20, 485, 491], "io": [2, 11, 13, 16, 397, 413, 484], "access": [2, 17, 19, 21, 160, 173, 174, 188, 397, 413, 494], "leav": [2, 11, 19, 81, 117, 162, 163], "comment": [2, 11, 17, 21], "491": 2, "mpi4pi": [2, 11, 16, 17, 330, 484], "484": 2, "482": 2, "compliant": 2, "476": 2, "setuptool": 2, "suit": [2, 3, 11, 16, 17, 137, 190, 258, 266, 279, 280, 290, 298, 299, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 336, 350, 352, 353, 391, 484, 487], "475": 2, "grid3d": [2, 20, 33, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 470, 471], "470": 2, "mesh3d": [2, 20], "celltocellid": 2, "467": 2, "sequenc": [2, 21, 397, 406, 411], "462": 2, "incorrectli": 2, "455": 2, "445": 2, "dendriteview": [2, 160], "put": [2, 17, 20, 31, 33, 34, 188, 397, 406, 411, 415, 485], "over": [2, 10, 17, 21, 31, 32, 33, 34, 36, 63, 81, 90, 108, 117, 128, 160, 162, 163, 175, 176, 188, 189, 300, 302, 411, 448, 462, 463, 487, 489, 490], "bar": [2, 173, 174, 175, 180, 395, 406, 458, 459, 460, 462, 463, 464, 465], "443": 2, "api": [2, 8, 16], "nice": [2, 462, 463, 484], "438": 2, "437": 2, "mislead": 2, "433": 2, "430": 2, "427": 2, "425": [2, 173, 174], "warren": [2, 4, 14, 106, 160, 161, 165, 166, 173, 174, 491], "421": 2, "matplotlib2dgridview": [2, 20, 160, 173, 174], "function": [2, 8, 10, 11, 17, 19, 21, 31, 32, 36, 72, 73, 81, 106, 110, 121, 122, 128, 135, 137, 138, 143, 148, 162, 163, 165, 175, 176, 180, 188, 189, 190, 199, 218, 221, 222, 228, 230, 233, 239, 247, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 401, 402, 406, 407, 410, 411, 412, 413, 415, 427, 448, 457, 458, 472, 479, 487, 488, 489, 494], "416": 2, "reflect": [2, 397, 406, 423, 427, 431, 436, 441, 447, 450, 451, 452, 456], "415": 2, "matplotlibgrid2dview": 2, "414": 2, "periodicgrid3d": [2, 20], "413": 2, "remind": 2, "user": [2, 3, 8, 9, 11, 13, 15, 16, 17, 19, 21, 31, 32, 33, 34, 81, 160, 173, 174, 176, 187, 188, 189, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 452, 455, 456, 490], "differ": [2, 8, 9, 11, 16, 17, 19, 21, 31, 32, 33, 34, 47, 72, 73, 77, 80, 81, 94, 95, 96, 99, 100, 102, 106, 108, 109, 110, 113, 136, 138, 143, 162, 163, 165, 166, 176, 177, 187, 188, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 264, 358, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 467, 474, 487, 489, 491], "conserv": [2, 8, 17, 20, 31, 32, 74, 81, 137, 149, 150, 160, 162, 163, 173, 174, 180, 448, 452, 485, 489], "412": 2, "pickl": [2, 8, 165, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 255, 256, 257, 324, 329, 330, 331, 358, 399, 400, 407, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457], "commun": [2, 3, 15, 16, 17, 21, 71, 122, 124, 126, 128, 137, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 255, 256, 329, 330, 397, 399, 407, 413, 427], "unnecessari": 2, "grid": [2, 17, 81, 117, 162, 163, 166, 176, 217, 218, 219, 220, 221, 229, 230, 232, 233, 234, 239, 240, 241, 249, 250, 451, 467, 484, 489], "408": 2, "407": 2, "strang": 2, "loop": [2, 34, 72, 73, 77, 80, 81, 82, 83, 95, 117, 137, 156, 175, 222], "reshap": [2, 20, 160, 173, 174, 397, 406, 411], "404": 2, "never": [2, 9, 11, 176, 494], "401": 2, "sweep": [2, 16, 17, 20, 67, 71, 74, 81, 111, 112, 117, 162, 163, 176, 180, 181, 188, 189, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 485], "instead": [2, 3, 8, 9, 11, 17, 19, 21, 81, 117, 136, 162, 163, 166, 176, 187, 188, 189, 354, 357, 402, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484, 494], "295": 2, "must": [2, 6, 10, 16, 17, 21, 31, 32, 51, 75, 81, 109, 112, 114, 117, 160, 162, 163, 165, 166, 173, 174, 176, 187, 188, 189, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 358, 367, 374, 375, 378, 382, 389, 390, 395, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 462, 463, 467, 477, 487, 490, 495], "zizou": 2, "signific": [2, 6, 9, 11, 16, 190], "level": [2, 4, 15, 16, 17, 20, 23, 121, 122, 124, 126, 127, 128, 129, 190, 264, 337, 342, 343, 344, 345, 346, 347, 348, 413, 427, 462, 463, 484, 485, 491], "handl": [2, 11, 21, 49, 50, 51, 59, 60, 162, 163, 187, 222], "lsmlib": [2, 10, 17, 20, 427, 485], "scikit": [2, 17, 20, 427, 485], "fmm": [2, 17, 20, 427, 485], "librari": [2, 11, 16, 17, 21, 22, 49, 50, 59, 60, 72, 73, 78, 81, 162, 163, 176, 412, 484, 487], "magnitud": [2, 17, 31, 32, 81, 106, 363, 377, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 468], "faster": [2, 6, 17, 21, 176, 490], "than": [2, 3, 6, 8, 10, 11, 15, 16, 17, 21, 47, 65, 66, 81, 91, 138, 162, 163, 165, 176, 187, 188, 189, 222, 264, 308, 363, 377, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 462, 463, 487, 494], "prototyp": 2, "streamplot": [2, 467], "control": [2, 14, 19, 31, 32, 33, 34, 137, 138, 143, 155, 180, 355, 356, 467, 487], "git": [2, 20, 188, 189, 485, 486, 491], "much": [2, 3, 7, 8, 17, 21, 31, 32, 81, 162, 163, 176, 187, 188, 252, 494], "particip": 2, "398": [2, 491], "home": [2, 22], "redirect": [2, 8], "397": 2, "sphinxcontrib": [2, 17], "bibtex": [2, 17], "396": 2, "googl": [2, 3, 16, 484], "395": 2, "ubuntu": 2, "393": 2, "cylindricalnonuniformgrid2d": [2, 20, 221], "exteriorfac": [2, 17, 20, 72, 73, 102, 117, 180, 181, 188, 219, 232, 233, 234, 241, 249], "392": 2, "exit_nist": 2, "cgi": 2, "391": 2, "p\u00e9clet": [2, 51, 63, 187, 188], "inequ": [2, 490], "sign": [2, 3, 20, 188, 397, 406, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "388": 2, "64": 2, "int": [2, 121, 124, 137, 155, 165, 180, 196, 218, 221, 222, 228, 230, 233, 239, 247, 252, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 337, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 355, 358, 397, 411, 413, 423, 431, 436, 441, 447, 448, 450, 456, 462, 463, 468], "384": 2, "382": 2, "381": 2, "377": 2, "vanleerconvectionterm": [2, 20, 47, 180, 181, 487, 490], "minmod": 2, "slope": 2, "376": 2, "committicketupdat": 2, "375": [2, 110, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 491], "_formatinteg": 2, "373": 2, "372": 2, "cylindr": [2, 49, 50, 59, 60, 217, 218, 219, 220, 221], "371": 2, "binari": [2, 6, 7, 9, 10, 11, 14, 20, 21, 113, 163, 175, 199, 222, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 491], "370": 2, "368": 2, "well": [2, 3, 8, 9, 11, 15, 17, 21, 31, 32, 106, 162, 163, 175, 176, 187, 188, 190, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 488], "367": 2, "promot": 2, "366": 2, "unop": [2, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "365": 2, "renam": [2, 187, 188], "instanc": [2, 7, 17, 51, 188, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 479], "364": 2, "factori": [2, 81, 175, 187, 221, 457, 458, 479], "360": 2, "css": 2, "356": 2, "353": 2, "ohloh": 2, "repo": 2, "352": 2, "getvers": 2, "350": 2, "element": [2, 6, 15, 36, 72, 73, 78, 106, 135, 155, 222, 226, 227, 228, 355, 363, 385, 397, 406, 411, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484, 487, 489, 491], "347": 2, "activ": [2, 9, 11, 17, 21, 410], "frame": [2, 8, 470, 471], "front": [2, 160, 173, 174, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 452], "339": 2, "loki": 2, "337": 2, "interact": [2, 3, 7, 11, 15, 17, 19, 21, 36, 49, 50, 51, 56, 59, 60, 65, 75, 77, 81, 85, 108, 109, 110, 111, 112, 113, 114, 137, 161, 162, 163, 165, 166, 175, 176, 187, 397, 406, 476], "between": [2, 11, 17, 20, 21, 31, 32, 81, 106, 108, 136, 138, 160, 162, 163, 166, 169, 173, 174, 176, 180, 187, 188, 221, 239, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 395, 406, 411, 427, 447, 484, 485, 487, 490], "336": 2, "clash": 2, "334": 2, "citat": [2, 17], "go": [2, 21, 108, 109, 110, 160, 161, 162, 163, 165, 166, 173, 174], "doi": [2, 14, 491], "333": 2, "seem": [2, 16, 17, 187, 467, 494], "331": 2, "330": 2, "facevalu": [2, 20, 162, 163, 175, 180, 181, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "facecent": [2, 17, 72, 73, 81, 82, 83, 102, 117, 162, 163, 175, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "329": 2, "background": [2, 8, 20, 21, 222, 485, 486], "326": 2, "gmsh2d": [2, 17, 20, 71, 72, 73, 95, 135, 189, 222], "323": 2, "getfacecent": [2, 188], "return": [2, 17, 32, 72, 73, 81, 82, 83, 108, 109, 110, 111, 112, 113, 114, 126, 127, 129, 162, 163, 165, 173, 174, 175, 176, 180, 181, 187, 188, 192, 193, 194, 195, 196, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 302, 303, 308, 309, 312, 313, 314, 315, 316, 321, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 335, 336, 350, 351, 352, 353, 354, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 399, 400, 402, 406, 407, 410, 411, 412, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 472, 479], "319": 2, "transientterm": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 63, 71, 72, 73, 74, 77, 78, 81, 82, 83, 90, 108, 109, 110, 111, 112, 113, 121, 122, 124, 126, 128, 137, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 188, 189, 358, 367, 374, 375, 378, 382, 389, 390, 487], "dt": [2, 8, 17, 31, 32, 33, 34, 36, 39, 40, 47, 63, 71, 72, 73, 74, 77, 78, 80, 81, 82, 83, 90, 108, 109, 110, 111, 112, 113, 121, 122, 124, 133, 137, 148, 149, 150, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 181, 189, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 420, 432], "318": 2, "311": 2, "305": 2, "mpirun": [2, 17], "np": [2, 17], "wd": 2, "hang": 2, "sandbox": 2, "buildbot": [2, 4, 484], "297": 2, "gnuplot": 2, "291": [2, 363, 366, 367, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390], "efficiency_test": 2, "choke": 2, "liquidvapor2d": [2, 20], "289": [2, 491], "diffusionterm": [2, 8, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 81, 82, 83, 85, 90, 91, 94, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 187, 188, 363, 366, 367, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 387, 389, 390, 487], "_test": 2, "287": 2, "275": 2, "274": 2, "norm2": 2, "272": 2, "269": 2, "gridxd": 2, "255": 2, "5": [2, 6, 8, 11, 14, 15, 16, 17, 21, 31, 32, 33, 34, 36, 57, 67, 71, 72, 73, 74, 75, 81, 90, 95, 111, 112, 113, 114, 117, 122, 124, 126, 128, 137, 138, 143, 149, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 190, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 351, 363, 366, 367, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 397, 406, 411, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 465, 467, 468, 470, 471, 477, 487, 490, 491], "mask": [2, 8, 17, 126, 188, 192, 194, 195, 196, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "253": 2, "promin": 2, "245": [2, 143], "_binaryterm": 2, "228": 2, "attempt": [2, 11, 17, 18, 21, 81, 187, 190, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 470, 471], "mpi": [2, 16, 20, 221, 255, 256, 329, 330, 397, 399, 401, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 484, 485], "225": 2, "mostli": [2, 221, 222], "209": [2, 117], "rhie": [2, 117], "chow": [2, 117], "180": [2, 173, 174], "arithmet": [2, 8, 21, 166, 173, 174, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 484], "face": [2, 8, 17, 21, 31, 33, 34, 36, 68, 72, 73, 81, 85, 117, 155, 162, 163, 165, 166, 173, 174, 180, 187, 188, 192, 194, 195, 196, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 468, 487], "cell": [2, 6, 8, 14, 17, 19, 20, 21, 31, 33, 34, 50, 60, 67, 71, 72, 73, 81, 82, 83, 105, 117, 138, 143, 155, 162, 163, 180, 188, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 465, 467, 468, 477, 485, 489, 491], "distanc": [2, 17, 121, 122, 128, 137, 148, 180, 427, 487], "calcul": [2, 6, 8, 11, 13, 16, 17, 18, 19, 21, 31, 33, 34, 51, 72, 73, 81, 90, 91, 117, 128, 137, 162, 163, 180, 187, 188, 190, 226, 227, 228, 252, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "128": 2, "123": [2, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 411], "numerix": [2, 8, 17, 20, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 77, 78, 81, 82, 83, 95, 105, 109, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 148, 149, 150, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 187, 188, 189, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 461, 463, 464, 465, 467, 468, 470, 471, 487], "dot": [2, 17, 20, 71, 111, 112, 113, 117, 136, 137, 138, 149, 161, 188, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "tensor": [2, 20, 94, 160, 173, 174, 485], "103": 2, "subscrib": [2, 3], "_markstal": 2, "attributeerror": [2, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "61": 2, "implicitdiffusionterm": [2, 20, 187, 188, 196, 487], "simpl": [2, 7, 8, 17, 19, 20, 21, 31, 32, 72, 73, 81, 105, 108, 111, 112, 114, 117, 138, 162, 163, 165, 166, 175, 363, 377, 406, 427, 451, 452, 472, 489], "mesh1d": [2, 7, 8, 15, 17, 20, 52, 57, 61, 62, 66, 78, 80, 93, 94, 95, 99, 100, 102, 109, 110, 113, 162, 163, 229, 487], "346": 2, "text": [2, 7, 8, 15, 17, 21, 32, 36, 49, 51, 56, 59, 60, 75, 81, 85, 106, 108, 112, 113, 114, 124, 127, 129, 133, 137, 140, 141, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 187, 194, 195, 196, 252, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 413, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484, 487, 488, 490], "trunk": 2, "342": 2, "transient": [2, 15, 17, 20, 72, 73, 77, 78, 81, 82, 83, 106, 161, 175, 176, 190, 485, 488, 489], "implicit": [2, 8, 11, 17, 32, 46, 81, 82, 83, 85, 161, 162, 163, 165, 166, 175, 176, 187, 358, 380, 383, 384, 487], "338": 2, "svntogit": 2, "bump": [2, 14], "increas": [2, 8, 16, 21, 31, 32, 33, 34, 63, 74, 81, 180, 222, 252, 264, 462, 463, 487, 490], "capabl": [2, 6, 8, 11, 16, 17, 18, 21, 255, 256, 329, 330, 399, 487], "eas": 2, "few": [2, 17, 19, 21, 75, 136, 427, 492, 493, 494, 496], "exist": [2, 3, 9, 10, 11, 21, 137, 143, 160, 173, 174, 187, 188, 190, 222, 393, 397, 406, 447, 484, 488, 494], "A": [2, 8, 9, 11, 12, 14, 16, 17, 18, 21, 31, 32, 67, 71, 77, 80, 90, 91, 105, 108, 112, 114, 117, 137, 138, 140, 141, 143, 155, 160, 161, 162, 163, 165, 166, 173, 174, 176, 181, 188, 189, 190, 207, 222, 252, 259, 260, 261, 262, 263, 265, 308, 354, 355, 363, 387, 393, 396, 397, 406, 407, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 484, 487, 488, 489, 491], "mechan": [2, 8, 14, 17, 21, 136, 143, 165, 484, 491], "specifi": [2, 5, 10, 17, 19, 78, 80, 81, 188, 189, 194, 195, 196, 221, 222, 302, 358, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 484, 487, 494, 495], "most": [2, 6, 7, 8, 9, 11, 16, 17, 18, 21, 49, 50, 51, 59, 60, 71, 81, 136, 187, 188, 189, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 367, 374, 375, 378, 382, 389, 390, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 484, 487, 494], "partit": [2, 4, 17, 188, 222], "pyamg": [2, 17, 20, 484, 485], "pervas": [2, 4, 10], "full": [2, 4, 11, 21, 106, 138, 175, 187, 190, 494], "namespac": [2, 17, 188, 189], "update2_0to3_0": [2, 7, 20], "detail": [2, 8, 11, 15, 16, 17, 21, 49, 50, 51, 59, 60, 72, 73, 117, 162, 163, 165, 166, 173, 174, 187, 279, 351, 367, 374, 375, 378, 382, 389, 393, 412], "contain": [2, 7, 8, 11, 21, 22, 113, 117, 137, 177, 188, 189, 226, 227, 228, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 492, 493, 496], "timestep": [2, 20, 81, 85, 111, 160, 162, 163, 173, 174, 176, 180, 181, 187, 188, 189, 355, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 434, 485], "brought": 2, "unavoid": 2, "guidanc": [2, 8], "332": 2, "x86_64": 2, "324": 2, "constrain": [2, 17, 20, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 94, 95, 102, 111, 114, 117, 137, 175, 180, 181, 189, 193, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457], "implicitsourceterm": [2, 17, 20, 31, 32, 39, 40, 67, 68, 111, 112, 113, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 188, 387, 487], "317": [2, 14], "gmshimport": [2, 10], "due": [2, 6, 8, 16, 67, 72, 73, 86, 138, 160, 162, 163, 173, 174, 180, 264, 393, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 487], "share": [2, 19, 397, 413], "316": 2, "313": 2, "307": 2, "306": [2, 491], "302": 2, "301": 2, "pycomm": 2, "debian": 2, "300": [2, 117, 432], "mesh2d": [2, 6, 20, 33, 34, 218, 222, 230, 233, 239, 247], "299": 2, "298": [2, 111, 137, 138, 143], "consumpt": [2, 136, 138], "growth": [2, 6, 19, 21, 161, 173, 174, 491], "repeat": [2, 176], "especi": [2, 19, 21, 490], "294": 2, "293": 2, "sphere": [2, 7, 8, 20], "segfault": 2, "292": 2, "290": 2, "improv": [2, 4, 6, 11, 16, 17, 74, 117, 176, 187, 189, 411, 484, 487, 490], "inconsequenti": 2, "288": 2, "themselv": 2, "286": 2, "285": 2, "284": 2, "transpos": [2, 71], "281": 2, "nthorderdiffusionterm": 2, "280": 2, "convectionterm": [2, 8, 17, 63, 68, 162, 180, 181, 187, 188], "277": 2, "step": [2, 6, 8, 11, 13, 17, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 72, 73, 74, 77, 78, 80, 81, 82, 83, 91, 110, 111, 112, 121, 122, 124, 133, 136, 137, 138, 143, 148, 149, 150, 160, 161, 162, 163, 165, 166, 169, 170, 171, 176, 180, 181, 187, 188, 222, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 354, 356, 357, 387, 427, 434, 487], "273": 2, "diffusiontermnocorrect": [2, 20, 369], "270": [2, 173, 174], "too": [2, 8, 11, 16, 17, 31, 33, 34, 252, 308], "267": [2, 491], "reduc": [2, 6, 21, 81, 112, 162, 163, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 487, 489], "time": [2, 6, 8, 9, 11, 15, 17, 19, 21, 22, 31, 32, 33, 34, 71, 74, 77, 78, 80, 81, 82, 83, 91, 108, 112, 121, 122, 133, 136, 137, 138, 143, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 176, 180, 181, 188, 195, 218, 222, 228, 230, 233, 239, 247, 354, 357, 387, 434, 457, 487, 488, 490], "chemotaxi": [2, 20], "264": 2, "input2d": [2, 20], "261": 2, "260": 2, "259": 2, "shorthand": [2, 494], "cellcent": [2, 8, 20, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 80, 81, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 121, 122, 124, 126, 128, 137, 140, 141, 149, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 188, 189, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 461, 463, 464, 465, 467, 468, 470, 471], "etc": [2, 188, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "258": [2, 491], "gmshexport": 2, "252": 2, "benni": [2, 117], "interpol": [2, 31, 33, 34, 117, 138, 162, 163, 176, 180, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 467, 487, 489], "patch": [2, 3, 8, 82, 83, 467], "250": [2, 137, 138, 143], "tex": 2, "quaternari": [2, 7, 20, 113], "247": 2, "var1": [2, 17, 47, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "var0": [2, 17, 477], "sensibli": 2, "243": [2, 407], "reconstrain": 2, "242": 2, "240": 2, "profil": [2, 39, 75, 77, 78, 81, 114], "merg": [2, 9, 11, 20, 393, 485], "237": 2, "236": 2, "mix": [2, 226, 227, 228, 358, 484], "235": 2, "propag": 2, "231": [2, 355], "factorymesh": [2, 20], "keyword": [2, 8, 138, 140, 141, 143, 393, 395, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "223": [2, 458], "218": 2, "absenc": [2, 16], "enthought": [2, 10, 18, 484], "216": 2, "fresh": [2, 9, 11, 17], "213": 2, "206": 2, "gnuplot1d": 2, "205": 2, "normal": [2, 17, 137, 233, 234, 299, 303, 354, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 467, 487], "203": 2, "help": [2, 3, 7, 8, 11, 16, 17, 187, 188, 189, 190, 393, 472], "202": 2, "manipul": [2, 7, 188, 494], "lead": [2, 17, 136, 160, 173, 174, 487, 490], "201": [2, 355], "veloc": [2, 8, 14, 68, 117, 121, 122, 124, 137, 149, 162, 163, 176, 180, 487], "faq": [2, 3, 8, 188], "200": [2, 63, 75, 81, 111, 114, 124, 138, 140, 173, 174], "195": 2, "multipl": [2, 6, 8, 10, 11, 17, 21, 72, 73, 81, 114, 175, 196, 406, 457, 484, 487], "result": [2, 6, 7, 8, 10, 12, 16, 17, 18, 31, 32, 33, 34, 36, 47, 49, 50, 51, 54, 56, 59, 60, 61, 65, 68, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 113, 114, 117, 121, 122, 126, 128, 133, 136, 137, 138, 143, 148, 160, 162, 163, 173, 174, 176, 177, 180, 187, 188, 190, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 264, 363, 387, 397, 406, 410, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 467, 484, 487, 490], "163": [2, 491], "infinit": [2, 8, 36, 75, 78, 81, 114, 176], "162": [2, 117], "ones": [2, 8, 11, 155, 173, 174, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "130": 2, "86": 2, "ly": [2, 124, 126, 140, 141, 188, 221], "lz": [2, 221], "77": [2, 6, 47, 411], "hasold": [2, 8, 39, 40, 71, 74, 81, 111, 113, 121, 122, 124, 126, 128, 137, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 387, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "self": [2, 10, 11, 106, 108, 109, 110, 111, 112, 113, 114, 140, 141, 160, 173, 174, 192, 193, 194, 195, 196, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 302, 303, 308, 309, 312, 313, 314, 315, 316, 321, 322, 323, 324, 327, 329, 330, 331, 332, 333, 334, 335, 336, 350, 351, 352, 353, 358, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 395, 397, 399, 400, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 494, 495], "old": [2, 8, 17, 20, 32, 81, 160, 161, 162, 163, 165, 166, 173, 176, 180, 181, 188, 189, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 407, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "44": [2, 397, 406], "282": 2, "279": 2, "nummesh": [2, 189], "submodul": 2, "278": 2, "form": [2, 15, 16, 17, 20, 21, 31, 32, 33, 34, 36, 71, 74, 81, 90, 112, 117, 135, 138, 162, 163, 166, 175, 176, 180, 188, 189, 308, 369, 383, 397, 406, 485, 487, 488, 490, 494], "268": 2, "slave": 2, "262": 2, "256": 2, "grid1d": [2, 17, 20, 36, 39, 51, 54, 56, 63, 65, 67, 68, 74, 75, 77, 81, 85, 91, 108, 109, 111, 112, 113, 114, 122, 128, 162, 163, 166, 175, 176, 180, 187, 188, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 407, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 461, 470, 471, 477], "251": 2, "241": 2, "238": 2, "predict": [2, 14, 117, 162, 163, 490, 491], "233": 2, "treat": [2, 8, 21, 176, 474], "upwind": [2, 17, 45, 46, 363, 374, 377, 389, 490], "224": [2, 458], "align": [2, 8, 17, 36, 74, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "222": 2, "__add__": [2, 20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406], "221": [2, 458], "219": 2, "matforg": 2, "hammer": 2, "208": 2, "207": 2, "ndarrai": [2, 354, 411, 456], "196": 2, "won": [2, 9, 11, 17, 160, 173, 174, 495], "152": 2, "re": [2, 8, 11, 21, 67, 71, 81, 113, 114, 163, 175, 176, 356, 397, 406], "138": 2, "100": [2, 6, 10, 19, 31, 32, 33, 34, 36, 39, 40, 49, 50, 59, 60, 67, 74, 77, 78, 81, 111, 117, 133, 140, 155, 156, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 180, 181, 397, 406, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 458, 461, 463, 464, 467, 468, 470, 471], "80": [2, 117], "idl": [2, 17], "46": [2, 491], "45": [2, 108, 109, 110, 137, 143, 397, 406, 477, 491], "slice": [2, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "produc": [2, 8, 17, 412, 436, 484], "effici": [2, 16, 17, 20, 21, 49, 50, 51, 59, 60, 187, 485, 486, 487], "diagnost": [2, 17], "232": 2, "becaus": [2, 8, 10, 11, 17, 21, 31, 32, 33, 34, 63, 75, 81, 113, 114, 117, 160, 162, 163, 166, 173, 174, 176, 180, 187, 188, 363, 393, 427], "sighup": 2, "230": 2, "226": 2, "backend": [2, 8], "flush_ev": 2, "217": 2, "unpickl": [2, 407], "191": 2, "spheredaemon": [2, 20, 34], "miss": [2, 10, 11], "187": 2, "garbl": 2, "complet": [2, 11, 16, 17, 20, 21, 138, 188, 189, 252, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 485, 487], "independ": [2, 8, 11, 17, 21, 162, 163, 180, 487], "199": 2, "dummi": [2, 17, 113], "notimplementederror": [2, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 358], "instanti": [2, 16, 17, 21, 66, 137, 187, 199, 358, 406, 420, 423, 427, 428, 432, 434, 436, 448, 452, 455], "abstract": [2, 8, 21, 187, 192, 265, 266, 273, 275, 299, 303, 306, 309, 320, 322, 323, 324, 349, 350, 353, 358, 366, 376, 384, 385, 441, 448, 460, 478, 494], "198": 2, "cylindricalgrid1d": [2, 20, 49, 50, 221], "197": 2, "tell": [2, 20, 31, 32, 33, 34, 137, 187, 485], "194": [2, 491], "larg": [2, 6, 8, 11, 16, 17, 21, 81, 133, 135, 162, 163, 252, 308, 363, 393, 412, 434], "valueerror": [2, 8, 10, 217, 218, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 247, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "193": 2, "192": 2, "typeerror": [2, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 358, 397, 406], "small": [2, 8, 16, 31, 32, 81, 137, 143, 160, 161, 173, 174, 180, 252, 308, 397, 406, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "beli": 2, "advanc": [2, 8, 81], "did": [2, 160, 173, 174], "increment": [2, 187], "er": 2, "older": [2, 3, 7, 8], "simul": [2, 6, 11, 14, 17, 19, 31, 32, 33, 34, 90, 136, 137, 138, 143, 160, 165, 166, 173, 174, 190, 221, 222, 355, 434, 491], "entir": [2, 17, 34, 156, 160, 173, 174, 180], "avail": [2, 5, 9, 11, 12, 13, 16, 17, 18, 34, 72, 73, 78, 81, 137, 162, 163, 176, 190, 472, 484, 487, 490, 494], "our": [2, 3, 8, 9, 11, 16, 17, 81, 176, 187, 188, 189, 190], "itself": [2, 17, 187, 188, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "190": 2, "rang": [2, 8, 36, 39, 40, 47, 71, 72, 73, 74, 77, 78, 80, 81, 82, 83, 108, 109, 110, 111, 112, 113, 117, 121, 122, 124, 133, 137, 140, 141, 148, 149, 150, 160, 161, 162, 163, 165, 166, 169, 170, 171, 175, 176, 177, 222, 330, 387, 431, 434, 450, 451, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484, 488], "182": 2, "binop": [2, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "2_0": [2, 188], "179": [2, 117], "easy_instal": 2, "177": 2, "169": 2, "webpag": 2, "internet": 2, "explor": [2, 11, 21], "156": 2, "153": [2, 14, 491], "math": [2, 3, 161], "direct": [2, 10, 12, 16, 17, 31, 32, 33, 34, 93, 188, 196, 220, 221, 222, 239, 247, 262, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 467, 484, 494], "symmetri": [2, 19, 20, 160, 173, 174, 220, 264], "getcel": [2, 188], "enforc": 2, "both": [2, 7, 8, 11, 13, 16, 17, 18, 21, 49, 50, 51, 59, 60, 78, 81, 113, 117, 133, 138, 162, 163, 187, 188, 251, 264, 330, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484, 488], "clearer": [2, 8, 187, 188], "levelset": [2, 6, 7, 8, 20], "distancefunct": [2, 7, 20, 140, 141], "comparison": [2, 20, 117, 161, 162, 163, 485], "subtl": 2, "unlik": [2, 81, 187, 494], "affect": [2, 8, 17], "veri": [2, 6, 8, 9, 11, 16, 17, 21, 135, 162, 163, 173, 174, 175, 176, 188, 189, 308, 393, 427, 494], "188": 2, "smtpsenderrefus": 2, "553": 2, "trac": [2, 484], "matdl": 2, "osi": 2, "org": [2, 3, 8, 11, 16, 17, 72, 73, 267, 268, 412, 484, 491], "sender": 2, "address": [2, 3, 11, 21], "184": [2, 406], "exportasmesh": 2, "183": 2, "linearjorsolv": [2, 20], "__init__": [2, 10, 108, 109, 110, 111, 113, 114, 160, 173, 174, 495], "rather": [2, 8, 10, 17, 21, 65, 66, 81, 91, 165, 176, 187, 188, 397, 406, 452, 487, 492, 493, 494, 496], "pysparsesolv": [2, 20, 299, 300, 301, 303, 304, 305, 306, 307], "181": 2, "151": [2, 491], "mayavi2": [2, 472], "13": [2, 6, 108, 160, 161, 166, 173, 174, 176, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406, 491], "176": 2, "win32": 2, "175": [2, 355], "offset": [2, 188, 397, 406, 434, 436, 455], "170": 2, "__invert__": [2, 20, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "154": [2, 14], "update1_0to2_0": [2, 7, 20], "hold": [2, 12, 17, 81, 137, 193, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "rank": [2, 8, 20, 71, 117, 181, 188, 330, 367, 374, 375, 378, 382, 389, 390, 397, 401, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 467, 468, 477, 479, 485, 487], "simpler": [2, 21, 187], "determin": [2, 8, 21, 31, 32, 176, 180, 222, 354, 369, 406, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 459, 460, 462, 463, 464, 465, 467, 468, 487, 488], "diagon": [2, 8, 17, 117, 176, 180, 188, 247, 251, 258, 317, 319], "hand": [2, 8, 21, 31, 32, 68, 81, 112, 188, 264, 303, 308, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "side": [2, 17, 19, 68, 75, 81, 112, 114, 162, 163, 222, 264, 303, 308, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "simplifi": [2, 10, 114, 162, 163, 175, 188, 189], "167": 2, "166": 2, "vectorcel": 2, "vectorfac": 2, "165": 2, "section": [2, 6, 8, 11, 12, 17, 72, 73, 81, 161, 180, 187, 356, 487], "149": 2, "143": 2, "141": 2, "toolset": 2, "140": [2, 491], "136": 2, "135": 2, "127": 2, "fragil": [2, 11], "54": [2, 397, 406], "161": 2, "160": 2, "157": 2, "temp": 2, "widow": 2, "155": 2, "appear": [2, 3, 8, 12, 15, 16, 17, 81, 91, 136, 140, 141, 143, 176, 264, 308, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 487], "150": [2, 491], "pythonxi": 2, "148": 2, "147": 2, "cg": [2, 16, 263, 277, 297, 313, 316, 333, 336], "145": [2, 14, 491], "144": 2, "intermitt": 2, "142": [2, 397, 406], "139": 2, "bitten": 2, "137": [2, 14], "backport": 2, "manuscript": 2, "131": [2, 17], "extens": [2, 8, 11, 16, 137, 165, 190, 407, 423, 427, 484], "126": 2, "125": [2, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "emb": [2, 21], "obsolet": [2, 11, 354], "124": 2, "121": [2, 173, 174], "simpletrenchsystem": [2, 6, 20, 136, 137, 138], "120": [2, 455], "118": [2, 180, 181], "117": 2, "getfacesbottom": [2, 187], "getfacestop": [2, 187], "lack": [2, 16], "descript": [2, 138, 143, 222], "115": 2, "view": [2, 8, 11, 15, 17, 18, 34, 49, 50, 51, 56, 59, 60, 65, 75, 77, 81, 85, 114, 140, 155, 160, 165, 187, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484], "cahn": [2, 17, 19, 20, 31, 32, 33, 34, 36, 160, 173, 174, 176, 369, 487, 488, 491], "hilliard": [2, 17, 20, 31, 32, 33, 34, 36, 160, 173, 174, 369, 487, 488, 491], "113": [2, 491], "macbook": 2, "pro": [2, 9, 11, 491], "intel": 2, "112": 2, "111": [2, 111], "grid2d": [2, 20, 31, 32, 40, 61, 66, 78, 82, 83, 93, 94, 110, 117, 121, 124, 126, 135, 137, 140, 141, 155, 160, 161, 165, 173, 174, 177, 181, 187, 188, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 367, 374, 375, 377, 378, 382, 389, 390, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 463, 464, 465, 467, 468, 470, 471, 477], "110": 2, "numer": [2, 4, 6, 8, 10, 14, 16, 20, 36, 49, 50, 51, 59, 60, 74, 81, 91, 133, 161, 176, 180, 187, 188, 190, 252, 327, 355, 356, 367, 374, 375, 378, 382, 389, 397, 406, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 453, 455, 456, 469, 473, 480, 484, 485, 486, 487, 491], "dimensionless": [2, 75, 109, 114, 133, 160, 173, 174, 397, 406], "elphf": [2, 20], "109": [2, 491], "doctest": [2, 7, 10, 15, 17, 21, 81, 190, 393], "__array__": [2, 20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "108": 2, "107": [2, 491], "106": [2, 14], "105": [2, 12], "useless": 2, "102": 2, "dict": [2, 140, 141, 292, 351, 393, 410, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484], "99": [2, 222, 397, 406], "97": 2, "nan": [2, 72, 73, 477], "correctli": [2, 32, 47, 117, 363, 387], "96": [2, 117], "95": 2, "code": [2, 4, 6, 7, 9, 10, 11, 12, 17, 18, 20, 21, 68, 72, 73, 74, 81, 117, 122, 148, 155, 160, 161, 162, 163, 165, 166, 169, 170, 171, 177, 187, 265, 350, 395, 397, 406, 411, 467, 484, 485], "92": 2, "pygist": 2, "dead": 2, "offici": [2, 9, 11], "84": 2, "83": 2, "zerodivisionerror": 2, "cellterm": [2, 20, 384, 387], "getold": 2, "79": [2, 6, 14, 411], "67": [2, 406], "unstructur": [2, 18, 484, 487, 491], "43": [2, 6, 491], "tsvviewer": [2, 8, 20, 72, 73, 111], "shape": [2, 20, 21, 32, 47, 160, 173, 174, 217, 218, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 247, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "34": [2, 406], "infin": [2, 8, 411], "122": [2, 173, 174], "119": 2, "116": 2, "104": 2, "matplotlibvectorview": [2, 20], "_plot": [2, 160, 173, 174], "101": 2, "autoscal": [2, 140, 141, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "93": 2, "91": [2, 491], "76": [2, 137, 143], "75": [2, 17, 397, 406, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 451, 452, 455, 477], "auto": [2, 459, 460, 462, 463, 464, 465, 467, 468], "docstr": [2, 393, 402], "74": [2, 14], "combin": [2, 8, 11, 15, 17, 21, 113, 180, 190, 397, 406, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487, 488], "51": [2, 95, 491], "__pos__": 2, "50": [2, 14, 39, 40, 81, 90, 100, 117, 160, 458, 463, 464, 467, 468, 470, 471], "39": [2, 162, 163], "72": [2, 477], "19": [2, 6, 81, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 406, 488, 491], "98": [2, 14], "case": [2, 6, 8, 10, 11, 13, 15, 17, 21, 39, 40, 47, 49, 50, 51, 56, 59, 60, 63, 71, 74, 75, 77, 78, 80, 81, 104, 105, 113, 114, 127, 129, 133, 137, 138, 152, 157, 160, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 182, 185, 187, 188, 189, 221, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 402, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 490, 492, 493, 494, 495, 496], "94": [2, 240], "90": [2, 81, 117, 173, 174, 458, 461, 470, 471], "87": [2, 6, 491], "length": [2, 10, 21, 72, 73, 81, 85, 91, 161, 176, 221, 222, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 467, 468], "convert": [2, 8, 21, 160, 173, 174, 187, 397, 406, 411, 412, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467], "needless": 2, "rebuild": [2, 17], "66": 2, "guid": [2, 6, 16], "variou": [2, 9, 11, 17, 21, 106, 137, 490], "62": [2, 6, 138], "unrecogn": 2, "token": 2, "13c": 2, "55": [2, 111, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "intern": [2, 20, 21, 188, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 485], "52": [2, 14, 491], "facevectorvari": 2, "48": 2, "inherit": [2, 10, 21, 188, 494], "hidden": [2, 21], "42": [2, 17, 162, 163], "model": [2, 4, 6, 7, 9, 11, 14, 15, 16, 19, 20, 21, 31, 32, 39, 40, 106, 113, 136, 137, 138, 140, 141, 143, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 190, 484, 485, 488, 491], "addoverfacesvari": [2, 20], "gross": 2, "41": [2, 477], "iter": [2, 6, 16, 20, 21, 36, 47, 52, 54, 56, 57, 61, 66, 81, 82, 83, 108, 109, 110, 111, 113, 117, 160, 161, 165, 166, 173, 174, 175, 176, 187, 188, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 302, 303, 308, 309, 312, 313, 314, 315, 316, 321, 322, 323, 324, 327, 332, 333, 334, 335, 336, 350, 351, 352, 353, 354, 357, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 434, 484, 485, 487], "norm": [2, 16, 252, 264, 308, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 411, 467], "21": [2, 111, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 406, 488, 491], "dimens": [2, 11, 20, 21, 32, 51, 72, 73, 75, 81, 83, 109, 117, 122, 126, 127, 128, 129, 160, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 188, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 411, 423, 427, 431, 434, 441, 447, 448, 450, 451, 456, 457, 458, 479, 487, 490], "wai": [2, 7, 11, 12, 17, 19, 20, 21, 36, 74, 80, 81, 95, 97, 99, 100, 102, 111, 112, 137, 155, 160, 161, 162, 163, 165, 166, 173, 174, 176, 188, 190, 231, 233, 234, 247, 363, 397, 406, 485, 487, 494], "significantli": [2, 6, 8, 11, 188], "cach": [2, 17, 20, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 456, 485], "intermedi": [2, 6, 8, 16, 31, 32, 117], "uniformgrid": [2, 20, 249, 250, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "geometr": [2, 31, 33, 34, 195, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 233, 234, 239, 240, 241, 247, 248, 249, 250], "fly": [2, 21], "present": [2, 6, 7, 8, 11, 17, 19, 20, 109, 136, 138, 148, 162, 163, 170, 171, 411, 485, 486, 490], "made": [2, 8, 11, 12, 13, 15, 21, 117, 124, 176, 188, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406, 423, 427, 431, 436, 441, 447, 450, 451, 452, 456], "consider": [2, 3, 17, 187, 190], "construct": [2, 7, 16, 17, 21, 72, 73, 121, 122, 126, 128, 136, 138, 160, 161, 162, 163, 166, 173, 174, 175, 222, 363, 377, 395, 397, 406, 427, 484, 487], "execut": [2, 6, 9, 10, 11, 16, 17, 21, 22, 77, 80, 91, 121, 122, 128, 393, 394, 396, 410], "subclass": [2, 8, 34, 192, 265, 266, 273, 275, 299, 303, 306, 309, 320, 322, 323, 324, 349, 350, 353, 366, 376, 384, 385, 441, 448, 460, 478, 494], "sensibl": [2, 17], "answer": [2, 3, 20, 36, 78, 80, 81, 86, 105, 121, 122, 124, 148, 149, 176, 363, 377, 420, 423, 427, 428, 432, 434, 436, 447, 448, 451, 452, 455, 485], "For": [2, 7, 8, 9, 11, 16, 17, 21, 31, 33, 34, 63, 72, 73, 81, 85, 106, 143, 155, 162, 163, 175, 176, 188, 190, 351, 363, 367, 374, 375, 378, 382, 389, 411, 434, 457, 467, 484, 487, 488, 489, 494], "vectorcellvari": [2, 188], "periodicgrid": 2, "howev": [2, 6, 8, 17, 81, 91, 117, 487, 490], "rewritten": [2, 36, 180], "serv": [2, 7, 21, 222], "tutori": [2, 11, 13, 17, 137, 187, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 491], "sever": [2, 11, 15, 16, 17, 21, 112, 188, 189, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "elabor": [2, 8], "multicompon": [2, 108], "multidimension": 2, "superfil": [2, 14, 136, 137, 138, 143, 491], "better": [2, 3, 8, 17, 18, 21, 47, 161, 162, 163, 175, 176, 187, 189, 427, 484, 488], "fluid": [2, 20, 21, 117, 337, 344, 355, 488, 489, 491], "classic": [2, 162, 163, 175, 180, 286, 337, 343, 346], "lid": [2, 117], "distinct": [2, 20, 21, 31, 32, 188, 485], "linear": [2, 8, 16, 17, 20, 21, 31, 32, 33, 34, 36, 81, 111, 112, 117, 138, 160, 162, 163, 165, 166, 173, 174, 176, 180, 188, 251, 252, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 484, 485, 489], "explan": [2, 8, 17, 137, 143, 393, 402], "concept": [2, 17, 491, 494], "involv": [2, 6, 16, 20, 21, 81, 165, 166, 173, 174, 176, 308, 485, 488, 494], "frequent": [2, 6, 15, 16, 20, 162, 163, 176, 411, 484, 485, 486], "question": [2, 3, 15, 20, 113, 354, 485, 486], "multiview": [2, 20, 137, 160, 173, 174, 458], "group": [2, 3, 4, 8, 16], "togeth": [2, 8, 17, 135, 180, 393, 406, 474], "couldn": 2, "abbrevi": 2, "promis": 2, "actual": [2, 8, 16, 21, 81, 117, 176, 187, 251, 252, 351, 393, 452, 494], "fulli": [2, 17, 21, 81, 176, 180, 489], "qualifi": 2, "cv": [2, 367, 374, 375, 378, 382, 389, 390, 487], "subvers": 2, "sourceforg": [2, 8, 16, 18, 484], "materi": [2, 4, 14, 20, 21, 81, 106, 117, 136, 138, 143, 160, 173, 174, 190, 485, 486, 491], "digit": [2, 411], "pathwai": 2, "pde": [2, 8, 11, 14, 15, 21, 32, 160, 173, 174, 176, 188, 190, 488, 489], "subtract": [2, 6, 20, 112, 166, 187, 397, 406, 447], "job": [2, 10, 47, 117], "suppli": [2, 8, 15, 16, 21, 162, 163, 187, 188, 222, 393, 397, 406, 436, 487, 494, 495], "fipy_view": [2, 17, 457], "them": [2, 3, 8, 10, 11, 13, 17, 21, 32, 74, 81, 96, 110, 112, 165, 187, 188, 189, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 394, 495], "choic": [2, 8, 16, 17, 18, 162, 163, 176, 180, 279], "noisevari": [2, 20, 420, 428, 432, 434, 455], "pyx": 2, "layout": 2, "getlaplacian": 2, "effect": [2, 3, 6, 17, 31, 32, 81, 160, 173, 174, 175, 176, 196, 387, 491], "getfacegrad": [2, 188], "getdiverg": 2, "which": [2, 3, 6, 8, 9, 10, 11, 13, 15, 16, 17, 18, 21, 22, 75, 78, 81, 93, 111, 112, 114, 117, 137, 162, 163, 165, 176, 180, 187, 188, 195, 221, 279, 393, 397, 402, 406, 411, 412, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 467, 484, 487, 489, 494, 495], "deepli": 2, "nest": [2, 8, 264], "find": [2, 8, 9, 11, 16, 17, 81, 91, 162, 163, 188, 189, 411, 457, 458, 479], "situat": 2, "earlier": [2, 11, 72, 73, 162, 163, 187, 411], "update0_1to1_0": [2, 7, 8, 20], "49": [2, 111], "47": [2, 355], "coeff": [2, 8, 17, 31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 72, 73, 74, 75, 77, 78, 81, 82, 83, 85, 90, 94, 105, 108, 109, 110, 111, 112, 113, 114, 117, 138, 162, 163, 174, 175, 176, 180, 181, 187, 188, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 487], "40": [2, 36, 108, 109, 110, 138, 161, 166], "38": 2, "one": [2, 3, 8, 10, 11, 14, 16, 17, 19, 21, 47, 51, 72, 73, 75, 81, 85, 91, 108, 109, 110, 111, 112, 113, 114, 122, 128, 160, 162, 163, 166, 169, 171, 173, 174, 175, 176, 188, 192, 222, 265, 266, 267, 268, 273, 275, 299, 303, 306, 309, 320, 322, 323, 324, 349, 353, 366, 376, 383, 384, 385, 394, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 460, 461, 467, 477, 478, 484, 487, 492, 493, 494, 495, 496], "37": [2, 6], "electrochem": [2, 4, 6, 8, 14, 15, 20, 21, 106, 190, 491], "35": [2, 113, 117, 477], "33": [2, 162, 163, 176, 491], "32": [2, 17, 22, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 491], "conflict_handl": 2, "31": [2, 176, 406, 491], "notat": [2, 8, 17, 20, 117, 180, 484, 485, 494], "29": [2, 143, 491], "invok": [2, 7, 8, 15, 17, 21, 155, 252, 324, 494, 495], "26": [2, 117, 137, 143, 397, 406, 491], "extract": [2, 72, 73, 81, 161, 165, 166, 169, 170, 171, 222, 410], "distancevari": [2, 20, 121, 122, 124, 126, 128, 137, 140, 141, 148, 149, 150, 451, 452], "reconcil": 2, "crystal": [2, 14, 21, 488, 491], "surfact": [2, 20, 137, 138, 143, 452], "depositionratevar": 2, "extensionveloc": 2, "axisymmetr": 2, "2d": [2, 17, 18, 19, 59, 60, 61, 97, 110, 112, 126, 140, 141, 156, 160, 161, 165, 173, 174, 181, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 427, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484, 487], "wizard": 2, "xp": 2, "other": [3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 19, 21, 31, 32, 81, 111, 137, 138, 162, 163, 175, 177, 188, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 285, 286, 287, 288, 289, 291, 293, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 394, 395, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484, 488], "encourag": 3, "follow": [3, 6, 7, 9, 10, 11, 15, 16, 17, 36, 68, 72, 73, 74, 106, 110, 114, 121, 122, 124, 126, 128, 136, 137, 138, 143, 148, 149, 155, 161, 165, 166, 169, 170, 171, 173, 174, 177, 180, 187, 188, 189, 363, 387, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 488], "mode": [3, 11, 15, 222, 393, 397, 413], "monitor": 3, "post": [3, 8, 222, 484], "want": [3, 9, 11, 17, 19, 20, 72, 73, 81, 162, 163, 176, 485], "http": [3, 8, 9, 11, 13, 16, 17, 18, 34, 47, 72, 73, 173, 174, 267, 268, 317, 318, 319, 351, 406, 412, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 484, 491], "catb": 3, "esr": 3, "smart": 3, "troubl": [3, 16], "abl": [3, 160, 222, 251], "offer": [3, 15, 16, 21], "reproduc": [3, 11, 13], "com": [3, 8, 9, 11, 13, 16, 17, 18, 34, 173, 174, 317, 318, 319, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 484, 491], "suitabl": [3, 17, 81, 187, 337, 344, 346, 397, 406, 484], "open": [3, 10, 11, 14, 17, 20, 117, 161, 165, 166, 169, 170, 171, 222, 397, 413, 484, 485], "convers": [3, 16, 17, 21, 188, 397, 406], "troubleshoot": 3, "off": [3, 8, 117], "highlight": [3, 10, 117], "easi": [3, 16, 18, 31, 33, 34, 81, 484], "submiss": 3, "probabl": [3, 8, 10, 11, 17, 18, 67, 188, 420, 428, 432, 434, 484, 488, 494], "definit": [3, 10, 16, 32, 188, 264, 302, 308, 337, 346, 495], "back": [3, 9, 11, 17, 19, 21, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 447, 491], "forth": 3, "tend": [3, 21, 31, 32, 81], "delet": [3, 81, 222, 397, 413], "mean": [3, 17, 20, 21, 31, 32, 33, 34, 81, 259, 260, 261, 263, 265, 397, 406, 411, 428, 434, 467, 485], "d": [3, 14, 17, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 72, 73, 77, 78, 81, 82, 83, 112, 124, 126, 127, 133, 137, 138, 143, 148, 160, 161, 162, 163, 173, 174, 176, 177, 180, 187, 221, 363, 377, 393, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 487, 491], "expend": 3, "effort": [3, 8, 15, 16, 17], "inferior": 3, "ve": [3, 81, 162, 163], "written": [3, 6, 7, 8, 10, 11, 17, 21, 74, 81, 117, 126, 160, 161, 162, 163, 165, 166, 169, 170, 171, 175, 180, 187, 188, 189, 484, 487], "serious": 3, "subscript": 3, "email": 3, "mailto": 3, "simpli": [3, 8, 11, 16, 17, 81, 108, 109, 110, 162, 163, 180, 187, 494], "To": [3, 7, 8, 10, 11, 13, 17, 81, 91, 117, 136, 137, 138, 143, 155, 160, 162, 163, 173, 174, 176, 180, 188, 487, 490], "unsubscrib": 3, "learn": [3, 9, 11, 17], "chang": [3, 10, 11, 17, 20, 21, 31, 32, 81, 136, 137, 138, 143, 162, 163, 187, 188, 189, 231, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 461, 463, 464, 465, 467, 468, 472, 484, 485, 486], "host": 3, "sent": 3, "store": [3, 32, 137, 155, 165, 222, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 412, 484, 487], "histor": [3, 9, 11, 74], "dir": [3, 397, 413], "comp": [3, 8], "jon": 4, "member": [4, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "research": [4, 14, 21, 491], "staff": 4, "scienc": [4, 14, 17, 21, 81, 190], "engin": [4, 14, 190, 484], "divis": [4, 39, 40, 190, 411], "measur": [4, 6, 21, 81, 162, 163, 190], "laboratori": [4, 20, 190, 485, 486], "nation": [4, 5, 12, 21, 190], "institut": [4, 5, 12, 21, 190], "standard": [4, 5, 11, 12, 15, 16, 21, 72, 73, 106, 175, 180, 190, 247, 363, 395, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484], "technologi": [4, 5, 12, 21, 190], "comput": [4, 8, 11, 14, 16, 17, 19, 21, 96, 138, 143, 187, 190, 308, 484, 490, 491], "interest": [4, 8, 9, 11, 15, 21, 31, 32, 33, 34, 81, 108, 110, 112, 114, 156, 176, 222, 324, 487, 488], "orient": [4, 14, 19, 20, 71, 160, 165, 166, 173, 174, 190, 411, 458, 459, 460, 462, 464, 465, 485, 494], "design": [4, 6, 7, 8, 9, 11, 17, 20, 108, 109, 110, 485, 486], "electrochemistri": [4, 491], "daniel": [4, 491], "wheeler": [4, 14, 180, 491], "guest": 4, "finit": [4, 11, 14, 20, 21, 67, 81, 162, 163, 176, 190, 355, 484, 485, 489, 491], "volum": [4, 11, 14, 20, 21, 67, 117, 137, 138, 143, 155, 162, 163, 175, 180, 190, 222, 355, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 468, 485, 489, 491], "techniqu": [4, 8, 21, 161, 166, 169, 170, 171, 489], "treatment": [4, 15, 17, 175, 190], "jim": 4, "leader": 4, "thermodynam": [4, 31, 32, 111, 113, 162, 163, 180], "kinet": [4, 8, 20, 133, 176, 485, 486], "director": 4, "center": [4, 8, 14, 17, 20, 21, 31, 33, 34, 67, 71, 72, 73, 81, 111, 117, 140, 141, 160, 161, 173, 174, 180, 188, 190, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 485, 489], "theoret": [4, 8, 20, 21, 190, 485, 486], "varieti": [4, 8, 9, 11, 17, 21, 162, 163, 190], "solidif": [4, 19, 160, 161, 165, 173, 174, 176, 491], "polycrystallin": [4, 15, 19, 190, 491], "solid": [4, 19, 111, 113, 160, 161, 162, 163, 165, 166, 169, 173, 174, 175], "alex": 4, "mont": 4, "pyxview": [4, 484], "he": [4, 19], "student": 4, "montgomeri": 4, "blair": 4, "school": 4, "kati": 4, "travi": [4, 484], "optim": [4, 17, 21, 81, 162, 163, 176], "she": [4, 19], "surf": 4, "smith": 4, "colleg": 4, "gibianski": 4, "harvei": 4, "mudd": 4, "andrew": 4, "reev": 4, "sabbat": 4, "univers": [4, 14, 19, 488, 491], "main": [4, 9, 11, 16, 17, 20, 21, 165, 166, 173, 174, 267, 268, 396, 472, 487, 492, 493, 494, 496], "olivia": 4, "buzek": 4, "maryland": 4, "stile": 4, "jame": [4, 491], "beirn": 4, "greatli": [4, 6, 11, 16], "deploy": 4, "server": 4, "certain": [5, 7, 21, 222, 494, 495], "commerci": [5, 8, 11, 21], "firm": 5, "trade": 5, "identifi": [5, 17, 21], "procedur": [5, 21, 175], "adequ": [5, 16, 221, 222], "Such": 5, "identif": 5, "intend": [5, 15, 17, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251], "impli": [5, 12], "recommend": [5, 16, 17, 20, 188, 189, 406, 485, 487, 495], "endors": [5, 11], "nor": [5, 8], "relat": [5, 17, 21, 162, 163, 176, 427], "necessarili": [5, 11], "best": [5, 8, 11, 16, 17, 18, 176, 188, 279, 351], "purpos": [5, 8, 9, 11, 12, 49, 50, 59, 60, 221, 222, 487], "evalu": [6, 17, 21, 117, 162, 163, 165, 166, 173, 174, 176, 180, 363, 411, 417, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "program": [6, 20, 81, 187, 396, 484, 485, 489, 494], "greater": [6, 10, 222, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "intrins": [6, 16, 21, 162, 163, 166], "ineffici": [6, 21], "dure": [6, 11, 17, 21, 137, 491], "languag": [6, 11, 20, 175, 190, 484, 485, 494], "hous": 6, "grain": [6, 19, 165, 166, 173, 174], "subsequ": [6, 17, 19, 133, 173, 174], "imping": [6, 7, 8, 19, 20, 173, 174], "mesh20x20": [6, 7, 8, 17, 20], "numberofel": [6, 137, 155, 165], "10000": [6, 47, 52, 54, 56, 57, 61, 78, 108, 110, 113, 137, 160, 161, 175, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "numberofstep": [6, 136, 137, 138, 143, 165], "1000": [6, 31, 33, 34, 36, 52, 54, 56, 57, 63, 65, 66, 85, 109, 126, 175, 187, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 463, 464, 465, 470, 471], "ryo": [6, 161, 165, 166, 169, 170, 171, 176, 491], "kobayashi": [6, 160, 161, 165, 166, 169, 170, 171, 173, 174, 176, 491], "raw": [6, 165], "cpu": [6, 17], "10": [6, 14, 17, 20, 31, 32, 33, 36, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 74, 78, 80, 81, 82, 83, 86, 91, 95, 105, 111, 112, 117, 121, 122, 127, 128, 136, 137, 138, 140, 143, 148, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 337, 344, 345, 346, 347, 348, 350, 351, 352, 353, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 411, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 461, 463, 464, 465, 467, 468, 470, 471, 477, 485, 490, 491], "tabl": [6, 16, 117, 138, 143, 406], "second": [6, 8, 117, 135, 162, 163, 180, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 470, 471], "kilobyt": 6, "kib": 6, "30": [6, 17, 20, 106, 110, 111, 112, 113, 140, 162, 163, 175, 176, 397, 406, 432, 434, 485, 491], "0009": 6, "39316": 6, "772": 6, "0031": 6, "39664": 6, "1600": 6, "1": [6, 8, 9, 10, 11, 14, 15, 16, 17, 18, 20, 21, 31, 32, 33, 34, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 136, 137, 138, 140, 141, 143, 148, 149, 150, 155, 156, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 187, 188, 189, 190, 194, 196, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 267, 268, 300, 308, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 395, 396, 397, 406, 411, 413, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 485, 487, 488, 490, 491], "4": [6, 8, 11, 14, 15, 16, 17, 20, 21, 34, 36, 47, 56, 63, 67, 71, 72, 73, 74, 81, 85, 95, 105, 108, 110, 111, 112, 113, 117, 121, 124, 126, 127, 129, 133, 137, 138, 140, 141, 143, 148, 156, 160, 161, 162, 163, 169, 171, 173, 174, 175, 176, 177, 180, 190, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 377, 393, 397, 406, 411, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 461, 463, 464, 465, 470, 471, 477, 485, 487, 491], "65": 6, "017": 6, "40656": 6, "1044": 6, "6400": 6, "3": [6, 8, 9, 11, 13, 14, 15, 16, 17, 20, 21, 31, 34, 36, 47, 49, 50, 59, 60, 63, 67, 68, 72, 73, 74, 77, 81, 85, 95, 105, 108, 109, 110, 111, 113, 117, 121, 124, 126, 127, 129, 135, 137, 138, 140, 141, 143, 148, 149, 156, 162, 163, 165, 171, 173, 174, 175, 176, 180, 181, 188, 189, 190, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 337, 342, 363, 377, 393, 397, 406, 411, 415, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 461, 470, 471, 477, 484, 485, 487, 488, 490, 491], "46124": 6, "1880": 6, "25600": 6, "60840": 6, "5188": 6, "102400": 6, "145820": 6, "18436": 6, "plain": [6, 17, 81, 137], "oper": [6, 9, 10, 11, 17, 21, 160, 165, 166, 173, 174, 188, 239, 264, 397, 399, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484, 487], "around": [6, 10, 21, 47, 81, 135, 447, 487], "17": [6, 12, 20, 234, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 485, 489, 491], "slower": [6, 21, 188], "penalti": 6, "hope": [6, 188, 189], "futur": [6, 9, 11, 17, 161, 165, 166, 169, 170, 171, 187, 484], "gain": [6, 17], "particular": [6, 7, 8, 9, 11, 12, 16, 17, 21, 75, 81, 86, 187], "analysi": [6, 8, 17, 484, 491], "shown": [6, 7, 8, 19, 106, 162, 163, 176, 187], "As": [6, 7, 8, 10, 17, 21, 72, 73, 74, 81, 143, 162, 163, 175, 180, 187, 188, 190, 397, 406, 413, 495], "record": 6, "each": [6, 7, 8, 17, 21, 31, 33, 34, 49, 50, 51, 59, 60, 72, 73, 78, 80, 81, 93, 96, 108, 109, 110, 138, 162, 163, 165, 175, 177, 187, 188, 231, 247, 330, 387, 393, 397, 401, 406, 411, 423, 431, 441, 447, 448, 450, 467, 477, 487, 489, 492, 493, 496], "approxim": [6, 8, 17, 78, 117, 175, 176, 487, 489], "maximum": [6, 10, 16, 36, 137, 162, 163, 252, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 337, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 363, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "spike": 6, "hard": [6, 21, 160, 173, 174, 188, 484], "dynam": [6, 11, 22, 176, 489, 491], "alloc": [6, 21], "rough": [6, 162, 163], "exact": [6, 16, 81, 117, 161, 176, 252, 308, 490], "complex": [6, 16, 17, 21, 136, 143, 162, 163, 397, 406, 484, 488], "largest": [6, 81, 397, 406, 457], "mainli": [6, 21, 47], "below": [6, 8, 11, 17, 117, 136, 143, 160, 173, 174, 187], "per": [6, 11, 17, 81, 162, 163, 176, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 470, 471], "multigrid": [6, 16, 86, 292], "benefici": 6, "overhead": [6, 17], "cost": 6, "perform": [6, 8, 11, 17, 19, 21, 31, 32, 33, 34, 85, 149, 162, 163, 176, 251, 252, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 397, 406, 411, 484], "equival": [6, 15, 16, 17, 21, 81, 190, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406, 487, 489], "precondit": [6, 16, 17, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 291, 298, 299, 302, 303, 308, 309, 312, 313, 314, 316, 324, 332, 333, 334, 336, 350, 352, 353, 484], "enough": [6, 17, 133, 160, 173, 174, 222], "speedup": [6, 17], "specif": [6, 8, 12, 16, 21, 32, 72, 73, 189, 190, 448, 457, 467, 484, 494], "someth": [7, 8, 15, 17, 19, 81, 137, 160, 173, 174, 188, 189, 406, 472, 477, 495], "least": [7, 8, 11, 17, 176, 189, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "four": [7, 17, 19, 111, 165, 175, 177, 247], "demonstr": [7, 17, 21, 23, 47, 67, 72, 73, 82, 83, 106, 109, 121, 122, 126, 128, 136, 137, 138, 143, 155, 156, 165, 166, 487], "applic": [7, 9, 11, 16, 19, 21, 72, 73, 472, 484, 487, 489], "finish": [7, 39, 40, 68, 78, 91, 95, 136, 137, 138, 143, 165, 176, 180, 181], "left": [7, 8, 15, 16, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 68, 71, 75, 81, 82, 83, 85, 106, 112, 114, 117, 121, 124, 127, 129, 133, 136, 137, 138, 148, 155, 160, 161, 162, 163, 166, 173, 174, 175, 176, 177, 180, 187, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 369, 377, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 461, 485, 488, 489], "shell": [7, 11, 13, 15, 17, 34, 156, 484], "At": [7, 11, 17, 21, 78, 137, 190], "enter": [7, 15], "queri": [7, 448], "session": [7, 14, 15, 17, 21], "directli": [7, 8, 11, 17, 19, 21, 72, 73, 81, 82, 83, 180, 187, 188, 189, 393, 494, 495], "block": [7, 15, 74, 81, 180, 267, 268, 292], "final": [7, 8, 75, 81, 91, 111, 113, 114, 162, 163, 166, 180, 222, 387, 395], "importantli": 7, "emphasi": [7, 10], "comprehens": [7, 21], "framework": [7, 15, 21, 190, 494], "steadyst": [7, 15, 20, 77, 80], "succinct": [7, 8, 11, 13], "prompt": [7, 15, 17, 81, 176, 190], "copy_script": [7, 81, 137], "addit": [7, 16, 17, 20, 74, 81, 138, 402, 406, 411, 484], "those": [7, 8, 9, 11, 17, 21, 81, 86, 136, 137, 138, 143, 162, 163, 187, 484, 494, 495], "dozen": 7, "understand": [7, 8, 17, 138, 188], "illustr": [7, 8, 21, 81, 487], "electrostat": [7, 20, 106, 110, 111, 112, 113, 114], "nthorder": [7, 20], "input4thorder1d": [7, 20], "exponential1d": [7, 20, 54, 56, 57, 61, 62, 65, 66, 187], "exponential1dsourc": [7, 20], "allen": [7, 17, 160, 173, 174, 176], "binarycoupl": [7, 8, 17, 20], "mesh40x1": [7, 8, 20, 165], "polyxtalcoupl": [7, 17, 20], "advect": [7, 20, 67, 137, 148, 150, 162, 163, 363, 377], "spinod": [7, 19, 31, 32, 33, 34], "decomposit": [7, 19, 31, 32, 337, 338, 340, 342, 343, 487], "multi": [7, 484], "evolut": [7, 8, 21, 31, 32, 33, 34, 81, 136, 160, 163, 173, 174, 175, 488, 491], "reactivewet": [7, 20], "liquidvapor1d": [7, 20], "canon": [8, 31, 32, 33, 34, 162, 163, 175, 252, 411], "govern": [8, 12, 74, 81, 112, 133, 136, 137, 138, 143, 148, 149, 160, 161, 162, 163, 173, 174, 180], "underbrac": [8, 106, 175, 488], "frac": [8, 17, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 67, 68, 71, 74, 75, 77, 81, 85, 106, 108, 112, 114, 117, 121, 122, 128, 133, 136, 137, 138, 148, 149, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 180, 187, 354, 363, 372, 377, 387, 420, 423, 427, 428, 431, 432, 434, 436, 447, 448, 450, 451, 452, 455, 487, 488, 490], "partial": [8, 14, 16, 17, 20, 31, 32, 33, 34, 36, 67, 68, 71, 74, 77, 81, 85, 106, 108, 112, 121, 122, 128, 137, 148, 160, 161, 162, 163, 166, 169, 170, 171, 173, 174, 175, 176, 180, 190, 301, 358, 363, 377, 385, 387, 484, 485, 488, 489], "rho": [8, 20, 75, 81, 114, 175, 180, 181, 387, 485, 488, 489], "_": [8, 16, 17, 32, 71, 74, 81, 106, 117, 162, 163, 175, 176, 194, 195, 196, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 411, 413, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 488], "vphantom": [8, 106, 175, 488], "nabla": [8, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 74, 75, 77, 81, 106, 108, 112, 114, 117, 121, 122, 126, 127, 129, 137, 148, 160, 161, 162, 163, 166, 169, 170, 171, 173, 174, 175, 176, 187, 196, 363, 367, 369, 372, 374, 375, 377, 378, 382, 389, 420, 423, 427, 428, 431, 432, 434, 436, 447, 448, 450, 451, 452, 455, 485, 488, 489], "cdot": [8, 17, 20, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 75, 77, 81, 106, 108, 114, 117, 121, 122, 137, 148, 160, 161, 162, 163, 166, 173, 174, 175, 187, 194, 196, 367, 369, 372, 374, 375, 378, 382, 389, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 485, 488, 489], "vec": [8, 16, 17, 20, 49, 50, 51, 52, 54, 56, 57, 59, 60, 81, 117, 121, 122, 148, 162, 163, 176, 181, 187, 194, 252, 308, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 485, 488, 489], "gamma_i": [8, 487, 488], "n": [8, 14, 17, 19, 75, 81, 106, 108, 109, 112, 114, 117, 121, 137, 138, 143, 155, 160, 161, 162, 163, 165, 173, 174, 175, 177, 194, 196, 221, 367, 374, 375, 378, 382, 389, 397, 406, 411, 415, 420, 423, 427, 428, 431, 432, 434, 436, 447, 448, 450, 451, 452, 455, 462, 463, 487, 488, 491], "s_": [8, 176, 487, 488], "discuss": [8, 10, 11, 15, 20, 21, 32, 485, 490], "discret": [8, 17, 20, 47, 81, 117, 160, 165, 166, 173, 174, 180, 221, 222, 358, 372, 374, 375, 378, 382, 389, 485, 489], "pose": [8, 74], "ratio": [8, 71, 138, 143, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 459, 460, 462, 463, 464, 465, 467, 468, 490], "along": [8, 11, 17, 21, 31, 32, 81, 143, 160, 173, 174, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "coordin": [8, 72, 73, 91, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 233, 234, 239, 240, 241, 247, 248, 249, 250, 467, 477], "partial_x": 8, "notic": [8, 12, 15, 188, 494], "within": [8, 11, 13, 16, 17, 21, 71, 117, 180, 222, 231, 247, 252, 411, 487, 492, 493, 496], "first": [8, 11, 16, 17, 21, 36, 45, 46, 72, 73, 74, 75, 81, 112, 113, 114, 117, 121, 122, 135, 137, 148, 149, 161, 162, 163, 165, 176, 177, 180, 187, 188, 189, 218, 222, 230, 231, 233, 234, 239, 247, 250, 356, 363, 393, 397, 406, 407, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 457, 458, 479, 487, 495], "higher": [8, 16, 17, 20, 117, 162, 163, 180, 196, 221, 222, 363, 369, 488, 489, 490], "although": [8, 9, 11, 16, 17, 21, 31, 32, 81, 106, 110, 112, 161, 162, 163, 176, 187, 188, 427, 487, 488], "confus": [8, 484], "interpret": [8, 15, 17, 21, 258, 259, 260, 261, 262, 263, 265, 266, 279, 280, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 352, 353, 494, 495], "examin": [8, 21, 75, 114, 162, 163, 487], "short": [8, 137], "represent": [8, 20, 81, 136, 140, 141, 176, 207, 226, 227, 228, 229, 230, 231, 247, 248, 249, 250, 252, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "assum": [8, 15, 16, 117, 138, 160, 162, 163, 173, 174, 180, 397, 406, 411, 427, 487], "fourth": [8, 85], "isotrop": [8, 94], "nomin": 8, "anomal": 8, "equiv": [8, 17, 162, 163, 175, 176, 490], "conveni": [8, 396, 397, 406], "appli": [8, 14, 16, 20, 21, 67, 81, 82, 83, 117, 137, 162, 163, 176, 189, 192, 194, 195, 196, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 299, 300, 301, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 335, 351, 352, 353, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 485, 491], "rotat": [8, 34, 71, 156, 161], "realiz": [8, 187], "even": [8, 10, 16, 17, 20, 21, 31, 33, 34, 94, 112, 163, 175, 187, 196, 363, 377, 393, 485, 488], "though": [8, 94, 112, 163, 176], "superfici": 8, "resembl": [8, 74, 136, 143], "d_1": [8, 369], "d_2": [8, 369], "xi": [8, 106, 110, 111, 112, 113, 161, 175, 354], "third": [8, 11, 16, 19, 135, 397, 406, 484], "d2": [8, 369], "facegrad": [8, 17, 20, 67, 68, 74, 81, 85, 108, 109, 110, 111, 113, 160, 161, 162, 163, 165, 166, 173, 174, 175, 180, 181, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 467, 468, 487], "diverg": [8, 17, 20, 67, 74, 117, 161, 162, 163, 165, 166, 173, 252, 259, 260, 261, 263, 265, 327, 420, 428, 431, 432, 434, 448, 450, 451, 487], "grad": [8, 20, 72, 73, 111, 112, 113, 117, 165, 166, 173, 174, 180, 181, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 467, 468, 477], "arithmeticfacevalu": [8, 20, 31, 33, 34, 36, 117, 162, 163, 165, 166, 173, 174, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "rate": [8, 31, 32, 137, 138, 143, 149, 160, 173, 174, 176, 420, 432], "rho_1": 8, "rho_2": 8, "manner": [8, 17, 21, 165, 166, 175, 180, 487], "rho1": 8, "rho2": 8, "perspect": 8, "might": [8, 19, 21, 162, 163, 487], "mobil": [8, 106, 111, 112, 113, 162, 163, 175, 434], "counter": [8, 106, 175], "eq": [8, 31, 32, 33, 34, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 77, 80, 81, 82, 83, 85, 86, 90, 112, 162, 163, 174, 176, 180, 187, 188, 387], "d1": [8, 369], "With": [8, 21, 81, 160, 162, 163, 173, 174, 188, 467, 494], "advent": 8, "gamma_1": [8, 20, 485, 488, 489], "gamma_0": [8, 133], "diffterm": [8, 187, 188], "gamma0": [8, 17], "converg": [8, 17, 20, 74, 81, 162, 163, 165, 176, 258, 259, 260, 261, 262, 263, 264, 265, 266, 279, 280, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 302, 303, 308, 309, 312, 313, 314, 315, 316, 321, 322, 323, 324, 327, 332, 333, 334, 335, 336, 350, 352, 353, 387, 485], "plan": 8, "restart": [8, 165], "stage": [8, 9, 11, 14, 21, 81, 434, 491], "ll": [8, 11, 17, 81, 112, 133, 138, 143, 160, 162, 163, 173, 174, 175, 176, 188, 189], "howtowriteascript": [8, 20], "On": [8, 11, 21, 22, 162, 163, 176, 487], "littl": [8, 21, 162, 163, 188, 494], "anyth": [8, 17, 21, 31, 32, 33, 34, 258, 457], "besid": 8, "anoth": [8, 11, 13, 21, 72, 73, 81, 111, 135, 162, 163, 166, 176, 363, 377, 383, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 494], "piec": [8, 17, 21], "softwar": [8, 11, 12, 16, 19, 21, 136, 143, 484], "qualiti": [8, 18, 356, 484], "graph": [8, 96], "multiscal": 8, "ascii": 8, "tab": [8, 11, 72, 73, 477], "separ": [8, 11, 15, 17, 21, 22, 31, 32, 72, 73, 74, 108, 109, 110, 111, 112, 113, 175, 176, 180, 397, 406, 411, 470, 471, 477, 487], "button": 8, "myimag": 8, "ext": [8, 137, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "ep": [8, 165, 166, 173, 174], "jpg": 8, "joint": 8, "photograph": 8, "expert": 8, "png": [8, 17], "portabl": [8, 16, 484], "network": 8, "graphic": [8, 17, 19], "chosen": [8, 17, 21, 111, 113, 462, 463, 468, 490], "yet": [8, 165, 484], "knowledg": [8, 17, 21, 494], "agg": 8, "cairo": 8, "net": [8, 16, 18, 484], "facil": [8, 109, 162, 163, 484], "previou": [8, 17, 32, 81, 160, 162, 163, 173, 174, 176, 187, 397, 406, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "stitch": 8, "free": [8, 12, 18, 19, 21, 31, 32, 36, 106, 162, 163, 175, 176, 180, 181, 188, 189, 484, 491], "sharewar": 8, "adapt": [8, 16, 21, 160, 173, 174, 292, 317, 318, 319, 355, 356, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 484], "utilitarian": [8, 160, 173, 174], "let": [8, 17, 81, 117, 160, 162, 163, 173, 174, 176, 187, 387], "minimum": [8, 11, 17, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 456, 467], "tri": [8, 17, 81, 462, 463, 477], "plotter": 8, "common": [8, 17, 18, 21, 136, 176, 207, 484, 487, 494], "often": [8, 11, 17, 81, 137, 160, 173, 174, 434, 488], "supplement": 8, "underli": [8, 74, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "come": [8, 11, 17, 19, 21, 188, 406], "closest": [8, 411, 427], "overrid": [8, 16, 17, 395, 472], "wan": 8, "heavi": [8, 17], "lift": 8, "custom": [8, 17, 21, 34, 160, 190, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "differenti": [8, 14, 16, 190, 358, 385, 484, 489], "benefit": [8, 17, 21, 31, 33, 34, 49, 50, 51, 59, 60, 176, 187], "repetit": 8, "achiev": [8, 11, 17, 81, 85, 108, 110, 180, 252, 490], "similar": [8, 81, 91], "three": [8, 10, 11, 17, 19, 21, 109, 110, 113, 138, 177, 180, 188, 222, 491], "layer": [8, 135, 136, 137, 138, 143, 218, 222, 228, 230, 233, 239, 247], "lowest": 8, "spend": [8, 190], "think": [8, 10, 17, 21, 162, 163], "practic": [8, 10, 11, 17, 20, 74, 162, 163, 176, 188, 484, 485, 486, 494], "exactli": [8, 15, 17, 67, 162, 163, 176, 397, 406], "thu": [8, 21, 51, 81, 136, 138, 166, 176, 395, 487, 490], "emploi": [8, 11, 16, 17, 176, 489], "until": [8, 17, 21, 81, 354], "satisfactorili": [8, 75], "choos": [8, 11, 16, 17, 71, 81, 162, 163, 176, 462, 463], "toler": [8, 9, 11, 16, 17, 36, 47, 54, 56, 57, 61, 66, 81, 91, 108, 109, 111, 162, 163, 165, 175, 180, 181, 187, 252, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 397, 406, 411], "desir": [8, 9, 11, 21, 162, 163, 175, 176, 187, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406, 459, 460, 462, 463, 464, 465, 467, 468], "mysolv": 8, "linearpcgsolv": [8, 20, 162, 187, 188, 363], "1234": 8, "5e": [8, 32, 137, 160, 161, 162, 163, 173, 174, 176, 180, 181, 420, 428, 432, 434], "favor": 8, "role": [8, 21], "middl": [8, 162, 163, 222], "concentr": [8, 52, 54, 57, 61, 62, 65, 66, 74, 75, 77, 78, 106, 108, 109, 110, 111, 113, 114, 137, 138, 143, 162, 163, 175, 187, 452, 488], "temperatur": [8, 14, 81, 137, 138, 143, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 434, 488], "thermal": [8, 19, 81, 160, 173, 174, 434], "perfect": 8, "good": [8, 47, 59, 60, 81, 117, 176, 489], "elaps": [8, 31, 32, 33, 34, 111, 173, 174, 176], "despit": [8, 17], "evolv": [8, 10, 169, 170, 171], "quasi": 8, "static": [8, 199, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "steadi": [8, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 72, 73, 75, 81, 82, 83, 85, 91, 94, 105, 112, 176, 187], "distinguish": [8, 17], "cycl": [8, 21, 484], "modifi": [8, 11, 12, 13, 15, 21, 143, 180, 275, 494], "myvar": 8, "updateold": [8, 20, 39, 40, 71, 74, 81, 109, 111, 113, 121, 122, 124, 137, 148, 149, 150, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 180, 181, 387, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "repeatedli": [8, 81, 82, 83, 190, 354], "stabl": [8, 9, 11, 21, 81, 162, 163, 176, 490], "truli": 8, "desiredresidu": 8, "outermost": 8, "goal": [8, 21], "studi": [8, 14, 21, 106, 114], "moreov": [8, 17, 19], "equilibrium": [8, 36, 75, 77, 78, 80, 81, 108, 109, 110, 111, 112, 113, 114, 162, 163, 175, 176, 180, 187], "fundament": [8, 21, 406], "becom": [8, 11, 17, 90, 108, 109, 110, 138, 160, 173, 174, 180, 427, 487, 488], "either": [8, 9, 11, 12, 16, 17, 21, 74, 81, 156, 162, 163, 176, 188, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 427, 434, 457, 487, 494, 495], "unstabl": [8, 90, 160, 173, 174], "inaccur": [8, 86, 487], "stabil": [8, 9, 11, 74, 81, 176, 292, 332, 487], "accuraci": [8, 16, 17, 39, 40, 71, 81, 137, 363, 427], "distinctli": 8, "said": 8, "blow": 8, "radic": 8, "perfectli": [8, 81, 187], "disagre": 8, "smaller": [8, 162, 163], "larger": [8, 81, 176, 434, 451, 487], "interv": 8, "234e": 8, "elapsedtim": 8, "totalelapsedtim": 8, "somefunctionofvariablesandtim": 8, "myvar1": 8, "myvar2": 8, "notabl": 8, "interfaci": [8, 112, 176], "gradual": 8, "down": [8, 16, 17, 31, 32, 81, 176, 252], "describ": [8, 17, 21, 31, 32, 52, 54, 57, 61, 62, 65, 66, 72, 73, 81, 113, 117, 138, 160, 173, 174, 176, 180, 397, 413, 487, 489, 492, 493, 495, 496], "substitut": [8, 17, 106, 108, 109, 110, 111, 112, 113, 114, 117, 175, 180, 457], "undesir": 8, "consequ": [8, 11, 117], "averag": [8, 81, 90, 117, 162, 163, 175, 180, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "f": [8, 17, 31, 32, 33, 34, 36, 81, 137, 138, 143, 160, 162, 163, 165, 175, 176, 180, 181, 355, 367, 374, 375, 378, 382, 389, 397, 406, 407, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "neq": [8, 106, 108, 175], "smoothli": 8, "dramat": [8, 74, 81], "sharp": [8, 31, 32, 111, 113, 162, 163, 175], "drop": [8, 11, 13, 17, 81, 117, 222], "harmon": [8, 16, 31, 33, 34, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "experi": [8, 14, 16, 17, 137, 491], "excess": [8, 490], "vice": 8, "versa": 8, "ma": [8, 411], "maerror": 8, "locat": [8, 17, 22, 222, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 487, 492, 493, 496], "pm": [8, 173, 174], "infti": [8, 16, 17, 112, 133, 136, 137, 138, 143, 354, 411, 420, 432, 490], "repair": 8, "catalog": 8, "kei": [8, 63, 68, 75, 90, 111, 114], "flag": [8, 11, 16, 20, 160, 161, 173, 174, 264, 393, 485], "mailinglist": 8, "mailman": 8, "fn": [8, 354, 494], "dev": [8, 484], "2005": [8, 14, 20, 355, 485], "june": [8, 14], "003010": 8, "23": [8, 17, 20, 47, 106, 175, 406, 411, 485, 491], "neither": [8, 397, 406], "sloppi": 8, "thread": [8, 20, 485], "scientif": [8, 11, 14, 16, 18, 21, 484, 491], "4349": 8, "experienc": 8, "upgrad": [8, 11], "brows": [9, 11, 17], "through": [9, 11, 17, 19, 72, 73, 81, 162, 163, 165, 176, 187, 302, 351, 434], "download": [9, 11, 20, 485], "Be": [9, 11, 16, 17, 188], "pre": [9, 20, 117, 485], "scm": [9, 11, 491], "latest": [9, 11, 17], "subject": [9, 11, 12, 17, 74, 187, 397, 406, 411], "behav": [9, 11, 81, 196], "degre": [9, 11, 17, 117, 161, 162, 163], "indic": [9, 11, 15, 16, 17, 188, 189, 397, 406, 411, 415, 487], "decid": [9, 11], "risk": [9, 11, 406], "track": [9, 11, 21], "clone": [9, 11], "shift": [9, 11, 39, 40, 162, 163, 415], "past": [9, 11], "1050": [9, 11, 16, 20, 485], "gecf1f67d8": [9, 11, 16, 20, 485], "x_y_z": [9, 11], "retain": [9, 11, 17, 81, 162, 163], "guarante": [9, 11, 406, 490], "kept": [9, 11], "synchron": [9, 11], "altogeth": [9, 11, 81], "who": [9, 11, 21], "wide": [9, 11, 16, 18, 484, 488], "onlin": [9, 11, 17], "book": [9, 11, 491], "cours": [10, 17, 135, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "strai": 10, "peril": 10, "forbidden": 10, "greatest": 10, "extent": [10, 12], "had": [10, 81, 176, 187, 188], "great": [10, 19, 162, 163, 188], "knew": [10, 21], "rectangl": 10, "blob": [10, 11, 13, 16, 173, 174], "def": [10, 108, 109, 110, 111, 112, 113, 114, 126, 127, 129, 160, 162, 163, 165, 173, 174, 175, 176, 180, 181, 188], "width": [10, 173, 174, 467, 487], "height": [10, 47, 124, 162, 163, 176], "black": [10, 187], "red": 10, "strong": 10, "sorri": 10, "lose": 10, "mixedcas": 10, "lowercas": 10, "lower_case_with_underscor": 10, "deviat": [10, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 490], "unsur": 10, "anybodi": 10, "willing": 10, "seen": [10, 81, 162, 163], "unittest": [10, 21, 395, 396], "heavili": [10, 472], "care": [10, 15, 17, 81, 176, 187], "taken": [10, 15, 21, 77, 78, 80, 81, 160, 173, 174, 406, 412], "defin": [10, 21, 47, 49, 50, 51, 56, 59, 60, 67, 72, 73, 81, 111, 136, 137, 160, 162, 163, 165, 166, 173, 174, 180, 187, 222, 232, 411, 420, 423, 427, 428, 431, 432, 434, 441, 447, 448, 450, 455, 467, 487, 490, 494, 495], "parallel_2": 10, "processor_0": [10, 393], "id": [10, 17, 20, 36, 140, 188, 411, 415, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 459, 460, 461, 462, 463, 464, 465, 467, 468, 491], "processor_0_of_2": [10, 393], "processor_1_of_2": [10, 393], "processor_0_of_3": [10, 393], "processor_1_of_3": [10, 393], "processor_2_of_3": [10, 393], "register_skipp": [10, 20, 393], "pertain": 10, "reli": [11, 72, 73, 467, 487, 494], "parti": [11, 19, 484], "begin": [11, 15, 17, 21, 36, 49, 51, 56, 59, 60, 71, 74, 75, 81, 113, 114, 127, 129, 137, 138, 143, 160, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 187, 222, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 490, 495], "By": [11, 17, 117, 176, 393, 427], "select": [11, 20, 21, 221, 222, 355, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 411, 486, 490], "webspac": 11, "infer": 11, "drawn": 11, "referenc": 11, "concur": 11, "fact": [11, 81, 187, 188, 393, 427], "rudimentari": [11, 18, 117, 357], "introduct": [11, 20, 486, 489, 491], "expedi": [11, 21], "manag": [11, 13, 17, 484], "virtual": [11, 20, 485, 486], "keep": [11, 31, 32, 33, 34, 137, 161], "suffici": [11, 162, 163, 188, 189, 397, 407, 413], "privileg": 11, "channel": [11, 17], "dai": [11, 21], "micromamba": 11, "popul": 11, "anaconda": 11, "merit": 11, "relationship": [11, 21, 96, 176], "myfipyenv": 11, "awar": [11, 16, 17], "restrict": [11, 16, 17, 193, 406, 487], "unpredict": 11, "later": [11, 17, 19, 110, 165, 423], "unfortun": [11, 21, 188, 412], "prove": [11, 21], "Then": 11, "mymergedenviron": 11, "lockfil": [11, 20, 485, 486], "pin": 11, "safest": 11, "obviat": 11, "flexibl": [11, 292, 484], "highest": 11, "mpich": 11, "traitsui": 11, "bit": [11, 72, 73, 162, 163, 176], "rot": 11, "One": [11, 17, 81, 90, 108, 110, 155, 162, 163, 176, 180, 187, 467, 487], "vtkviewer": [11, 20], "henc": [11, 162, 163, 176], "batteri": [11, 21], "bare": 11, "quit": [11, 488], "mamba": 11, "speed": [11, 117], "pretti": 11, "visual": [11, 18, 472, 484], "fewer": [11, 176], "amongst": 11, "freeli": [11, 15, 21, 190], "mind": [11, 17], "preserv": [11, 47, 121, 122, 411], "courag": 11, "impati": 11, "quickli": [11, 18, 138, 231, 484], "formal": 11, "confid": [11, 117], "requisit": 11, "alter": [11, 17, 21], "admin": 11, "termin": [11, 16, 17, 81, 91, 136, 137, 138, 143, 176], "15": [11, 14, 20, 36, 54, 56, 57, 61, 66, 67, 81, 111, 113, 162, 163, 165, 173, 174, 175, 176, 187, 234, 277, 278, 281, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 477, 485, 489, 491], "copyright": [11, 12], "credit": 11, "geuz": [11, 484], "creation": [11, 72, 73, 187, 494], "irregular": [11, 72, 73, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458], "analyz": [11, 72, 73], "judici": [11, 17], "compon": [11, 19, 31, 32, 74, 75, 108, 109, 110, 111, 112, 113, 114, 162, 163, 175, 180, 491], "fast": [11, 16, 21, 427, 491], "march": [11, 14, 427, 491], "ktchu": 11, "serendipityresearch": 11, "surfac": [11, 17, 19, 34, 72, 73, 95, 138, 156, 160, 173, 174, 176, 222, 487], "curv": [11, 176], "addition": [11, 19, 117], "pylsmlib": 11, "tree": [11, 457, 458, 479], "violat": 11, "tamper": 11, "util": [11, 20, 161, 165, 166, 169, 170, 171, 222, 354, 357, 397, 415, 484], "stow": 11, "virtualenv": 11, "buildout": 11, "cd": [11, 406], "power": [11, 13, 17, 21, 175, 190, 382, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 490, 494], "unix": [11, 13, 17], "reliabl": [11, 13, 188], "blog": [11, 13], "hpc": [11, 13], "team": [11, 13], "gricad": [11, 13], "tuto": [11, 13], "2017": [11, 13, 16, 20, 485], "07": [11, 13, 406], "04": [11, 13, 20, 149, 485, 491], "my": [11, 13, 17, 20, 188, 485], "md": [11, 13], "pure": [11, 13, 17, 74, 106, 162, 163, 175], "nativebuildinput": [11, 13], "know": [11, 13, 17, 21, 112, 187, 188], "toolz": [11, 13], "persist": [11, 13, 19, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "employe": 12, "agenc": 12, "feder": [12, 21], "pursuant": 12, "protect": 12, "foreign": 12, "permiss": 12, "countri": 12, "deriv": [12, 15, 17, 31, 32, 33, 34, 68, 74, 81, 162, 163, 175, 180, 196, 355, 406, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487, 488, 489, 490, 494, 495], "fee": 12, "herebi": 12, "grant": [12, 19], "exclus": [12, 17], "basi": [12, 491], "disclaim": 12, "warranti": 12, "THE": 12, "AS": 12, "OF": 12, "kind": 12, "OR": 12, "statutori": 12, "BUT": 12, "NOT": 12, "TO": 12, "THAT": 12, "WILL": 12, "conform": 12, "merchant": 12, "fit": [12, 21, 176], "FOR": 12, "AND": [12, 411], "freedom": 12, "infring": 12, "BE": 12, "IN": 12, "NO": 12, "event": [12, 162, 163, 448], "shall": 12, "liabl": 12, "damag": 12, "indirect": 12, "consequenti": 12, "aris": 12, "connect": [12, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "WITH": 12, "contract": 12, "tort": 12, "otherwis": [12, 16, 90, 140, 141, 160, 173, 174, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "injuri": 12, "sustain": 12, "BY": 12, "person": 12, "loss": [12, 16, 252, 327], "aros": 12, "hereund": 12, "cite": 14, "j": [14, 21, 75, 81, 106, 108, 111, 112, 114, 136, 137, 138, 143, 148, 162, 163, 165, 166, 173, 174, 175, 176, 177, 194, 355, 397, 406, 411, 491], "11": [14, 17, 20, 47, 71, 72, 73, 95, 111, 117, 126, 140, 141, 180, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406, 411, 485, 491], "pp": [14, 363], "2009": [14, 20, 485, 491], "1109": 14, "mcse": 14, "w": [14, 112, 138, 143, 162, 163, 166, 173, 174, 176, 222, 397, 406, 413, 491], "boetting": [14, 106, 491], "earli": [14, 21, 78, 491], "reactiv": [14, 15, 20, 190, 491], "wet": [14, 15, 20, 165, 166, 190, 491], "82": [14, 180, 181, 491], "051601": [14, 491], "2010": [14, 20, 485, 491], "1103": [14, 491], "physrev": [14, 491], "mohanti": 14, "sohn": 14, "gradient": [14, 20, 31, 32, 39, 82, 83, 106, 112, 117, 160, 162, 163, 165, 166, 173, 174, 176, 180, 259, 260, 292, 297, 302, 332, 363, 377, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 485, 487], "journal": [14, 355, 491], "034912": 14, "1063": [14, 491], "3190607": 14, "pusztai": 14, "l": [14, 16, 17, 36, 39, 40, 51, 52, 54, 56, 57, 61, 62, 63, 65, 66, 68, 75, 78, 81, 82, 83, 85, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 126, 127, 128, 129, 133, 138, 143, 148, 149, 162, 163, 165, 169, 170, 171, 175, 176, 177, 180, 187, 221, 354, 355, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 491], "k": [14, 17, 21, 81, 106, 108, 111, 133, 137, 138, 143, 149, 162, 163, 175, 176, 308, 387, 406, 458, 461, 463, 464, 465, 467, 468, 470, 471, 491], "\u00f6": [14, 488], "rnyei": 14, "gr": 14, "\u00e1": 14, "sy": [14, 393, 411, 420, 428, 432, 434], "approach": [14, 16, 19, 20, 81, 162, 163, 176, 190, 222, 485, 487, 488], "heterogen": 14, "nucleat": [14, 31, 32], "alloi": [14, 31, 32, 162, 163, 491], "014204": 14, "physrevb": 14, "p": [14, 16, 17, 67, 106, 111, 112, 117, 162, 163, 166, 173, 174, 175, 176, 180, 355, 387, 397, 406, 484, 487, 490, 491], "moffat": [14, 491], "kim": [14, 491], "josel": [14, 491], "curvatur": [14, 137, 138, 491], "enhanc": [14, 484, 491], "adsorb": [14, 138, 491], "coverag": [14, 136, 137, 138, 143, 148, 149, 491], "bottom": [14, 82, 83, 117, 173, 174, 177, 187, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "damascen": 14, "electrochimica": 14, "acta": [14, 491], "53": 14, "2007": [14, 16, 20, 485], "1016": [14, 491], "electacta": 14, "03": [14, 20, 72, 78, 461, 470, 471, 485, 491], "025": [14, 94, 95, 112, 113, 160, 173, 174, 176], "campbel": 14, "mcfadden": [14, 106, 491], "kirkendal": [14, 491], "displac": [14, 176, 218, 222, 228, 230, 233, 239, 247, 406], "dimension": [14, 19, 81, 82, 99, 109, 166, 176, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 330, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 491], "proceed": [14, 401], "royal": 14, "societi": [14, 491], "mathemat": [14, 17, 456, 484, 487, 491], "2088": 14, "3347": 14, "3373": 14, "1098": 14, "rspa": 14, "1904": 14, "cickovski": 14, "ara": 14, "swat": 14, "merk": 14, "glimm": 14, "hentschel": 14, "alber": 14, "glazier": 14, "newman": 14, "izaguirr": 14, "gene": 14, "organ": 14, "multicellular": 14, "60": [14, 111, 112, 113, 138, 176, 397, 406], "saylor": [14, 491], "theori": [14, 47], "letter": [14, 491], "035703": 14, "physrevlett": [14, 491], "mazur": 14, "soil": 14, "solar": [14, 491], "radiat": 14, "de": 14, "physiqu": 14, "iv": 14, "franc": 14, "320": 14, "2006": [14, 20, 485, 491], "1051": 14, "jp4": 14, "2006137061": 14, "electrodeposit": [14, 15, 143, 175, 190, 491], "c127": [14, 491], "c132": [14, 491], "1149": [14, 491], "2165580": [14, 491], "gold": [14, 20, 491], "submicromet": [14, 491], "trench": [14, 20, 135, 136, 137, 138, 143, 491], "c11": [14, 491], "c18": [14, 491], "2128765": [14, 491], "were": [14, 17, 21, 393, 411], "honor": 14, "invit": 14, "deliv": 14, "keynot": 14, "confer": 14, "caltech": 14, "august": [14, 16], "talk": 14, "georg": 14, "mason": 14, "depart": 14, "octob": [14, 16], "devic": 14, "radiolog": 14, "health": 14, "food": 14, "drug": [14, 15, 190, 491], "ge": [14, 124, 363], "siam": 14, "tm": [14, 39, 40, 176], "annual": [14, 491], "meet": [14, 137], "februari": 14, "educ": 14, "luncheon": 14, "roundtabl": 14, "transform": [14, 15, 106, 162, 163, 175, 176, 190, 487], "microstructologi": 14, "iii": [14, 222, 491], "birmingham": 14, "al": [14, 165, 166, 173, 174, 180], "2004": [14, 20, 111, 485, 491], "mr": 14, "fall": [14, 117], "novemb": 14, "arbitrari": [15, 17, 19, 108, 109, 110, 188, 190, 279, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 488], "ellipt": [15, 190], "hyperbol": [15, 176, 190, 397, 406], "parabol": [15, 190], "dendrit": [15, 19, 21, 160, 161, 173, 174, 190, 491], "elut": [15, 190, 491], "stent": [15, 190], "photovolta": [15, 190], "redistribut": 15, "bear": 15, "welcom": [15, 21], "collabor": [15, 19], "project": [15, 18, 72, 73, 484], "driven": 15, "editor": 15, "tcsh": 15, "bash": 15, "throughout": [15, 137, 161], "keyboard": 15, "denot": [15, 106, 117, 165, 180, 487], "12": [15, 17, 20, 21, 47, 81, 111, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 406, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 456, 485, 491], "twelv": 15, "primari": [15, 21], "secondari": 15, "remain": [15, 17, 34, 81, 111, 113, 117, 156, 161, 162, 163, 175, 188, 189, 411, 490], "margin": [15, 17], "sensit": 15, "indent": 15, "posix": 15, "seriou": [15, 16, 32, 121, 122], "less": [16, 81, 162, 163, 264, 308, 363, 377, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 487], "popular": [16, 489], "hardwar": 16, "trivial": [16, 32, 363, 377], "defaultsolv": [16, 20, 33, 34, 36, 251], "lineargmressolv": [16, 20, 31, 63], "fipy_solv": [16, 17], "linearlusolv": [16, 20, 31, 36, 63, 109, 111, 163, 187, 377], "regardless": [16, 160, 173, 174, 221], "mc": [16, 162, 163, 484], "anl": [16, 484], "toolkit": [16, 484], "structur": [16, 18, 20, 81, 484, 485, 487, 491], "routin": [16, 176, 190, 264, 484], "scalabl": [16, 484], "precodition": 16, "pctype": 16, "precon": [16, 31, 33, 34, 108, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 301, 302, 303, 304, 305, 307, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 352, 353], "declar": [16, 33, 34, 81, 117, 162, 163, 434, 494], "storag": [16, 160, 173, 174, 222, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 484, 487], "precondition": [16, 17, 20, 86, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 293, 297, 298, 299, 300, 301, 302, 303, 308, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 484], "factor": [16, 17, 32, 117, 162, 217, 218, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 247, 264, 290, 301, 308, 315, 406, 467, 487], "archaic": [16, 484], "krylov": [16, 264, 265], "conjunct": [16, 17, 21, 196], "readthedoc": [16, 484], "nvidia": [16, 484], "amgx": [16, 285, 286, 287, 288, 289, 291, 293, 484], "sandia": [16, 351, 484], "difficult": [16, 18, 81, 188, 190, 484], "alongsid": 16, "compil": [16, 17, 21, 484], "suppress": [16, 411], "commonli": [16, 188], "encount": [16, 412], "gen_prolong": 16, "eigen": 16, "aztec": [16, 337, 348, 351], "az_loss": 16, "precis": [16, 252, 327, 397, 406, 411], "difficulti": 16, "usual": [16, 21, 176, 180, 187, 231, 233, 234, 247, 264, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 411], "az_ill_cond": 16, "gmre": [16, 252, 261, 278, 289, 298, 314, 334], "hessenberg": [16, 252], "ill": [16, 252, 308], "accur": [16, 31, 33, 34, 81, 86, 121, 176, 363], "az_breakdown": 16, "breakdown": [16, 252, 264], "reach": [16, 17, 21, 77, 78, 80, 138, 162, 163, 176, 264, 308], "endeavor": [16, 17], "behavior": [16, 17, 20, 21, 138, 189, 411, 485, 494, 495], "criterion": [16, 17, 20, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 294, 297, 298, 299, 300, 301, 302, 303, 308, 309, 312, 313, 314, 315, 316, 321, 322, 323, 324, 327, 332, 333, 334, 335, 336, 350, 351, 352, 353], "column": [16, 17, 72, 73], "detect": 16, "unscal": [16, 17, 252, 258, 259, 260, 261, 262, 263, 265, 266, 279, 280, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 352, 353], "mathsf": [16, 160, 173, 174, 176, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "_2": [16, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 411], "az_nosc": 16, "rh": [16, 17, 36, 117, 195, 258, 259, 260, 261, 262, 263, 265, 266, 279, 280, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 352, 353, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "ksp_norm_unprecondit": 16, "pcg": [16, 281, 291, 302], "qmre": 16, "az_rh": 16, "az_anorm": 16, "relative_ini_cor": 16, "bicgstab": [16, 312], "minr": 16, "az_r0": 16, "_1": [16, 354, 411], "az_sol": 16, "ksp_norm_precondit": 16, "natur": [16, 17, 74, 138, 188, 258, 259, 260, 261, 263, 265, 266, 298, 299, 302, 303, 309, 324, 332, 333, 334, 336, 350, 352, 353, 397, 406, 487], "sqrt": [16, 20, 36, 40, 67, 71, 72, 73, 77, 78, 81, 112, 121, 124, 126, 127, 129, 137, 148, 149, 155, 156, 165, 176, 222, 363, 377, 387, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "ksp_norm_natur": 16, "ksp_norm_default": 16, "top": [16, 82, 83, 137, 140, 141, 187, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 427, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "prior": [16, 354], "row": 16, "happen": [16, 21, 47, 81], "ksptype": 16, "discern": 16, "burn": 16, "bowl": 16, "chicken": 16, "entrail": 16, "sai": 16, "weird": [16, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "paramet": [16, 17, 20, 21, 31, 32, 39, 40, 72, 73, 78, 80, 81, 111, 113, 117, 121, 122, 126, 128, 133, 136, 137, 138, 140, 141, 143, 161, 162, 163, 165, 166, 176, 180, 187, 192, 194, 195, 196, 218, 221, 222, 228, 230, 233, 239, 247, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 337, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 395, 397, 402, 406, 407, 410, 411, 412, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483, 488, 490, 494, 495], "succ": 16, "captur": 16, "amgx_solve_success": 16, "az_norm": 16, "iterationconverg": [16, 20, 252, 264], "ksp_converged_it": 16, "absolutetoleranceconverg": [16, 20, 252, 264, 308], "ksp_converged_atol": 16, "rhszeroconverg": [16, 20, 252, 308], "mathbf": [16, 308], "relativetoleranceconverg": [16, 20, 252, 264, 308], "ksp_converged_rtol": 16, "happybreakdownconverg": [16, 20, 252, 264], "wors": [16, 17, 252], "ksp_converged_happy_breakdown": 16, "lossofaccuracyconverg": [16, 20, 252, 327], "round": [16, 397, 406], "iteratingconverg": [16, 20, 252, 264], "progress": [16, 36, 252, 434], "ksp_converged_iter": 16, "breakdowndiverg": [16, 20, 252, 264, 294, 321, 327], "illeg": [16, 397, 406], "ksp_diverged_breakdown": 16, "amgx_solve_fail": 16, "iterationdiverg": [16, 20, 252, 264, 294, 308, 321, 327], "ksp_diverged_it": 16, "amgx_solve_diverg": 16, "az_maxit": 16, "preconditioningdiverg": [16, 20, 252, 264, 308], "ksp_diverged_pc_fail": 16, "illconditionedpreconditionerdiverg": [16, 20, 252, 264], "inner": [16, 34, 81, 156, 222, 308], "posit": [16, 17, 72, 73, 81, 124, 128, 137, 149, 150, 188, 264, 302, 308, 337, 346, 436, 461, 462, 463, 490], "ksp_diverged_indefinite_pc": 16, "illconditioneddiverg": [16, 20, 252, 264, 308, 327], "ksp_diverged_indefinite_mat": 16, "stagnateddiverg": [16, 20, 252, 308], "stagnat": [16, 252, 308], "outofrangediverg": [16, 20, 252, 264, 308], "quantiti": [16, 21, 72, 73, 106, 109, 136, 176, 308, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 488], "becam": [16, 252, 264, 308], "ksp_diverged_nanorinf": 16, "nulldiverg": [16, 20, 252, 264], "ksp_diverged_nul": 16, "tolerancediverg": [16, 20, 252, 264], "divtol": [16, 264], "ksp_diverged_dtol": 16, "ksp": [16, 264], "sec": 16, "convergencetest": 16, "amgx_refer": 16, "2d1d5b042a09e131ffe191726aa6829b33590970": 16, "_isolv": 16, "l30": 16, "aztecoo": [16, 350], "az_conv": 16, "sand": 16, "sand2004": 16, "3796": 16, "aztecoouserguid": 16, "ksp_diverged_breakdown_bicg": 16, "ksp_diverged_nonsymmetr": 16, "sens": 17, "strongli": [17, 187], "proce": [17, 32, 72, 73, 81, 82, 83, 162, 163, 176, 180], "assumpt": [17, 138, 162, 163], "seri": 17, "familiar": 17, "yourself": [17, 494, 495], "excel": 17, "dive": [17, 491], "Into": [17, 491], "deeper": [17, 427], "insight": 17, "getlogg": 17, "consol": 17, "streamhandl": 17, "setlevel": 17, "info": [17, 410], "addhandl": 17, "verbos": [17, 393, 395, 396], "save": [17, 20, 137, 140, 141, 165, 407, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 484, 485], "logfil": 17, "filehandl": 17, "filter": [17, 188, 324], "addfilt": 17, "fipy_log_config": 17, "mpilog": 17, "mpiscatteredfilehandl": 17, "filepattern": 17, "mpirank": 17, "d_of_": 17, "mpisiz": 17, "uniqu": [17, 21], "egg_info": 17, "investig": [17, 96], "tracker": 17, "dashboard": 17, "core": [17, 21], "insensit": 17, "myfipyscript": 17, "someflag": 17, "lazili": [17, 456], "recalcul": [17, 128, 180, 181, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 456], "skfmm": 17, "compos": [17, 21, 162, 163, 494], "fipy_inlin": 17, "fipy_inline_com": 17, "context": [17, 207, 222, 226, 251, 324, 358, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457], "json": [17, 484], "config": [17, 395], "dictconfig": 17, "fipy_verbose_solv": 17, "lineargeneralsolv": [17, 20], "fipy_default_criterion": 17, "admittedli": 17, "circular": [17, 71, 72, 73, 121, 148, 149, 160, 161, 165, 173, 174, 363], "fipy_include_numerix_al": [17, 189], "fipy_cach": 17, "petsc_opt": 17, "tri2d": [17, 20, 78, 91, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 248, 249, 250, 458, 465, 467, 468, 470, 471], "skewedgrid2d": [17, 20, 93, 96], "advis": 17, "myscript": [17, 137, 324], "slurm": 17, "task": [17, 21], "manufactur": 17, "hire": 17, "bigger": 17, "versu": 17, "style": [17, 467], "observ": [17, 161], "exhibit": [17, 106, 434, 488], "law": [17, 21, 162, 163, 180, 382, 490], "slab": 17, "compact": 17, "carri": 17, "fairli": [17, 160, 165, 166, 173, 174], "lag": 17, "discrep": 17, "obviou": [17, 162, 176], "20": [17, 20, 21, 31, 32, 47, 71, 82, 83, 94, 95, 102, 110, 111, 143, 160, 161, 163, 173, 174, 177, 180, 181, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406, 427, 456, 485, 488, 491], "modest": 17, "caveat": 17, "architectur": [17, 484], "easiest": 17, "confirm": [17, 81, 111, 113, 165, 175, 251], "half": [17, 165, 189], "look": [17, 20, 81, 162, 163, 485], "69815": 17, "freed": 17, "69814": 17, "69813": 17, "essenti": [17, 49, 50, 51, 59, 60, 81, 137, 162, 163, 187, 397, 406, 411, 487, 489], "sub": [17, 247, 487, 492, 493, 496], "somewhat": [17, 21, 31, 33, 34, 363, 377], "xterm": 17, "ipdb": 17, "spawn": 17, "intent": 17, "node": [17, 222], "cluster": 17, "child": 17, "compet": [17, 31, 32, 162, 163], "ghost": [17, 222], "exchang": [17, 137, 138, 143], "gil": 17, "bind": [17, 474, 484, 494], "parent": 17, "suffer": 17, "launch": [17, 81], "minut": [17, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "unrestrict": [17, 21], "degrad": 17, "conceiv": 17, "unfett": 17, "slot": 17, "msg03393": 17, "notfun": 17, "polygon": 17, "wrapper": [17, 222, 255, 256, 290, 297, 298, 299, 301, 302, 303, 304, 305, 307, 315, 317, 318, 319, 329, 330, 399, 407, 412, 484], "gmsh3d": [17, 20, 189, 222], "geometri": [17, 21, 72, 73, 136, 137, 138, 143, 156, 187, 195, 206, 222, 232, 248, 249, 423, 427, 431, 441, 447, 448, 450], "geo": [17, 222], "msh": [17, 71, 222], "occur": [17, 34, 165, 176, 180, 187, 252, 327, 397, 406, 427], "whenev": [17, 324, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "compromis": [17, 81], "highli": [17, 21, 337, 344], "orthogon": [17, 21, 93, 95, 96, 247, 264, 487], "tighter": 17, "tempor": 17, "eqn0": [17, 74], "eqn1": [17, 74], "coupledeqn": [17, 180, 181], "quadrant": [17, 177], "act": [17, 21], "term00": 17, "term01": 17, "source0": 17, "term10": 17, "term11": 17, "source1": 17, "ttfamili": 17, "hline": [17, 138, 143], "decis": 17, "regard": 17, "upper": [17, 457, 461], "revers": [17, 52, 57, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "decompos": [17, 31, 33, 34, 74], "2nd": [17, 32, 356, 369, 491], "pair": [17, 74, 106, 411], "4th": [17, 86, 369], "phi": [17, 20, 21, 31, 32, 33, 34, 36, 49, 50, 51, 56, 59, 60, 68, 71, 72, 73, 75, 77, 78, 81, 82, 83, 85, 106, 110, 111, 112, 113, 114, 121, 122, 124, 126, 127, 128, 129, 137, 148, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 187, 188, 195, 196, 363, 367, 369, 372, 374, 375, 377, 378, 380, 382, 383, 384, 387, 389, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 485, 488, 489], "kappa_c": [17, 162, 163], "kappa_": [17, 106, 112, 162, 163, 175, 176], "mu": [17, 117, 165, 166, 173, 174, 175, 180, 181, 406, 428, 434], "hat": [17, 51, 81, 137, 194, 196, 431, 450, 451, 487], "qquad": [17, 36, 67, 106, 112, 129, 133, 162, 163, 169, 170, 171, 175, 363], "facestop": [17, 20, 52, 57, 82, 83, 117, 137, 181, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "fixedvalu": [17, 20, 187, 188, 189, 196], "facenorm": [17, 232, 233, 234], "exterior": [17, 68, 72, 73, 81, 155, 222], "firstli": [17, 72, 73, 121, 122, 126, 128, 155, 180, 427], "diffcoeff": [17, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 105, 187, 188], "convcoeff": [17, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 187, 188], "extra": [17, 292, 393], "eqn": [17, 39, 40, 71, 74, 78], "diffusioncoeff": [17, 36, 39, 40, 67, 77, 137, 165, 166, 187], "exteriorflux": 17, "fixedflux": [17, 20, 187, 189, 196], "unless": [17, 19, 31, 32, 33, 34, 221, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 397, 413], "xy": [17, 231, 363], "quad": [17, 85, 176], "elsewher": 17, "repres": [17, 20, 21, 31, 32, 49, 50, 59, 60, 68, 74, 77, 81, 108, 110, 111, 112, 113, 128, 137, 138, 149, 160, 161, 173, 174, 176, 187, 195, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 367, 369, 380, 387, 406, 420, 423, 428, 432, 434, 455, 461, 465, 485, 487, 488], "portion": [17, 21], "s_r": 17, "int_v": [17, 367, 372, 374, 375, 378, 380, 382, 387, 389, 487], "dv": [17, 162, 163, 180, 367, 372, 374, 375, 378, 380, 382, 387, 389, 487], "int_": [17, 162, 163, 487], "notin": 17, "setvalu": [17, 20, 21, 31, 33, 34, 67, 72, 73, 75, 81, 85, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 140, 141, 149, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 461, 463, 464, 465, 467, 468, 470, 471], "powerlawconvectionterm": [17, 20, 49, 50, 51, 59, 60, 63, 65, 66, 67, 68, 108, 109, 110, 111, 113, 162, 174, 175, 187, 188, 363, 366, 367, 374, 375, 376, 377, 378, 380, 383, 384, 387, 389, 390, 487], "onto": [17, 31, 33, 34, 133, 188], "interven": [17, 81], "neighbor": [17, 363, 427, 487, 490], "phi_f": [17, 367, 374, 375, 378, 382, 389, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "approx": [17, 162, 163, 176, 431, 450, 451], "phi_p": [17, 363, 367, 372, 374, 375, 377, 378, 380, 382, 387, 389, 487, 490], "pf": [17, 111], "_f": [17, 117, 180, 367, 374, 375, 378, 382, 389, 431, 450, 451, 487], "adjoin": 17, "g_f": 17, "b_f": 17, "turn": [17, 187], "gamma": [17, 71, 133, 143, 165, 166, 173, 174, 188, 372, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 487, 488], "sum_f": [17, 117, 372, 420, 423, 427, 428, 431, 432, 434, 436, 447, 448, 450, 451, 452, 455, 487], "gamma_f": [17, 372, 487], "a_f": [17, 117, 180, 181, 367, 372, 374, 375, 378, 382, 389, 420, 423, 427, 428, 431, 432, 434, 436, 447, 448, 450, 451, 452, 455, 487], "sum_": [17, 75, 106, 108, 112, 114, 138, 175, 367, 374, 375, 378, 382, 389, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "modif": 17, "dpf": 17, "celldistancevector": 17, "robincoeff": 17, "similarli": [17, 138], "heat": [17, 81, 160, 162, 163, 173, 174, 176, 491], "t_": 17, "largevalu": 17, "domin": 17, "typic": [17, 117, 162, 163, 369], "boolean": [17, 176, 397, 406], "noth": [17, 108, 109, 110, 156, 393], "believ": [17, 187], "intuit": 17, "pathologi": 17, "attent": [17, 222], "implicitli": [17, 91, 176, 180], "nx": [17, 31, 32, 33, 36, 39, 40, 47, 51, 52, 54, 56, 57, 61, 62, 63, 65, 66, 67, 68, 74, 75, 77, 78, 80, 81, 82, 83, 85, 90, 91, 94, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 140, 141, 155, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 407, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 461, 463, 464, 465, 467, 468, 470, 471, 477], "rvert_": [17, 81, 176], "facesright": [17, 20, 36, 49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 67, 68, 74, 78, 81, 82, 83, 85, 94, 95, 111, 117, 181, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "1e": [17, 33, 34, 36, 39, 40, 47, 49, 50, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 74, 80, 81, 82, 83, 85, 90, 91, 97, 99, 100, 105, 108, 109, 110, 111, 112, 113, 124, 127, 133, 137, 148, 149, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 188, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 363, 377, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "unexpect": [17, 393], "everywher": [17, 110, 112, 137, 165, 166, 176], "januari": [17, 111], "2020": [17, 20, 485], "pledg": 17, "priorit": 17, "rapidli": [17, 21], "impract": 17, "hopefulli": 17, "latexpdf": 17, "plu": [17, 81, 487], "v7": 17, "bibliograph": 17, "numpydoc": 17, "embed": [17, 19, 21, 156], "imagemagick": 17, "siunit": 17, "sty": 17, "texliv": 17, "pyspel": 17, "hunspel": 17, "libreoffic": 17, "wget": 17, "aff": 17, "cgit": 17, "freedesktop": 17, "en": [17, 484], "a4473e06b56bfe35187e302754f6baaa8d75e54f": 17, "dic": 17, "far": [18, 81, 111, 113, 137, 138, 143, 175, 427], "vkml": 19, "aspect": [19, 117, 138, 143, 166, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 459, 460, 462, 463, 464, 465, 467, 468], "semin": 19, "michael": 19, "water": 19, "prof": 19, "edwin": 19, "garcia": 19, "purdu": 19, "coarsen": 19, "random": [19, 31, 32, 33, 34, 93, 160, 173, 174, 180, 181, 239, 420, 428, 432, 434, 448, 455], "crystallograph": 19, "nuclei": [19, 173, 174], "radiu": [19, 34, 72, 73, 121, 149, 156, 160, 161, 173, 174, 222], "size": [19, 20, 32, 78, 80, 100, 111, 137, 138, 143, 180, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 413, 436, 467, 487], "homogen": [19, 31, 32], "dispers": 19, "wall": [19, 117], "seed": [19, 160, 161, 173, 174, 180, 181, 420, 428, 432, 434, 448], "fold": 19, "undercool": [19, 160, 173, 174, 176], "liquid": [19, 111, 113, 160, 161, 162, 163, 165, 173, 174, 175, 180], "strength": [19, 487, 490], "tension": 19, "segreg": [19, 31, 32, 75, 111, 113, 114, 175], "chemic": [19, 106, 162, 163, 175, 180, 488, 491], "john": [19, 491], "browser": 19, "assess": 19, "potenti": [19, 75, 106, 110, 111, 112, 113, 114, 162, 163, 175, 180, 181, 488], "word": [19, 91, 136, 137, 138, 143, 176], "michigan": 19, "boston": 19, "japan": 19, "england": 19, "wherev": 19, "cowork": 19, "planet": 19, "him": 19, "temporari": [19, 397, 407, 413, 415], "travel": 19, "privat": [19, 393], "publicli": 19, "peopl": 19, "world": 19, "regist": 19, "registr": 19, "nanohub": 19, "overview": [20, 21, 393, 485, 486], "client": [20, 485], "submit": [20, 485], "feedstock": [20, 485], "announc": [20, 485], "absolute_toler": [20, 259, 260, 261, 263, 265, 279, 280, 290, 312, 313, 314, 315, 316, 322, 323, 485], "divergence_toler": [20, 259, 260, 261, 263, 265, 485], "openmp": [20, 484, 485], "v": [20, 34, 74, 117, 136, 137, 138, 140, 143, 148, 162, 163, 175, 176, 180, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 461, 477, 485, 491], "dirichlet": [20, 82, 83, 195, 485], "outlet": [20, 485], "inlet": [20, 485], "partial_i": [20, 71, 180, 485], "gamma_": [20, 71, 485], "ij": [20, 71, 485], "partial_j": [20, 71, 180, 485], "imag": [20, 136, 138, 140, 141, 143, 173, 174, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483, 485], "screen": [20, 136, 138, 143, 411], "movi": [20, 485], "oh": [20, 188, 485], "anymor": [20, 485], "here": [20, 21, 39, 40, 52, 57, 81, 91, 117, 127, 129, 133, 136, 138, 161, 165, 166, 169, 170, 171, 188, 189, 222, 363, 377, 411, 427, 485, 490], "fvm": [20, 21, 485, 489], "cc": [20, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 126, 127, 129, 187, 485, 489], "vc": [20, 485, 489], "scheme": [20, 45, 46, 49, 50, 51, 59, 60, 81, 121, 122, 173, 174, 176, 180, 367, 374, 375, 378, 382, 389, 427, 485, 487, 489], "2022": [20, 485], "06": [20, 406, 485], "08": [20, 71, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 485], "01": [20, 31, 32, 33, 34, 74, 75, 78, 108, 111, 112, 113, 114, 124, 165, 166, 173, 174, 175, 180, 181, 222, 355, 397, 406, 420, 455, 458, 463, 464, 467, 468, 470, 471, 485], "02": [20, 80, 149, 160, 161, 165, 166, 173, 174, 222, 485, 491], "14": [20, 180, 181, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 477, 485, 487, 489, 491], "2019": [20, 485], "28": [20, 39, 138, 162, 163, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 406, 485, 491], "22": [20, 106, 175, 485, 491], "2016": [20, 485], "24": [20, 81, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 406, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 485, 491], "2015": [20, 485], "2013": [20, 485], "09": [20, 406, 485, 491], "2012": [20, 181, 485], "16": [20, 180, 181, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 356, 485, 489, 491], "2011": [20, 180, 485, 491], "05": [20, 72, 73, 111, 160, 173, 174, 180, 181, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 477, 485], "2008": [20, 485], "glossari": [20, 485, 486], "subpackag": [20, 492, 496], "method1": [20, 494, 495], "method2": [20, 494, 495], "doctest_raw_input": [20, 190], "boundarycondit": [20, 21, 36, 85, 86, 187, 188, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 431, 441, 451, 456], "nthorderboundarycondit": [20, 36, 85], "offsetsparsematrix": 20, "petscmatrix": 20, "pysparsematrix": 20, "scipymatrix": 20, "sparsematrix": [20, 199, 275, 363, 377], "trilinosmatrix": 20, "abstractmesh": [20, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "vtkcelldataset": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "vtkfacedataset": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "__div__": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406], "__getstate__": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 255, 256, 257, 329, 330, 331, 399, 400, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__radd__": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406], "__sub__": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406], "__truediv__": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406], "aspect2d": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "cellfaceid": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "facesback": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "facesbottom": [20, 52, 57, 82, 83, 117, 181, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "facesdown": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "facesfront": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "facesleft": [20, 36, 49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 67, 68, 74, 75, 77, 78, 81, 82, 83, 85, 94, 95, 111, 114, 117, 155, 181, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "facesup": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "meshadditionerror": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "__cause__": [20, 207, 222, 226, 251, 324, 358, 457], "__context__": [20, 207, 222, 226, 251, 324, 358, 457], "__delattr__": [20, 207, 222, 226, 251, 324, 358, 457], "__getattribute__": [20, 207, 222, 226, 251, 324, 358, 457], "__reduce__": [20, 207, 222, 226, 251, 324, 358, 457], "__setattr__": [20, 207, 222, 226, 251, 324, 358, 457], "__str__": [20, 207, 222, 226, 251, 252, 264, 294, 308, 321, 324, 327, 358, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457], "add_not": [20, 207, 222, 226, 251, 324, 358, 457], "with_traceback": [20, 207, 222, 226, 251, 324, 358, 457], "builder": [20, 229], "abstractgridbuild": 20, "grid1dbuild": [20, 229], "grid2dbuild": 20, "grid3dbuild": 20, "periodicgrid1dbuild": 20, "utilityclass": 20, "cylindricalgrid2d": [20, 59, 60, 221], "cylindricalnonuniformgrid1d": [20, 221], "__mul__": [20, 217, 218, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 247, 363, 366, 367, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 397, 406], "__rmul__": [20, 217, 218, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 247, 363, 366, 367, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 397, 406], "extrud": [20, 34, 156, 218, 222, 228, 230, 233, 239, 247], "cylindricaluniformgrid1d": [20, 221], "cylindricaluniformgrid2d": [20, 221], "sphericalgrid1d": [20, 221], "gmsh2din3dspac": [20, 34, 156, 189, 222], "gmshexcept": [20, 222], "gmshfile": [20, 222], "gmshgrid2d": [20, 222], "gmshgrid3d": [20, 102, 222], "mshfile": [20, 222], "makemapvari": [20, 222], "meshexporterror": [20, 222], "posfil": [20, 222], "gmshversion": [20, 222], "openmshfil": [20, 222], "openposfil": [20, 222], "nonuniformgrid2d": [20, 218, 221, 222, 228, 233, 239, 247], "nonuniformgrid3d": [20, 221], "periodicgrid1d": [20, 90], "periodicgrid2d": 20, "periodicgrid2dleftright": [20, 233], "periodicgrid2dtopbottom": [20, 233], "periodicgrid3dfrontback": [20, 234], "periodicgrid3dleftright": [20, 234], "periodicgrid3dleftrightfrontback": [20, 234], "periodicgrid3dleftrighttopbottom": [20, 234], "periodicgrid3dtopbottom": [20, 234], "periodicgrid3dtopbottomfrontback": [20, 234], "abstractrepresent": [20, 207, 248], "gridrepresent": [20, 229, 230, 231, 247, 249, 250], "meshrepresent": [20, 226, 227, 228], "physicalshap": [20, 239, 247], "sphericalnonuniformgrid1d": [20, 221], "sphericaluniformgrid1d": [20, 221], "topologi": [20, 206, 207, 226, 227, 228, 229, 230, 231, 247, 248, 249, 250, 487, 491], "abstracttopologi": [20, 207, 248], "gridtopologi": [20, 229, 230, 231, 249, 250], "meshtopologi": [20, 226, 227, 228, 247], "uniformgrid1d": [20, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 250, 367, 374, 375, 378, 382, 389, 390], "uniformgrid2d": [20, 220, 221, 367, 374, 375, 378, 382, 389, 390], "defaultasymmetricsolv": [20, 47, 52, 54, 56, 57, 61, 66, 108, 162, 175, 251], "dummysolv": [20, 176, 251, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "generalsolv": [20, 85, 137, 165, 166, 251], "serialsolvererror": [20, 251], "convergencebas": [20, 252], "tolerance_scal": [20, 252], "status_cod": [20, 252], "status_nam": [20, 252], "actual_cod": [20, 252, 264, 294, 308, 321, 327], "comm": 20, "parallelpetsccommwrapp": 20, "petsccommwrapp": [20, 255, 257], "serialpetsccommwrapp": 20, "default_iter": [20, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353], "default_precondition": [20, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353], "default_toler": [20, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353], "legacy_toler": [20, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 335, 336, 350, 351, 352, 353], "linearbicgsolv": 20, "linearcgssolv": [20, 63], "petscconverg": 20, "ksp_absolutetoleranceconverg": [20, 264], "ksp_breakdownbicgdiverg": [20, 264], "ksp_breakdowndiverg": [20, 264], "ksp_happybreakdownconverg": [20, 264], "ksp_indefinitematrixdiverg": [20, 264], "ksp_indefinitepreconditionerdiverg": [20, 264], "ksp_iteratingconverg": [20, 264], "ksp_iterationconverg": [20, 264], "ksp_iterationdiverg": [20, 264], "ksp_nanorinfdiverg": [20, 264], "ksp_nonsymmetricdiverg": [20, 264], "ksp_normalabsolutetoleranceconverg": [20, 264], "ksp_normalrelativetoleranceconverg": [20, 264], "ksp_nulldiverg": [20, 264], "ksp_preconditioningdiverg": [20, 264], "ksp_relativetoleranceconverg": [20, 264], "ksp_tolerancediverg": [20, 264], "petsckrylovsolv": [20, 259, 260, 261, 263], "petscsolv": [20, 258, 262, 265, 267, 268, 269, 270, 271, 272, 273, 274], "defaultprecondition": [20, 259, 260, 261, 263, 265, 267], "icprecondition": [20, 267, 337], "iluprecondition": [20, 267, 292, 317, 337], "jacobiprecondition": [20, 31, 267, 287, 288, 289, 291, 292, 298, 304, 317, 332, 337, 350], "luprecondition": [20, 267], "ssorprecondition": [20, 267, 302, 304], "petscprecondition": [20, 259, 260, 261, 263, 265, 267, 268, 269, 270, 271, 272, 274], "matrixmodifyingprecondition": [20, 275, 306, 320], "solvermodifyingprecondition": [20, 273, 275, 292, 349], "smoothedaggregationprecondition": [20, 277, 278, 281], "aggregationamgsolv": 20, "default_smooth": [20, 285, 286, 287, 288, 289, 291, 293], "classicalamgsolv": 20, "linearfgmressolv": 20, "amgprecondition": [20, 292], "aggregationamgprecondition": [20, 292], "bicgstabprecondition": [20, 292], "cgprecondition": [20, 292], "diluprecondition": [20, 292], "fgmresprecondition": [20, 292], "gaussseidelprecondition": [20, 292], "polynomialprecondition": [20, 292], "pyamgxprecondition": [20, 285, 286, 287, 288, 289, 291, 292, 293], "pyamgxsolv": [20, 285, 286, 287, 288, 289, 291, 292], "pyamgxconverg": 20, "pyamgx_breakdowndiverg": [20, 294], "pyamgx_converg": [20, 294], "pyamgx_iterationdiverg": [20, 294], "smoother": [20, 285, 286, 287, 288, 289, 291, 293, 337, 348, 351], "linearinitialsolv": [20, 298], "linearrhssolv": [20, 297, 302], "pysparseprecondition": [20, 297, 304, 305, 307], "pysparseconverg": 20, "pysparse_absolutetoleranceconverg": [20, 308], "pysparse_illconditioneddiverg": [20, 308], "pysparse_illconditionedpreconditionerdiverg": [20, 308], "pysparse_iterationdiverg": [20, 308], "pysparse_nonposdefpreconditioningdiverg": [20, 308], "pysparse_outofrangediverg": [20, 308], "pysparse_rhszeroconverg": [20, 308], "pysparse_relativetoleranceconverg": [20, 308], "pysparse_stagnateddiverg": [20, 308], "pysparsematrixsolv": [20, 309], "scipyprecondition": [20, 283, 317, 318, 319], "scipyconverg": 20, "scipy_breakdowndiverg": [20, 321], "scipy_converg": [20, 321], "scipy_iterationdiverg": [20, 321], "scipykrylovsolv": [20, 312, 313, 314, 316], "scipysolv": [20, 279, 283, 290, 315, 317, 318, 319, 320, 322], "breakdownwarn": [20, 324], "illconditionedpreconditionerwarn": [20, 324], "illegalinputorbreakdownwarn": [20, 324], "lossofprecisionwarn": [20, 324], "matrixillconditionedwarn": [20, 324], "maximumiterationwarn": [20, 324], "normalconverg": [20, 324], "parameterwarn": [20, 324], "preconditionernotpositivedefinitewarn": [20, 324], "preconditionerwarn": [20, 324], "scalarquantityoutofrangewarn": [20, 324], "solverconvergencewarn": [20, 324], "stagnatedsolverwarn": [20, 324], "aztecconverg": 20, "az_breakdowndiverg": [20, 327], "az_illconditioneddiverg": [20, 327], "az_iterationdiverg": [20, 327], "az_lossofaccuracyconverg": [20, 327], "az_normalconverg": [20, 327], "az_parameterdiverg": [20, 327], "epetracommwrapp": [20, 330, 331], "parallelepetracommwrapp": 20, "maxal": [20, 330], "minal": [20, 330], "serialepetracommwrapp": 20, "domdecompprecondition": [20, 337, 340], "multilevelddmlprecondition": [20, 337], "multilevelddprecondition": [20, 333, 334, 336, 337], "multilevelnssaprecondition": [20, 337], "multilevelsaprecondition": [20, 337], "multilevelsgsprecondition": [20, 333, 336, 337], "multilevelsolversmootherprecondition": [20, 337], "multilevelprecondition": [20, 337, 342, 343, 344, 346, 347, 348], "trilinosprecondition": [20, 337, 338, 339, 341, 345], "trilinosaztecoosolv": [20, 332, 333, 334, 336], "trilinosmltest": 20, "trilinosnonlinearsolv": 20, "trilinossolv": [20, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352], "stepper": 20, "l1error": [20, 354], "l2error": [20, 354], "linferror": [20, 354], "sweepmonoton": [20, 354], "pidstepp": 20, "pseudorkqsstepp": 20, "abstractbaseclasserror": [20, 358], "explicitvariableerror": [20, 358], "incorrectsolutionvari": [20, 358], "solutionvariablenumbererror": [20, 358], "solutionvariablerequirederror": [20, 358], "termmultiplyerror": [20, 358], "transienttermerror": [20, 358, 367, 374, 375, 378, 382, 389, 390], "vectorcoefferror": [20, 358, 367, 374, 375, 378, 382, 389, 390], "abstractbinaryterm": 20, "abstractconvectionterm": 20, "abstractdiffusionterm": 20, "abstractupwindconvectionterm": 20, "advectionterm": [20, 121, 122, 124, 126, 128, 137], "rhsvector": [20, 117, 354, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "__eq__": [20, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__hash__": [20, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__neg__": [20, 363, 366, 367, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 397, 406], "cachematrix": [20, 117, 180, 181, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "cacherhsvector": [20, 117, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "justresidualvector": [20, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "residualvectorandnorm": [20, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "asymmetricconvectionterm": 20, "binaryterm": 20, "centraldiffconvectionterm": 20, "centraldifferenceconvectionterm": [20, 180, 181, 367, 487], "coupledbinaryterm": 20, "diffusiontermcorrect": [20, 71], "explicitdiffusionterm": [20, 77, 78, 81, 161, 165, 166, 487], "explicitsourceterm": 20, "explicitupwindconvectionterm": [20, 367, 375, 378, 382, 389, 390, 487], "exponentialconvectionterm": [20, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 65, 66, 187, 487], "faceterm": 20, "firstorderadvectionterm": [20, 121, 122, 124, 126, 128, 363], "hybridconvectionterm": [20, 487], "nondiffusionterm": 20, "residualterm": 20, "sourceterm": [20, 380, 383], "unaryterm": 20, "upwindconvectionterm": [20, 487], "testfipi": 20, "doctestplu": 20, "execbutnotest": [20, 393], "report_skip": [20, 393], "testmod": [20, 393], "lateimporttest": 20, "deprecationerroringtestprogram": [20, 395], "finalize_opt": [20, 395], "initialize_opt": [20, 395], "testprogram": [20, 395], "serialcomm": [20, 71, 122, 124, 126, 128, 137, 221, 222, 397, 427], "parallelcomm": [20, 221, 222, 397, 413], "__abs__": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__array_wrap__": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__bool__": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__float__": [20, 397, 406], "__ge__": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__getitem__": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__gt__": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__le__": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__lt__": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__mod__": [20, 397, 406], "__ne__": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__nonzero__": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__pow__": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__setitem__": [20, 397, 406], "allclos": [20, 32, 36, 39, 40, 47, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 75, 77, 78, 80, 81, 82, 83, 85, 86, 90, 91, 94, 95, 97, 99, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 127, 128, 129, 133, 137, 148, 149, 150, 155, 161, 162, 163, 165, 166, 169, 170, 171, 175, 176, 177, 180, 187, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 377, 387, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "allequ": [20, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "arcco": [20, 397, 406], "arccosh": [20, 397, 406], "arcsin": [20, 72, 73, 397, 406], "arctan": [20, 160, 161, 173, 174, 397, 406], "arctan2": [20, 160, 161, 173, 174, 397, 406], "arctanh": [20, 397, 406], "ceil": [20, 397, 406], "conjug": [20, 82, 83, 260, 292, 297, 302, 397, 406, 487], "converttounit": [20, 397, 406], "co": [20, 39, 71, 72, 73, 140, 397, 406, 458, 461, 470, 471], "cosh": [20, 111, 397, 406], "floor": [20, 397, 406], "getsctyp": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "inbaseunit": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "indimensionless": [20, 397, 406], "inradian": [20, 397, 406], "insiunit": [20, 397, 406], "inunitsof": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "itemset": [20, 397, 406], "log10": [20, 397, 406], "numericvalu": [20, 397, 406], "sin": [20, 71, 81, 140, 188, 397, 406, 458, 461, 463, 464, 465, 467, 468, 470, 471, 487], "sinh": [20, 397, 406], "sum": [20, 71, 148, 149, 150, 221, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "tan": [20, 160, 161, 173, 174, 397, 406, 411], "tanh": [20, 112, 176, 397, 406], "tostr": [20, 397, 406, 411], "commwrapp": [20, 221, 222, 256, 329, 397, 400, 407, 413], "dummycomm": [20, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 233, 234, 240, 241, 249, 250, 397, 407, 413], "decor": 20, "dictwithdefault": 20, "numberdict": 20, "physicalunit": [20, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__rdiv__": [20, 406], "__rtruediv__": [20, 406], "conversionfactorto": [20, 406], "conversiontupleto": [20, 406], "isangl": [20, 406], "iscompat": [20, 406], "isdimensionless": [20, 406], "isdimensionlessorangl": [20, 406], "isinverseangl": [20, 406], "setnam": [20, 406], "conda_info": [20, 410], "package_info": [20, 410], "platform_info": [20, 410], "l1norm": [20, 354, 411], "l2norm": [20, 411], "linfnorm": [20, 411], "getshap": [20, 411], "getunit": [20, 411], "isclos": [20, 411], "nearest": [20, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "sqrtdot": [20, 411], "parser": [20, 137, 155, 165], "pars": [20, 137, 155, 165, 222, 412, 472], "sharedtempfil": 20, "prune": [20, 415], "putadd": [20, 415], "arithmeticcelltofacevari": 20, "betanoisevari": 20, "__and__": [20, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__call__": [20, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__new__": [20, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__or__": [20, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__setstate__": [20, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "cellvolumeaverag": [20, 39, 40, 71, 162, 163, 180, 181, 222, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "constraintmask": [20, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "gaussgrad": [20, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "harmonicfacevalu": [20, 108, 109, 110, 111, 113, 162, 163, 175, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "leastsquaresgrad": [20, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "minmodfacevalu": [20, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "rdot": [20, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "scrambl": [20, 420, 428, 432, 434, 448, 455], "std": [20, 222, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "binaryoperatorvari": [20, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "celltofacevari": 20, "constant": [20, 31, 32, 50, 56, 57, 60, 68, 81, 110, 137, 138, 143, 162, 163, 175, 188, 220, 250, 393, 406, 411, 487], "coupledcellvari": 20, "calcdistancefunct": [20, 122, 124, 126, 127, 128, 129, 137, 140, 141, 150, 427], "cellinterfacearea": [20, 148, 427], "extendvari": [20, 137, 149, 427], "exponentialnoisevari": 20, "facegradcontributionsvari": 20, "facegradvari": [20, 117], "gammanoisevari": 20, "gausscellgradvari": 20, "gaussiannoisevari": [20, 31, 32, 33, 34], "harmoniccelltofacevari": 20, "histogramvari": [20, 420, 428, 432, 434, 455], "interfaceareavari": 20, "interfaceflagvari": 20, "leastsquarescellgradvari": 20, "levelsetdiffusionvari": 20, "meshvari": [20, 188, 222, 367, 374, 375, 378, 382, 389, 390, 411, 420, 423, 427, 428, 431, 432, 434, 436, 447, 448, 450, 451, 452, 455, 459, 467, 468, 477, 479, 481, 482, 483], "minmodcelltofacevari": 20, "modcellgradvari": 20, "modcelltofacevari": 20, "modfacegradvari": 20, "modphysicalfield": 20, "modularvari": [20, 165, 166, 173, 174], "facegradnomod": [20, 165, 166, 173, 174, 447], "operatorvari": 20, "scharfettergummelfacevari": 20, "surfactantconvectionvari": 20, "surfactantvari": [20, 137, 148, 149, 150], "interfacevar": [20, 133, 137, 149, 452], "unaryoperatorvari": [20, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "uniformnoisevari": 20, "dummyview": [20, 457], "plotmesh": [20, 72, 73, 140, 141, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "setlimit": [20, 140, 141, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "meshdimensionerror": [20, 457], "abstractmatplotlib2dview": [20, 462, 463, 464, 465, 467, 468], "cmap": [20, 140, 160, 173, 174, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468], "fig": [20, 140, 173, 174, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468], "abstractmatplotlibview": [20, 140, 459, 461], "matplotlib1dview": 20, "matplotlib2dcontourview": 20, "matplotlib2dgridcontourview": 20, "matplotlibsparsematrixview": 20, "matplotlibstreamview": 20, "kwarg": [20, 217, 218, 219, 220, 232, 233, 234, 239, 240, 241, 252, 264, 285, 286, 287, 288, 289, 291, 292, 293, 294, 308, 321, 327, 354, 402, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 467, 472], "mayaviview": 20, "fp": [20, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 461, 463, 464, 465, 467, 468, 470, 471], "mayavidaemon": [20, 34, 470, 471], "parse_command_lin": [20, 472], "setup_sourc": [20, 472], "update_pipelin": [20, 472], "view_data": [20, 472], "testinteract": 20, "abstractview": [20, 141, 457, 460, 470, 471, 474, 477, 478, 483], "vtkcellview": [20, 479], "vtkfaceview": [20, 479], "tanh1d": 20, "explicitupwind": 20, "implicitupwind": 20, "vanleerupwind": 20, "cylindricalmesh1d": 20, "cylindricalmesh1dnonuniform": 20, "exponential1dback": 20, "exponential2d": 20, "cylindricalmesh2d": 20, "cylindricalmesh2dnonuniform": 20, "peclet": 20, "powerlaw1d": 20, "mesh20x20coupl": 20, "input4thorder_lin": 20, "inputperiod": 20, "tri2dinput": 20, "gmshinput": 20, "isotropi": 20, "modifiedmeshinput": 20, "orthoerror": 20, "mesh50x50": 20, "othermesh": 20, "prism": [20, 231], "mesh1ddimension": 20, "phasediffus": 20, "poisson": [20, 75, 106, 111], "interior": [20, 93, 161], "squar": [20, 45, 46, 47, 78, 82, 117, 176, 177, 222, 260, 297, 397, 406, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "adsorbingsurfactantequ": [20, 137], "adsorpt": [20, 137, 138], "gapfilldistancevari": 20, "gapfillmesh": 20, "matplotlibsurfactantview": [20, 137], "mayavisurfactantview": [20, 137], "metaliondiffusionequ": [20, 137], "surfactantbulkdiffusionequ": [20, 137], "trenchmesh": 20, "expandingcircl": 20, "gmshrefin": 20, "inputgrid2d": 20, "anisotropyold": 20, "missorient": 20, "modcircl": 20, "riemann": 20, "customiz": 21, "poli": 21, "deposit": [21, 137, 138, 143], "unusu": 21, "philosophi": 21, "algorithm": [21, 117, 177, 356, 491], "deform": 21, "tractabl": 21, "li": [21, 491], "encapsul": [21, 143, 207, 255, 256, 329, 330, 399, 487, 494], "tight": 21, "extend": [21, 162, 163, 427, 491], "reus": [21, 165], "overridden": [21, 395], "categori": [21, 247], "lower": [21, 162, 163, 431, 450, 451, 457], "aim": [21, 487], "tier": 21, "reassur": 21, "breakag": 21, "aid": 21, "dissemin": 21, "year": [21, 188, 189, 355], "movement": [21, 176], "matter": [21, 31, 32], "furthermor": 21, "broadli": 21, "lump": 21, "human": [21, 397, 406], "readabl": [21, 189, 397, 406, 423, 431, 441, 447, 448, 450, 456], "provok": 21, "real": [21, 160, 173, 174, 411], "low": [21, 487, 490], "closer": 21, "programm": 21, "awai": [21, 117, 427], "extern": 21, "acol": 21, "brow": 21, "malloc": 21, "sizeof": 21, "bcol": 21, "arow": 21, "worri": [21, 188], "needn": 21, "paramount": 21, "concern": [21, 324], "scenario": 21, "draft": 21, "hundr": 21, "recompil": 21, "relink": 21, "eventu": [21, 136, 143, 161], "imposs": 21, "rememb": [21, 434], "scientist": [21, 190, 484], "begun": 21, "expertis": 21, "spent": 21, "contrast": [21, 31, 32], "tcl": 21, "java": 21, "rubi": 21, "vener": 21, "immedi": [21, 138], "someon": 21, "fledg": 21, "ground": 21, "runtim": 21, "unquestion": 21, "proport": [21, 137, 160, 173, 174, 355], "month": 21, "diagnos": 21, "critic": [21, 31, 32], "palat": 21, "acknowledg": 21, "remark": [21, 488], "usabl": 21, "mathematician": 21, "scientificpython": [21, 406, 484], "easili": [21, 81, 113, 175, 484], "blitz": 21, "pyrex": [21, 484], "brief": [21, 393], "terminologi": 21, "assign": [21, 81, 395, 397, 406, 495], "lazi": [21, 417], "elimin": [21, 74, 81, 180], "entiti": 21, "beyond": 21, "bound": [21, 188], "vertic": [21, 72, 73, 117, 218, 221, 226, 227, 228, 230, 231, 233, 234, 239, 247, 250, 411, 458, 462, 463, 464, 465, 487], "_sparsematrix": [21, 354, 466], "invert": 21, "fashion": 21, "footnot": [21, 162, 163], "neglect": [21, 162, 163], "byte": 21, "prefix": [22, 81, 397, 406, 413], "ld_library_path": 22, "colon": 22, "search": [22, 188, 457, 458, 479], "elf": 22, "dyld_library_path": 22, "linker": 22, "phenomenon": [31, 32, 34], "spontan": [31, 32, 176], "mixtur": [31, 32, 81], "region": [31, 32, 127, 128, 135, 137, 150, 160, 161, 165, 173, 174, 176, 177, 462, 463], "spin": [31, 32], "barrierless": [31, 32], "fluctuat": [31, 32, 33, 34, 160, 173, 174], "grow": [31, 32, 160, 173, 174], "exce": [31, 32], "surviv": [31, 32], "ginsberg": [31, 32, 160, 173, 174], "landau": [31, 32, 160, 173, 174], "hohenberg": [31, 32, 160, 173, 174], "halperin": [31, 32, 160, 173, 174], "epsilon": [31, 32, 33, 34, 36, 75, 106, 112, 114, 165, 166, 169, 170, 171, 173, 174, 180, 181], "possibli": [31, 32, 399, 457], "composit": [31, 32, 135, 162, 163], "doubl": [31, 32, 106, 175, 176], "energi": [31, 32, 36, 106, 112, 162, 163, 175, 176, 180, 181, 337, 344, 491], "penal": [31, 32], "abrupt": [31, 32], "smooth": [31, 32, 137, 140, 141, 160, 173, 174, 337, 343, 344, 346, 347], "transit": [31, 32, 135, 491], "weight": [31, 32, 162, 163, 165, 194, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 468, 487, 489], "augment": [31, 32, 411], "__name__": [31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 393, 420, 428, 432, 434, 455], "__main__": [31, 32, 33, 34, 36, 39, 40, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 75, 77, 78, 81, 82, 83, 85, 90, 94, 95, 105, 108, 109, 110, 111, 112, 113, 114, 117, 121, 122, 124, 126, 128, 137, 155, 156, 160, 161, 162, 163, 165, 166, 173, 174, 175, 176, 177, 180, 181, 187, 393, 395, 396, 420, 428, 432, 434, 455], "ny": [31, 32, 33, 40, 52, 57, 61, 62, 78, 80, 82, 83, 94, 100, 102, 110, 117, 121, 124, 126, 137, 140, 141, 155, 160, 161, 165, 173, 174, 177, 181, 187, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 367, 374, 375, 377, 378, 382, 389, 390, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 463, 464, 465, 467, 468, 470, 471, 477], "500": [31, 85, 111, 160, 161, 468], "els": [31, 32, 33, 34, 36, 39, 40, 67, 78, 85, 110, 111, 117, 137, 160, 162, 163, 173, 174, 176, 180, 181, 393, 472], "dy": [31, 32, 33, 40, 52, 57, 78, 80, 82, 83, 102, 110, 117, 121, 124, 126, 127, 129, 137, 140, 141, 155, 160, 161, 165, 173, 174, 177, 181, 188, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 367, 374, 375, 377, 378, 382, 389, 390, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 458, 463, 464, 465, 467, 468, 470, 471, 477], "varianc": [31, 32, 33, 34, 434], "__mainy__": 31, "microstructur": [31, 32, 33, 34, 491], "exponenti": [31, 32, 33, 34, 136, 375, 406, 428, 490], "dexp": [31, 32, 33, 34, 36], "durat": [31, 32, 33, 34], "exp": [31, 32, 33, 34, 36, 49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 137, 138, 162, 163, 165, 166, 173, 174, 187, 188, 189, 428, 432, 434, 490], "__mainys__": 31, "elif": 31, "formul": [32, 74, 490], "enorm": [32, 81], "amount": [32, 239], "psi": [32, 75, 114, 160, 161, 173, 174, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "nois": [32, 160, 173, 174, 180, 420, 428, 432, 434, 448, 455], "taylor": [32, 176, 491], "expans": [32, 149, 176], "phi_": [32, 176, 363, 387, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "dfdphi": 32, "dfdphi_": 32, "d2fdphi2": 32, "eq1": [32, 47, 74], "eq2": [32, 47], "eq3": 32, "press": [32, 63, 68, 72, 73, 75, 81, 82, 83, 90, 111, 114, 162, 163, 176, 180, 491], "elementshap": [32, 74, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "v0": [32, 74, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "impcoeff": 32, "cube": 33, "nz": [33, 59, 60, 102, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 470, 471, 484], "dz": [33, 59, 60, 102, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 470, 471], "vesicl": 34, "youtub": 34, "watch": 34, "kdsfp67_zse": 34, "cellsiz": [34, 72, 73, 95, 137, 138, 143, 156, 222], "t1": [34, 156], "pi": [34, 39, 71, 156, 160, 161, 165, 166, 171, 173, 174, 397, 406, 427, 434, 447, 458, 461, 470, 471], "duplicata": [34, 156], "t2": [34, 156], "t3": [34, 156], "t4": [34, 156], "t5": [34, 156], "t6": [34, 156], "t7": [34, 156], "outer": [34, 156, 162, 163, 222], "overlap": [34, 207, 217, 218, 219, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 487], "extrudefunc": [34, 156, 218, 222, 228, 230, 233, 239, 247], "lambda": [34, 156, 218, 222, 228, 230, 233, 239, 247], "daemon_fil": [34, 470, 471], "xmin": [34, 117, 140, 141, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "zmax": [34, 140, 141, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "asq": 36, "facevar": 36, "freeenergydoublederiv": 36, "diffterm2": 36, "diffterm4": 36, "eqch": 36, "solver_suit": [36, 85], "builtin": [36, 39, 40, 47, 63, 71, 72, 73, 74, 77, 78, 80, 81, 82, 83, 108, 109, 110, 111, 112, 113, 117, 121, 122, 124, 133, 137, 140, 148, 149, 150, 160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 222, 330, 387, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 463, 464, 465, 467, 468, 470, 471], "maxarg": 36, "argmax": 36, "atol": [36, 39, 40, 47, 49, 50, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 75, 77, 78, 81, 82, 83, 86, 94, 95, 100, 102, 105, 108, 109, 110, 111, 112, 113, 114, 121, 124, 127, 162, 163, 165, 175, 176, 177, 187, 252, 363, 377, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__future__": [39, 40], "param": [39, 40], "kmvar": [39, 40], "km": [39, 40, 397, 406], "kcvar": [39, 40], "kc": [39, 40], "tmvar": [39, 40], "tcvar": [39, 40], "tc": [39, 40], "p3var": [39, 40], "p3": [39, 40], "p2var": [39, 40], "p2": [39, 40], "rvar": [39, 40], "pn": [39, 40], "kmsccoeff": [39, 40], "chik": [39, 40], "kmspcoeff": [39, 40], "lambdak": [39, 40], "kappak": [39, 40], "kmeq": [39, 40], "tmsccoeff": [39, 40], "chit": [39, 40], "tmspcoeff": [39, 40], "lambdat": [39, 40], "zetat": [39, 40], "tmeq": [39, 40], "tcsccoeff": [39, 40], "tcspcoeff": [39, 40], "lambdatstar": [39, 40], "tceq": [39, 40], "pip2pitp": [39, 40], "kappam": [39, 40], "kappac": [39, 40], "zetapitp": [39, 40], "p3spcoeff": [39, 40], "lambda3": [39, 40], "zeta3t": [39, 40], "p3sccoeff": [39, 40], "chi3": [39, 40], "kappa3": [39, 40], "zeta3pitp": [39, 40], "zeta3": [39, 40], "p3eq": [39, 40], "p2sccoeff": [39, 40], "sccoeff": [39, 40], "chi2": [39, 40], "p2spcoeff": [39, 40], "lambda2": [39, 40], "zeta2t": [39, 40], "p2eq": [39, 40], "kcsccoeff": [39, 40], "alphakstar": [39, 40], "kcspcoeff": [39, 40], "lambdakstar": [39, 40], "kappakstar": [39, 40], "kceq": [39, 40], "pnview": [39, 40], "kmview": [39, 40], "tmview": [39, 40], "naem": [39, 40], "kmviewer": [39, 40], "stimulu": 39, "pnviewer": 40, "tmviewer": 40, "puls": [45, 46], "gre": [47, 491], "ac": [47, 484, 491], "uk": [47, 491], "physica": 47, "phy2": 47, "node173": 47, "htm": 47, "wave": [47, 74], "van": [47, 180, 491], "leer": 47, "twice": 47, "wrap": [47, 248, 447], "var2": [47, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 477], "lost": 47, "annulu": [49, 50, 59, 60], "r0": [49, 50, 59, 60], "r1": [49, 50, 59, 60, 124], "nr": [49, 50, 59, 60, 221], "dr": [49, 50, 59, 60, 221], "valueleft": [49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 77, 78, 80, 81, 90, 91, 94, 95, 97, 99, 100, 102, 187], "valueright": [49, 50, 51, 54, 56, 59, 60, 61, 62, 63, 65, 66, 78, 80, 81, 90, 91, 94, 95, 97, 99, 100, 102, 187], "impos": [49, 50, 51, 56, 59, 60, 85, 121, 148, 187, 192, 194, 195, 196, 363], "r_0": [49, 50, 59, 60, 149], "r_1": [49, 50, 59, 60], "drawback": [49, 50, 51, 59, 60, 187], "ei": [49, 50, 59, 60], "expi": [49, 50, 59, 60], "aa": [49, 50, 56, 57, 59, 60, 126, 127, 129, 363], "bb": [49, 50, 56, 57, 59, 60, 126, 127, 129], "analyticalarrai": [49, 50, 51, 52, 54, 56, 57, 59, 60, 61, 62, 63, 65, 66, 77, 91, 94, 95, 97, 99, 100, 102, 112, 114, 176, 187], "rratio": [50, 60], "arang": [50, 60, 111, 124, 173, 174, 363, 377, 415, 420, 427, 428, 432, 434, 461, 467, 468, 470, 471], "imath": 51, "u_x": [51, 56, 181, 187], "dd": [51, 52, 54, 56, 57, 61, 62, 63, 65, 66, 187], "valuebottom": [52, 57], "valuetop": [52, 57], "rtol": [52, 54, 56, 61, 62, 63, 65, 66, 67, 75, 80, 81, 85, 90, 97, 99, 105, 108, 109, 110, 111, 112, 113, 114, 133, 137, 165, 175, 176, 187, 252, 264, 308, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "s_0": [56, 176, 487], "sourcecoeff": [56, 57, 165, 166], "s_c": 57, "pseudo": [59, 60], "allcloselist": 63, "str": [63, 111, 140, 141, 207, 222, 226, 251, 252, 264, 294, 308, 321, 324, 327, 358, 393, 397, 402, 406, 407, 410, 411, 412, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 477, 478, 479, 481, 482, 483], "1e4": 63, "arg0": 63, "arg1": [63, 494, 495], "append": [63, 190, 222, 407, 412], "2000": [66, 165, 187, 277, 278, 281], "4d": 67, "precaut": 67, "convectioncoeff": [67, 108, 109, 110, 111, 113, 175, 187], "canalyt": 67, "c_": [67, 75, 106, 112, 114, 133, 137, 143, 162, 163, 175], "restol": 67, "anstol": 67, "alpha": [68, 81, 137, 143, 160, 161, 165, 166, 169, 170, 171, 173, 174, 188, 420, 432], "outflow": 68, "artifici": 68, "unitari": 68, "5000": [68, 468], "phi0": [68, 387], "fake": 68, "pmatrix": 71, "theta": [71, 133, 136, 137, 143, 148, 149, 160, 161, 165, 166, 169, 170, 171, 173, 174, 487], "q": [71, 138, 173, 174, 177, 317, 318, 319, 491], "00": 71, "mass": [71, 117, 162, 163, 180], "previous": [71, 136, 138, 143, 180, 222, 427], "splitext": [71, 161, 165, 166, 169, 170, 171], "__file__": [71, 137, 161, 165, 166, 169, 170, 171], "argmin": [71, 124], "rotationmatrix": 71, "gamma_prim": 71, "001": [71, 111, 406], "cellvolum": [71, 117, 148, 149, 155, 217, 222, 240, 434], "00025": 71, "triangl": [72, 247], "edg": [72, 73, 117], "plane": [72, 73, 95, 222], "timestepdur": [72, 73, 77, 78, 80, 81, 82, 83, 121, 122, 124, 148, 149, 150, 161, 165, 166, 169, 170, 171], "mytsv": [72, 73], "tsv": [72, 73, 111, 457], "variable_grad_x": [72, 73], "variable_grad_i": [72, 73], "975559734792414": [72, 73], "0755414402612554": [72, 73], "964844363287199": [72, 73], "229687917881182": [72, 73], "00757854476106331": [72, 73], "0442864953037566": [72, 73], "79191893162384": [72, 73], "0375859836421991": [72, 73], "773936613923853": [72, 73], "205560697612547": [72, 73], "0246775505084069": [72, 73], "771959648896982": [72, 73], "020853932412869": [72, 73], "723540342405813": [72, 73], "182589694334729": [72, 73], "223345558247991": [72, 73], "807931073108895": [72, 73], "203035857140125": [72, 73], "777466238738658": [72, 73], "0401235242511506": [72, 73], "00726763301939488": [72, 73], "775978916110686": [72, 73], "00412895434496877": [72, 73], "650055516507232": [72, 73], "183112882869288": [72, 73], "0220279064527904": [72, 73], "187563765977912": [72, 73], "012771874945585": [72, 73], "35707168379437": [72, 73], "056072788439713": [72, 73], "111223320911545": [72, 73], "679586798311355": [72, 73], "0911595298310758": [72, 73], "613455176718145": [72, 73], "0256182541329463": [72, 73], "78996770899909": [72, 73], "0173672729866294": [72, 73], "693887874335319": [72, 73], "00671109050419": [72, 73], "127611490372511": [72, 73], "703545986179876": [72, 73], "435813500559859": [72, 73], "635004192597412": [72, 73], "896203033957194": [72, 73], "00855563518923689": [72, 73], "888641841567831": [72, 73], "408558914368324": [72, 73], "877939107374768": [72, 73], "32195762184087": [72, 73], "22696791637322": [72, 73], "38212257821916": [72, 73], "51732949653553": [72, 73], "292889724306196": [72, 73], "854466141879776": [72, 73], "199715815696975": [72, 73], "359068256998365": [72, 73], "757882581524374": [72, 73], "323541041763627": [72, 73], "870534227755687": [72, 73], "0792631912863636": [72, 73], "459673905457569": [72, 73], "701526587772079": [72, 73], "417577664032421": [72, 73], "725460726303266": [72, 73], "119132299176163": [72, 73], "338256179134518": [72, 73], "523565732643067": [72, 73], "254030052182524": [72, 73], "923505840608445": [72, 73], "192224240688976": [72, 73], "87498754712638": [72, 73], "174119064688993": [72, 73], "836057900916614": [72, 73], "11590500805745": [72, 73], "211010116496191": [72, 73], "484106960369249": [72, 73], "0705987421869745": [72, 73], "319827850867342": [72, 73], "867894407968447": [72, 73], "051246727010685": [72, 73], "0221203060940465": [72, 73], "216026820080053": [72, 73], "0152729438559779": [72, 73], "341246696530392": [72, 73], "0538476142281317": [72, 73], "complic": [72, 73, 143], "horizont": [72, 73, 218, 221, 230, 233, 234, 239, 247, 250, 411], "phianalyt": [72, 73, 81], "x0": [72, 73, 162, 163], "erf": [72, 73, 77, 78, 81], "ticket": [72, 73, 363, 366, 367, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390, 407], "325": [72, 73], "7e": [72, 73, 81, 121, 162, 163, 176], "equal": [72, 73, 155, 162, 163, 175, 180, 247, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 487, 489], "quadrangl": 73, "recombin": 73, "035": 73, "biharmon": 74, "v_0": 74, "v_1": 74, "cross": [74, 427], "v1": [74, 126, 127, 129, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "eq0": 74, "vi": 74, "res0": 74, "res1": 74, "1e100": 74, "uncoupl": 74, "advantag": [74, 162, 163, 175, 188, 190, 487, 494], "simultan": [74, 160, 163, 173, 174, 474], "dictat": 74, "speci": [74, 106, 108, 111, 112, 113, 114, 137, 162, 163, 175, 488], "obvious": 74, "permitt": [75, 111, 114], "c_j": [75, 106, 108, 112, 114, 175], "th": [75, 108, 114], "valenc": [75, 106, 108, 109, 110, 111, 113, 114], "z_j": [75, 106, 114], "z_": [75, 106, 114], "electron": [75, 106, 111, 114, 175], "charg": [75, 106, 111, 114, 137, 138, 143], "densiti": [75, 81, 114, 136, 137, 138, 143, 162, 163, 175, 180, 181, 222, 452, 467, 491], "admit": [75, 114], "2x": [75, 114], "2e": [75, 77, 81, 108, 113, 114, 162, 163, 176], "next": [75, 81, 111, 114, 149, 411], "le": [75, 81, 113, 114, 124, 127, 129, 137, 166, 169, 170, 171, 173, 174, 175, 176, 177, 363, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "verifi": [75, 108, 109, 110, 112, 114, 162, 163, 180, 387], "attain": [75, 112, 114, 180], "initialvalu": 77, "epsi": 77, "triangular": [78, 95, 97, 102, 247], "gridmesh": 78, "trimesh": [78, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "othergridmesh": 78, "bigmesh": 78, "semi": [78, 81, 165, 166, 175, 176, 222], "late": [78, 395], "straight": [78, 81], "varanalyt": 78, "explicitdiffusionequ": 80, "assembl": [81, 176, 187], "uniti": [81, 489], "somefac": 81, "ever": [81, 188, 495], "differenc": [81, 367, 420, 423, 427, 428, 432, 434, 436, 448, 452, 455, 490], "phi_new": 81, "phi_old": 81, "eqx": 81, "delta": [81, 106, 112, 138, 143, 160, 162, 163, 173, 174, 176, 180, 387, 434, 487], "accomplish": 81, "tester": 81, "eqi": 81, "rerun": [81, 110], "crank": [81, 487], "nicholson": 81, "eqcn": 81, "drive": 81, "3e": [81, 111, 113, 137, 160, 161, 173, 174, 175, 180, 181], "omit": [81, 138, 176, 495], "del": [81, 140, 141, 431, 441, 450, 451, 456], "faceconstraint": 81, "lie": [81, 477, 487], "n_i": 81, "satisfi": [81, 117, 252, 427, 489, 490], "satisfactori": 81, "fluxright": 81, "9l": 81, "And": [81, 111, 117, 397, 406], "transfer": [81, 137, 138, 143, 491], "_p": [81, 117, 363, 377, 487], "capac": 81, "phit": 81, "phif": 81, "relev": [81, 222], "alpha_fals": 81, "eqf": 81, "eqt": 81, "forward": 81, "told": [81, 187], "d_0": 81, "d0": 81, "exit": [81, 395, 396], "criteria": [81, 264, 308], "balanc": 81, "art": [81, 491], "pitfal": 81, "dissip": [81, 180], "uniformli": 81, "vmatrix": 81, "1em": 81, "ddot": 81, "vdot": 81, "legitim": 81, "1e6": [81, 137], "myexampl": 81, "valuetopleft": [82, 83], "valuebottomright": [82, 83], "corner": [82, 83, 110, 117, 165, 222, 247], "facestopleft": [82, 83], "facesbottomright": [82, 83], "alpha_1": 85, "alpha_2": 85, "alpha_3": 85, "alpha_4": 85, "alpha1": 85, "alpha2": 85, "alpha3": 85, "alpha4": 85, "total": [86, 106, 175, 247, 397, 406, 411], "initialarrai": [90, 121, 188], "gather": 91, "errorvar": 95, "nonorthovar": 95, "_nonorthogon": 95, "errorview": 95, "noview": 95, "rm": 96, "xface": 102, "000000000000001": 102, "027": 102, "mesh2x1": 105, "paper": 106, "m_": [106, 112, 162, 163, 175, 176], "overbrac": [106, 175], "mu_j": [106, 175], "circ": [106, 112, 175], "w_j": [106, 175], "dielectr": 106, "ldot": [106, 175, 487], "d_": [106, 108, 117, 137, 143, 162, 163, 175, 363, 372, 377, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "substack": [106, 108, 175], "c_k": [106, 108, 175], "c_i": [106, 108, 138, 175], "c_n": [106, 175], "mu_": [106, 112], "jn": [106, 112], "w_": [106, 112], "electromigr": [106, 110, 111, 113], "electrod": [106, 112, 137], "electrolyt": [106, 112, 136, 137, 138], "barrier": [106, 108, 109, 110, 111, 112, 113, 114, 162, 163, 175, 176, 397, 413], "solvent": [106, 108, 109, 110, 111, 112, 113, 175], "unresolv": 106, "stiff": 106, "intract": 106, "jj": 108, "summat": [108, 487], "exclud": [108, 160], "ternari": [108, 109, 110, 113], "componentvari": [108, 109, 110, 111, 112, 113, 114], "standardpotenti": [108, 109, 110, 111, 112, 113, 114, 175], "__class__": [108, 109, 110, 111, 112, 113, 114], "cn": [108, 109, 110, 112, 113, 175], "c1": [108, 109, 110, 113, 175, 431, 441, 450, 451, 456], "c2": [108, 109, 110, 113, 175], "interstiti": [108, 109, 110, 111, 112, 113, 114, 175], "regim": [108, 109, 110, 112, 133], "cj": [108, 109, 110, 111, 113, 114, 175], "cksum": [108, 109, 110, 111, 113, 175], "ckfacesum": [108, 109, 110, 111, 113], "ck": [108, 109, 110, 111, 113, 175], "3200": 108, "h82b89f7_0": 108, "ceas": 108, "ok": [108, 356], "tsupport": 109, "incomplet": [109, 267, 269, 337, 339], "tit": 109, "mm": [109, 126, 127, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "mol": [109, 111, 138, 143, 162, 163, 175, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "pprime": [110, 111, 113, 162, 163, 175], "gprime": [110, 111, 113, 162, 163, 175], "counterdiffus": [110, 111, 113, 175], "phasetransform": [110, 111, 113, 175], "tol": 110, "input1dphasebinari": 111, "elphf0214": 111, "rt": 111, "nav": [111, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "kb": [111, 406], "molarvolum": [111, 137, 138, 143], "80000006366754e": 111, "faradai": [111, 137, 138, 143], "nm": 111, "1200": 111, "gradientenergi": [111, 112, 113, 175], "6e": [111, 137], "h2o": 111, "cnstandardpotenti": 111, "34139": 111, "7265625": 111, "cnbarrier": 111, "6e5": 111, "cnvalenc": 111, "so4": 111, "24276": 111, "6640625": 111, "000010414586295976": 111, "cu": 111, "7231": 111, "81396484375": 111, "5553718417909": 111, "33225": 111, "9453125": 111, "110723815414": 111, "78": 111, "eps0": [111, 406], "permittivityprim": [111, 112, 113], "rich": [111, 113, 175], "000111111503177394": 111, "249944439430068": 111, "249999982581341": 111, "input1d": 111, "setscal": 111, "enthalpi": [111, 112, 113, 162, 163, 175, 176], "mxi": [111, 112, 113, 188], "dmxidxi": [111, 112, 113], "s1": [111, 112, 113, 162, 163, 175, 176, 188], "s0": [111, 112, 113, 162, 163, 175, 176, 188], "phaseview": [111, 161, 165, 166], "concview": 111, "ylog": [111, 461], "potentialview": 111, "residualview": 111, "maxerror": 111, "safeti": [111, 356], "errcon": [111, 356], "89e": 111, "desiredtimestep": 111, "thistimestep": 111, "raw_input": [111, 190], "succeed": 111, "floatingpointerror": 111, "underflow": 111, "rearrang": [112, 188], "mu_n": [112, 175], "w_n": [112, 175], "inf": [112, 264], "equilibr": [112, 176], "thick": [112, 176], "2w_n": 112, "makeequ": 113, "c_1": 113, "recreat": 113, "c3": 113, "reiniti": [113, 137], "c_2": 113, "c_3": 113, "malengi": 117, "bm": 117, "cage": 117, "ugent": 117, "rework": 117, "colloc": 117, "pressur": [117, 180, 491], "viscos": [117, 180, 181], "momentum": [117, 180], "ferzig": [117, 491], "peric": 117, "rossow": [117, 491], "extrapol": 117, "dolfyn": 117, "frequenc": 117, "band": [117, 487], "ident": [117, 161, 162, 163, 406, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "dl": [117, 121, 162, 163, 165, 406], "relax": [117, 176, 180, 181, 300, 302, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "pressurerelax": 117, "velocityrelax": 117, "pressurecorrect": 117, "xveloc": 117, "yveloc": 117, "decoupl": [117, 180], "xvelocityeq": 117, "yvelocityeq": 117, "guess": 117, "ast": 117, "That": 117, "a_p": [117, 487], "a_a": [117, 490], "_a": [117, 487], "v_p": [117, 380, 387, 420, 423, 427, 428, 431, 432, 434, 436, 447, 448, 450, 451, 452, 455, 487], "somehow": 117, "ap": [117, 363, 372, 377, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "_facearea": [117, 180, 181], "_celldist": [117, 180, 181, 232, 233, 234], "pressurecorrectioneq": 117, "stagger": 117, "coloc": 117, "oscil": 117, "diamond": 117, "_l": 117, "_r": 117, "mathrm": 117, "avg": 117, "adjac": [117, 180, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455, 487], "expand": [117, 149, 162, 163], "arriv": 117, "formula": [117, 363, 377, 397, 406], "unphys": 117, "_facegradvari": 117, "contrvolum": 117, "slip": 117, "xmax": [117, 140, 141, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "ymin": [117, 140, 141, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "ymax": [117, 140, 141, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "underrelax": [117, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "star": 117, "xre": 117, "xmat": 117, "yre": 117, "asarrai": [117, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "takediagon": [117, 180, 181], "presgrad": 117, "facepresgrad": 117, "790867927": 117, "265072740929": 117, "150290488304": 117, "cfl": [121, 124, 137, 149, 162, 163, 180, 181], "distancetotravel": [121, 148], "adveqn": [121, 122, 124], "distancetravel": [121, 122], "1001": 121, "02e": 121, "interfaceposit": 122, "advectionequ": [122, 137, 148, 149, 150], "l_y": 124, "l_x": [124, 166], "r2": 124, "len": [124, 140, 141, 155, 217, 229, 240, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "logical_and": 124, "ravel": 124, "distancemov": 124, "m1": [126, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "evalcel": [126, 127, 129], "phix": [126, 127, 129], "phii": [126, 127, 129], "sqr": [126, 127, 129, 137], "v2": [126, 127, 129, 411, 427, 447], "v3": [126, 129, 411], "v4": [126, 129], "v5": 126, "trialvalu": 126, "succinctli": 128, "neg": [128, 137, 176, 264, 397, 406, 411, 451, 487], "val": 129, "arr": [129, 397, 406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "deplet": 133, "c_t": 133, "xx": 133, "c_x": 133, "intertext": 133, "gg": 133, "cinf": 133, "ln": [133, 162, 163, 175, 180], "rateconst": [133, 137], "currenttim": 133, "totaltimestep": 133, "surfeqn": 133, "surfactantvar": [133, 137, 140, 141], "bulkeqn": 133, "bulkvar": [133, 137], "currenttimefunc": 133, "concentrationfunc": 133, "glue": 135, "fine": 135, "area": [135, 148, 180, 194, 452, 468, 487, 489], "ceac": [136, 143], "roughli": [136, 138, 143, 180], "publish": [136, 138, 143], "27": [136, 406, 491], "rungold": 136, "displayview": [136, 138, 143], "fals": [136, 138, 140, 141, 143, 176, 222, 351, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 395, 396, 397, 406, 407, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 459, 460, 461, 467, 468, 490], "realist": [136, 143, 490], "depth": [136, 137, 138, 143, 221], "metal": [136, 137, 143], "ion": [136, 137, 138, 143, 173, 174, 458], "catalyst": [136, 137, 138, 143], "c_m": [136, 137, 138, 143, 175], "b_0": [136, 137, 143], "b_1": [136, 137, 143], "buri": 136, "k_c": 136, "consumptionrateconst": 136, "slight": 136, "taper": 136, "taperangl": 136, "Their": 137, "faradaysconst": [137, 138, 143], "6e4": 137, "gasconst": [137, 138, 143, 180, 181], "314": [137, 138, 143, 162, 163, 175, 180, 181], "transfercoeffici": [137, 143], "rateconstant0": [137, 143], "rateconstant3": [137, 143], "245e": 137, "catalystdiffus": [137, 138, 143], "sitedens": [137, 138, 143], "8e": 137, "cupric": 137, "metaldiffusioncoeffici": 137, "overpotenti": [137, 138, 143], "bulkmetalconcentr": 137, "catalystconcentr": [137, 143], "catalystcoverag": [137, 143], "flat": [137, 165, 397, 406], "copper": [137, 138], "currentdensity0": [137, 143], "currentdensity1": [137, 143], "cflnumber": 137, "numberofcellsinnarrowband": 137, "cellsbelowtrench": 137, "trenchdepth": [137, 138, 143], "aspectratio": [137, 138, 143], "trenchspac": [137, 138, 143], "boundarylayerdepth": [137, 138, 143], "hydrodynam": 137, "intention": [137, 143], "po": [137, 222], "ycell": 137, "xcell": 137, "buildmetaliondiffusionequ": 137, "narrowbandwidth": 137, "distancevar": [137, 140, 141, 451, 452], "bottomheight": 137, "trenchheight": 137, "trenchwidth": 137, "sidewidth": 137, "mark": [137, 491], "influenc": 137, "catalystvar": 137, "bulkcatalystvar": 137, "metalvar": 137, "depositionratevari": 137, "omega": [137, 138, 143], "molar": [137, 138, 143, 162, 163, 175], "i_0": [137, 138, 143], "eta": [137, 138, 143, 434], "ga": [137, 138, 143, 162, 163, 175], "empir": 137, "expoconst": 137, "tmp": [137, 397, 413, 427], "exchangecurrentdens": 137, "expo": [137, 165, 166, 173, 174], "currentdens": 137, "v_": [137, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "extensionequ": 137, "spread": [137, 176], "extensionvelocityvari": 137, "k_0": [137, 143], "k_3": [137, 143], "surfactantequ": [137, 148, 149, 150], "d_m": [137, 143], "metalequ": 137, "ionvar": 137, "depositionr": 137, "metalionmolarvolum": 137, "jump": 137, "langmuir": 137, "abil": 137, "buildsurfactantbulkdiffusionequ": 137, "bulkcatalystequ": 137, "zoomfactor": [137, 140, 141], "levelsetupdatefrequ": 137, "distanceequ": 137, "whole": [137, 397, 406], "filepath": 137, "join": [137, 487], "split": 137, "savetxt": 137, "loadtxt": [137, 161, 165, 166, 169, 170, 171], "acceler": [138, 491], "runlevel": 138, "25e": 138, "suppressor": 138, "absorb": 138, "unoccupi": 138, "cover": 138, "affin": 138, "preferenti": 138, "i_j": 138, "theta_j": 138, "alpha_j": 138, "vacant": 138, "substrat": 138, "theta_": 138, "kappa": [138, 162, 163, 176, 487], "theta_l": 138, "k_l": 138, "c_l": [138, 162, 163], "theta_a": 138, "k_a": 138, "c_a": 138, "theta_v": 138, "i_l": 138, "i_": 138, "rise": 138, "k_": 138, "a0": 138, "alpha_k": 138, "b_d": 138, "b_a": 138, "v_d": 138, "b_b": 138, "symbol": [138, 143], "mbox": [138, 143], "tabular": [138, 143], "rllr": [138, 143], "multicolumn": [138, 143], "i_a": 138, "texttt": [138, 143], "i0acceler": 138, "i0level": 138, "alpha_a": 138, "alphaacceler": 138, "alpha_": 138, "alphalevel": 138, "ionconcentr": 138, "d_i": 138, "iondiffus": 138, "acceleratorcoverag": 138, "acceleratorconcentr": 138, "d_a": 138, "gamma_a": 138, "kaccelerator0": 138, "alphaadsorpt": 138, "bd": 138, "levelsetvalu": [140, 141], "kwlimit": [140, 141, 160, 173, 174, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "_promptforopinion": [140, 141, 458, 461, 463, 464, 465, 467, 468, 470, 471], "bool": [140, 141, 192, 194, 195, 196, 222, 351, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 393, 397, 407, 411, 413, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468], "zmin": [140, 141, 457, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 474, 477, 478, 479, 481, 482, 483], "colormap": [140, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468], "logarithm": [140, 397, 406, 459, 460, 461, 462, 463, 464, 465, 467, 468], "runsimpletrenchsystem": 143, "schemat": 143, "metalconcentr": 143, "metaldiffus": 143, "surfactantbefor": [148, 149], "surfactantaft": [148, 149], "initialsurfactantvalu": [148, 149], "initialradiu": [148, 149], "00813776069241": 148, "theta_0": 149, "totaltim": 149, "finalradiu": 149, "outward": 150, "initialsurfact": 150, "getcellvolum": 155, "vol": [155, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "numberofcel": [155, 161, 180, 181, 363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 407], "insid": [156, 222, 264], "cool": [160, 173, 174], "melt": [160, 162, 163, 173, 174, 176], "supercool": [160, 173, 174], "circumst": [160, 173, 174, 180, 495], "pattern": [160, 173, 174], "lobkovski": [160, 161, 166, 173, 174, 491], "carter": [160, 161, 166, 173, 174, 491], "crystallin": [160, 173, 174], "regular": [160, 162, 163, 173, 174], "latent": [160, 162, 163, 173, 174, 176], "d_t": [160, 161, 173, 174], "heateq": [160, 173, 174], "tau_": [160, 161, 166, 169, 170, 171, 173, 174], "kappa_1": [160, 161, 173, 174], "kappa_2": [160, 161, 173, 174], "beta": [160, 161, 165, 166, 173, 174, 176, 188, 420, 432], "015": [160, 161, 165, 166, 173, 174], "phisq": [160, 161, 173, 174], "dbetadpsi": [160, 173, 174], "ddia": [160, 173, 174], "doff": [160, 173, 174], "i0": [160, 173, 174], "i1": [160, 173, 174], "tau": [160, 161], "kappa1": [160, 161, 173, 174], "kappa2": [160, 161, 173, 174], "phaseeq": [160, 161, 162, 163, 165, 166, 169, 170, 171, 173, 174], "solidifi": [160, 161, 162, 163, 173, 174], "quench": [160, 162, 163, 173, 174, 176], "induc": [160, 162, 163, 173, 174], "granular": [160, 173, 174], "strive": [160, 173, 174, 187], "pylab": 160, "cm": [160, 162, 163, 173, 174, 176, 397, 406, 458, 459, 460, 462, 463, 464, 465], "hot": [160, 173, 174], "arm": [160, 173, 174], "fastest": [160, 173, 174], "steepest": [160, 173, 174], "lucid": 160, "seedcent": 161, "initialtemperatur": 161, "beta_": 161, "phi_i": [161, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "phi_x": [161, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "xi_x": 161, "xi_i": 161, "tempdiffusioncoeff": 161, "mvar": 161, "phasei": 161, "phasex": 161, "betapsi": 161, "dxi": 161, "nineti": 161, "anisotropysourc": 161, "temperatureeq": 161, "temperatureview": 161, "text_to_native_str": [161, 165, 166, 169, 170, 171], "testdata": [161, 165, 166, 169, 170, 171], "straightforward": [162, 163], "helmholtz": [162, 163, 176], "mathcal": [162, 163], "m_c": [162, 163], "f_a": [162, 163], "w_a": [162, 163], "f_b": [162, 163], "omega_": [162, 163], "omega_l": [162, 163], "calphad": [162, 163], "w_b": [162, 163], "yield": [162, 163, 180], "ideal": [162, 163], "l_a": [162, 163, 363], "t_m": [162, 163, 176], "likewis": [162, 163, 397, 406], "la": [162, 163], "2350": [162, 163, 176], "lb": [162, 163, 397, 406], "1728": [162, 163, 176], "tma": [162, 163], "tmb": [162, 163], "1358": [162, 163], "enthalpya": [162, 163], "enthalpyb": [162, 163], "nonumb": [162, 163, 175, 487], "l_b": [162, 163], "v_m": [162, 163], "mu_b": [162, 163], "mu_a": [162, 163], "vm": [162, 163], "deltaa": [162, 163], "deltab": [162, 163], "sigmaa": [162, 163], "sigmab": [162, 163], "9e": [162, 163], "betaa": [162, 163], "betab": [162, 163], "kappaa": [162, 163], "kappab": [162, 163], "wb": [162, 163, 406], "mphi": [162, 163, 175, 176], "dmphidphi": [162, 163, 175, 176], "deltachempot": [162, 163], "chempota": [162, 163], "chempotb": [162, 163], "fick": [162, 163], "phasetransformationveloc": [162, 163], "diffusioneq": [162, 163], "deduc": [162, 163], "liquidu": [162, 163, 175], "solidu": [162, 163, 175], "cl": [162, 163, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "fraction": [162, 163, 173, 174, 300], "lever": [162, 163], "cavg": [162, 163], "algebra": [162, 163, 176, 337, 342, 484, 491], "reveal": [162, 163], "unchang": [162, 163, 187, 397, 406], "root": [162, 163, 397, 406, 411, 420, 428, 432, 434], "luck": [162, 163, 427], "jacobian": [162, 163, 352], "equilibriumjacobian": [162, 163], "fsolv": [162, 163], "csroot": [162, 163], "clroot": [162, 163], "func": [162, 163, 402], "fprime": [162, 163], "uncondition": [162, 163], "e5": [162, 163], "asymmetr": [162, 251], "therefor": [162, 490], "phaser": 162, "diffr": 162, "stationari": [162, 163], "overal": [162, 163], "ten": [162, 163], "idea": [162, 163, 494], "neglig": [162, 163], "centi": [162, 163], "meter": [162, 163], "d_c": 163, "dc": 163, "dphi": 163, "initialr": 163, "principl": 163, "phasetransientcoeff": [165, 166], "thetasmallvalu": [165, 166, 173, 174], "1e5": [165, 166, 173, 174], "1e3": [165, 166, 173, 174], "thetatransientcoeff": [165, 166], "008": [165, 166, 173, 174], "held": [165, 166, 180, 452], "isotherm": [165, 166, 491], "randomli": [165, 468], "0001": [165, 173, 174], "thetavalu": 165, "segment": [165, 247], "buildphaseequ": 165, "mphivar": [165, 166], "thetamag": [165, 166, 173, 174], "implicitsourc": [165, 166], "et": [165, 166, 173, 174, 180, 491], "modular": [165, 166, 173, 174, 447], "buildthetaequ": 165, "phasemod": [165, 166, 173, 174], "phasemodsq": [165, 166], "pfunc": [165, 166, 173, 174], "phasefac": [165, 166], "phasesq": [165, 166], "gradmag": [165, 166], "igamma": [165, 166, 173, 174], "thetagraddiff": [165, 166], "thetaeq": [165, 166, 173, 174], "meaning": [165, 188], "thetaprod": 165, "thetaproductview": [165, 166], "disk": [165, 423], "recal": 165, "newphas": 165, "newtheta": 165, "newthetaeq": 165, "newphaseeq": 165, "m_1": [166, 169, 170, 171], "confin": 166, "angl": [166, 397, 406], "halv": 166, "misorient": [169, 170, 171], "foral": [169, 171, 363], "t_0": [173, 174], "tau_phas": [173, 174], "tau_theta": [173, 174], "beta_theta": [173, 174], "gradmagtheta": [173, 174], "v_theta": [173, 174], "d_theta": [173, 174], "numse": [173, 174], "12345": [173, 174, 411], "cx": [173, 174], "cy": [173, 174], "orientationview": [173, 174], "room": [173, 174], "stolen": [173, 174], "make_ax": [173, 174], "ec1cd2567521c105a451ce15e06de10715f8b54d": [173, 174], "lib": [173, 174], "l838": [173, 174], "pb": [173, 174], "get_posit": [173, 174], "frozen": [173, 174], "pad": [173, 174], "x1": [173, 174], "pb1": [173, 174], "pbx": [173, 174], "pbcb": [173, 174], "splitx": [173, 174], "panchor": [173, 174], "set_posit": [173, 174], "set_anchor": [173, 174], "gnomon": [173, 174], "get_figur": [173, 174], "add_ax": [173, 174], "85": [173, 174], "polar": [173, 174], "set_thetagrid": [173, 174], "set_theta_zero_loc": [173, 174], "set_theta_direct": [173, 174], "set_rgrid": [173, 174], "radii": [173, 174], "_orientation_and_phase_to_rgb": [173, 174], "set_facecolor": [173, 174], "set_edgecolor": [173, 174], "_reshap": [173, 174], "staticmethod": [173, 174], "hsv": [173, 174], "hsv_to_rgb": [173, 174], "_data": [173, 174], "rgb": [173, 174], "hue": [173, 174], "set_data": [173, 174], "pyplot": [173, 174, 458], "figaspect": [173, 174, 459, 460, 462, 463, 464, 465, 467, 468], "figsiz": [173, 174], "timer": [173, 174], "3f": [173, 174], "fontsiz": [173, 174], "add_subplot": [173, 174], "total_tim": [173, 174], "save_interv": [173, 174], "002": [173, 174, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "save_at": [173, 174], "set_text": [173, 174], "c_0": 175, "c0": [175, 450], "circ_j": 175, "tilt": 175, "_0": 175, "f_j": 175, "sl": 175, "circ_n": 175, "cook": 175, "rhol": 175, "arrang": [175, 180, 181], "d_j": 175, "l_v": 176, "0025": 176, "lv": 176, "atom": 176, "simplest": 176, "surpris": 176, "inspect": 176, "uninterest": 176, "resolut": 176, "reintroduc": 176, "exploit": [176, 484], "s_1": [176, 487], "advic": 176, "tangent": [176, 397, 406, 411], "appreci": [176, 188, 189], "focus": 176, "recast": 176, "redeclar": 176, "nickel": 176, "sigma": [176, 434], "viewer2": [176, 458], "redefin": 176, "quintic": 176, "polynomi": [176, 292], "chose": 176, "agreement": 176, "tanhresidu": 176, "leastsq": 176, "v_fit": 176, "d_fit": 176, "msg": 176, "symmetr": [177, 251, 264, 297, 298, 300, 301, 302, 337, 344, 346, 347], "quadrilater": 177, "mirror": 177, "testresult": 177, "bottomright": 177, "topleft": 177, "topright": 177, "vapor": 180, "der": 180, "waal": 180, "molarweight": [180, 181], "ee": [180, 181], "455971": [180, 181], "650": [180, 181], "vbar": [180, 181], "liquiddens": [180, 181], "7354": [180, 181], "3402662299995": [180, 181], "vapordens": [180, 181], "855803327810008": [180, 181], "u_j": 180, "u_i": [180, 181], "u_iu_j": 180, "nu": 180, "nc": [180, 181], "densityprevi": [180, 181], "velocityprevi": 180, "potentialnc": [180, 181], "freeenergi": [180, 181], "u_": 180, "d_f": [180, 487, 490], "overlin": 180, "partial_": 180, "overbar": 180, "matrixdiagon": [180, 181], "correctioncoeff": [180, 181], "masseqn": [180, 181], "lh": 180, "momentumeqn": 180, "superscript": [180, 487], "potentialderiv": [180, 181], "potentialnceqn": [180, 181], "quirk": 180, "amplitud": [180, 434], "totalstep": [180, 181], "1e10": 180, "elegantli": 180, "initialresidu": [180, 181], "previousresidu": [180, 181], "5e9": 180, "velocityx": 181, "velocityi": 181, "velocityvector": 181, "velocityxprevi": 181, "velocityyprevi": 181, "matxx": 181, "matyi": 181, "matxi": 181, "matyx": 181, "momentumxeqn": 181, "momentumyeqn": 181, "totalsweep": 181, "stress": [187, 488], "slightli": [187, 427], "inconveni": [187, 188, 189], "walk": 187, "getfacesleft": 187, "getfacesright": 187, "steadyconvectiondiffusionscequ": 187, "stdyconvdiffscequ": 187, "traceback": [187, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 367, 374, 375, 378, 382, 389, 390, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "convectionschem": 187, "nameerror": 187, "getcellcent": [187, 188, 189], "grid2dgistview": 187, "thrown": 187, "biggest": 187, "assembli": 187, "took": 187, "gistview": 187, "gist1dview": 187, "hesit": [187, 188, 189], "agre": [188, 189], "assur": [188, 189], "casual": [188, 189], "superced": [188, 189], "1_2": 188, "summar": [188, 189], "tip": [188, 189], "seemingli": [188, 427], "almost": [188, 487], "blindli": 188, "worth": 188, "reorient": 188, "deltax": 188, "deltai": 188, "vectorfacevari": 188, "vectorfield": 188, "hackish": 188, "_take": 188, "quietli": 188, "getexteriorfac": 188, "getcent": 188, "getarithmeticfacevalu": 188, "convolut": 188, "cellfilt": 188, "positivecel": 188, "getfac": 188, "deprecationwarn": [188, 189, 395, 402], "indefinit": [188, 189, 264], "breviti": 188, "feel": [188, 189], "whichev": [188, 189], "comfort": [188, 189], "clariti": 188, "trump": 188, "orthodoxi": 188, "temptat": 188, "2_1": 189, "3_0": 189, "reconsid": 189, "gmshimporter2d": 189, "gmshimporter3d": 189, "gmshimporter2din3dspac": 189, "fv": [190, 367, 374, 375, 378, 382, 389, 390, 489], "msed": 190, "mml": 190, "ubiquit": 190, "proprietari": 190, "expens": 190, "savvi": 190, "repr": [192, 193, 194, 195, 196, 207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 277, 278, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 300, 301, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 329, 330, 331, 332, 333, 334, 335, 336, 350, 351, 352, 353, 358, 385, 399, 400, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457], "mathtt": [195, 354, 411], "g_": 195, "odd": 196, "numberofvari": 199, "numberofequ": 199, "equationindex": 199, "varindex": 199, "_representationclass": [207, 226, 227, 228, 229, 230, 231, 247, 248, 249, 250], "_abstractrepresent": [207, 248], "_topologyclass": [207, 226, 227, 228, 229, 230, 231, 247, 248, 249, 250], "_abstracttopologi": [207, 248], "among": 207, "dataset": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 457], "basemesh": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "translatedmesh": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "addedmesh": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "provis": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "consolid": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "triaddedmesh": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "83333333": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "16666667": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "66666667": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "33333333": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "threedbasemesh": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "threedsecondmesh": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "threedaddedmesh": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "invalidmesh": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "match": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 411], "helper": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 255, 256, 257, 324, 329, 330, 331, 358, 399, 400, 457, 472], "unsupport": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "operand": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 397, 406], "nonzero": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250], "attribut": [207, 217, 218, 219, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 241, 247, 248, 249, 250, 251, 397, 407, 413], "delattr": [207, 222, 226, 251, 324, 358, 457], "getattr": [207, 222, 226, 251, 324, 358, 457], "setattr": [207, 222, 226, 251, 324, 358, 457], "tb": [207, 222, 226, 251, 324, 358, 457], "__traceback__": [207, 222, 226, 251, 324, 358, 457], "indexerror": [217, 229, 240, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 457], "dilat": [217, 218, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 247], "dilatedmesh": [217, 218, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 247], "mismatch": [217, 218, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 247, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "broadcast": [217, 218, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 239, 240, 247, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "rectangular": [218, 220, 230, 231, 233, 234, 250], "radial": [220, 221], "axial": 220, "lr": 221, "count": [221, 393, 411, 412], "coorddimens": 222, "nproc": [222, 397, 407, 413], "squaredcircl": 222, "compass": 222, "label": [222, 401], "north": 222, "west": 222, "nw": 222, "parametr": 222, "physicalcel": 222, "physicalfac": 222, "bkg": 222, "monoton": 222, "trisquar": 222, "std1": 222, "std2": 222, "ii": [222, 491], "characterist": [222, 489], "topolog": 222, "fileistemporari": 222, "gmshoutput": 222, "respons": 222, "constructor": 222, "multilin": 222, "todo": 222, "truncat": [222, 457], "cellstovertic": 222, "recov": 222, "vertexcoord": [222, 226, 227, 228], "cellstovertid": 222, "cellstofac": 222, "isol": 222, "nodespath": 222, "elemspath": 222, "namesfil": 222, "physicalnam": 222, "facestovertexid": 222, "cellstofaceid": 222, "cellglobalidmap": 222, "ghostcellglobalidmap": 222, "trust": [222, 494], "retriev": [222, 494], "facevertexid": [226, 227, 228], "_meshrepresent": [226, 227, 228], "_meshtopologi": 226, "_mesh1dtopologi": 227, "_mesh2dtopologi": [228, 247], "_builderclass": 229, "_nonuniformgrid1dbuild": 229, "_grid1drepresent": [229, 249], "_grid1dtopologi": [229, 249], "_grid2drepresent": [230, 247, 250], "_grid2dtopologi": [230, 250], "_grid3drepresent": 231, "_grid3dtopologi": 231, "xz": 231, "yz": 231, "subcategori": 231, "facecellid": [232, 233, 234], "fill": [232, 233, 234, 267, 268], "999": 232, "_celltocelldist": [232, 233, 234], "_cellvertexid": [232, 233, 234], "_baseperiodicgrid2d": 233, "_baseperiodicgrid3d": 234, "rand": 239, "skew": 239, "hereaft": 247, "calc": 249, "machineri": 251, "broke": 252, "exceed": 252, "invalid": 252, "petsc4py_comm": 256, "comm_world": 256, "intoler": 258, "Not": [258, 264, 266, 279, 280, 290, 298, 299, 302, 303, 309, 312, 313, 314, 315, 316, 322, 323, 324, 332, 333, 334, 336, 350, 352, 353, 356, 397, 406, 447], "biconjug": [259, 292, 297, 332], "unprecondit": [259, 260, 261, 263, 265], "alia": [259, 260, 261, 263, 265, 287, 288, 289, 291, 298, 302, 332, 333, 334, 336, 350, 379, 396], "abstol": [264, 308], "eigenvalu": 264, "kspcg": 264, "kspgetconvergedreason": 264, "kspsolv": 264, "ksppreonli": 264, "kspconvergedskip": 264, "ran": [264, 308], "kspminr": 264, "kspcr": 264, "pivot": [264, 301], "subprecondition": 264, "pcfieldsplit": 264, "decreas": [264, 308, 354], "pcilu": [267, 268], "pcicc": [267, 268], "jacobi": [267, 268, 271, 285, 286, 287, 288, 289, 292, 298, 300, 302, 304, 305, 317, 319, 337, 341], "pcbjacobi": [267, 268], "manualpag": [267, 268], "pc": [267, 268], "pccreat": [267, 268], "choleski": [267, 269, 337, 339], "ilu": [267, 270, 292, 317, 318, 337, 340], "ssor": [267, 274, 302, 304, 307], "smoothed_aggregation_solv": 283, "aggreg": [285, 292, 337, 343, 344, 346], "amg": [285, 286], "pbicgstab": 287, "fgmre": 288, "dilu": 292, "mimum": 292, "gauss": [292, 337, 347, 434], "seidel": [292, 337, 347], "smoother_typ": 295, "variant": 297, "bicg": 297, "itsolv": [297, 298, 302], "superlu": 301, "spilu": [317, 318], "46876951": [317, 318, 319], "2019542": [317, 318, 319], "spsolv": [317, 319], "unsatisfactori": 324, "wignor": 324, "abort": 324, "werror": 324, "relr": 324, "linearxsolv": 324, "obj": [330, 495], "m4count": 330, "mpi4py_comm": 330, "get_rank": 330, "get_siz": 330, "assert": 330, "ameso": 335, "klu": 335, "ifpack": [337, 339], "multilevel": [337, 342, 345, 346, 347, 348], "nearli": [337, 346], "mloption": 351, "testunsupport": 351, "ml": [351, 406], "setparameterlist": 351, "printingopt": 352, "solveropt": 352, "linearsolveropt": 352, "linesearchopt": 352, "directionopt": 352, "newtonopt": 352, "steppyngstoun": [354, 357], "vardata": [355, 356, 357], "075": 355, "pid": 355, "articl": 355, "pidpap": 355, "author": 355, "valli": 355, "carei": 355, "coutinho": 355, "strategi": 355, "incompress": [355, 491], "reaction": 355, "meth": [355, 494], "pgrow": 356, "pshrink": 356, "000189": 356, "rkq": 356, "rung": 356, "kutta": 356, "incorpor": 363, "u_p": [363, 377], "sum_a": [363, 377], "phi_a": [363, 367, 372, 374, 375, 377, 378, 382, 389, 487], "l_p": 363, "_matrixclass": [363, 377], "_buildmatrix": [363, 377], "stand": [363, 377], "harpsichord": [363, 377], "sing": [363, 377], "vel": [363, 377], "quadrat": 363, "__advectionterm": 363, "spot": 363, "123105625618": 363, "0201715476598": 363, "hash": [363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390, 397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "__nondiffusionterm": [363, 366, 367, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390], "negat": [363, 366, 367, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390], "__unaryterm": [363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 387, 389, 390], "getrhsvector": [363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "residualfn": [363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "sovler": [363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "l2": [363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "cacheresidu": [363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "cacheerror": [363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "residualvector": [363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "errorvector": [363, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 387, 389, 390], "_nondiffusionterm": [366, 376, 377], "_abstractconvectionterm": [367, 374, 375, 378, 382, 389, 390], "simeq": [367, 372, 374, 375, 378, 380, 382, 387, 389, 487], "alpha_f": [367, 374, 375, 378, 382, 389, 487, 490], "central": [367, 490], "vcv": [367, 374, 375, 378, 382, 389, 390], "vfv": [367, 374, 375, 378, 382, 389, 390], "__convectionterm": [367, 374, 375, 378, 382, 389, 390], "_arithmeticcelltofacevari": [367, 374, 375, 378, 382, 389, 390], "m2": [367, 374, 375, 378, 382, 389, 390], "cv2": [367, 374, 375, 378, 382, 389, 390], "vcv2": [367, 374, 375, 378, 382, 389, 390], "vfv2": [367, 374, 375, 378, 382, 389, 390], "_abstractdiffusionterm": [370, 371, 372], "_abstractupwindconvectionterm": [374, 389], "_asymmetricconvectionterm": [375, 378, 382], "hybrid": [378, 490], "s_p": 380, "proportion": 380, "_explicitsourceterm": 383, "newton": 383, "rho_": [387, 487], "phi_0": 387, "relaxationfactor": 387, "skipwarn": 393, "glob": 393, "optionflag": 393, "extraglob": 393, "raise_on_error": 393, "exclude_empti": 393, "_selectivedoctestpars": 393, "reachabl": 393, "__doc__": 393, "__test__": 393, "__dict__": 393, "slate": 393, "stuff": 393, "iff": 393, "argv": [393, 395, 396, 472], "summari": 393, "dont_accept_true_for_1": 393, "dont_accept_blanklin": 393, "normalize_whitespac": 393, "ellipsi": 393, "ignore_exception_detail": 393, "report_udiff": 393, "report_cdiff": 393, "report_ndiff": 393, "report_only_first_failur": 393, "postmortem": 393, "defaulttest": [395, 396], "testrunn": [395, 396], "testload": [395, 396], "loader": [395, 396], "failfast": [395, 396], "catchbreak": [395, 396], "buffer": [395, 396, 397, 413], "tb_local": [395, 396], "inabl": 395, "kw": 395, "ie": 395, "foo": 395, "bunch": 395, "konrad": [397, 406], "hinsen": [397, 406], "physicalquant": [397, 406], "angular": [397, 406], "radian": [397, 406], "deg": [397, 406], "03490659": [397, 406], "05235988": [397, 406], "06981317": [397, 406], "08726646": [397, 406], "003": [397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "004": [397, 406], "005": [397, 406], "isinst": [397, 406, 411], "facilit": [397, 406], "inch": [397, 406], "034907": [397, 406], "ft": [397, 406], "remaind": [397, 406], "hz": [397, 406], "ev": [397, 406], "8288": [397, 406], "cosin": [397, 406], "57079632679": [397, 406], "rad": [397, 406, 427], "31695789692": [397, 406], "sine": [397, 406], "arctang": [397, 406], "785398": [397, 406], "380506": [397, 406], "549306144334": [397, 406], "smallest": [397, 406], "3j": [397, 406], "ohm": [397, 406], "adjust": [397, 406, 447], "hartre": [397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "kcal": [397, 406], "1694": [397, 406], "27557621": [397, 406], "sctype": [397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "obj2sctyp": [397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "si": [397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "7088849": [397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "01085": [397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "kg": [397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "degc": [397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "degf": [397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "314159": [397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "59": [397, 406, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "302585": [397, 406], "0254": [397, 406], "opposit": [397, 406, 411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "typecod": [397, 406], "0762": [397, 406], "0508": [397, 406], "expon": [397, 406, 488], "761594155956": [397, 406], "max_line_width": [397, 406, 411], "suppress_smal": [397, 406, 411], "14159": [397, 406], "encod": [397, 413], "newlin": [397, 413], "suffix": [397, 413], "namedtemporaryfil": [397, 413], "tmpfile": [397, 413], "procid": [397, 407, 413], "seek": [397, 413], "mkstemp": [397, 413], "duck": [397, 407, 413], "tempfil": [397, 407, 413], "stall": 401, "old_nam": 402, "new_nam": 402, "old_func": 402, "dirac": [406, 484], "cnr": [406, 484], "orlean": [406, 484], "fr": [406, 484], "2002": [406, 491], "codata": 406, "british": 406, "appendix": 406, "sr": 406, "da": 406, "bq": 406, "gy": 406, "lm": 406, "pa": 406, "sv": 406, "60217653e": 406, "acr": 406, "4046": 406, "8564224": 406, "amu": 406, "6605402e": 406, "ang": 406, "atm": 406, "101325": 406, "100000": 406, "bohr": 406, "291772081145378e": 406, "btui": 406, "1055": 406, "05585262": 406, "299792458": 406, "cal": 406, "cali": 406, "1868": 406, "0000000000000003e": 406, "cup": 406, "00023658825600000004": 406, "86400": 406, "017453292519943295": 406, "5555555555555556": 406, "degr": 406, "00010000000000000003": 406, "dyn": 406, "85418781762039e": 406, "erg": 406, "floz": 406, "9573532000000005e": 406, "3048": 406, "galuk": 406, "004546090000000002": 406, "galu": 406, "0037854120960000006": 406, "gn": 406, "80665": 406, "grav": 406, "6742e": 406, "3600": 406, "35974417680088e": 406, "hbar": 406, "0545716823644548e": 406, "hpel": 406, "746": 406, "hplanck": 406, "6260693e": 406, "hpuk": 406, "745": 406, "025400000000000002": 406, "invcm": 406, "9864456023253395e": 406, "3806505e": 406, "4184": 406, "kcali": 406, "4186": 406, "ken": 406, "0010000000000000002": 406, "45359237": 406, "lyr": 406, "9460730472580800": 406, "me": 406, "1093826e": 406, "mi": 406, "1609": 406, "344": 406, "0000000000000002e": 406, "mp": 406, "67262171e": 406, "mu0": 406, "2566370614359173e": 406, "0221415e": 406, "nmi": 406, "1852": 406, "oz": 406, "028349523125": 406, "6894": 406, "75729316836": 406, "pt": 406, "0004731765120000001": 406, "0009463530240000002": 406, "tbsp": 406, "4786766000000002e": 406, "ton": 406, "907": 406, "18474": 406, "torr": 406, "133": [406, 491], "32236842105263": 406, "tsp": 406, "9289220000000005e": 406, "wk": 406, "604800": 406, "yd": 406, "9144000000000001": 406, "yr": 406, "31536000": 406, "yrjul": 406, "31557600": 406, "yrsid": 406, "31558152": 406, "959999997": 406, "array_lik": [406, 411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 462, 463, 467], "nine": 406, "_findunit": 406, "555556": 406, "meterpersecond": 406, "fileobject": 407, "mesh_unmangl": 407, "cpickl": 407, "decompress": 407, "improp": 407, "taxicab": 411, "manhattan": 411, "_j": 411, "euclidean": 411, "underset": 411, "logic": [411, 420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "flatten": 411, "a1": 411, "a2": 411, "_variableclass": 411, "max_mem": 411, "100000000": 411, "m0": [411, 420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "maskvalu": 411, "999999": 411, "masked_valu": 411, "mayb": 411, "3x3": 411, "fill_valu": 411, "array_output": 411, "textual": 411, "bracket": 411, "subset": [411, 489], "rightmost": 411, "estat": 411, "2345": 411, "23345": 411, "123456": 411, "charact": 411, "output_line_width": 411, "decim": 411, "float_output_precis": 411, "float_output_suppress_smal": 411, "unus": 411, "optpars": 412, "store_tru": 412, "store_fals": 412, "store_const": 412, "callback": 412, "argpars": 412, "absent": [412, 415], "fear": 413, "inexplic": 415, "additionvector": 415, "thought": [415, 489], "shim": 416, "kwd": [420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "int_0": [420, 432], "sake": [420, 428, 432, 434], "determinist": [420, 428, 432, 434], "histogram": [420, 428, 432, 434, 436, 455], "gaussian": [420, 428, 432, 434], "betadist": 420, "histoplot": [420, 428, 432, 434, 455], "stderr": [420, 428, 432], "fab": [420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "truth": [420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "ambigu": [420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "nearestcellid": [420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "ncell": [420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "npoint": [420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "whose": [420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456, 495], "sliceabl": [420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "1000000000000000000": [420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "phi_1": [420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "phi_2": [420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "f2": [420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "interiorfac": [420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "opshap": [420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "operatorclass": [420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "otim": [420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "461538461538": [420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "phi1": [420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "phi2": [420, 423, 427, 428, 432, 434, 436, 447, 448, 452, 455], "mpitutori": [420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "allreduc": [420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455], "assertionerror": [420, 423, 427, 428, 432, 434, 436, 448, 452, 455], "longhand": [420, 423, 427, 428, 431, 432, 434, 436, 441, 447, 448, 450, 451, 452, 455, 456], "unpickledvar": 423, "dim": [423, 431, 441, 447, 448, 450], "_calctrialvalu": 427, "patholog": 427, "vbl": 427, "vbr": 427, "vml": 427, "crossprod": 427, "dsq": 427, "vmr": 427, "extensionvari": 427, "extensionvar": 427, "tmp1": 427, "tmp2": 427, "9544": 427, "5456": 427, "perpendicular": 427, "30473785": 427, "49923009": 427, "35355339": 427, "45118446": 427, "97140452": 427, "76215286": 427, "33721352": 427, "trial": 427, "didn": 427, "58578644": 427, "08578644": 427, "85136395": 427, "29289322": 427, "54389939": 427, "49547948": 427, "3rd": 427, "7th": 427, "15th": 427, "chanc": 427, "circumfer": 427, "57984690073": 427, "expdist": 428, "gammadist": 432, "langl": 434, "rangl": 434, "uncorrel": 434, "k_b": 434, "sigmasqrd": 434, "kboltzmann": 434, "sampl": 436, "bin": 436, "get_se": 448, "_celltofacevari": 450, "conservativesurfactantequ": 451, "numberoffac": 451, "volumetr": 452, "mole": 452, "941": 452, "_interfacesurfactantvari": 452, "some1dvar": 457, "plt": 458, "ax1": 458, "subplot": 458, "ax2": 458, "ax3": 458, "mesh1": 458, "xvar": [458, 461, 470, 471], "viewer1": 458, "mesh2": 458, "xyvar": [458, 463, 464, 465, 467, 468, 470, 471], "mesh3": 458, "viewer3": 458, "orrd": 458, "kval": [458, 461, 463, 464, 465, 467, 468, 470, 471], "jet": [458, 459, 460, 462, 463, 464, 465], "xlog": 461, "ocean": [461, 463, 464, 465, 467, 468], "synonym": [461, 487], "line2d": 461, "draw": [462, 463], "1002": [463, 464, 465, 470, 471], "polycollect": 465, "sparsiti": [466, 468], "linewidth": 467, "arrows": 467, "arrowstyl": 467, "minlength": 467, "stream": 467, "griddata": 467, "convex": 467, "hull": 467, "concav": 467, "cla": 467, "overlaid": 467, "arrow": [467, 468], "goe": [467, 468], "streamlin": 467, "30x30": 467, "linearli": [467, 487], "travers": 467, "density_x": 467, "density_i": 467, "lumin": 467, "stretch": 467, "fancyarrowpatch": 467, "quiver": 468, "xyzvar": [470, 471], "poll": 472, "poll_fil": 472, "Or": 472, "reader": 472, "fname": 472, "subview": 474, "866": 477, "stdout": 477, "var_gauss_grad_x": 477, "var_gauss_grad_i": 477, "33333333333333": 477, "wikipedia": 484, "wiki": 484, "continuous_integr": 484, "eponym": 484, "cad": 484, "javascript": 484, "appl": 484, "predecessor": 484, "ye": 484, "forum": 484, "pydata": 484, "cosc": 484, "canterburi": 484, "greg": [484, 491], "ew": 484, "slowli": 484, "3000": 484, "plone": 484, "pocoo": 484, "microsoft": 484, "polyhedr": 487, "surround": 487, "conjunction": 487, "omega_a": 487, "omega_1": 487, "omega_2": 487, "omega_3": 487, "omega_4": 487, "theorem": 487, "specificconvectionterm": 487, "estim": 487, "increasingli": 487, "gamma1": 487, "nicolson": 487, "reinforc": 487, "gamma_2": [487, 488], "gamma2": 487, "a_": 487, "b_p": 487, "rho_p": 487, "f_f": [487, 490], "biolog": 488, "inde": 488, "proven": 488, "variat": 488, "ph": 488, "lambda_i": 488, "react": [488, 491], "divers": 488, "electr": 488, "heart": 488, "tissu": 488, "schr": 488, "dinger": 488, "unknown": 488, "fickian": 488, "gamma_3": 488, "spectral": 488, "chapter": [489, 492, 493, 496], "phd": [489, 491], "patankar": [489, 491], "versteeg": [489, 491], "malalasekera": [489, 491], "fem": 489, "fdm": 489, "analog": 489, "\u00e9": 490, "clet": 490, "p_f": 490, "smear": 490, "rightarrow": 490, "overcom": 490, "inaccuraci": 490, "beckermann": 491, "karma": 491, "1146": 491, "annurev": 491, "matsci": 491, "101901": 491, "155803": 491, "chen": 491, "mdoel": 491, "112001": 491, "132041": 491, "contemporari": 491, "david": 491, "jonathan": 491, "coat": 491, "biomaterialia": 491, "604": 491, "jan": 491, "actbio": 491, "019": 491, "william": 491, "nov": 491, "hangart": 491, "hamadani": 491, "xu": 491, "interdigit": 491, "thin": 491, "film": 491, "heterojunct": 491, "073514": 491, "3561487": 491, "huber": 491, "superconform": 491, "submicron": 491, "016102": 491, "2001": 491, "sethian": 491, "cambridg": 491, "1996": 491, "scott": 491, "chacon": 491, "apress": 491, "guido": 491, "rossum": 491, "tut": 491, "pilgrim": 491, "isbn": 491, "1590593561": 491, "diveintopython": 491, "ref": 491, "alexand": 491, "craig": 491, "materialia": 491, "6035": 491, "6058": 491, "2003": 491, "s1359": 491, "6454": 491, "00388": 491, "swirl": 491, "turbul": 491, "greenwich": 491, "1998": 491, "gala": 491, "eprint": 491, "6371": 491, "franci": 491, "1980": 491, "longman": 491, "technic": 491, "1995": 491, "mattiussi": 491, "309": 491, "1997": 491, "epfl": 491, "ch": 491, "jcp1997": 491, "nterfaci": 491, "1958": 491, "hermodynam": 491, "1121": 491, "1124": 491, "1959": 491, "ucleat": 491, "elder": 491, "thornton": 491, "hoyt": 491, "philosoph": 491, "magagazin": 491, "164": 491, "1080": 491, "14786435": 491, "506427": 491, "quilibrium": 491, "69": 491, "021603": 491, "arxiv": 491, "cond": 491, "mat": 491, "0308173": 491, "inet": 491, "021604": 491, "0308179": 491, "saul": 491, "teukolski": 491, "vetterl": 491, "brian": 491, "flanneri": 491, "1999": 491, "peri": 491, "\u0107": 491, "springer": 491, "blend": 491, "185": 491, "s0021": 491, "9991": 491, "00059": 491, "c302": 491, "c310": 491, "1562598": 491, "mcf": 491, "adden": 491, "7424": 491, "7439": 491, "1992": 491, "microsegreg": 491, "metallurgica": 491, "689": 491, "ward": 491, "inst": 491, "winter2004": 491, "if12": 491, "pg46": 491, "capit": 494, "resid": 494, "oop": 494, "arg2": [494, 495], "unfamiliar": 494, "reorder": 494, "latter": 494, "famili": 494, "descend": 494, "myobjectderivedfrombas": [494, 495], "arg3": 495, "__": 495, "somethingels": 495, "val1": 495, "val2": 495, "wherea": 495}, "objects": {"": [[23, 0, 0, "-", "examples"], [190, 0, 0, "-", "fipy"], [492, 0, 0, "-", "package"], [17, 7, 1, "cmdoption-cache", "--cache"], [22, 7, 1, "cmdoption-home", "--home"], [17, 7, 1, "cmdoption-inline", "--inline"], [17, 7, 1, "cmdoption-lsmlib", "--lsmlib"], [17, 7, 1, "cmdoption-no-cache", "--no-cache"], [17, 7, 1, "cmdoption-no-pysparse", "--no-pysparse"], [22, 7, 1, "cmdoption-prefix", "--prefix"], [17, 7, 1, "cmdoption-pyamg", "--pyamg"], [17, 7, 1, "cmdoption-pyamgx", "--pyamgx"], [17, 7, 1, "cmdoption-pysparse", "--pysparse"], [17, 7, 1, "cmdoption-scipy", "--scipy"], [17, 7, 1, "cmdoption-skfmm", "--skfmm"], [17, 7, 1, "cmdoption-trilinos", "--trilinos"], [22, 8, 1, "-", "DYLD_LIBRARY_PATH"], [17, 8, 1, "-", "FIPY_CACHE"], [17, 8, 1, "-", "FIPY_DEFAULT_CRITERION"], [17, 8, 1, "-", "FIPY_DISPLAY_MATRIX"], [17, 8, 1, "-", "FIPY_INCLUDE_NUMERIX_ALL"], [17, 8, 1, "-", "FIPY_INLINE"], [17, 8, 1, "-", "FIPY_INLINE_COMMENT"], [17, 8, 1, "-", "FIPY_LOG_CONFIG"], [17, 8, 1, "-", "FIPY_SOLVERS"], [17, 8, 1, "-", "FIPY_VERBOSE_SOLVER"], [17, 8, 1, "-", "FIPY_VIEWER"], [22, 8, 1, "-", "LD_LIBRARY_PATH"], [17, 8, 1, "-", "PETSC_OPTIONS"]], "examples": [[24, 0, 0, "-", "benchmarking"], [30, 0, 0, "-", "cahnHilliard"], [38, 0, 0, "-", "chemotaxis"], [43, 0, 0, "-", "convection"], [70, 0, 0, "-", "diffusion"], [106, 0, 0, "-", "elphf"], [116, 0, 0, "-", "flow"], [119, 0, 0, "-", "levelSet"], [153, 0, 0, "-", "meshing"], [158, 0, 0, "-", "parallel"], [159, 0, 0, "-", "phase"], [179, 0, 0, "-", "reactiveWetting"], [183, 0, 0, "-", "riemann"], [185, 0, 0, "-", "test"], [186, 0, 0, "-", "updating"]], "examples.benchmarking": [[25, 0, 0, "-", "benchmarker"], [26, 0, 0, "-", "size"], [27, 0, 0, "-", "steps"], [28, 0, 0, "-", "utils"], [29, 0, 0, "-", "versions"]], "examples.cahnHilliard": [[31, 0, 0, "-", "mesh2D"], [32, 0, 0, "-", "mesh2DCoupled"], [33, 0, 0, "-", "mesh3D"], [34, 0, 0, "-", "sphere"], [35, 0, 0, "-", "sphereDaemon"], [36, 0, 0, "-", "tanh1D"], [37, 0, 0, "-", "test"]], "examples.chemotaxis": [[39, 0, 0, "-", "input"], [40, 0, 0, "-", "input2D"], [41, 0, 0, "-", "parameters"], [42, 0, 0, "-", "test"]], "examples.convection": [[44, 0, 0, "-", "advection"], [48, 0, 0, "-", "exponential1D"], [53, 0, 0, "-", "exponential1DBack"], [55, 0, 0, "-", "exponential1DSource"], [58, 0, 0, "-", "exponential2D"], [63, 0, 0, "-", "peclet"], [64, 0, 0, "-", "powerLaw1D"], [67, 0, 0, "-", "robin"], [68, 0, 0, "-", "source"], [69, 0, 0, "-", "test"]], "examples.convection.advection": [[45, 0, 0, "-", "explicitUpwind"], [46, 0, 0, "-", "implicitUpwind"], [47, 0, 0, "-", "vanLeerUpwind"]], "examples.convection.exponential1D": [[49, 0, 0, "-", "cylindricalMesh1D"], [50, 0, 0, "-", "cylindricalMesh1DNonUniform"], [51, 0, 0, "-", "mesh1D"], [52, 0, 0, "-", "tri2D"]], "examples.convection.exponential1DBack": [[54, 0, 0, "-", "mesh1D"]], "examples.convection.exponential1DSource": [[56, 0, 0, "-", "mesh1D"], [57, 0, 0, "-", "tri2D"]], "examples.convection.exponential2D": [[59, 0, 0, "-", "cylindricalMesh2D"], [60, 0, 0, "-", "cylindricalMesh2DNonUniform"], [61, 0, 0, "-", "mesh2D"], [62, 0, 0, "-", "tri2D"]], "examples.convection.powerLaw1D": [[65, 0, 0, "-", "mesh1D"], [66, 0, 0, "-", "tri2D"]], "examples.diffusion": [[71, 0, 0, "-", "anisotropy"], [72, 0, 0, "-", "circle"], [73, 0, 0, "-", "circleQuad"], [74, 0, 0, "-", "coupled"], [75, 0, 0, "-", "electrostatics"], [76, 0, 0, "-", "explicit"], [81, 0, 0, "-", "mesh1D"], [82, 0, 0, "-", "mesh20x20"], [83, 0, 0, "-", "mesh20x20Coupled"], [84, 0, 0, "-", "nthOrder"], [88, 0, 0, "-", "steadyState"], [104, 0, 0, "-", "test"], [105, 0, 0, "-", "variable"]], "examples.diffusion.explicit": [[77, 0, 0, "-", "mesh1D"], [78, 0, 0, "-", "mixedelement"], [79, 0, 0, "-", "test"], [80, 0, 0, "-", "tri2D"]], "examples.diffusion.nthOrder": [[85, 0, 0, "-", "input4thOrder1D"], [86, 0, 0, "-", "input4thOrder_line"], [87, 0, 0, "-", "test"]], "examples.diffusion.steadyState": [[89, 0, 0, "-", "mesh1D"], [92, 0, 0, "-", "mesh20x20"], [98, 0, 0, "-", "mesh50x50"], [101, 0, 0, "-", "otherMeshes"], [103, 0, 0, "-", "test"]], "examples.diffusion.steadyState.mesh1D": [[90, 0, 0, "-", "inputPeriodic"], [91, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.mesh20x20": [[93, 0, 0, "-", "gmshinput"], [94, 0, 0, "-", "isotropy"], [95, 0, 0, "-", "modifiedMeshInput"], [96, 0, 0, "-", "orthoerror"], [97, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.mesh50x50": [[99, 0, 0, "-", "input"], [100, 0, 0, "-", "tri2Dinput"]], "examples.diffusion.steadyState.otherMeshes": [[102, 0, 0, "-", "prism"]], "examples.elphf": [[107, 0, 0, "-", "diffusion"], [111, 0, 0, "-", "input"], [112, 0, 0, "-", "phase"], [113, 0, 0, "-", "phaseDiffusion"], [114, 0, 0, "-", "poisson"], [115, 0, 0, "-", "test"]], "examples.elphf.diffusion": [[108, 0, 0, "-", "mesh1D"], [109, 0, 0, "-", "mesh1Ddimensional"], [110, 0, 0, "-", "mesh2D"]], "examples.flow": [[117, 0, 0, "-", "stokesCavity"], [118, 0, 0, "-", "test"]], "examples.levelSet": [[120, 0, 0, "-", "advection"], [125, 0, 0, "-", "distanceFunction"], [131, 0, 0, "-", "electroChem"], [147, 0, 0, "-", "surfactant"], [152, 0, 0, "-", "test"]], "examples.levelSet.advection": [[121, 0, 0, "-", "circle"], [122, 0, 0, "-", "mesh1D"], [123, 0, 0, "-", "test"], [124, 0, 0, "-", "trench"]], "examples.levelSet.distanceFunction": [[126, 0, 0, "-", "circle"], [127, 0, 0, "-", "interior"], [128, 0, 0, "-", "mesh1D"], [129, 0, 0, "-", "square"], [130, 0, 0, "-", "test"]], "examples.levelSet.electroChem": [[132, 0, 0, "-", "adsorbingSurfactantEquation"], [133, 0, 0, "-", "adsorption"], [134, 0, 0, "-", "gapFillDistanceVariable"], [135, 0, 0, "-", "gapFillMesh"], [136, 0, 0, "-", "gold"], [137, 0, 0, "-", "howToWriteAScript"], [138, 0, 0, "-", "leveler"], [139, 0, 0, "-", "lines"], [140, 0, 0, "-", "matplotlibSurfactantViewer"], [141, 0, 0, "-", "mayaviSurfactantViewer"], [142, 0, 0, "-", "metalIonDiffusionEquation"], [143, 0, 0, "-", "simpleTrenchSystem"], [144, 0, 0, "-", "surfactantBulkDiffusionEquation"], [145, 0, 0, "-", "test"], [146, 0, 0, "-", "trenchMesh"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[140, 1, 1, "", "MatplotlibSurfactantViewer"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer": [[140, 2, 1, "", "axes"], [140, 2, 1, "", "cmap"], [140, 2, 1, "", "colorbar"], [140, 2, 1, "", "fig"], [140, 2, 1, "", "id"], [140, 2, 1, "", "log"], [140, 3, 1, "", "plot"], [140, 3, 1, "", "plotMesh"], [140, 3, 1, "", "setLimits"], [140, 2, 1, "", "title"], [140, 2, 1, "", "vars"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[141, 1, 1, "", "MayaviSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer": [[141, 3, 1, "", "plotMesh"], [141, 3, 1, "", "setLimits"], [141, 2, 1, "", "title"], [141, 2, 1, "", "vars"]], "examples.levelSet.surfactant": [[148, 0, 0, "-", "circle"], [149, 0, 0, "-", "expandingCircle"], [150, 0, 0, "-", "square"], [151, 0, 0, "-", "test"]], "examples.meshing": [[154, 0, 0, "-", "gmshRefinement"], [155, 0, 0, "-", "inputGrid2D"], [156, 0, 0, "-", "sphere"], [157, 0, 0, "-", "test"]], "examples.phase": [[160, 0, 0, "-", "anisotropy"], [161, 0, 0, "-", "anisotropyOLD"], [162, 0, 0, "-", "binary"], [163, 0, 0, "-", "binaryCoupled"], [164, 0, 0, "-", "impingement"], [168, 0, 0, "-", "missOrientation"], [173, 0, 0, "-", "polyxtal"], [174, 0, 0, "-", "polyxtalCoupled"], [175, 0, 0, "-", "quaternary"], [176, 0, 0, "-", "simple"], [177, 0, 0, "-", "symmetry"], [178, 0, 0, "-", "test"]], "examples.phase.impingement": [[165, 0, 0, "-", "mesh20x20"], [166, 0, 0, "-", "mesh40x1"], [167, 0, 0, "-", "test"]], "examples.phase.missOrientation": [[169, 0, 0, "-", "circle"], [170, 0, 0, "-", "mesh1D"], [171, 0, 0, "-", "modCircle"], [172, 0, 0, "-", "test"]], "examples.reactiveWetting": [[180, 0, 0, "-", "liquidVapor1D"], [181, 0, 0, "-", "liquidVapor2D"], [182, 0, 0, "-", "test"]], "examples.riemann": [[184, 0, 0, "-", "test"]], "examples.updating": [[187, 0, 0, "-", "update0_1to1_0"], [188, 0, 0, "-", "update1_0to2_0"], [189, 0, 0, "-", "update2_0to3_0"]], "fipy": [[191, 0, 0, "-", "boundaryConditions"], [190, 4, 1, "", "doctest_raw_input"], [198, 0, 0, "-", "matrices"], [206, 0, 0, "-", "meshes"], [251, 0, 0, "-", "solvers"], [354, 0, 0, "-", "steppers"], [358, 0, 0, "-", "terms"], [190, 4, 1, "", "test"], [391, 0, 0, "-", "testFiPy"], [392, 0, 0, "-", "tests"], [397, 0, 0, "-", "tools"], [417, 0, 0, "-", "variables"], [457, 0, 0, "-", "viewers"]], "fipy.boundaryConditions": [[192, 0, 0, "-", "boundaryCondition"], [193, 0, 0, "-", "constraint"], [194, 0, 0, "-", "fixedFlux"], [195, 0, 0, "-", "fixedValue"], [196, 0, 0, "-", "nthOrderBoundaryCondition"], [197, 0, 0, "-", "test"]], "fipy.boundaryConditions.boundaryCondition": [[192, 1, 1, "", "BoundaryCondition"]], "fipy.boundaryConditions.boundaryCondition.BoundaryCondition": [[192, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.constraint": [[193, 1, 1, "", "Constraint"]], "fipy.boundaryConditions.constraint.Constraint": [[193, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedFlux": [[194, 1, 1, "", "FixedFlux"]], "fipy.boundaryConditions.fixedFlux.FixedFlux": [[194, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.fixedValue": [[195, 1, 1, "", "FixedValue"]], "fipy.boundaryConditions.fixedValue.FixedValue": [[195, 3, 1, "", "__repr__"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[196, 1, 1, "", "NthOrderBoundaryCondition"]], "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition": [[196, 3, 1, "", "__repr__"]], "fipy.matrices": [[199, 0, 0, "-", "offsetSparseMatrix"], [200, 0, 0, "-", "petscMatrix"], [201, 0, 0, "-", "pysparseMatrix"], [202, 0, 0, "-", "scipyMatrix"], [203, 0, 0, "-", "sparseMatrix"], [204, 0, 0, "-", "test"], [205, 0, 0, "-", "trilinosMatrix"]], "fipy.matrices.offsetSparseMatrix": [[199, 4, 1, "", "OffsetSparseMatrix"]], "fipy.meshes": [[207, 0, 0, "-", "abstractMesh"], [208, 0, 0, "-", "builders"], [215, 0, 0, "-", "cylindricalGrid1D"], [216, 0, 0, "-", "cylindricalGrid2D"], [217, 0, 0, "-", "cylindricalNonUniformGrid1D"], [218, 0, 0, "-", "cylindricalNonUniformGrid2D"], [219, 0, 0, "-", "cylindricalUniformGrid1D"], [220, 0, 0, "-", "cylindricalUniformGrid2D"], [221, 0, 0, "-", "factoryMeshes"], [222, 0, 0, "-", "gmshMesh"], [223, 0, 0, "-", "grid1D"], [224, 0, 0, "-", "grid2D"], [225, 0, 0, "-", "grid3D"], [226, 0, 0, "-", "mesh"], [227, 0, 0, "-", "mesh1D"], [228, 0, 0, "-", "mesh2D"], [229, 0, 0, "-", "nonUniformGrid1D"], [230, 0, 0, "-", "nonUniformGrid2D"], [231, 0, 0, "-", "nonUniformGrid3D"], [232, 0, 0, "-", "periodicGrid1D"], [233, 0, 0, "-", "periodicGrid2D"], [234, 0, 0, "-", "periodicGrid3D"], [235, 0, 0, "-", "representations"], [239, 0, 0, "-", "skewedGrid2D"], [240, 0, 0, "-", "sphericalNonUniformGrid1D"], [241, 0, 0, "-", "sphericalUniformGrid1D"], [242, 0, 0, "-", "test"], [243, 0, 0, "-", "topologies"], [247, 0, 0, "-", "tri2D"], [248, 0, 0, "-", "uniformGrid"], [249, 0, 0, "-", "uniformGrid1D"], [250, 0, 0, "-", "uniformGrid2D"]], "fipy.meshes.abstractMesh": [[207, 1, 1, "", "AbstractMesh"], [207, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.abstractMesh.AbstractMesh": [[207, 2, 1, "", "VTKCellDataSet"], [207, 2, 1, "", "VTKFaceDataSet"], [207, 3, 1, "", "__add__"], [207, 3, 1, "", "__div__"], [207, 3, 1, "", "__getstate__"], [207, 3, 1, "", "__radd__"], [207, 3, 1, "", "__repr__"], [207, 3, 1, "", "__sub__"], [207, 3, 1, "", "__truediv__"], [207, 2, 1, "", "aspect2D"], [207, 2, 1, "", "cellCenters"], [207, 2, 1, "", "cellFaceIDs"], [207, 2, 1, "", "facesBack"], [207, 2, 1, "", "facesBottom"], [207, 2, 1, "", "facesDown"], [207, 2, 1, "", "facesFront"], [207, 2, 1, "", "facesLeft"], [207, 2, 1, "", "facesRight"], [207, 2, 1, "", "facesTop"], [207, 2, 1, "", "facesUp"], [207, 2, 1, "", "x"], [207, 2, 1, "", "y"], [207, 2, 1, "", "z"]], "fipy.meshes.abstractMesh.MeshAdditionError": [[207, 6, 1, "", "__cause__"], [207, 6, 1, "", "__context__"], [207, 3, 1, "", "__delattr__"], [207, 3, 1, "", "__getattribute__"], [207, 3, 1, "", "__reduce__"], [207, 3, 1, "", "__repr__"], [207, 3, 1, "", "__setattr__"], [207, 3, 1, "", "__str__"], [207, 3, 1, "", "add_note"], [207, 3, 1, "", "with_traceback"]], "fipy.meshes.builders": [[209, 0, 0, "-", "abstractGridBuilder"], [210, 0, 0, "-", "grid1DBuilder"], [211, 0, 0, "-", "grid2DBuilder"], [212, 0, 0, "-", "grid3DBuilder"], [213, 0, 0, "-", "periodicGrid1DBuilder"], [214, 0, 0, "-", "utilityClasses"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[217, 1, 1, "", "CylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D": [[217, 2, 1, "", "VTKCellDataSet"], [217, 2, 1, "", "VTKFaceDataSet"], [217, 3, 1, "", "__add__"], [217, 3, 1, "", "__div__"], [217, 3, 1, "", "__getstate__"], [217, 3, 1, "", "__mul__"], [217, 3, 1, "", "__radd__"], [217, 3, 1, "", "__repr__"], [217, 3, 1, "", "__rmul__"], [217, 3, 1, "", "__sub__"], [217, 3, 1, "", "__truediv__"], [217, 2, 1, "", "aspect2D"], [217, 2, 1, "", "cellCenters"], [217, 2, 1, "", "cellFaceIDs"], [217, 2, 1, "", "facesBack"], [217, 2, 1, "", "facesBottom"], [217, 2, 1, "", "facesDown"], [217, 2, 1, "", "facesFront"], [217, 2, 1, "", "facesLeft"], [217, 2, 1, "", "facesRight"], [217, 2, 1, "", "facesTop"], [217, 2, 1, "", "facesUp"], [217, 2, 1, "", "x"], [217, 2, 1, "", "y"], [217, 2, 1, "", "z"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[218, 1, 1, "", "CylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D": [[218, 2, 1, "", "VTKCellDataSet"], [218, 2, 1, "", "VTKFaceDataSet"], [218, 3, 1, "", "__add__"], [218, 3, 1, "", "__div__"], [218, 3, 1, "", "__getstate__"], [218, 3, 1, "", "__mul__"], [218, 3, 1, "", "__radd__"], [218, 3, 1, "", "__repr__"], [218, 3, 1, "", "__rmul__"], [218, 3, 1, "", "__sub__"], [218, 3, 1, "", "__truediv__"], [218, 2, 1, "", "aspect2D"], [218, 2, 1, "", "cellCenters"], [218, 2, 1, "", "cellFaceIDs"], [218, 3, 1, "", "extrude"], [218, 2, 1, "", "facesBack"], [218, 2, 1, "", "facesBottom"], [218, 2, 1, "", "facesDown"], [218, 2, 1, "", "facesFront"], [218, 2, 1, "", "facesLeft"], [218, 2, 1, "", "facesRight"], [218, 2, 1, "", "facesTop"], [218, 2, 1, "", "facesUp"], [218, 2, 1, "", "x"], [218, 2, 1, "", "y"], [218, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid1D": [[219, 1, 1, "", "CylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D": [[219, 2, 1, "", "VTKCellDataSet"], [219, 2, 1, "", "VTKFaceDataSet"], [219, 3, 1, "", "__add__"], [219, 3, 1, "", "__div__"], [219, 3, 1, "", "__getstate__"], [219, 3, 1, "", "__radd__"], [219, 3, 1, "", "__repr__"], [219, 3, 1, "", "__sub__"], [219, 3, 1, "", "__truediv__"], [219, 2, 1, "", "aspect2D"], [219, 2, 1, "", "cellCenters"], [219, 2, 1, "", "cellFaceIDs"], [219, 2, 1, "", "exteriorFaces"], [219, 2, 1, "", "facesBack"], [219, 2, 1, "", "facesBottom"], [219, 2, 1, "", "facesDown"], [219, 2, 1, "", "facesFront"], [219, 2, 1, "", "facesLeft"], [219, 2, 1, "", "facesRight"], [219, 2, 1, "", "facesTop"], [219, 2, 1, "", "facesUp"], [219, 2, 1, "", "x"], [219, 2, 1, "", "y"], [219, 2, 1, "", "z"]], "fipy.meshes.cylindricalUniformGrid2D": [[220, 1, 1, "", "CylindricalUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D": [[220, 2, 1, "", "VTKCellDataSet"], [220, 2, 1, "", "VTKFaceDataSet"], [220, 3, 1, "", "__add__"], [220, 3, 1, "", "__div__"], [220, 3, 1, "", "__getstate__"], [220, 3, 1, "", "__radd__"], [220, 3, 1, "", "__repr__"], [220, 3, 1, "", "__sub__"], [220, 3, 1, "", "__truediv__"], [220, 2, 1, "", "aspect2D"], [220, 2, 1, "", "cellCenters"], [220, 2, 1, "", "cellFaceIDs"], [220, 2, 1, "", "facesBack"], [220, 2, 1, "", "facesBottom"], [220, 2, 1, "", "facesDown"], [220, 2, 1, "", "facesFront"], [220, 2, 1, "", "facesLeft"], [220, 2, 1, "", "facesRight"], [220, 2, 1, "", "facesTop"], [220, 2, 1, "", "facesUp"], [220, 2, 1, "", "x"], [220, 2, 1, "", "y"], [220, 2, 1, "", "z"]], "fipy.meshes.factoryMeshes": [[221, 4, 1, "", "CylindricalGrid1D"], [221, 4, 1, "", "CylindricalGrid2D"], [221, 4, 1, "", "Grid1D"], [221, 4, 1, "", "Grid2D"], [221, 4, 1, "", "Grid3D"], [221, 4, 1, "", "SphericalGrid1D"]], "fipy.meshes.gmshMesh": [[222, 1, 1, "", "Gmsh2D"], [222, 1, 1, "", "Gmsh2DIn3DSpace"], [222, 1, 1, "", "Gmsh3D"], [222, 5, 1, "", "GmshException"], [222, 1, 1, "", "GmshFile"], [222, 1, 1, "", "GmshGrid2D"], [222, 1, 1, "", "GmshGrid3D"], [222, 1, 1, "", "MSHFile"], [222, 5, 1, "", "MeshExportError"], [222, 1, 1, "", "POSFile"], [222, 4, 1, "", "gmshVersion"], [222, 4, 1, "", "openMSHFile"], [222, 4, 1, "", "openPOSFile"]], "fipy.meshes.gmshMesh.Gmsh2D": [[222, 2, 1, "", "VTKCellDataSet"], [222, 2, 1, "", "VTKFaceDataSet"], [222, 3, 1, "", "__add__"], [222, 3, 1, "", "__div__"], [222, 3, 1, "", "__getstate__"], [222, 3, 1, "", "__mul__"], [222, 3, 1, "", "__radd__"], [222, 3, 1, "", "__repr__"], [222, 3, 1, "", "__rmul__"], [222, 3, 1, "", "__sub__"], [222, 3, 1, "", "__truediv__"], [222, 2, 1, "", "aspect2D"], [222, 2, 1, "", "cellCenters"], [222, 2, 1, "", "cellFaceIDs"], [222, 3, 1, "", "extrude"], [222, 2, 1, "", "facesBack"], [222, 2, 1, "", "facesBottom"], [222, 2, 1, "", "facesDown"], [222, 2, 1, "", "facesFront"], [222, 2, 1, "", "facesLeft"], [222, 2, 1, "", "facesRight"], [222, 2, 1, "", "facesTop"], [222, 2, 1, "", "facesUp"], [222, 2, 1, "", "x"], [222, 2, 1, "", "y"], [222, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace": [[222, 2, 1, "", "VTKCellDataSet"], [222, 2, 1, "", "VTKFaceDataSet"], [222, 3, 1, "", "__add__"], [222, 3, 1, "", "__div__"], [222, 3, 1, "", "__getstate__"], [222, 3, 1, "", "__mul__"], [222, 3, 1, "", "__radd__"], [222, 3, 1, "", "__repr__"], [222, 3, 1, "", "__rmul__"], [222, 3, 1, "", "__sub__"], [222, 3, 1, "", "__truediv__"], [222, 2, 1, "", "aspect2D"], [222, 2, 1, "", "cellCenters"], [222, 2, 1, "", "cellFaceIDs"], [222, 3, 1, "", "extrude"], [222, 2, 1, "", "facesBack"], [222, 2, 1, "", "facesBottom"], [222, 2, 1, "", "facesDown"], [222, 2, 1, "", "facesFront"], [222, 2, 1, "", "facesLeft"], [222, 2, 1, "", "facesRight"], [222, 2, 1, "", "facesTop"], [222, 2, 1, "", "facesUp"], [222, 2, 1, "", "x"], [222, 2, 1, "", "y"], [222, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.Gmsh3D": [[222, 2, 1, "", "VTKCellDataSet"], [222, 2, 1, "", "VTKFaceDataSet"], [222, 3, 1, "", "__add__"], [222, 3, 1, "", "__div__"], [222, 3, 1, "", "__getstate__"], [222, 3, 1, "", "__mul__"], [222, 3, 1, "", "__radd__"], [222, 3, 1, "", "__repr__"], [222, 3, 1, "", "__rmul__"], [222, 3, 1, "", "__sub__"], [222, 3, 1, "", "__truediv__"], [222, 2, 1, "", "aspect2D"], [222, 2, 1, "", "cellCenters"], [222, 2, 1, "", "cellFaceIDs"], [222, 2, 1, "", "facesBack"], [222, 2, 1, "", "facesBottom"], [222, 2, 1, "", "facesDown"], [222, 2, 1, "", "facesFront"], [222, 2, 1, "", "facesLeft"], [222, 2, 1, "", "facesRight"], [222, 2, 1, "", "facesTop"], [222, 2, 1, "", "facesUp"], [222, 2, 1, "", "x"], [222, 2, 1, "", "y"], [222, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshException": [[222, 6, 1, "", "__cause__"], [222, 6, 1, "", "__context__"], [222, 3, 1, "", "__delattr__"], [222, 3, 1, "", "__getattribute__"], [222, 3, 1, "", "__reduce__"], [222, 3, 1, "", "__repr__"], [222, 3, 1, "", "__setattr__"], [222, 3, 1, "", "__str__"], [222, 3, 1, "", "add_note"], [222, 3, 1, "", "with_traceback"]], "fipy.meshes.gmshMesh.GmshGrid2D": [[222, 2, 1, "", "VTKCellDataSet"], [222, 2, 1, "", "VTKFaceDataSet"], [222, 3, 1, "", "__add__"], [222, 3, 1, "", "__div__"], [222, 3, 1, "", "__getstate__"], [222, 3, 1, "", "__mul__"], [222, 3, 1, "", "__radd__"], [222, 3, 1, "", "__repr__"], [222, 3, 1, "", "__rmul__"], [222, 3, 1, "", "__sub__"], [222, 3, 1, "", "__truediv__"], [222, 2, 1, "", "aspect2D"], [222, 2, 1, "", "cellCenters"], [222, 2, 1, "", "cellFaceIDs"], [222, 3, 1, "", "extrude"], [222, 2, 1, "", "facesBack"], [222, 2, 1, "", "facesBottom"], [222, 2, 1, "", "facesDown"], [222, 2, 1, "", "facesFront"], [222, 2, 1, "", "facesLeft"], [222, 2, 1, "", "facesRight"], [222, 2, 1, "", "facesTop"], [222, 2, 1, "", "facesUp"], [222, 2, 1, "", "x"], [222, 2, 1, "", "y"], [222, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.GmshGrid3D": [[222, 2, 1, "", "VTKCellDataSet"], [222, 2, 1, "", "VTKFaceDataSet"], [222, 3, 1, "", "__add__"], [222, 3, 1, "", "__div__"], [222, 3, 1, "", "__getstate__"], [222, 3, 1, "", "__mul__"], [222, 3, 1, "", "__radd__"], [222, 3, 1, "", "__repr__"], [222, 3, 1, "", "__rmul__"], [222, 3, 1, "", "__sub__"], [222, 3, 1, "", "__truediv__"], [222, 2, 1, "", "aspect2D"], [222, 2, 1, "", "cellCenters"], [222, 2, 1, "", "cellFaceIDs"], [222, 2, 1, "", "facesBack"], [222, 2, 1, "", "facesBottom"], [222, 2, 1, "", "facesDown"], [222, 2, 1, "", "facesFront"], [222, 2, 1, "", "facesLeft"], [222, 2, 1, "", "facesRight"], [222, 2, 1, "", "facesTop"], [222, 2, 1, "", "facesUp"], [222, 2, 1, "", "x"], [222, 2, 1, "", "y"], [222, 2, 1, "", "z"]], "fipy.meshes.gmshMesh.MSHFile": [[222, 3, 1, "", "makeMapVariables"], [222, 3, 1, "", "read"]], "fipy.meshes.gmshMesh.MeshExportError": [[222, 6, 1, "", "__cause__"], [222, 6, 1, "", "__context__"], [222, 3, 1, "", "__delattr__"], [222, 3, 1, "", "__getattribute__"], [222, 3, 1, "", "__reduce__"], [222, 3, 1, "", "__repr__"], [222, 3, 1, "", "__setattr__"], [222, 3, 1, "", "__str__"], [222, 3, 1, "", "add_note"], [222, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh": [[226, 1, 1, "", "Mesh"], [226, 5, 1, "", "MeshAdditionError"]], "fipy.meshes.mesh.Mesh": [[226, 2, 1, "", "VTKCellDataSet"], [226, 2, 1, "", "VTKFaceDataSet"], [226, 3, 1, "", "__add__"], [226, 3, 1, "", "__div__"], [226, 3, 1, "", "__getstate__"], [226, 3, 1, "", "__mul__"], [226, 3, 1, "", "__radd__"], [226, 3, 1, "", "__repr__"], [226, 3, 1, "", "__rmul__"], [226, 3, 1, "", "__sub__"], [226, 3, 1, "", "__truediv__"], [226, 2, 1, "", "aspect2D"], [226, 2, 1, "", "cellCenters"], [226, 2, 1, "", "cellFaceIDs"], [226, 2, 1, "", "facesBack"], [226, 2, 1, "", "facesBottom"], [226, 2, 1, "", "facesDown"], [226, 2, 1, "", "facesFront"], [226, 2, 1, "", "facesLeft"], [226, 2, 1, "", "facesRight"], [226, 2, 1, "", "facesTop"], [226, 2, 1, "", "facesUp"], [226, 2, 1, "", "x"], [226, 2, 1, "", "y"], [226, 2, 1, "", "z"]], "fipy.meshes.mesh.MeshAdditionError": [[226, 6, 1, "", "__cause__"], [226, 6, 1, "", "__context__"], [226, 3, 1, "", "__delattr__"], [226, 3, 1, "", "__getattribute__"], [226, 3, 1, "", "__reduce__"], [226, 3, 1, "", "__repr__"], [226, 3, 1, "", "__setattr__"], [226, 3, 1, "", "__str__"], [226, 3, 1, "", "add_note"], [226, 3, 1, "", "with_traceback"]], "fipy.meshes.mesh1D": [[227, 1, 1, "", "Mesh1D"]], "fipy.meshes.mesh1D.Mesh1D": [[227, 2, 1, "", "VTKCellDataSet"], [227, 2, 1, "", "VTKFaceDataSet"], [227, 3, 1, "", "__add__"], [227, 3, 1, "", "__div__"], [227, 3, 1, "", "__getstate__"], [227, 3, 1, "", "__mul__"], [227, 3, 1, "", "__radd__"], [227, 3, 1, "", "__repr__"], [227, 3, 1, "", "__rmul__"], [227, 3, 1, "", "__sub__"], [227, 3, 1, "", "__truediv__"], [227, 2, 1, "", "aspect2D"], [227, 2, 1, "", "cellCenters"], [227, 2, 1, "", "cellFaceIDs"], [227, 2, 1, "", "facesBack"], [227, 2, 1, "", "facesBottom"], [227, 2, 1, "", "facesDown"], [227, 2, 1, "", "facesFront"], [227, 2, 1, "", "facesLeft"], [227, 2, 1, "", "facesRight"], [227, 2, 1, "", "facesTop"], [227, 2, 1, "", "facesUp"], [227, 2, 1, "", "x"], [227, 2, 1, "", "y"], [227, 2, 1, "", "z"]], "fipy.meshes.mesh2D": [[228, 1, 1, "", "Mesh2D"]], "fipy.meshes.mesh2D.Mesh2D": [[228, 2, 1, "", "VTKCellDataSet"], [228, 2, 1, "", "VTKFaceDataSet"], [228, 3, 1, "", "__add__"], [228, 3, 1, "", "__div__"], [228, 3, 1, "", "__getstate__"], [228, 3, 1, "", "__mul__"], [228, 3, 1, "", "__radd__"], [228, 3, 1, "", "__repr__"], [228, 3, 1, "", "__rmul__"], [228, 3, 1, "", "__sub__"], [228, 3, 1, "", "__truediv__"], [228, 2, 1, "", "aspect2D"], [228, 2, 1, "", "cellCenters"], [228, 2, 1, "", "cellFaceIDs"], [228, 3, 1, "", "extrude"], [228, 2, 1, "", "facesBack"], [228, 2, 1, "", "facesBottom"], [228, 2, 1, "", "facesDown"], [228, 2, 1, "", "facesFront"], [228, 2, 1, "", "facesLeft"], [228, 2, 1, "", "facesRight"], [228, 2, 1, "", "facesTop"], [228, 2, 1, "", "facesUp"], [228, 2, 1, "", "x"], [228, 2, 1, "", "y"], [228, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid1D": [[229, 1, 1, "", "NonUniformGrid1D"]], "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D": [[229, 2, 1, "", "VTKCellDataSet"], [229, 2, 1, "", "VTKFaceDataSet"], [229, 3, 1, "", "__add__"], [229, 3, 1, "", "__div__"], [229, 3, 1, "", "__getstate__"], [229, 3, 1, "", "__mul__"], [229, 3, 1, "", "__radd__"], [229, 3, 1, "", "__repr__"], [229, 3, 1, "", "__rmul__"], [229, 3, 1, "", "__sub__"], [229, 3, 1, "", "__truediv__"], [229, 2, 1, "", "aspect2D"], [229, 2, 1, "", "cellCenters"], [229, 2, 1, "", "cellFaceIDs"], [229, 2, 1, "", "facesBack"], [229, 2, 1, "", "facesBottom"], [229, 2, 1, "", "facesDown"], [229, 2, 1, "", "facesFront"], [229, 2, 1, "", "facesLeft"], [229, 2, 1, "", "facesRight"], [229, 2, 1, "", "facesTop"], [229, 2, 1, "", "facesUp"], [229, 2, 1, "", "x"], [229, 2, 1, "", "y"], [229, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid2D": [[230, 1, 1, "", "NonUniformGrid2D"]], "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D": [[230, 2, 1, "", "VTKCellDataSet"], [230, 2, 1, "", "VTKFaceDataSet"], [230, 3, 1, "", "__add__"], [230, 3, 1, "", "__div__"], [230, 3, 1, "", "__getstate__"], [230, 3, 1, "", "__mul__"], [230, 3, 1, "", "__radd__"], [230, 3, 1, "", "__repr__"], [230, 3, 1, "", "__rmul__"], [230, 3, 1, "", "__sub__"], [230, 3, 1, "", "__truediv__"], [230, 2, 1, "", "aspect2D"], [230, 2, 1, "", "cellCenters"], [230, 2, 1, "", "cellFaceIDs"], [230, 3, 1, "", "extrude"], [230, 2, 1, "", "facesBack"], [230, 2, 1, "", "facesBottom"], [230, 2, 1, "", "facesDown"], [230, 2, 1, "", "facesFront"], [230, 2, 1, "", "facesLeft"], [230, 2, 1, "", "facesRight"], [230, 2, 1, "", "facesTop"], [230, 2, 1, "", "facesUp"], [230, 2, 1, "", "x"], [230, 2, 1, "", "y"], [230, 2, 1, "", "z"]], "fipy.meshes.nonUniformGrid3D": [[231, 1, 1, "", "NonUniformGrid3D"]], "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D": [[231, 2, 1, "", "VTKCellDataSet"], [231, 2, 1, "", "VTKFaceDataSet"], [231, 3, 1, "", "__add__"], [231, 3, 1, "", "__div__"], [231, 3, 1, "", "__getstate__"], [231, 3, 1, "", "__mul__"], [231, 3, 1, "", "__radd__"], [231, 3, 1, "", "__repr__"], [231, 3, 1, "", "__rmul__"], [231, 3, 1, "", "__sub__"], [231, 3, 1, "", "__truediv__"], [231, 2, 1, "", "aspect2D"], [231, 2, 1, "", "cellCenters"], [231, 2, 1, "", "cellFaceIDs"], [231, 2, 1, "", "facesBack"], [231, 2, 1, "", "facesBottom"], [231, 2, 1, "", "facesDown"], [231, 2, 1, "", "facesFront"], [231, 2, 1, "", "facesLeft"], [231, 2, 1, "", "facesRight"], [231, 2, 1, "", "facesTop"], [231, 2, 1, "", "facesUp"], [231, 2, 1, "", "x"], [231, 2, 1, "", "y"], [231, 2, 1, "", "z"]], "fipy.meshes.periodicGrid1D": [[232, 1, 1, "", "PeriodicGrid1D"]], "fipy.meshes.periodicGrid1D.PeriodicGrid1D": [[232, 2, 1, "", "VTKCellDataSet"], [232, 2, 1, "", "VTKFaceDataSet"], [232, 3, 1, "", "__add__"], [232, 3, 1, "", "__div__"], [232, 3, 1, "", "__getstate__"], [232, 3, 1, "", "__mul__"], [232, 3, 1, "", "__radd__"], [232, 3, 1, "", "__repr__"], [232, 3, 1, "", "__rmul__"], [232, 3, 1, "", "__sub__"], [232, 3, 1, "", "__truediv__"], [232, 2, 1, "", "aspect2D"], [232, 2, 1, "", "cellCenters"], [232, 2, 1, "", "cellFaceIDs"], [232, 2, 1, "", "facesBack"], [232, 2, 1, "", "facesBottom"], [232, 2, 1, "", "facesDown"], [232, 2, 1, "", "facesFront"], [232, 2, 1, "", "facesLeft"], [232, 2, 1, "", "facesRight"], [232, 2, 1, "", "facesTop"], [232, 2, 1, "", "facesUp"], [232, 2, 1, "", "x"], [232, 2, 1, "", "y"], [232, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D": [[233, 1, 1, "", "PeriodicGrid2D"], [233, 1, 1, "", "PeriodicGrid2DLeftRight"], [233, 1, 1, "", "PeriodicGrid2DTopBottom"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2D": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 3, 1, "", "extrude"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 3, 1, "", "extrude"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom": [[233, 2, 1, "", "VTKCellDataSet"], [233, 2, 1, "", "VTKFaceDataSet"], [233, 3, 1, "", "__add__"], [233, 3, 1, "", "__div__"], [233, 3, 1, "", "__getstate__"], [233, 3, 1, "", "__mul__"], [233, 3, 1, "", "__radd__"], [233, 3, 1, "", "__repr__"], [233, 3, 1, "", "__rmul__"], [233, 3, 1, "", "__sub__"], [233, 3, 1, "", "__truediv__"], [233, 2, 1, "", "aspect2D"], [233, 2, 1, "", "cellCenters"], [233, 2, 1, "", "cellFaceIDs"], [233, 3, 1, "", "extrude"], [233, 2, 1, "", "facesBack"], [233, 2, 1, "", "facesBottom"], [233, 2, 1, "", "facesDown"], [233, 2, 1, "", "facesFront"], [233, 2, 1, "", "facesLeft"], [233, 2, 1, "", "facesRight"], [233, 2, 1, "", "facesTop"], [233, 2, 1, "", "facesUp"], [233, 2, 1, "", "x"], [233, 2, 1, "", "y"], [233, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D": [[234, 1, 1, "", "PeriodicGrid3D"], [234, 1, 1, "", "PeriodicGrid3DFrontBack"], [234, 1, 1, "", "PeriodicGrid3DLeftRight"], [234, 1, 1, "", "PeriodicGrid3DLeftRightFrontBack"], [234, 1, 1, "", "PeriodicGrid3DLeftRightTopBottom"], [234, 1, 1, "", "PeriodicGrid3DTopBottom"], [234, 1, 1, "", "PeriodicGrid3DTopBottomFrontBack"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3D": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__getstate__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellCenters"], [234, 2, 1, "", "cellFaceIDs"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__getstate__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellCenters"], [234, 2, 1, "", "cellFaceIDs"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__getstate__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellCenters"], [234, 2, 1, "", "cellFaceIDs"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__getstate__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellCenters"], [234, 2, 1, "", "cellFaceIDs"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__getstate__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellCenters"], [234, 2, 1, "", "cellFaceIDs"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__getstate__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellCenters"], [234, 2, 1, "", "cellFaceIDs"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack": [[234, 2, 1, "", "VTKCellDataSet"], [234, 2, 1, "", "VTKFaceDataSet"], [234, 3, 1, "", "__add__"], [234, 3, 1, "", "__div__"], [234, 3, 1, "", "__getstate__"], [234, 3, 1, "", "__mul__"], [234, 3, 1, "", "__radd__"], [234, 3, 1, "", "__repr__"], [234, 3, 1, "", "__rmul__"], [234, 3, 1, "", "__sub__"], [234, 3, 1, "", "__truediv__"], [234, 2, 1, "", "aspect2D"], [234, 2, 1, "", "cellCenters"], [234, 2, 1, "", "cellFaceIDs"], [234, 2, 1, "", "facesBack"], [234, 2, 1, "", "facesBottom"], [234, 2, 1, "", "facesDown"], [234, 2, 1, "", "facesFront"], [234, 2, 1, "", "facesLeft"], [234, 2, 1, "", "facesRight"], [234, 2, 1, "", "facesTop"], [234, 2, 1, "", "facesUp"], [234, 2, 1, "", "x"], [234, 2, 1, "", "y"], [234, 2, 1, "", "z"]], "fipy.meshes.representations": [[236, 0, 0, "-", "abstractRepresentation"], [237, 0, 0, "-", "gridRepresentation"], [238, 0, 0, "-", "meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[239, 1, 1, "", "SkewedGrid2D"]], "fipy.meshes.skewedGrid2D.SkewedGrid2D": [[239, 2, 1, "", "VTKCellDataSet"], [239, 2, 1, "", "VTKFaceDataSet"], [239, 3, 1, "", "__add__"], [239, 3, 1, "", "__div__"], [239, 3, 1, "", "__getstate__"], [239, 3, 1, "", "__mul__"], [239, 3, 1, "", "__radd__"], [239, 3, 1, "", "__repr__"], [239, 3, 1, "", "__rmul__"], [239, 3, 1, "", "__sub__"], [239, 3, 1, "", "__truediv__"], [239, 2, 1, "", "aspect2D"], [239, 2, 1, "", "cellCenters"], [239, 2, 1, "", "cellFaceIDs"], [239, 3, 1, "", "extrude"], [239, 2, 1, "", "facesBack"], [239, 2, 1, "", "facesBottom"], [239, 2, 1, "", "facesDown"], [239, 2, 1, "", "facesFront"], [239, 2, 1, "", "facesLeft"], [239, 2, 1, "", "facesRight"], [239, 2, 1, "", "facesTop"], [239, 2, 1, "", "facesUp"], [239, 2, 1, "", "physicalShape"], [239, 2, 1, "", "x"], [239, 2, 1, "", "y"], [239, 2, 1, "", "z"]], "fipy.meshes.sphericalNonUniformGrid1D": [[240, 1, 1, "", "SphericalNonUniformGrid1D"]], "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D": [[240, 2, 1, "", "VTKCellDataSet"], [240, 2, 1, "", "VTKFaceDataSet"], [240, 3, 1, "", "__add__"], [240, 3, 1, "", "__div__"], [240, 3, 1, "", "__getstate__"], [240, 3, 1, "", "__mul__"], [240, 3, 1, "", "__radd__"], [240, 3, 1, "", "__repr__"], [240, 3, 1, "", "__rmul__"], [240, 3, 1, "", "__sub__"], [240, 3, 1, "", "__truediv__"], [240, 2, 1, "", "aspect2D"], [240, 2, 1, "", "cellCenters"], [240, 2, 1, "", "cellFaceIDs"], [240, 2, 1, "", "facesBack"], [240, 2, 1, "", "facesBottom"], [240, 2, 1, "", "facesDown"], [240, 2, 1, "", "facesFront"], [240, 2, 1, "", "facesLeft"], [240, 2, 1, "", "facesRight"], [240, 2, 1, "", "facesTop"], [240, 2, 1, "", "facesUp"], [240, 2, 1, "", "x"], [240, 2, 1, "", "y"], [240, 2, 1, "", "z"]], "fipy.meshes.sphericalUniformGrid1D": [[241, 1, 1, "", "SphericalUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D": [[241, 2, 1, "", "VTKCellDataSet"], [241, 2, 1, "", "VTKFaceDataSet"], [241, 3, 1, "", "__add__"], [241, 3, 1, "", "__div__"], [241, 3, 1, "", "__getstate__"], [241, 3, 1, "", "__radd__"], [241, 3, 1, "", "__repr__"], [241, 3, 1, "", "__sub__"], [241, 3, 1, "", "__truediv__"], [241, 2, 1, "", "aspect2D"], [241, 2, 1, "", "cellCenters"], [241, 2, 1, "", "cellFaceIDs"], [241, 2, 1, "", "exteriorFaces"], [241, 2, 1, "", "facesBack"], [241, 2, 1, "", "facesBottom"], [241, 2, 1, "", "facesDown"], [241, 2, 1, "", "facesFront"], [241, 2, 1, "", "facesLeft"], [241, 2, 1, "", "facesRight"], [241, 2, 1, "", "facesTop"], [241, 2, 1, "", "facesUp"], [241, 2, 1, "", "x"], [241, 2, 1, "", "y"], [241, 2, 1, "", "z"]], "fipy.meshes.topologies": [[244, 0, 0, "-", "abstractTopology"], [245, 0, 0, "-", "gridTopology"], [246, 0, 0, "-", "meshTopology"]], "fipy.meshes.tri2D": [[247, 1, 1, "", "Tri2D"]], "fipy.meshes.tri2D.Tri2D": [[247, 2, 1, "", "VTKCellDataSet"], [247, 2, 1, "", "VTKFaceDataSet"], [247, 3, 1, "", "__add__"], [247, 3, 1, "", "__div__"], [247, 3, 1, "", "__getstate__"], [247, 3, 1, "", "__mul__"], [247, 3, 1, "", "__radd__"], [247, 3, 1, "", "__repr__"], [247, 3, 1, "", "__rmul__"], [247, 3, 1, "", "__sub__"], [247, 3, 1, "", "__truediv__"], [247, 2, 1, "", "aspect2D"], [247, 2, 1, "", "cellCenters"], [247, 2, 1, "", "cellFaceIDs"], [247, 3, 1, "", "extrude"], [247, 2, 1, "", "facesBack"], [247, 2, 1, "", "facesBottom"], [247, 2, 1, "", "facesDown"], [247, 2, 1, "", "facesFront"], [247, 2, 1, "", "facesLeft"], [247, 2, 1, "", "facesRight"], [247, 2, 1, "", "facesTop"], [247, 2, 1, "", "facesUp"], [247, 2, 1, "", "physicalShape"], [247, 2, 1, "", "x"], [247, 2, 1, "", "y"], [247, 2, 1, "", "z"]], "fipy.meshes.uniformGrid": [[248, 1, 1, "", "UniformGrid"]], "fipy.meshes.uniformGrid.UniformGrid": [[248, 2, 1, "", "VTKCellDataSet"], [248, 2, 1, "", "VTKFaceDataSet"], [248, 3, 1, "", "__add__"], [248, 3, 1, "", "__div__"], [248, 3, 1, "", "__getstate__"], [248, 3, 1, "", "__radd__"], [248, 3, 1, "", "__repr__"], [248, 3, 1, "", "__sub__"], [248, 3, 1, "", "__truediv__"], [248, 2, 1, "", "aspect2D"], [248, 2, 1, "", "cellCenters"], [248, 2, 1, "", "cellFaceIDs"], [248, 2, 1, "", "facesBack"], [248, 2, 1, "", "facesBottom"], [248, 2, 1, "", "facesDown"], [248, 2, 1, "", "facesFront"], [248, 2, 1, "", "facesLeft"], [248, 2, 1, "", "facesRight"], [248, 2, 1, "", "facesTop"], [248, 2, 1, "", "facesUp"], [248, 2, 1, "", "x"], [248, 2, 1, "", "y"], [248, 2, 1, "", "z"]], "fipy.meshes.uniformGrid1D": [[249, 1, 1, "", "UniformGrid1D"]], "fipy.meshes.uniformGrid1D.UniformGrid1D": [[249, 2, 1, "", "VTKCellDataSet"], [249, 2, 1, "", "VTKFaceDataSet"], [249, 3, 1, "", "__add__"], [249, 3, 1, "", "__div__"], [249, 3, 1, "", "__getstate__"], [249, 3, 1, "", "__radd__"], [249, 3, 1, "", "__repr__"], [249, 3, 1, "", "__sub__"], [249, 3, 1, "", "__truediv__"], [249, 2, 1, "", "aspect2D"], [249, 2, 1, "", "cellCenters"], [249, 2, 1, "", "cellFaceIDs"], [249, 2, 1, "", "exteriorFaces"], [249, 2, 1, "", "facesBack"], [249, 2, 1, "", "facesBottom"], [249, 2, 1, "", "facesDown"], [249, 2, 1, "", "facesFront"], [249, 2, 1, "", "facesLeft"], [249, 2, 1, "", "facesRight"], [249, 2, 1, "", "facesTop"], [249, 2, 1, "", "facesUp"], [249, 2, 1, "", "x"], [249, 2, 1, "", "y"], [249, 2, 1, "", "z"]], "fipy.meshes.uniformGrid2D": [[250, 1, 1, "", "UniformGrid2D"]], "fipy.meshes.uniformGrid2D.UniformGrid2D": [[250, 2, 1, "", "VTKCellDataSet"], [250, 2, 1, "", "VTKFaceDataSet"], [250, 3, 1, "", "__add__"], [250, 3, 1, "", "__div__"], [250, 3, 1, "", "__getstate__"], [250, 3, 1, "", "__radd__"], [250, 3, 1, "", "__repr__"], [250, 3, 1, "", "__sub__"], [250, 3, 1, "", "__truediv__"], [250, 2, 1, "", "aspect2D"], [250, 2, 1, "", "cellCenters"], [250, 2, 1, "", "cellFaceIDs"], [250, 2, 1, "", "facesBack"], [250, 2, 1, "", "facesBottom"], [250, 2, 1, "", "facesDown"], [250, 2, 1, "", "facesFront"], [250, 2, 1, "", "facesLeft"], [250, 2, 1, "", "facesRight"], [250, 2, 1, "", "facesTop"], [250, 2, 1, "", "facesUp"], [250, 2, 1, "", "x"], [250, 2, 1, "", "y"], [250, 2, 1, "", "z"]], "fipy.solvers": [[251, 6, 1, "", "DefaultAsymmetricSolver"], [251, 6, 1, "", "DefaultSolver"], [251, 6, 1, "", "DummySolver"], [251, 6, 1, "", "GeneralSolver"], [251, 5, 1, "", "SerialSolverError"], [252, 0, 0, "-", "convergence"], [253, 0, 0, "-", "petsc"], [275, 0, 0, "-", "preconditioner"], [276, 0, 0, "-", "pyAMG"], [284, 0, 0, "-", "pyamgx"], [296, 0, 0, "-", "pysparse"], [310, 0, 0, "-", "pysparseMatrixSolver"], [311, 0, 0, "-", "scipy"], [324, 0, 0, "-", "solver"], [325, 0, 0, "-", "test"], [326, 0, 0, "-", "trilinos"]], "fipy.solvers.SerialSolverError": [[251, 6, 1, "", "__cause__"], [251, 6, 1, "", "__context__"], [251, 3, 1, "", "__delattr__"], [251, 3, 1, "", "__getattribute__"], [251, 3, 1, "", "__reduce__"], [251, 3, 1, "", "__repr__"], [251, 3, 1, "", "__setattr__"], [251, 3, 1, "", "__str__"], [251, 3, 1, "", "add_note"], [251, 3, 1, "", "with_traceback"]], "fipy.solvers.convergence": [[252, 1, 1, "", "AbsoluteToleranceConvergence"], [252, 1, 1, "", "BreakdownDivergence"], [252, 1, 1, "", "Convergence"], [252, 1, 1, "", "ConvergenceBase"], [252, 1, 1, "", "Divergence"], [252, 1, 1, "", "HappyBreakdownConvergence"], [252, 1, 1, "", "IllConditionedDivergence"], [252, 1, 1, "", "IllConditionedPreconditionerDivergence"], [252, 1, 1, "", "IteratingConvergence"], [252, 1, 1, "", "IterationConvergence"], [252, 1, 1, "", "IterationDivergence"], [252, 1, 1, "", "LossOfAccuracyConvergence"], [252, 1, 1, "", "NullDivergence"], [252, 1, 1, "", "OutOfRangeDivergence"], [252, 1, 1, "", "PreconditioningDivergence"], [252, 1, 1, "", "RHSZeroConvergence"], [252, 1, 1, "", "RelativeToleranceConvergence"], [252, 1, 1, "", "StagnatedDivergence"], [252, 1, 1, "", "ToleranceDivergence"]], "fipy.solvers.convergence.AbsoluteToleranceConvergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.BreakdownDivergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.Convergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.ConvergenceBase": [[252, 3, 1, "", "__str__"], [252, 6, 1, "", "actual_code"], [252, 6, 1, "", "criterion"], [252, 6, 1, "", "iterations"], [252, 6, 1, "", "residual"], [252, 6, 1, "", "solver"], [252, 6, 1, "", "status_code"], [252, 6, 1, "", "status_name"], [252, 6, 1, "", "tolerance_scale"]], "fipy.solvers.convergence.Divergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.HappyBreakdownConvergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IllConditionedDivergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IllConditionedPreconditionerDivergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IteratingConvergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IterationConvergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.IterationDivergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.LossOfAccuracyConvergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.NullDivergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.OutOfRangeDivergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.PreconditioningDivergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.RHSZeroConvergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.RelativeToleranceConvergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.StagnatedDivergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.convergence.ToleranceDivergence": [[252, 3, 1, "", "__str__"]], "fipy.solvers.petsc": [[254, 0, 0, "-", "comms"], [258, 0, 0, "-", "dummySolver"], [259, 0, 0, "-", "linearBicgSolver"], [260, 0, 0, "-", "linearCGSSolver"], [261, 0, 0, "-", "linearGMRESSolver"], [262, 0, 0, "-", "linearLUSolver"], [263, 0, 0, "-", "linearPCGSolver"], [264, 0, 0, "-", "petscConvergence"], [265, 0, 0, "-", "petscKrylovSolver"], [266, 0, 0, "-", "petscSolver"], [267, 0, 0, "-", "preconditioners"]], "fipy.solvers.petsc.comms": [[255, 0, 0, "-", "parallelPETScCommWrapper"], [256, 0, 0, "-", "petscCommWrapper"], [257, 0, 0, "-", "serialPETScCommWrapper"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper": [[255, 1, 1, "", "ParallelPETScCommWrapper"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper": [[255, 3, 1, "", "__getstate__"], [255, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.comms.petscCommWrapper": [[256, 1, 1, "", "PETScCommWrapper"]], "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper": [[256, 3, 1, "", "__getstate__"], [256, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper": [[257, 1, 1, "", "SerialPETScCommWrapper"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper": [[257, 3, 1, "", "__getstate__"], [257, 3, 1, "", "__repr__"]], "fipy.solvers.petsc.dummySolver": [[258, 1, 1, "", "DummySolver"]], "fipy.solvers.petsc.dummySolver.DummySolver": [[258, 6, 1, "", "DEFAULT_ITERATIONS"], [258, 6, 1, "", "DEFAULT_PRECONDITIONER"], [258, 6, 1, "", "DEFAULT_TOLERANCE"], [258, 6, 1, "", "LEGACY_TOLERANCE"], [258, 3, 1, "", "__repr__"], [258, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearBicgSolver": [[259, 1, 1, "", "LinearBicgSolver"]], "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver": [[259, 6, 1, "", "DEFAULT_ITERATIONS"], [259, 6, 1, "", "DEFAULT_PRECONDITIONER"], [259, 6, 1, "", "DEFAULT_TOLERANCE"], [259, 6, 1, "", "LEGACY_TOLERANCE"], [259, 3, 1, "", "__repr__"], [259, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearCGSSolver": [[260, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver": [[260, 6, 1, "", "DEFAULT_ITERATIONS"], [260, 6, 1, "", "DEFAULT_PRECONDITIONER"], [260, 6, 1, "", "DEFAULT_TOLERANCE"], [260, 6, 1, "", "LEGACY_TOLERANCE"], [260, 3, 1, "", "__repr__"], [260, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearGMRESSolver": [[261, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver": [[261, 6, 1, "", "DEFAULT_ITERATIONS"], [261, 6, 1, "", "DEFAULT_PRECONDITIONER"], [261, 6, 1, "", "DEFAULT_TOLERANCE"], [261, 6, 1, "", "LEGACY_TOLERANCE"], [261, 3, 1, "", "__repr__"], [261, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearLUSolver": [[262, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.petsc.linearLUSolver.LinearLUSolver": [[262, 6, 1, "", "DEFAULT_ITERATIONS"], [262, 6, 1, "", "DEFAULT_PRECONDITIONER"], [262, 6, 1, "", "DEFAULT_TOLERANCE"], [262, 6, 1, "", "LEGACY_TOLERANCE"], [262, 3, 1, "", "__repr__"], [262, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.linearPCGSolver": [[263, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver": [[263, 6, 1, "", "DEFAULT_ITERATIONS"], [263, 6, 1, "", "DEFAULT_PRECONDITIONER"], [263, 6, 1, "", "DEFAULT_TOLERANCE"], [263, 6, 1, "", "LEGACY_TOLERANCE"], [263, 3, 1, "", "__repr__"], [263, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.petscConvergence": [[264, 1, 1, "", "KSP_AbsoluteToleranceConvergence"], [264, 1, 1, "", "KSP_BreakdownBICGDivergence"], [264, 1, 1, "", "KSP_BreakdownDivergence"], [264, 1, 1, "", "KSP_HappyBreakdownConvergence"], [264, 1, 1, "", "KSP_IndefiniteMatrixDivergence"], [264, 1, 1, "", "KSP_IndefinitePreconditionerDivergence"], [264, 1, 1, "", "KSP_IteratingConvergence"], [264, 1, 1, "", "KSP_IterationConvergence"], [264, 1, 1, "", "KSP_IterationDivergence"], [264, 1, 1, "", "KSP_NanOrInfDivergence"], [264, 1, 1, "", "KSP_NonSymmetricDivergence"], [264, 1, 1, "", "KSP_NormalAbsoluteToleranceConvergence"], [264, 1, 1, "", "KSP_NormalRelativeToleranceConvergence"], [264, 1, 1, "", "KSP_NullDivergence"], [264, 1, 1, "", "KSP_PreconditioningDivergence"], [264, 1, 1, "", "KSP_RelativeToleranceConvergence"], [264, 1, 1, "", "KSP_ToleranceDivergence"]], "fipy.solvers.petsc.petscConvergence.KSP_AbsoluteToleranceConvergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_BreakdownBICGDivergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_BreakdownDivergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_HappyBreakdownConvergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IndefiniteMatrixDivergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IndefinitePreconditionerDivergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IteratingConvergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IterationConvergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_IterationDivergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NanOrInfDivergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NonSymmetricDivergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NormalAbsoluteToleranceConvergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NormalRelativeToleranceConvergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_NullDivergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_PreconditioningDivergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_RelativeToleranceConvergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscConvergence.KSP_ToleranceDivergence": [[264, 3, 1, "", "__str__"]], "fipy.solvers.petsc.petscKrylovSolver": [[265, 1, 1, "", "PETScKrylovSolver"]], "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver": [[265, 6, 1, "", "DEFAULT_ITERATIONS"], [265, 6, 1, "", "DEFAULT_PRECONDITIONER"], [265, 6, 1, "", "DEFAULT_TOLERANCE"], [265, 6, 1, "", "LEGACY_TOLERANCE"], [265, 3, 1, "", "__repr__"], [265, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.petscSolver": [[266, 1, 1, "", "PETScSolver"]], "fipy.solvers.petsc.petscSolver.PETScSolver": [[266, 6, 1, "", "DEFAULT_ITERATIONS"], [266, 6, 1, "", "DEFAULT_PRECONDITIONER"], [266, 6, 1, "", "DEFAULT_TOLERANCE"], [266, 6, 1, "", "LEGACY_TOLERANCE"], [266, 3, 1, "", "__repr__"], [266, 2, 1, "", "default_tolerance"]], "fipy.solvers.petsc.preconditioners": [[267, 1, 1, "", "DefaultPreconditioner"], [267, 1, 1, "", "ICPreconditioner"], [267, 1, 1, "", "ILUPreconditioner"], [267, 1, 1, "", "JacobiPreconditioner"], [267, 1, 1, "", "LUPreconditioner"], [267, 1, 1, "", "SSORPreconditioner"], [268, 0, 0, "-", "defaultPreconditioner"], [269, 0, 0, "-", "icPreconditioner"], [270, 0, 0, "-", "iluPreconditioner"], [271, 0, 0, "-", "jacobiPreconditioner"], [272, 0, 0, "-", "luPreconditioner"], [273, 0, 0, "-", "petscPreconditioner"], [274, 0, 0, "-", "ssorPreconditioner"]], "fipy.solvers.petsc.preconditioners.defaultPreconditioner": [[268, 1, 1, "", "DefaultPreconditioner"]], "fipy.solvers.petsc.preconditioners.icPreconditioner": [[269, 1, 1, "", "ICPreconditioner"]], "fipy.solvers.petsc.preconditioners.iluPreconditioner": [[270, 1, 1, "", "ILUPreconditioner"]], "fipy.solvers.petsc.preconditioners.jacobiPreconditioner": [[271, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.petsc.preconditioners.luPreconditioner": [[272, 1, 1, "", "LUPreconditioner"]], "fipy.solvers.petsc.preconditioners.petscPreconditioner": [[273, 1, 1, "", "PETScPreconditioner"]], "fipy.solvers.petsc.preconditioners.ssorPreconditioner": [[274, 1, 1, "", "SSORPreconditioner"]], "fipy.solvers.preconditioner": [[275, 1, 1, "", "MatrixModifyingPreconditioner"], [275, 1, 1, "", "Preconditioner"], [275, 1, 1, "", "SolverModifyingPreconditioner"]], "fipy.solvers.pyAMG": [[277, 0, 0, "-", "linearCGSSolver"], [278, 0, 0, "-", "linearGMRESSolver"], [279, 0, 0, "-", "linearGeneralSolver"], [280, 0, 0, "-", "linearLUSolver"], [281, 0, 0, "-", "linearPCGSolver"], [282, 0, 0, "-", "preconditioners"]], "fipy.solvers.pyAMG.linearCGSSolver": [[277, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver": [[277, 6, 1, "", "DEFAULT_ITERATIONS"], [277, 6, 1, "", "DEFAULT_PRECONDITIONER"], [277, 6, 1, "", "DEFAULT_TOLERANCE"], [277, 6, 1, "", "LEGACY_TOLERANCE"], [277, 3, 1, "", "__repr__"], [277, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.linearGMRESSolver": [[278, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver": [[278, 6, 1, "", "DEFAULT_ITERATIONS"], [278, 6, 1, "", "DEFAULT_PRECONDITIONER"], [278, 6, 1, "", "DEFAULT_TOLERANCE"], [278, 6, 1, "", "LEGACY_TOLERANCE"], [278, 3, 1, "", "__repr__"], [278, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.linearGeneralSolver": [[279, 1, 1, "", "LinearGeneralSolver"]], "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver": [[279, 6, 1, "", "DEFAULT_ITERATIONS"], [279, 6, 1, "", "DEFAULT_PRECONDITIONER"], [279, 6, 1, "", "DEFAULT_TOLERANCE"], [279, 6, 1, "", "LEGACY_TOLERANCE"], [279, 3, 1, "", "__repr__"], [279, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.linearLUSolver": [[280, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver": [[280, 6, 1, "", "DEFAULT_ITERATIONS"], [280, 6, 1, "", "DEFAULT_PRECONDITIONER"], [280, 6, 1, "", "DEFAULT_TOLERANCE"], [280, 6, 1, "", "LEGACY_TOLERANCE"], [280, 3, 1, "", "__repr__"], [280, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.linearPCGSolver": [[281, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver": [[281, 6, 1, "", "DEFAULT_ITERATIONS"], [281, 6, 1, "", "DEFAULT_PRECONDITIONER"], [281, 6, 1, "", "DEFAULT_TOLERANCE"], [281, 6, 1, "", "LEGACY_TOLERANCE"], [281, 3, 1, "", "__repr__"], [281, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyAMG.preconditioners": [[283, 0, 0, "-", "smoothedAggregationPreconditioner"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[283, 1, 1, "", "SmoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[285, 0, 0, "-", "aggregationAMGSolver"], [286, 0, 0, "-", "classicalAMGSolver"], [287, 0, 0, "-", "linearBiCGStabSolver"], [288, 0, 0, "-", "linearFGMRESSolver"], [289, 0, 0, "-", "linearGMRESSolver"], [290, 0, 0, "-", "linearLUSolver"], [291, 0, 0, "-", "linearPCGSolver"], [292, 0, 0, "-", "preconditioners"], [293, 0, 0, "-", "pyAMGXSolver"], [294, 0, 0, "-", "pyamgxConvergence"], [295, 0, 0, "-", "smoothers"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[285, 1, 1, "", "AggregationAMGSolver"]], "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver": [[285, 6, 1, "", "DEFAULT_ITERATIONS"], [285, 6, 1, "", "DEFAULT_PRECONDITIONER"], [285, 6, 1, "", "DEFAULT_SMOOTHER"], [285, 6, 1, "", "DEFAULT_TOLERANCE"], [285, 6, 1, "", "LEGACY_TOLERANCE"], [285, 3, 1, "", "__repr__"], [285, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[286, 1, 1, "", "ClassicalAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver": [[286, 6, 1, "", "DEFAULT_ITERATIONS"], [286, 6, 1, "", "DEFAULT_PRECONDITIONER"], [286, 6, 1, "", "DEFAULT_SMOOTHER"], [286, 6, 1, "", "DEFAULT_TOLERANCE"], [286, 6, 1, "", "LEGACY_TOLERANCE"], [286, 3, 1, "", "__repr__"], [286, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[287, 1, 1, "", "LinearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver": [[287, 6, 1, "", "DEFAULT_ITERATIONS"], [287, 6, 1, "", "DEFAULT_PRECONDITIONER"], [287, 6, 1, "", "DEFAULT_SMOOTHER"], [287, 6, 1, "", "DEFAULT_TOLERANCE"], [287, 6, 1, "", "LEGACY_TOLERANCE"], [287, 3, 1, "", "__repr__"], [287, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[288, 1, 1, "", "LinearFGMRESSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver": [[288, 6, 1, "", "DEFAULT_ITERATIONS"], [288, 6, 1, "", "DEFAULT_PRECONDITIONER"], [288, 6, 1, "", "DEFAULT_SMOOTHER"], [288, 6, 1, "", "DEFAULT_TOLERANCE"], [288, 6, 1, "", "LEGACY_TOLERANCE"], [288, 3, 1, "", "__repr__"], [288, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[289, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver": [[289, 6, 1, "", "DEFAULT_ITERATIONS"], [289, 6, 1, "", "DEFAULT_PRECONDITIONER"], [289, 6, 1, "", "DEFAULT_SMOOTHER"], [289, 6, 1, "", "DEFAULT_TOLERANCE"], [289, 6, 1, "", "LEGACY_TOLERANCE"], [289, 3, 1, "", "__repr__"], [289, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearLUSolver": [[290, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver": [[290, 6, 1, "", "DEFAULT_ITERATIONS"], [290, 6, 1, "", "DEFAULT_PRECONDITIONER"], [290, 6, 1, "", "DEFAULT_TOLERANCE"], [290, 6, 1, "", "LEGACY_TOLERANCE"], [290, 3, 1, "", "__repr__"], [290, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.linearPCGSolver": [[291, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver": [[291, 6, 1, "", "DEFAULT_ITERATIONS"], [291, 6, 1, "", "DEFAULT_PRECONDITIONER"], [291, 6, 1, "", "DEFAULT_SMOOTHER"], [291, 6, 1, "", "DEFAULT_TOLERANCE"], [291, 6, 1, "", "LEGACY_TOLERANCE"], [291, 3, 1, "", "__repr__"], [291, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.preconditioners": [[292, 1, 1, "", "AMGPreconditioner"], [292, 1, 1, "", "AggregationAMGPreconditioner"], [292, 1, 1, "", "BiCGStabPreconditioner"], [292, 1, 1, "", "CGPreconditioner"], [292, 1, 1, "", "DILUPreconditioner"], [292, 1, 1, "", "FGMRESPreconditioner"], [292, 1, 1, "", "GaussSeidelPreconditioner"], [292, 1, 1, "", "ILUPreconditioner"], [292, 1, 1, "", "JacobiPreconditioner"], [292, 1, 1, "", "PolynomialPreconditioner"], [292, 1, 1, "", "PyAMGXPreconditioner"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[293, 1, 1, "", "PyAMGXSolver"]], "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver": [[293, 6, 1, "", "DEFAULT_ITERATIONS"], [293, 6, 1, "", "DEFAULT_PRECONDITIONER"], [293, 6, 1, "", "DEFAULT_SMOOTHER"], [293, 6, 1, "", "DEFAULT_TOLERANCE"], [293, 6, 1, "", "LEGACY_TOLERANCE"], [293, 3, 1, "", "__repr__"], [293, 2, 1, "", "default_tolerance"]], "fipy.solvers.pyamgx.pyamgxConvergence": [[294, 1, 1, "", "pyamgx_BreakdownDivergence"], [294, 1, 1, "", "pyamgx_Convergence"], [294, 1, 1, "", "pyamgx_IterationDivergence"]], "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_BreakdownDivergence": [[294, 3, 1, "", "__str__"]], "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_Convergence": [[294, 3, 1, "", "__str__"]], "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_IterationDivergence": [[294, 3, 1, "", "__str__"]], "fipy.solvers.pyamgx.smoothers": [[295, 1, 1, "", "Smoother"]], "fipy.solvers.pysparse": [[297, 0, 0, "-", "linearCGSSolver"], [298, 0, 0, "-", "linearGMRESSolver"], [299, 0, 0, "-", "linearInitialSolver"], [300, 0, 0, "-", "linearJORSolver"], [301, 0, 0, "-", "linearLUSolver"], [302, 0, 0, "-", "linearPCGSolver"], [303, 0, 0, "-", "linearRHSSolver"], [304, 0, 0, "-", "preconditioners"], [308, 0, 0, "-", "pysparseConvergence"], [309, 0, 0, "-", "pysparseSolver"]], "fipy.solvers.pysparse.linearCGSSolver": [[297, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver": [[297, 6, 1, "", "DEFAULT_ITERATIONS"], [297, 6, 1, "", "DEFAULT_PRECONDITIONER"], [297, 6, 1, "", "DEFAULT_TOLERANCE"], [297, 6, 1, "", "LEGACY_TOLERANCE"], [297, 3, 1, "", "__repr__"], [297, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearGMRESSolver": [[298, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver": [[298, 6, 1, "", "DEFAULT_ITERATIONS"], [298, 6, 1, "", "DEFAULT_PRECONDITIONER"], [298, 6, 1, "", "DEFAULT_TOLERANCE"], [298, 6, 1, "", "LEGACY_TOLERANCE"], [298, 3, 1, "", "__repr__"], [298, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearInitialSolver": [[299, 1, 1, "", "LinearInitialSolver"]], "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver": [[299, 6, 1, "", "DEFAULT_ITERATIONS"], [299, 6, 1, "", "DEFAULT_PRECONDITIONER"], [299, 6, 1, "", "DEFAULT_TOLERANCE"], [299, 6, 1, "", "LEGACY_TOLERANCE"], [299, 3, 1, "", "__repr__"], [299, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearJORSolver": [[300, 1, 1, "", "LinearJORSolver"]], "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver": [[300, 6, 1, "", "DEFAULT_ITERATIONS"], [300, 6, 1, "", "DEFAULT_PRECONDITIONER"], [300, 6, 1, "", "DEFAULT_TOLERANCE"], [300, 6, 1, "", "LEGACY_TOLERANCE"], [300, 3, 1, "", "__repr__"], [300, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearLUSolver": [[301, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver": [[301, 6, 1, "", "DEFAULT_ITERATIONS"], [301, 6, 1, "", "DEFAULT_PRECONDITIONER"], [301, 6, 1, "", "DEFAULT_TOLERANCE"], [301, 6, 1, "", "LEGACY_TOLERANCE"], [301, 3, 1, "", "__repr__"], [301, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearPCGSolver": [[302, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver": [[302, 6, 1, "", "DEFAULT_ITERATIONS"], [302, 6, 1, "", "DEFAULT_PRECONDITIONER"], [302, 6, 1, "", "DEFAULT_TOLERANCE"], [302, 6, 1, "", "LEGACY_TOLERANCE"], [302, 3, 1, "", "__repr__"], [302, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.linearRHSSolver": [[303, 1, 1, "", "LinearRHSSolver"]], "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver": [[303, 6, 1, "", "DEFAULT_ITERATIONS"], [303, 6, 1, "", "DEFAULT_PRECONDITIONER"], [303, 6, 1, "", "DEFAULT_TOLERANCE"], [303, 6, 1, "", "LEGACY_TOLERANCE"], [303, 3, 1, "", "__repr__"], [303, 2, 1, "", "default_tolerance"]], "fipy.solvers.pysparse.preconditioners": [[304, 1, 1, "", "JacobiPreconditioner"], [304, 1, 1, "", "SSORPreconditioner"], [305, 0, 0, "-", "jacobiPreconditioner"], [306, 0, 0, "-", "pysparsePreconditioner"], [307, 0, 0, "-", "ssorPreconditioner"]], "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner": [[305, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.pysparsePreconditioner": [[306, 1, 1, "", "PysparsePreconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorPreconditioner": [[307, 1, 1, "", "SSORPreconditioner"]], "fipy.solvers.pysparse.pysparseConvergence": [[308, 1, 1, "", "Pysparse_AbsoluteToleranceConvergence"], [308, 1, 1, "", "Pysparse_IllConditionedDivergence"], [308, 1, 1, "", "Pysparse_IllConditionedPreconditionerDivergence"], [308, 1, 1, "", "Pysparse_IterationDivergence"], [308, 1, 1, "", "Pysparse_NonPosDefPreconditioningDivergence"], [308, 1, 1, "", "Pysparse_OutOfRangeDivergence"], [308, 1, 1, "", "Pysparse_RHSZeroConvergence"], [308, 1, 1, "", "Pysparse_RelativeToleranceConvergence"], [308, 1, 1, "", "Pysparse_StagnatedDivergence"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_AbsoluteToleranceConvergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedDivergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedPreconditionerDivergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IterationDivergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_NonPosDefPreconditioningDivergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_OutOfRangeDivergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RHSZeroConvergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RelativeToleranceConvergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseConvergence.Pysparse_StagnatedDivergence": [[308, 3, 1, "", "__str__"]], "fipy.solvers.pysparse.pysparseSolver": [[309, 1, 1, "", "PysparseSolver"]], "fipy.solvers.pysparse.pysparseSolver.PysparseSolver": [[309, 6, 1, "", "DEFAULT_ITERATIONS"], [309, 6, 1, "", "DEFAULT_PRECONDITIONER"], [309, 6, 1, "", "DEFAULT_TOLERANCE"], [309, 6, 1, "", "LEGACY_TOLERANCE"], [309, 3, 1, "", "__repr__"], [309, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy": [[312, 0, 0, "-", "linearBicgstabSolver"], [313, 0, 0, "-", "linearCGSSolver"], [314, 0, 0, "-", "linearGMRESSolver"], [315, 0, 0, "-", "linearLUSolver"], [316, 0, 0, "-", "linearPCGSolver"], [317, 0, 0, "-", "preconditioners"], [321, 0, 0, "-", "scipyConvergence"], [322, 0, 0, "-", "scipyKrylovSolver"], [323, 0, 0, "-", "scipySolver"]], "fipy.solvers.scipy.linearBicgstabSolver": [[312, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver": [[312, 6, 1, "", "DEFAULT_ITERATIONS"], [312, 6, 1, "", "DEFAULT_PRECONDITIONER"], [312, 6, 1, "", "DEFAULT_TOLERANCE"], [312, 6, 1, "", "LEGACY_TOLERANCE"], [312, 3, 1, "", "__repr__"], [312, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearCGSSolver": [[313, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver": [[313, 6, 1, "", "DEFAULT_ITERATIONS"], [313, 6, 1, "", "DEFAULT_PRECONDITIONER"], [313, 6, 1, "", "DEFAULT_TOLERANCE"], [313, 6, 1, "", "LEGACY_TOLERANCE"], [313, 3, 1, "", "__repr__"], [313, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearGMRESSolver": [[314, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver": [[314, 6, 1, "", "DEFAULT_ITERATIONS"], [314, 6, 1, "", "DEFAULT_PRECONDITIONER"], [314, 6, 1, "", "DEFAULT_TOLERANCE"], [314, 6, 1, "", "LEGACY_TOLERANCE"], [314, 3, 1, "", "__repr__"], [314, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearLUSolver": [[315, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.scipy.linearLUSolver.LinearLUSolver": [[315, 6, 1, "", "DEFAULT_ITERATIONS"], [315, 6, 1, "", "DEFAULT_PRECONDITIONER"], [315, 6, 1, "", "DEFAULT_TOLERANCE"], [315, 6, 1, "", "LEGACY_TOLERANCE"], [315, 3, 1, "", "__repr__"], [315, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.linearPCGSolver": [[316, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver": [[316, 6, 1, "", "DEFAULT_ITERATIONS"], [316, 6, 1, "", "DEFAULT_PRECONDITIONER"], [316, 6, 1, "", "DEFAULT_TOLERANCE"], [316, 6, 1, "", "LEGACY_TOLERANCE"], [316, 3, 1, "", "__repr__"], [316, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.preconditioners": [[317, 1, 1, "", "ILUPreconditioner"], [317, 1, 1, "", "JacobiPreconditioner"], [318, 0, 0, "-", "iluPreconditioner"], [319, 0, 0, "-", "jacobiPreconditioner"], [320, 0, 0, "-", "scipyPreconditioner"]], "fipy.solvers.scipy.preconditioners.iluPreconditioner": [[318, 1, 1, "", "ILUPreconditioner"]], "fipy.solvers.scipy.preconditioners.jacobiPreconditioner": [[319, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners.scipyPreconditioner": [[320, 1, 1, "", "ScipyPreconditioner"]], "fipy.solvers.scipy.scipyConvergence": [[321, 1, 1, "", "SciPy_BreakdownDivergence"], [321, 1, 1, "", "SciPy_Convergence"], [321, 1, 1, "", "SciPy_IterationDivergence"]], "fipy.solvers.scipy.scipyConvergence.SciPy_BreakdownDivergence": [[321, 3, 1, "", "__str__"]], "fipy.solvers.scipy.scipyConvergence.SciPy_Convergence": [[321, 3, 1, "", "__str__"]], "fipy.solvers.scipy.scipyConvergence.SciPy_IterationDivergence": [[321, 3, 1, "", "__str__"]], "fipy.solvers.scipy.scipyKrylovSolver": [[322, 1, 1, "", "ScipyKrylovSolver"]], "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver": [[322, 6, 1, "", "DEFAULT_ITERATIONS"], [322, 6, 1, "", "DEFAULT_PRECONDITIONER"], [322, 6, 1, "", "DEFAULT_TOLERANCE"], [322, 6, 1, "", "LEGACY_TOLERANCE"], [322, 3, 1, "", "__repr__"], [322, 2, 1, "", "default_tolerance"]], "fipy.solvers.scipy.scipySolver": [[323, 1, 1, "", "ScipySolver"]], "fipy.solvers.scipy.scipySolver.ScipySolver": [[323, 6, 1, "", "DEFAULT_ITERATIONS"], [323, 6, 1, "", "DEFAULT_PRECONDITIONER"], [323, 6, 1, "", "DEFAULT_TOLERANCE"], [323, 6, 1, "", "LEGACY_TOLERANCE"], [323, 3, 1, "", "__repr__"], [323, 2, 1, "", "default_tolerance"]], "fipy.solvers.solver": [[324, 5, 1, "", "BreakdownWarning"], [324, 5, 1, "", "IllConditionedPreconditionerWarning"], [324, 5, 1, "", "IllegalInputOrBreakdownWarning"], [324, 5, 1, "", "LossOfPrecisionWarning"], [324, 5, 1, "", "MatrixIllConditionedWarning"], [324, 5, 1, "", "MaximumIterationWarning"], [324, 5, 1, "", "NormalConvergence"], [324, 5, 1, "", "ParameterWarning"], [324, 5, 1, "", "PreconditionerNotPositiveDefiniteWarning"], [324, 5, 1, "", "PreconditionerWarning"], [324, 5, 1, "", "ScalarQuantityOutOfRangeWarning"], [324, 1, 1, "", "Solver"], [324, 5, 1, "", "SolverConvergenceWarning"], [324, 5, 1, "", "StagnatedSolverWarning"]], "fipy.solvers.solver.BreakdownWarning": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.IllConditionedPreconditionerWarning": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.IllegalInputOrBreakdownWarning": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.LossOfPrecisionWarning": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MatrixIllConditionedWarning": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.MaximumIterationWarning": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.NormalConvergence": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.ParameterWarning": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.PreconditionerWarning": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.Solver": [[324, 6, 1, "", "DEFAULT_ITERATIONS"], [324, 6, 1, "", "DEFAULT_PRECONDITIONER"], [324, 6, 1, "", "DEFAULT_TOLERANCE"], [324, 6, 1, "", "LEGACY_TOLERANCE"], [324, 3, 1, "", "__repr__"], [324, 2, 1, "", "default_tolerance"]], "fipy.solvers.solver.SolverConvergenceWarning": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.solver.StagnatedSolverWarning": [[324, 6, 1, "", "__cause__"], [324, 6, 1, "", "__context__"], [324, 3, 1, "", "__delattr__"], [324, 3, 1, "", "__getattribute__"], [324, 3, 1, "", "__reduce__"], [324, 3, 1, "", "__repr__"], [324, 3, 1, "", "__setattr__"], [324, 3, 1, "", "__str__"], [324, 3, 1, "", "add_note"], [324, 3, 1, "", "with_traceback"]], "fipy.solvers.trilinos": [[327, 0, 0, "-", "aztecConvergence"], [328, 0, 0, "-", "comms"], [332, 0, 0, "-", "linearBicgstabSolver"], [333, 0, 0, "-", "linearCGSSolver"], [334, 0, 0, "-", "linearGMRESSolver"], [335, 0, 0, "-", "linearLUSolver"], [336, 0, 0, "-", "linearPCGSolver"], [337, 0, 0, "-", "preconditioners"], [350, 0, 0, "-", "trilinosAztecOOSolver"], [351, 0, 0, "-", "trilinosMLTest"], [352, 0, 0, "-", "trilinosNonlinearSolver"], [353, 0, 0, "-", "trilinosSolver"]], "fipy.solvers.trilinos.aztecConvergence": [[327, 1, 1, "", "AZ_BreakdownDivergence"], [327, 1, 1, "", "AZ_IllConditionedDivergence"], [327, 1, 1, "", "AZ_IterationDivergence"], [327, 1, 1, "", "AZ_LossOfAccuracyConvergence"], [327, 1, 1, "", "AZ_NormalConvergence"], [327, 1, 1, "", "AZ_ParameterDivergence"]], "fipy.solvers.trilinos.aztecConvergence.AZ_BreakdownDivergence": [[327, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_IllConditionedDivergence": [[327, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_IterationDivergence": [[327, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_LossOfAccuracyConvergence": [[327, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_NormalConvergence": [[327, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.aztecConvergence.AZ_ParameterDivergence": [[327, 3, 1, "", "__str__"]], "fipy.solvers.trilinos.comms": [[329, 0, 0, "-", "epetraCommWrapper"], [330, 0, 0, "-", "parallelEpetraCommWrapper"], [331, 0, 0, "-", "serialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[329, 1, 1, "", "EpetraCommWrapper"]], "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper": [[329, 3, 1, "", "__getstate__"], [329, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper": [[330, 1, 1, "", "ParallelEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper": [[330, 3, 1, "", "MaxAll"], [330, 3, 1, "", "MinAll"], [330, 3, 1, "", "__getstate__"], [330, 3, 1, "", "__repr__"], [330, 3, 1, "", "allgather"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[331, 1, 1, "", "SerialEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper": [[331, 3, 1, "", "__getstate__"], [331, 3, 1, "", "__repr__"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[332, 1, 1, "", "LinearBicgstabSolver"]], "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver": [[332, 6, 1, "", "DEFAULT_ITERATIONS"], [332, 6, 1, "", "DEFAULT_PRECONDITIONER"], [332, 6, 1, "", "DEFAULT_TOLERANCE"], [332, 6, 1, "", "LEGACY_TOLERANCE"], [332, 3, 1, "", "__repr__"], [332, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearCGSSolver": [[333, 1, 1, "", "LinearCGSSolver"]], "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver": [[333, 6, 1, "", "DEFAULT_ITERATIONS"], [333, 6, 1, "", "DEFAULT_PRECONDITIONER"], [333, 6, 1, "", "DEFAULT_TOLERANCE"], [333, 6, 1, "", "LEGACY_TOLERANCE"], [333, 3, 1, "", "__repr__"], [333, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearGMRESSolver": [[334, 1, 1, "", "LinearGMRESSolver"]], "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver": [[334, 6, 1, "", "DEFAULT_ITERATIONS"], [334, 6, 1, "", "DEFAULT_PRECONDITIONER"], [334, 6, 1, "", "DEFAULT_TOLERANCE"], [334, 6, 1, "", "LEGACY_TOLERANCE"], [334, 3, 1, "", "__repr__"], [334, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearLUSolver": [[335, 1, 1, "", "LinearLUSolver"]], "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver": [[335, 6, 1, "", "DEFAULT_ITERATIONS"], [335, 6, 1, "", "DEFAULT_PRECONDITIONER"], [335, 6, 1, "", "DEFAULT_TOLERANCE"], [335, 6, 1, "", "LEGACY_TOLERANCE"], [335, 3, 1, "", "__repr__"], [335, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.linearPCGSolver": [[336, 1, 1, "", "LinearPCGSolver"]], "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver": [[336, 6, 1, "", "DEFAULT_ITERATIONS"], [336, 6, 1, "", "DEFAULT_PRECONDITIONER"], [336, 6, 1, "", "DEFAULT_TOLERANCE"], [336, 6, 1, "", "LEGACY_TOLERANCE"], [336, 3, 1, "", "__repr__"], [336, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.preconditioners": [[337, 1, 1, "", "DomDecompPreconditioner"], [337, 1, 1, "", "ICPreconditioner"], [337, 1, 1, "", "ILUPreconditioner"], [337, 1, 1, "", "JacobiPreconditioner"], [337, 1, 1, "", "MultilevelDDMLPreconditioner"], [337, 1, 1, "", "MultilevelDDPreconditioner"], [337, 1, 1, "", "MultilevelNSSAPreconditioner"], [337, 1, 1, "", "MultilevelSAPreconditioner"], [337, 1, 1, "", "MultilevelSGSPreconditioner"], [337, 1, 1, "", "MultilevelSolverSmootherPreconditioner"], [338, 0, 0, "-", "domDecompPreconditioner"], [339, 0, 0, "-", "icPreconditioner"], [340, 0, 0, "-", "iluPreconditioner"], [341, 0, 0, "-", "jacobiPreconditioner"], [342, 0, 0, "-", "multilevelDDMLPreconditioner"], [343, 0, 0, "-", "multilevelDDPreconditioner"], [344, 0, 0, "-", "multilevelNSSAPreconditioner"], [345, 0, 0, "-", "multilevelPreconditioner"], [346, 0, 0, "-", "multilevelSAPreconditioner"], [347, 0, 0, "-", "multilevelSGSPreconditioner"], [348, 0, 0, "-", "multilevelSolverSmootherPreconditioner"], [349, 0, 0, "-", "trilinosPreconditioner"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[338, 1, 1, "", "DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[339, 1, 1, "", "ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.iluPreconditioner": [[340, 1, 1, "", "ILUPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[341, 1, 1, "", "JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[342, 1, 1, "", "MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[343, 1, 1, "", "MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[344, 1, 1, "", "MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner": [[345, 1, 1, "", "MultilevelPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[346, 1, 1, "", "MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[347, 1, 1, "", "MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[348, 1, 1, "", "MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner": [[349, 1, 1, "", "TrilinosPreconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[350, 1, 1, "", "TrilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver": [[350, 6, 1, "", "DEFAULT_ITERATIONS"], [350, 6, 1, "", "DEFAULT_PRECONDITIONER"], [350, 6, 1, "", "DEFAULT_TOLERANCE"], [350, 6, 1, "", "LEGACY_TOLERANCE"], [350, 3, 1, "", "__repr__"], [350, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.trilinosMLTest": [[351, 1, 1, "", "TrilinosMLTest"]], "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest": [[351, 6, 1, "", "DEFAULT_ITERATIONS"], [351, 6, 1, "", "DEFAULT_PRECONDITIONER"], [351, 6, 1, "", "DEFAULT_TOLERANCE"], [351, 6, 1, "", "LEGACY_TOLERANCE"], [351, 3, 1, "", "__repr__"], [351, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[352, 1, 1, "", "TrilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver": [[352, 6, 1, "", "DEFAULT_ITERATIONS"], [352, 6, 1, "", "DEFAULT_PRECONDITIONER"], [352, 6, 1, "", "DEFAULT_TOLERANCE"], [352, 6, 1, "", "LEGACY_TOLERANCE"], [352, 3, 1, "", "__repr__"], [352, 2, 1, "", "default_tolerance"]], "fipy.solvers.trilinos.trilinosSolver": [[353, 1, 1, "", "TrilinosSolver"]], "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver": [[353, 6, 1, "", "DEFAULT_ITERATIONS"], [353, 6, 1, "", "DEFAULT_PRECONDITIONER"], [353, 6, 1, "", "DEFAULT_TOLERANCE"], [353, 6, 1, "", "LEGACY_TOLERANCE"], [353, 3, 1, "", "__repr__"], [353, 2, 1, "", "default_tolerance"]], "fipy.steppers": [[354, 4, 1, "", "L1error"], [354, 4, 1, "", "L2error"], [354, 4, 1, "", "LINFerror"], [354, 4, 1, "", "error"], [355, 0, 0, "-", "pidStepper"], [356, 0, 0, "-", "pseudoRKQSStepper"], [354, 4, 1, "", "residual"], [357, 0, 0, "-", "stepper"], [354, 4, 1, "", "sweepMonotonic"]], "fipy.steppers.pidStepper": [[355, 1, 1, "", "PIDStepper"]], "fipy.steppers.pseudoRKQSStepper": [[356, 1, 1, "", "PseudoRKQSStepper"]], "fipy.steppers.stepper": [[357, 1, 1, "", "Stepper"]], "fipy.terms": [[358, 5, 1, "", "AbstractBaseClassError"], [358, 5, 1, "", "ExplicitVariableError"], [358, 5, 1, "", "IncorrectSolutionVariable"], [358, 5, 1, "", "SolutionVariableNumberError"], [358, 5, 1, "", "SolutionVariableRequiredError"], [358, 5, 1, "", "TermMultiplyError"], [358, 5, 1, "", "TransientTermError"], [358, 5, 1, "", "VectorCoeffError"], [359, 0, 0, "-", "abstractBinaryTerm"], [360, 0, 0, "-", "abstractConvectionTerm"], [361, 0, 0, "-", "abstractDiffusionTerm"], [362, 0, 0, "-", "abstractUpwindConvectionTerm"], [363, 0, 0, "-", "advectionTerm"], [364, 0, 0, "-", "asymmetricConvectionTerm"], [365, 0, 0, "-", "binaryTerm"], [366, 0, 0, "-", "cellTerm"], [367, 0, 0, "-", "centralDiffConvectionTerm"], [368, 0, 0, "-", "coupledBinaryTerm"], [369, 0, 0, "-", "diffusionTerm"], [370, 0, 0, "-", "diffusionTermCorrection"], [371, 0, 0, "-", "diffusionTermNoCorrection"], [372, 0, 0, "-", "explicitDiffusionTerm"], [373, 0, 0, "-", "explicitSourceTerm"], [374, 0, 0, "-", "explicitUpwindConvectionTerm"], [375, 0, 0, "-", "exponentialConvectionTerm"], [376, 0, 0, "-", "faceTerm"], [377, 0, 0, "-", "firstOrderAdvectionTerm"], [378, 0, 0, "-", "hybridConvectionTerm"], [379, 0, 0, "-", "implicitDiffusionTerm"], [380, 0, 0, "-", "implicitSourceTerm"], [381, 0, 0, "-", "nonDiffusionTerm"], [382, 0, 0, "-", "powerLawConvectionTerm"], [383, 0, 0, "-", "residualTerm"], [384, 0, 0, "-", "sourceTerm"], [385, 0, 0, "-", "term"], [386, 0, 0, "-", "test"], [387, 0, 0, "-", "transientTerm"], [388, 0, 0, "-", "unaryTerm"], [389, 0, 0, "-", "upwindConvectionTerm"], [390, 0, 0, "-", "vanLeerConvectionTerm"]], "fipy.terms.AbstractBaseClassError": [[358, 6, 1, "", "__cause__"], [358, 6, 1, "", "__context__"], [358, 3, 1, "", "__delattr__"], [358, 3, 1, "", "__getattribute__"], [358, 3, 1, "", "__reduce__"], [358, 3, 1, "", "__repr__"], [358, 3, 1, "", "__setattr__"], [358, 3, 1, "", "__str__"], [358, 3, 1, "", "add_note"], [358, 3, 1, "", "with_traceback"]], "fipy.terms.ExplicitVariableError": [[358, 6, 1, "", "__cause__"], [358, 6, 1, "", "__context__"], [358, 3, 1, "", "__delattr__"], [358, 3, 1, "", "__getattribute__"], [358, 3, 1, "", "__reduce__"], [358, 3, 1, "", "__repr__"], [358, 3, 1, "", "__setattr__"], [358, 3, 1, "", "__str__"], [358, 3, 1, "", "add_note"], [358, 3, 1, "", "with_traceback"]], "fipy.terms.IncorrectSolutionVariable": [[358, 6, 1, "", "__cause__"], [358, 6, 1, "", "__context__"], [358, 3, 1, "", "__delattr__"], [358, 3, 1, "", "__getattribute__"], [358, 3, 1, "", "__reduce__"], [358, 3, 1, "", "__repr__"], [358, 3, 1, "", "__setattr__"], [358, 3, 1, "", "__str__"], [358, 3, 1, "", "add_note"], [358, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableNumberError": [[358, 6, 1, "", "__cause__"], [358, 6, 1, "", "__context__"], [358, 3, 1, "", "__delattr__"], [358, 3, 1, "", "__getattribute__"], [358, 3, 1, "", "__reduce__"], [358, 3, 1, "", "__repr__"], [358, 3, 1, "", "__setattr__"], [358, 3, 1, "", "__str__"], [358, 3, 1, "", "add_note"], [358, 3, 1, "", "with_traceback"]], "fipy.terms.SolutionVariableRequiredError": [[358, 6, 1, "", "__cause__"], [358, 6, 1, "", "__context__"], [358, 3, 1, "", "__delattr__"], [358, 3, 1, "", "__getattribute__"], [358, 3, 1, "", "__reduce__"], [358, 3, 1, "", "__repr__"], [358, 3, 1, "", "__setattr__"], [358, 3, 1, "", "__str__"], [358, 3, 1, "", "add_note"], [358, 3, 1, "", "with_traceback"]], "fipy.terms.TermMultiplyError": [[358, 6, 1, "", "__cause__"], [358, 6, 1, "", "__context__"], [358, 3, 1, "", "__delattr__"], [358, 3, 1, "", "__getattribute__"], [358, 3, 1, "", "__reduce__"], [358, 3, 1, "", "__repr__"], [358, 3, 1, "", "__setattr__"], [358, 3, 1, "", "__str__"], [358, 3, 1, "", "add_note"], [358, 3, 1, "", "with_traceback"]], "fipy.terms.TransientTermError": [[358, 6, 1, "", "__cause__"], [358, 6, 1, "", "__context__"], [358, 3, 1, "", "__delattr__"], [358, 3, 1, "", "__getattribute__"], [358, 3, 1, "", "__reduce__"], [358, 3, 1, "", "__repr__"], [358, 3, 1, "", "__setattr__"], [358, 3, 1, "", "__str__"], [358, 3, 1, "", "add_note"], [358, 3, 1, "", "with_traceback"]], "fipy.terms.VectorCoeffError": [[358, 6, 1, "", "__cause__"], [358, 6, 1, "", "__context__"], [358, 3, 1, "", "__delattr__"], [358, 3, 1, "", "__getattribute__"], [358, 3, 1, "", "__reduce__"], [358, 3, 1, "", "__repr__"], [358, 3, 1, "", "__setattr__"], [358, 3, 1, "", "__str__"], [358, 3, 1, "", "add_note"], [358, 3, 1, "", "with_traceback"]], "fipy.terms.advectionTerm": [[363, 1, 1, "", "AdvectionTerm"]], "fipy.terms.advectionTerm.AdvectionTerm": [[363, 2, 1, "", "RHSvector"], [363, 3, 1, "", "__eq__"], [363, 3, 1, "", "__hash__"], [363, 3, 1, "", "__mul__"], [363, 3, 1, "", "__neg__"], [363, 3, 1, "", "__repr__"], [363, 3, 1, "", "__rmul__"], [363, 3, 1, "", "cacheMatrix"], [363, 3, 1, "", "cacheRHSvector"], [363, 3, 1, "", "justErrorVector"], [363, 3, 1, "", "justResidualVector"], [363, 2, 1, "", "matrix"], [363, 3, 1, "", "residualVectorAndNorm"], [363, 3, 1, "", "solve"], [363, 3, 1, "", "sweep"]], "fipy.terms.cellTerm": [[366, 1, 1, "", "CellTerm"]], "fipy.terms.cellTerm.CellTerm": [[366, 2, 1, "", "RHSvector"], [366, 3, 1, "", "__eq__"], [366, 3, 1, "", "__hash__"], [366, 3, 1, "", "__mul__"], [366, 3, 1, "", "__neg__"], [366, 3, 1, "", "__repr__"], [366, 3, 1, "", "__rmul__"], [366, 3, 1, "", "cacheMatrix"], [366, 3, 1, "", "cacheRHSvector"], [366, 3, 1, "", "justErrorVector"], [366, 3, 1, "", "justResidualVector"], [366, 2, 1, "", "matrix"], [366, 3, 1, "", "residualVectorAndNorm"], [366, 3, 1, "", "solve"], [366, 3, 1, "", "sweep"]], "fipy.terms.centralDiffConvectionTerm": [[367, 1, 1, "", "CentralDifferenceConvectionTerm"]], "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm": [[367, 2, 1, "", "RHSvector"], [367, 3, 1, "", "__eq__"], [367, 3, 1, "", "__hash__"], [367, 3, 1, "", "__mul__"], [367, 3, 1, "", "__neg__"], [367, 3, 1, "", "__repr__"], [367, 3, 1, "", "__rmul__"], [367, 3, 1, "", "cacheMatrix"], [367, 3, 1, "", "cacheRHSvector"], [367, 3, 1, "", "justErrorVector"], [367, 3, 1, "", "justResidualVector"], [367, 2, 1, "", "matrix"], [367, 3, 1, "", "residualVectorAndNorm"], [367, 3, 1, "", "solve"], [367, 3, 1, "", "sweep"]], "fipy.terms.diffusionTerm": [[369, 1, 1, "", "DiffusionTerm"]], "fipy.terms.diffusionTerm.DiffusionTerm": [[369, 2, 1, "", "RHSvector"], [369, 3, 1, "", "__eq__"], [369, 3, 1, "", "__hash__"], [369, 3, 1, "", "__repr__"], [369, 3, 1, "", "cacheMatrix"], [369, 3, 1, "", "cacheRHSvector"], [369, 3, 1, "", "justErrorVector"], [369, 3, 1, "", "justResidualVector"], [369, 2, 1, "", "matrix"], [369, 3, 1, "", "residualVectorAndNorm"], [369, 3, 1, "", "solve"], [369, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermCorrection": [[370, 1, 1, "", "DiffusionTermCorrection"]], "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection": [[370, 2, 1, "", "RHSvector"], [370, 3, 1, "", "__eq__"], [370, 3, 1, "", "__hash__"], [370, 3, 1, "", "__repr__"], [370, 3, 1, "", "cacheMatrix"], [370, 3, 1, "", "cacheRHSvector"], [370, 3, 1, "", "justErrorVector"], [370, 3, 1, "", "justResidualVector"], [370, 2, 1, "", "matrix"], [370, 3, 1, "", "residualVectorAndNorm"], [370, 3, 1, "", "solve"], [370, 3, 1, "", "sweep"]], "fipy.terms.diffusionTermNoCorrection": [[371, 1, 1, "", "DiffusionTermNoCorrection"]], "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection": [[371, 2, 1, "", "RHSvector"], [371, 3, 1, "", "__eq__"], [371, 3, 1, "", "__hash__"], [371, 3, 1, "", "__repr__"], [371, 3, 1, "", "cacheMatrix"], [371, 3, 1, "", "cacheRHSvector"], [371, 3, 1, "", "justErrorVector"], [371, 3, 1, "", "justResidualVector"], [371, 2, 1, "", "matrix"], [371, 3, 1, "", "residualVectorAndNorm"], [371, 3, 1, "", "solve"], [371, 3, 1, "", "sweep"]], "fipy.terms.explicitDiffusionTerm": [[372, 1, 1, "", "ExplicitDiffusionTerm"]], "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm": [[372, 2, 1, "", "RHSvector"], [372, 3, 1, "", "__eq__"], [372, 3, 1, "", "__hash__"], [372, 3, 1, "", "__repr__"], [372, 3, 1, "", "cacheMatrix"], [372, 3, 1, "", "cacheRHSvector"], [372, 3, 1, "", "justErrorVector"], [372, 3, 1, "", "justResidualVector"], [372, 2, 1, "", "matrix"], [372, 3, 1, "", "residualVectorAndNorm"], [372, 3, 1, "", "solve"], [372, 3, 1, "", "sweep"]], "fipy.terms.explicitUpwindConvectionTerm": [[374, 1, 1, "", "ExplicitUpwindConvectionTerm"]], "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm": [[374, 2, 1, "", "RHSvector"], [374, 3, 1, "", "__eq__"], [374, 3, 1, "", "__hash__"], [374, 3, 1, "", "__mul__"], [374, 3, 1, "", "__neg__"], [374, 3, 1, "", "__repr__"], [374, 3, 1, "", "__rmul__"], [374, 3, 1, "", "cacheMatrix"], [374, 3, 1, "", "cacheRHSvector"], [374, 3, 1, "", "justErrorVector"], [374, 3, 1, "", "justResidualVector"], [374, 2, 1, "", "matrix"], [374, 3, 1, "", "residualVectorAndNorm"], [374, 3, 1, "", "solve"], [374, 3, 1, "", "sweep"]], "fipy.terms.exponentialConvectionTerm": [[375, 1, 1, "", "ExponentialConvectionTerm"]], "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm": [[375, 2, 1, "", "RHSvector"], [375, 3, 1, "", "__eq__"], [375, 3, 1, "", "__hash__"], [375, 3, 1, "", "__mul__"], [375, 3, 1, "", "__neg__"], [375, 3, 1, "", "__repr__"], [375, 3, 1, "", "__rmul__"], [375, 3, 1, "", "cacheMatrix"], [375, 3, 1, "", "cacheRHSvector"], [375, 3, 1, "", "justErrorVector"], [375, 3, 1, "", "justResidualVector"], [375, 2, 1, "", "matrix"], [375, 3, 1, "", "residualVectorAndNorm"], [375, 3, 1, "", "solve"], [375, 3, 1, "", "sweep"]], "fipy.terms.faceTerm": [[376, 1, 1, "", "FaceTerm"]], "fipy.terms.faceTerm.FaceTerm": [[376, 2, 1, "", "RHSvector"], [376, 3, 1, "", "__eq__"], [376, 3, 1, "", "__hash__"], [376, 3, 1, "", "__mul__"], [376, 3, 1, "", "__neg__"], [376, 3, 1, "", "__repr__"], [376, 3, 1, "", "__rmul__"], [376, 3, 1, "", "cacheMatrix"], [376, 3, 1, "", "cacheRHSvector"], [376, 3, 1, "", "justErrorVector"], [376, 3, 1, "", "justResidualVector"], [376, 2, 1, "", "matrix"], [376, 3, 1, "", "residualVectorAndNorm"], [376, 3, 1, "", "solve"], [376, 3, 1, "", "sweep"]], "fipy.terms.firstOrderAdvectionTerm": [[377, 1, 1, "", "FirstOrderAdvectionTerm"]], "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm": [[377, 2, 1, "", "RHSvector"], [377, 3, 1, "", "__eq__"], [377, 3, 1, "", "__hash__"], [377, 3, 1, "", "__mul__"], [377, 3, 1, "", "__neg__"], [377, 3, 1, "", "__repr__"], [377, 3, 1, "", "__rmul__"], [377, 3, 1, "", "cacheMatrix"], [377, 3, 1, "", "cacheRHSvector"], [377, 3, 1, "", "justErrorVector"], [377, 3, 1, "", "justResidualVector"], [377, 2, 1, "", "matrix"], [377, 3, 1, "", "residualVectorAndNorm"], [377, 3, 1, "", "solve"], [377, 3, 1, "", "sweep"]], "fipy.terms.hybridConvectionTerm": [[378, 1, 1, "", "HybridConvectionTerm"]], "fipy.terms.hybridConvectionTerm.HybridConvectionTerm": [[378, 2, 1, "", "RHSvector"], [378, 3, 1, "", "__eq__"], [378, 3, 1, "", "__hash__"], [378, 3, 1, "", "__mul__"], [378, 3, 1, "", "__neg__"], [378, 3, 1, "", "__repr__"], [378, 3, 1, "", "__rmul__"], [378, 3, 1, "", "cacheMatrix"], [378, 3, 1, "", "cacheRHSvector"], [378, 3, 1, "", "justErrorVector"], [378, 3, 1, "", "justResidualVector"], [378, 2, 1, "", "matrix"], [378, 3, 1, "", "residualVectorAndNorm"], [378, 3, 1, "", "solve"], [378, 3, 1, "", "sweep"]], "fipy.terms.implicitDiffusionTerm": [[379, 6, 1, "", "ImplicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[380, 1, 1, "", "ImplicitSourceTerm"]], "fipy.terms.implicitSourceTerm.ImplicitSourceTerm": [[380, 2, 1, "", "RHSvector"], [380, 3, 1, "", "__eq__"], [380, 3, 1, "", "__hash__"], [380, 3, 1, "", "__mul__"], [380, 3, 1, "", "__neg__"], [380, 3, 1, "", "__repr__"], [380, 3, 1, "", "__rmul__"], [380, 3, 1, "", "cacheMatrix"], [380, 3, 1, "", "cacheRHSvector"], [380, 3, 1, "", "justErrorVector"], [380, 3, 1, "", "justResidualVector"], [380, 2, 1, "", "matrix"], [380, 3, 1, "", "residualVectorAndNorm"], [380, 3, 1, "", "solve"], [380, 3, 1, "", "sweep"]], "fipy.terms.powerLawConvectionTerm": [[382, 1, 1, "", "PowerLawConvectionTerm"]], "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm": [[382, 2, 1, "", "RHSvector"], [382, 3, 1, "", "__eq__"], [382, 3, 1, "", "__hash__"], [382, 3, 1, "", "__mul__"], [382, 3, 1, "", "__neg__"], [382, 3, 1, "", "__repr__"], [382, 3, 1, "", "__rmul__"], [382, 3, 1, "", "cacheMatrix"], [382, 3, 1, "", "cacheRHSvector"], [382, 3, 1, "", "justErrorVector"], [382, 3, 1, "", "justResidualVector"], [382, 2, 1, "", "matrix"], [382, 3, 1, "", "residualVectorAndNorm"], [382, 3, 1, "", "solve"], [382, 3, 1, "", "sweep"]], "fipy.terms.residualTerm": [[383, 1, 1, "", "ResidualTerm"]], "fipy.terms.residualTerm.ResidualTerm": [[383, 2, 1, "", "RHSvector"], [383, 3, 1, "", "__eq__"], [383, 3, 1, "", "__hash__"], [383, 3, 1, "", "__mul__"], [383, 3, 1, "", "__neg__"], [383, 3, 1, "", "__repr__"], [383, 3, 1, "", "__rmul__"], [383, 3, 1, "", "cacheMatrix"], [383, 3, 1, "", "cacheRHSvector"], [383, 3, 1, "", "justErrorVector"], [383, 3, 1, "", "justResidualVector"], [383, 2, 1, "", "matrix"], [383, 3, 1, "", "residualVectorAndNorm"], [383, 3, 1, "", "solve"], [383, 3, 1, "", "sweep"]], "fipy.terms.sourceTerm": [[384, 1, 1, "", "SourceTerm"]], "fipy.terms.sourceTerm.SourceTerm": [[384, 2, 1, "", "RHSvector"], [384, 3, 1, "", "__eq__"], [384, 3, 1, "", "__hash__"], [384, 3, 1, "", "__mul__"], [384, 3, 1, "", "__neg__"], [384, 3, 1, "", "__repr__"], [384, 3, 1, "", "__rmul__"], [384, 3, 1, "", "cacheMatrix"], [384, 3, 1, "", "cacheRHSvector"], [384, 3, 1, "", "justErrorVector"], [384, 3, 1, "", "justResidualVector"], [384, 2, 1, "", "matrix"], [384, 3, 1, "", "residualVectorAndNorm"], [384, 3, 1, "", "solve"], [384, 3, 1, "", "sweep"]], "fipy.terms.term": [[385, 1, 1, "", "Term"]], "fipy.terms.term.Term": [[385, 2, 1, "", "RHSvector"], [385, 3, 1, "", "__eq__"], [385, 3, 1, "", "__hash__"], [385, 3, 1, "", "__repr__"], [385, 3, 1, "", "cacheMatrix"], [385, 3, 1, "", "cacheRHSvector"], [385, 3, 1, "", "justErrorVector"], [385, 3, 1, "", "justResidualVector"], [385, 2, 1, "", "matrix"], [385, 3, 1, "", "residualVectorAndNorm"], [385, 3, 1, "", "solve"], [385, 3, 1, "", "sweep"]], "fipy.terms.transientTerm": [[387, 1, 1, "", "TransientTerm"]], "fipy.terms.transientTerm.TransientTerm": [[387, 2, 1, "", "RHSvector"], [387, 3, 1, "", "__eq__"], [387, 3, 1, "", "__hash__"], [387, 3, 1, "", "__mul__"], [387, 3, 1, "", "__neg__"], [387, 3, 1, "", "__repr__"], [387, 3, 1, "", "__rmul__"], [387, 3, 1, "", "cacheMatrix"], [387, 3, 1, "", "cacheRHSvector"], [387, 3, 1, "", "justErrorVector"], [387, 3, 1, "", "justResidualVector"], [387, 2, 1, "", "matrix"], [387, 3, 1, "", "residualVectorAndNorm"], [387, 3, 1, "", "solve"], [387, 3, 1, "", "sweep"]], "fipy.terms.upwindConvectionTerm": [[389, 1, 1, "", "UpwindConvectionTerm"]], "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm": [[389, 2, 1, "", "RHSvector"], [389, 3, 1, "", "__eq__"], [389, 3, 1, "", "__hash__"], [389, 3, 1, "", "__mul__"], [389, 3, 1, "", "__neg__"], [389, 3, 1, "", "__repr__"], [389, 3, 1, "", "__rmul__"], [389, 3, 1, "", "cacheMatrix"], [389, 3, 1, "", "cacheRHSvector"], [389, 3, 1, "", "justErrorVector"], [389, 3, 1, "", "justResidualVector"], [389, 2, 1, "", "matrix"], [389, 3, 1, "", "residualVectorAndNorm"], [389, 3, 1, "", "solve"], [389, 3, 1, "", "sweep"]], "fipy.terms.vanLeerConvectionTerm": [[390, 1, 1, "", "VanLeerConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm": [[390, 2, 1, "", "RHSvector"], [390, 3, 1, "", "__eq__"], [390, 3, 1, "", "__hash__"], [390, 3, 1, "", "__mul__"], [390, 3, 1, "", "__neg__"], [390, 3, 1, "", "__repr__"], [390, 3, 1, "", "__rmul__"], [390, 3, 1, "", "cacheMatrix"], [390, 3, 1, "", "cacheRHSvector"], [390, 3, 1, "", "justErrorVector"], [390, 3, 1, "", "justResidualVector"], [390, 2, 1, "", "matrix"], [390, 3, 1, "", "residualVectorAndNorm"], [390, 3, 1, "", "solve"], [390, 3, 1, "", "sweep"]], "fipy.tests": [[393, 0, 0, "-", "doctestPlus"], [394, 0, 0, "-", "lateImportTest"], [395, 0, 0, "-", "test"], [396, 0, 0, "-", "testProgram"]], "fipy.tests.doctestPlus": [[393, 4, 1, "", "execButNoTest"], [393, 4, 1, "", "register_skipper"], [393, 4, 1, "", "report_skips"], [393, 4, 1, "", "testmod"]], "fipy.tests.test": [[395, 1, 1, "", "DeprecationErroringTestProgram"], [395, 1, 1, "", "test"]], "fipy.tests.test.test": [[395, 3, 1, "", "finalize_options"], [395, 3, 1, "", "initialize_options"]], "fipy.tests.testProgram": [[396, 1, 1, "", "TestProgram"], [396, 6, 1, "", "main"]], "fipy.tools": [[397, 1, 1, "", "PhysicalField"], [397, 4, 1, "", "SharedTemporaryFile"], [398, 0, 0, "-", "comms"], [401, 0, 0, "-", "debug"], [402, 0, 0, "-", "decorators"], [403, 0, 0, "-", "dimensions"], [407, 0, 0, "-", "dump"], [408, 0, 0, "-", "inline"], [409, 0, 0, "-", "logging"], [411, 0, 0, "-", "numerix"], [397, 6, 1, "", "parallelComm"], [412, 0, 0, "-", "parser"], [397, 6, 1, "", "serialComm"], [413, 0, 0, "-", "sharedtempfile"], [414, 0, 0, "-", "test"], [415, 0, 0, "-", "vector"], [416, 0, 0, "-", "version"]], "fipy.tools.PhysicalField": [[397, 3, 1, "", "__abs__"], [397, 3, 1, "", "__add__"], [397, 3, 1, "", "__array__"], [397, 3, 1, "", "__array_wrap__"], [397, 3, 1, "", "__bool__"], [397, 3, 1, "", "__div__"], [397, 3, 1, "", "__eq__"], [397, 3, 1, "", "__float__"], [397, 3, 1, "", "__ge__"], [397, 3, 1, "", "__getitem__"], [397, 3, 1, "", "__gt__"], [397, 3, 1, "", "__hash__"], [397, 3, 1, "", "__le__"], [397, 3, 1, "", "__lt__"], [397, 3, 1, "", "__mod__"], [397, 3, 1, "", "__mul__"], [397, 3, 1, "", "__ne__"], [397, 3, 1, "", "__neg__"], [397, 3, 1, "", "__nonzero__"], [397, 3, 1, "", "__pow__"], [397, 3, 1, "", "__radd__"], [397, 3, 1, "", "__repr__"], [397, 3, 1, "", "__rmul__"], [397, 3, 1, "", "__setitem__"], [397, 3, 1, "", "__str__"], [397, 3, 1, "", "__sub__"], [397, 3, 1, "", "__truediv__"], [397, 3, 1, "", "add"], [397, 3, 1, "", "allclose"], [397, 3, 1, "", "allequal"], [397, 3, 1, "", "arccos"], [397, 3, 1, "", "arccosh"], [397, 3, 1, "", "arcsin"], [397, 3, 1, "", "arctan"], [397, 3, 1, "", "arctan2"], [397, 3, 1, "", "arctanh"], [397, 3, 1, "", "ceil"], [397, 3, 1, "", "conjugate"], [397, 3, 1, "", "convertToUnit"], [397, 3, 1, "", "copy"], [397, 3, 1, "", "cos"], [397, 3, 1, "", "cosh"], [397, 3, 1, "", "divide"], [397, 3, 1, "", "dot"], [397, 3, 1, "", "floor"], [397, 3, 1, "", "getsctype"], [397, 3, 1, "", "inBaseUnits"], [397, 3, 1, "", "inDimensionless"], [397, 3, 1, "", "inRadians"], [397, 3, 1, "", "inSIUnits"], [397, 3, 1, "", "inUnitsOf"], [397, 3, 1, "", "itemset"], [397, 3, 1, "", "log"], [397, 3, 1, "", "log10"], [397, 3, 1, "", "multiply"], [397, 2, 1, "", "numericValue"], [397, 3, 1, "", "put"], [397, 3, 1, "", "reshape"], [397, 2, 1, "", "shape"], [397, 3, 1, "", "sign"], [397, 3, 1, "", "sin"], [397, 3, 1, "", "sinh"], [397, 3, 1, "", "sqrt"], [397, 3, 1, "", "subtract"], [397, 3, 1, "", "sum"], [397, 3, 1, "", "take"], [397, 3, 1, "", "tan"], [397, 3, 1, "", "tanh"], [397, 3, 1, "", "tostring"], [397, 2, 1, "", "unit"]], "fipy.tools.comms": [[399, 0, 0, "-", "commWrapper"], [400, 0, 0, "-", "dummyComm"]], "fipy.tools.comms.commWrapper": [[399, 1, 1, "", "CommWrapper"]], "fipy.tools.comms.commWrapper.CommWrapper": [[399, 3, 1, "", "__getstate__"], [399, 3, 1, "", "__repr__"]], "fipy.tools.comms.dummyComm": [[400, 1, 1, "", "DummyComm"]], "fipy.tools.comms.dummyComm.DummyComm": [[400, 3, 1, "", "__getstate__"], [400, 3, 1, "", "__repr__"]], "fipy.tools.debug": [[401, 4, 1, "", "PRINT"]], "fipy.tools.decorators": [[402, 4, 1, "", "deprecate"]], "fipy.tools.dimensions": [[404, 0, 0, "-", "DictWithDefault"], [405, 0, 0, "-", "NumberDict"], [406, 0, 0, "-", "physicalField"]], "fipy.tools.dimensions.physicalField": [[406, 1, 1, "", "PhysicalField"], [406, 1, 1, "", "PhysicalUnit"]], "fipy.tools.dimensions.physicalField.PhysicalField": [[406, 3, 1, "", "__abs__"], [406, 3, 1, "", "__add__"], [406, 3, 1, "", "__array__"], [406, 3, 1, "", "__array_wrap__"], [406, 3, 1, "", "__bool__"], [406, 3, 1, "", "__div__"], [406, 3, 1, "", "__eq__"], [406, 3, 1, "", "__float__"], [406, 3, 1, "", "__ge__"], [406, 3, 1, "", "__getitem__"], [406, 3, 1, "", "__gt__"], [406, 3, 1, "", "__hash__"], [406, 3, 1, "", "__le__"], [406, 3, 1, "", "__lt__"], [406, 3, 1, "", "__mod__"], [406, 3, 1, "", "__mul__"], [406, 3, 1, "", "__ne__"], [406, 3, 1, "", "__neg__"], [406, 3, 1, "", "__nonzero__"], [406, 3, 1, "", "__pow__"], [406, 3, 1, "", "__radd__"], [406, 3, 1, "", "__repr__"], [406, 3, 1, "", "__rmul__"], [406, 3, 1, "", "__setitem__"], [406, 3, 1, "", "__str__"], [406, 3, 1, "", "__sub__"], [406, 3, 1, "", "__truediv__"], [406, 3, 1, "", "add"], [406, 3, 1, "", "allclose"], [406, 3, 1, "", "allequal"], [406, 3, 1, "", "arccos"], [406, 3, 1, "", "arccosh"], [406, 3, 1, "", "arcsin"], [406, 3, 1, "", "arctan"], [406, 3, 1, "", "arctan2"], [406, 3, 1, "", "arctanh"], [406, 3, 1, "", "ceil"], [406, 3, 1, "", "conjugate"], [406, 3, 1, "", "convertToUnit"], [406, 3, 1, "", "copy"], [406, 3, 1, "", "cos"], [406, 3, 1, "", "cosh"], [406, 3, 1, "", "divide"], [406, 3, 1, "", "dot"], [406, 3, 1, "", "floor"], [406, 3, 1, "", "getsctype"], [406, 3, 1, "", "inBaseUnits"], [406, 3, 1, "", "inDimensionless"], [406, 3, 1, "", "inRadians"], [406, 3, 1, "", "inSIUnits"], [406, 3, 1, "", "inUnitsOf"], [406, 3, 1, "", "itemset"], [406, 3, 1, "", "log"], [406, 3, 1, "", "log10"], [406, 3, 1, "", "multiply"], [406, 2, 1, "", "numericValue"], [406, 3, 1, "", "put"], [406, 3, 1, "", "reshape"], [406, 2, 1, "", "shape"], [406, 3, 1, "", "sign"], [406, 3, 1, "", "sin"], [406, 3, 1, "", "sinh"], [406, 3, 1, "", "sqrt"], [406, 3, 1, "", "subtract"], [406, 3, 1, "", "sum"], [406, 3, 1, "", "take"], [406, 3, 1, "", "tan"], [406, 3, 1, "", "tanh"], [406, 3, 1, "", "tostring"], [406, 2, 1, "", "unit"]], "fipy.tools.dimensions.physicalField.PhysicalUnit": [[406, 3, 1, "", "__div__"], [406, 3, 1, "", "__eq__"], [406, 3, 1, "", "__ge__"], [406, 3, 1, "", "__gt__"], [406, 6, 1, "", "__hash__"], [406, 3, 1, "", "__le__"], [406, 3, 1, "", "__lt__"], [406, 3, 1, "", "__mul__"], [406, 3, 1, "", "__ne__"], [406, 3, 1, "", "__pow__"], [406, 3, 1, "", "__rdiv__"], [406, 3, 1, "", "__repr__"], [406, 3, 1, "", "__rmul__"], [406, 3, 1, "", "__rtruediv__"], [406, 3, 1, "", "__str__"], [406, 3, 1, "", "__truediv__"], [406, 3, 1, "", "conversionFactorTo"], [406, 3, 1, "", "conversionTupleTo"], [406, 3, 1, "", "isAngle"], [406, 3, 1, "", "isCompatible"], [406, 3, 1, "", "isDimensionless"], [406, 3, 1, "", "isDimensionlessOrAngle"], [406, 3, 1, "", "isInverseAngle"], [406, 3, 1, "", "name"], [406, 3, 1, "", "setName"]], "fipy.tools.dump": [[407, 4, 1, "", "read"], [407, 4, 1, "", "write"]], "fipy.tools.logging": [[410, 0, 0, "-", "environment"]], "fipy.tools.logging.environment": [[410, 4, 1, "", "conda_info"], [410, 4, 1, "", "package_info"], [410, 4, 1, "", "platform_info"]], "fipy.tools.numerix": [[411, 4, 1, "", "L1norm"], [411, 4, 1, "", "L2norm"], [411, 4, 1, "", "LINFnorm"], [411, 4, 1, "", "all"], [411, 4, 1, "", "allclose"], [411, 4, 1, "", "allequal"], [411, 4, 1, "", "dot"], [411, 4, 1, "", "getShape"], [411, 4, 1, "", "getUnit"], [411, 4, 1, "", "isclose"], [411, 4, 1, "", "nearest"], [411, 4, 1, "", "put"], [411, 4, 1, "", "rank"], [411, 4, 1, "", "reshape"], [411, 4, 1, "", "sqrtDot"], [411, 4, 1, "", "sum"], [411, 4, 1, "", "take"], [411, 4, 1, "", "tostring"]], "fipy.tools.parser": [[412, 4, 1, "", "parse"]], "fipy.tools.sharedtempfile": [[413, 4, 1, "", "SharedTemporaryFile"]], "fipy.tools.vector": [[415, 4, 1, "", "prune"], [415, 4, 1, "", "putAdd"]], "fipy.variables": [[418, 0, 0, "-", "addOverFacesVariable"], [419, 0, 0, "-", "arithmeticCellToFaceVariable"], [420, 0, 0, "-", "betaNoiseVariable"], [421, 0, 0, "-", "binaryOperatorVariable"], [422, 0, 0, "-", "cellToFaceVariable"], [423, 0, 0, "-", "cellVariable"], [424, 0, 0, "-", "constant"], [425, 0, 0, "-", "constraintMask"], [426, 0, 0, "-", "coupledCellVariable"], [427, 0, 0, "-", "distanceVariable"], [428, 0, 0, "-", "exponentialNoiseVariable"], [429, 0, 0, "-", "faceGradContributionsVariable"], [430, 0, 0, "-", "faceGradVariable"], [431, 0, 0, "-", "faceVariable"], [432, 0, 0, "-", "gammaNoiseVariable"], [433, 0, 0, "-", "gaussCellGradVariable"], [434, 0, 0, "-", "gaussianNoiseVariable"], [435, 0, 0, "-", "harmonicCellToFaceVariable"], [436, 0, 0, "-", "histogramVariable"], [437, 0, 0, "-", "interfaceAreaVariable"], [438, 0, 0, "-", "interfaceFlagVariable"], [439, 0, 0, "-", "leastSquaresCellGradVariable"], [440, 0, 0, "-", "levelSetDiffusionVariable"], [441, 0, 0, "-", "meshVariable"], [442, 0, 0, "-", "minmodCellToFaceVariable"], [443, 0, 0, "-", "modCellGradVariable"], [444, 0, 0, "-", "modCellToFaceVariable"], [445, 0, 0, "-", "modFaceGradVariable"], [446, 0, 0, "-", "modPhysicalField"], [447, 0, 0, "-", "modularVariable"], [448, 0, 0, "-", "noiseVariable"], [449, 0, 0, "-", "operatorVariable"], [450, 0, 0, "-", "scharfetterGummelFaceVariable"], [451, 0, 0, "-", "surfactantConvectionVariable"], [452, 0, 0, "-", "surfactantVariable"], [453, 0, 0, "-", "test"], [454, 0, 0, "-", "unaryOperatorVariable"], [455, 0, 0, "-", "uniformNoiseVariable"], [456, 0, 0, "-", "variable"]], "fipy.variables.betaNoiseVariable": [[420, 1, 1, "", "BetaNoiseVariable"]], "fipy.variables.betaNoiseVariable.BetaNoiseVariable": [[420, 3, 1, "", "__abs__"], [420, 3, 1, "", "__and__"], [420, 3, 1, "", "__array__"], [420, 3, 1, "", "__array_wrap__"], [420, 3, 1, "", "__bool__"], [420, 3, 1, "", "__call__"], [420, 3, 1, "", "__eq__"], [420, 3, 1, "", "__ge__"], [420, 3, 1, "", "__getitem__"], [420, 3, 1, "", "__getstate__"], [420, 3, 1, "", "__gt__"], [420, 3, 1, "", "__hash__"], [420, 3, 1, "", "__invert__"], [420, 3, 1, "", "__le__"], [420, 3, 1, "", "__lt__"], [420, 3, 1, "", "__ne__"], [420, 3, 1, "", "__new__"], [420, 3, 1, "", "__nonzero__"], [420, 3, 1, "", "__or__"], [420, 3, 1, "", "__pow__"], [420, 3, 1, "", "__repr__"], [420, 3, 1, "", "__setstate__"], [420, 3, 1, "", "__str__"], [420, 3, 1, "", "all"], [420, 3, 1, "", "allclose"], [420, 3, 1, "", "any"], [420, 2, 1, "", "arithmeticFaceValue"], [420, 2, 1, "", "cellVolumeAverage"], [420, 3, 1, "", "constrain"], [420, 2, 1, "", "constraintMask"], [420, 3, 1, "", "copy"], [420, 3, 1, "", "dot"], [420, 2, 1, "", "faceGrad"], [420, 2, 1, "", "faceGradAverage"], [420, 2, 1, "", "faceValue"], [420, 2, 1, "", "gaussGrad"], [420, 3, 1, "", "getsctype"], [420, 2, 1, "", "globalValue"], [420, 2, 1, "", "grad"], [420, 2, 1, "", "harmonicFaceValue"], [420, 3, 1, "", "inBaseUnits"], [420, 3, 1, "", "inUnitsOf"], [420, 2, 1, "", "leastSquaresGrad"], [420, 2, 1, "", "mag"], [420, 3, 1, "", "max"], [420, 3, 1, "", "min"], [420, 2, 1, "", "minmodFaceValue"], [420, 2, 1, "", "old"], [420, 3, 1, "", "rdot"], [420, 3, 1, "", "release"], [420, 3, 1, "", "scramble"], [420, 3, 1, "", "setValue"], [420, 2, 1, "", "shape"], [420, 3, 1, "", "std"], [420, 2, 1, "", "unit"], [420, 3, 1, "", "updateOld"], [420, 2, 1, "", "value"]], "fipy.variables.cellVariable": [[423, 1, 1, "", "CellVariable"]], "fipy.variables.cellVariable.CellVariable": [[423, 3, 1, "", "__abs__"], [423, 3, 1, "", "__and__"], [423, 3, 1, "", "__array__"], [423, 3, 1, "", "__array_wrap__"], [423, 3, 1, "", "__bool__"], [423, 3, 1, "", "__call__"], [423, 3, 1, "", "__eq__"], [423, 3, 1, "", "__ge__"], [423, 3, 1, "", "__getitem__"], [423, 3, 1, "", "__getstate__"], [423, 3, 1, "", "__gt__"], [423, 3, 1, "", "__hash__"], [423, 3, 1, "", "__invert__"], [423, 3, 1, "", "__le__"], [423, 3, 1, "", "__lt__"], [423, 3, 1, "", "__ne__"], [423, 3, 1, "", "__new__"], [423, 3, 1, "", "__nonzero__"], [423, 3, 1, "", "__or__"], [423, 3, 1, "", "__pow__"], [423, 3, 1, "", "__repr__"], [423, 3, 1, "", "__setstate__"], [423, 3, 1, "", "__str__"], [423, 3, 1, "", "all"], [423, 3, 1, "", "allclose"], [423, 3, 1, "", "any"], [423, 2, 1, "", "arithmeticFaceValue"], [423, 2, 1, "", "cellVolumeAverage"], [423, 3, 1, "", "constrain"], [423, 2, 1, "", "constraintMask"], [423, 3, 1, "", "copy"], [423, 3, 1, "", "dot"], [423, 2, 1, "", "faceGrad"], [423, 2, 1, "", "faceGradAverage"], [423, 2, 1, "", "faceValue"], [423, 2, 1, "", "gaussGrad"], [423, 3, 1, "", "getsctype"], [423, 2, 1, "", "globalValue"], [423, 2, 1, "", "grad"], [423, 2, 1, "", "harmonicFaceValue"], [423, 3, 1, "", "inBaseUnits"], [423, 3, 1, "", "inUnitsOf"], [423, 2, 1, "", "leastSquaresGrad"], [423, 2, 1, "", "mag"], [423, 3, 1, "", "max"], [423, 3, 1, "", "min"], [423, 2, 1, "", "minmodFaceValue"], [423, 2, 1, "", "old"], [423, 3, 1, "", "rdot"], [423, 3, 1, "", "release"], [423, 3, 1, "", "setValue"], [423, 2, 1, "", "shape"], [423, 3, 1, "", "std"], [423, 2, 1, "", "unit"], [423, 3, 1, "", "updateOld"], [423, 2, 1, "", "value"]], "fipy.variables.distanceVariable": [[427, 1, 1, "", "DistanceVariable"]], "fipy.variables.distanceVariable.DistanceVariable": [[427, 3, 1, "", "__abs__"], [427, 3, 1, "", "__and__"], [427, 3, 1, "", "__array__"], [427, 3, 1, "", "__array_wrap__"], [427, 3, 1, "", "__bool__"], [427, 3, 1, "", "__call__"], [427, 3, 1, "", "__eq__"], [427, 3, 1, "", "__ge__"], [427, 3, 1, "", "__getitem__"], [427, 3, 1, "", "__getstate__"], [427, 3, 1, "", "__gt__"], [427, 3, 1, "", "__hash__"], [427, 3, 1, "", "__invert__"], [427, 3, 1, "", "__le__"], [427, 3, 1, "", "__lt__"], [427, 3, 1, "", "__ne__"], [427, 3, 1, "", "__new__"], [427, 3, 1, "", "__nonzero__"], [427, 3, 1, "", "__or__"], [427, 3, 1, "", "__pow__"], [427, 3, 1, "", "__repr__"], [427, 3, 1, "", "__setstate__"], [427, 3, 1, "", "__str__"], [427, 3, 1, "", "all"], [427, 3, 1, "", "allclose"], [427, 3, 1, "", "any"], [427, 2, 1, "", "arithmeticFaceValue"], [427, 3, 1, "", "calcDistanceFunction"], [427, 2, 1, "", "cellInterfaceAreas"], [427, 2, 1, "", "cellVolumeAverage"], [427, 3, 1, "", "constrain"], [427, 2, 1, "", "constraintMask"], [427, 3, 1, "", "copy"], [427, 3, 1, "", "dot"], [427, 3, 1, "", "extendVariable"], [427, 2, 1, "", "faceGrad"], [427, 2, 1, "", "faceGradAverage"], [427, 2, 1, "", "faceValue"], [427, 2, 1, "", "gaussGrad"], [427, 3, 1, "", "getsctype"], [427, 2, 1, "", "globalValue"], [427, 2, 1, "", "grad"], [427, 2, 1, "", "harmonicFaceValue"], [427, 3, 1, "", "inBaseUnits"], [427, 3, 1, "", "inUnitsOf"], [427, 2, 1, "", "leastSquaresGrad"], [427, 2, 1, "", "mag"], [427, 3, 1, "", "max"], [427, 3, 1, "", "min"], [427, 2, 1, "", "minmodFaceValue"], [427, 2, 1, "", "old"], [427, 3, 1, "", "rdot"], [427, 3, 1, "", "release"], [427, 3, 1, "", "setValue"], [427, 2, 1, "", "shape"], [427, 3, 1, "", "std"], [427, 2, 1, "", "unit"], [427, 3, 1, "", "updateOld"], [427, 2, 1, "", "value"]], "fipy.variables.exponentialNoiseVariable": [[428, 1, 1, "", "ExponentialNoiseVariable"]], "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable": [[428, 3, 1, "", "__abs__"], [428, 3, 1, "", "__and__"], [428, 3, 1, "", "__array__"], [428, 3, 1, "", "__array_wrap__"], [428, 3, 1, "", "__bool__"], [428, 3, 1, "", "__call__"], [428, 3, 1, "", "__eq__"], [428, 3, 1, "", "__ge__"], [428, 3, 1, "", "__getitem__"], [428, 3, 1, "", "__getstate__"], [428, 3, 1, "", "__gt__"], [428, 3, 1, "", "__hash__"], [428, 3, 1, "", "__invert__"], [428, 3, 1, "", "__le__"], [428, 3, 1, "", "__lt__"], [428, 3, 1, "", "__ne__"], [428, 3, 1, "", "__new__"], [428, 3, 1, "", "__nonzero__"], [428, 3, 1, "", "__or__"], [428, 3, 1, "", "__pow__"], [428, 3, 1, "", "__repr__"], [428, 3, 1, "", "__setstate__"], [428, 3, 1, "", "__str__"], [428, 3, 1, "", "all"], [428, 3, 1, "", "allclose"], [428, 3, 1, "", "any"], [428, 2, 1, "", "arithmeticFaceValue"], [428, 2, 1, "", "cellVolumeAverage"], [428, 3, 1, "", "constrain"], [428, 2, 1, "", "constraintMask"], [428, 3, 1, "", "copy"], [428, 3, 1, "", "dot"], [428, 2, 1, "", "faceGrad"], [428, 2, 1, "", "faceGradAverage"], [428, 2, 1, "", "faceValue"], [428, 2, 1, "", "gaussGrad"], [428, 3, 1, "", "getsctype"], [428, 2, 1, "", "globalValue"], [428, 2, 1, "", "grad"], [428, 2, 1, "", "harmonicFaceValue"], [428, 3, 1, "", "inBaseUnits"], [428, 3, 1, "", "inUnitsOf"], [428, 2, 1, "", "leastSquaresGrad"], [428, 2, 1, "", "mag"], [428, 3, 1, "", "max"], [428, 3, 1, "", "min"], [428, 2, 1, "", "minmodFaceValue"], [428, 2, 1, "", "old"], [428, 3, 1, "", "rdot"], [428, 3, 1, "", "release"], [428, 3, 1, "", "scramble"], [428, 3, 1, "", "setValue"], [428, 2, 1, "", "shape"], [428, 3, 1, "", "std"], [428, 2, 1, "", "unit"], [428, 3, 1, "", "updateOld"], [428, 2, 1, "", "value"]], "fipy.variables.faceVariable": [[431, 1, 1, "", "FaceVariable"]], "fipy.variables.faceVariable.FaceVariable": [[431, 3, 1, "", "__abs__"], [431, 3, 1, "", "__and__"], [431, 3, 1, "", "__array__"], [431, 3, 1, "", "__array_wrap__"], [431, 3, 1, "", "__bool__"], [431, 3, 1, "", "__call__"], [431, 3, 1, "", "__eq__"], [431, 3, 1, "", "__ge__"], [431, 3, 1, "", "__getitem__"], [431, 3, 1, "", "__getstate__"], [431, 3, 1, "", "__gt__"], [431, 3, 1, "", "__hash__"], [431, 3, 1, "", "__invert__"], [431, 3, 1, "", "__le__"], [431, 3, 1, "", "__lt__"], [431, 3, 1, "", "__ne__"], [431, 3, 1, "", "__new__"], [431, 3, 1, "", "__nonzero__"], [431, 3, 1, "", "__or__"], [431, 3, 1, "", "__pow__"], [431, 3, 1, "", "__repr__"], [431, 3, 1, "", "__setstate__"], [431, 3, 1, "", "__str__"], [431, 3, 1, "", "all"], [431, 3, 1, "", "allclose"], [431, 3, 1, "", "any"], [431, 3, 1, "", "constrain"], [431, 2, 1, "", "constraintMask"], [431, 3, 1, "", "copy"], [431, 2, 1, "", "divergence"], [431, 3, 1, "", "dot"], [431, 3, 1, "", "getsctype"], [431, 3, 1, "", "inBaseUnits"], [431, 3, 1, "", "inUnitsOf"], [431, 2, 1, "", "mag"], [431, 3, 1, "", "max"], [431, 3, 1, "", "min"], [431, 3, 1, "", "rdot"], [431, 3, 1, "", "release"], [431, 3, 1, "", "setValue"], [431, 2, 1, "", "shape"], [431, 3, 1, "", "std"], [431, 2, 1, "", "unit"], [431, 2, 1, "", "value"]], "fipy.variables.gammaNoiseVariable": [[432, 1, 1, "", "GammaNoiseVariable"]], "fipy.variables.gammaNoiseVariable.GammaNoiseVariable": [[432, 3, 1, "", "__abs__"], [432, 3, 1, "", "__and__"], [432, 3, 1, "", "__array__"], [432, 3, 1, "", "__array_wrap__"], [432, 3, 1, "", "__bool__"], [432, 3, 1, "", "__call__"], [432, 3, 1, "", "__eq__"], [432, 3, 1, "", "__ge__"], [432, 3, 1, "", "__getitem__"], [432, 3, 1, "", "__getstate__"], [432, 3, 1, "", "__gt__"], [432, 3, 1, "", "__hash__"], [432, 3, 1, "", "__invert__"], [432, 3, 1, "", "__le__"], [432, 3, 1, "", "__lt__"], [432, 3, 1, "", "__ne__"], [432, 3, 1, "", "__new__"], [432, 3, 1, "", "__nonzero__"], [432, 3, 1, "", "__or__"], [432, 3, 1, "", "__pow__"], [432, 3, 1, "", "__repr__"], [432, 3, 1, "", "__setstate__"], [432, 3, 1, "", "__str__"], [432, 3, 1, "", "all"], [432, 3, 1, "", "allclose"], [432, 3, 1, "", "any"], [432, 2, 1, "", "arithmeticFaceValue"], [432, 2, 1, "", "cellVolumeAverage"], [432, 3, 1, "", "constrain"], [432, 2, 1, "", "constraintMask"], [432, 3, 1, "", "copy"], [432, 3, 1, "", "dot"], [432, 2, 1, "", "faceGrad"], [432, 2, 1, "", "faceGradAverage"], [432, 2, 1, "", "faceValue"], [432, 2, 1, "", "gaussGrad"], [432, 3, 1, "", "getsctype"], [432, 2, 1, "", "globalValue"], [432, 2, 1, "", "grad"], [432, 2, 1, "", "harmonicFaceValue"], [432, 3, 1, "", "inBaseUnits"], [432, 3, 1, "", "inUnitsOf"], [432, 2, 1, "", "leastSquaresGrad"], [432, 2, 1, "", "mag"], [432, 3, 1, "", "max"], [432, 3, 1, "", "min"], [432, 2, 1, "", "minmodFaceValue"], [432, 2, 1, "", "old"], [432, 3, 1, "", "rdot"], [432, 3, 1, "", "release"], [432, 3, 1, "", "scramble"], [432, 3, 1, "", "setValue"], [432, 2, 1, "", "shape"], [432, 3, 1, "", "std"], [432, 2, 1, "", "unit"], [432, 3, 1, "", "updateOld"], [432, 2, 1, "", "value"]], "fipy.variables.gaussianNoiseVariable": [[434, 1, 1, "", "GaussianNoiseVariable"]], "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable": [[434, 3, 1, "", "__abs__"], [434, 3, 1, "", "__and__"], [434, 3, 1, "", "__array__"], [434, 3, 1, "", "__array_wrap__"], [434, 3, 1, "", "__bool__"], [434, 3, 1, "", "__call__"], [434, 3, 1, "", "__eq__"], [434, 3, 1, "", "__ge__"], [434, 3, 1, "", "__getitem__"], [434, 3, 1, "", "__getstate__"], [434, 3, 1, "", "__gt__"], [434, 3, 1, "", "__hash__"], [434, 3, 1, "", "__invert__"], [434, 3, 1, "", "__le__"], [434, 3, 1, "", "__lt__"], [434, 3, 1, "", "__ne__"], [434, 3, 1, "", "__new__"], [434, 3, 1, "", "__nonzero__"], [434, 3, 1, "", "__or__"], [434, 3, 1, "", "__pow__"], [434, 3, 1, "", "__repr__"], [434, 3, 1, "", "__setstate__"], [434, 3, 1, "", "__str__"], [434, 3, 1, "", "all"], [434, 3, 1, "", "allclose"], [434, 3, 1, "", "any"], [434, 2, 1, "", "arithmeticFaceValue"], [434, 2, 1, "", "cellVolumeAverage"], [434, 3, 1, "", "constrain"], [434, 2, 1, "", "constraintMask"], [434, 3, 1, "", "copy"], [434, 3, 1, "", "dot"], [434, 2, 1, "", "faceGrad"], [434, 2, 1, "", "faceGradAverage"], [434, 2, 1, "", "faceValue"], [434, 2, 1, "", "gaussGrad"], [434, 3, 1, "", "getsctype"], [434, 2, 1, "", "globalValue"], [434, 2, 1, "", "grad"], [434, 2, 1, "", "harmonicFaceValue"], [434, 3, 1, "", "inBaseUnits"], [434, 3, 1, "", "inUnitsOf"], [434, 2, 1, "", "leastSquaresGrad"], [434, 2, 1, "", "mag"], [434, 3, 1, "", "max"], [434, 3, 1, "", "min"], [434, 2, 1, "", "minmodFaceValue"], [434, 2, 1, "", "old"], [434, 3, 1, "", "rdot"], [434, 3, 1, "", "release"], [434, 3, 1, "", "scramble"], [434, 3, 1, "", "setValue"], [434, 2, 1, "", "shape"], [434, 3, 1, "", "std"], [434, 2, 1, "", "unit"], [434, 3, 1, "", "updateOld"], [434, 2, 1, "", "value"]], "fipy.variables.histogramVariable": [[436, 1, 1, "", "HistogramVariable"]], "fipy.variables.histogramVariable.HistogramVariable": [[436, 3, 1, "", "__abs__"], [436, 3, 1, "", "__and__"], [436, 3, 1, "", "__array__"], [436, 3, 1, "", "__array_wrap__"], [436, 3, 1, "", "__bool__"], [436, 3, 1, "", "__call__"], [436, 3, 1, "", "__eq__"], [436, 3, 1, "", "__ge__"], [436, 3, 1, "", "__getitem__"], [436, 3, 1, "", "__getstate__"], [436, 3, 1, "", "__gt__"], [436, 3, 1, "", "__hash__"], [436, 3, 1, "", "__invert__"], [436, 3, 1, "", "__le__"], [436, 3, 1, "", "__lt__"], [436, 3, 1, "", "__ne__"], [436, 3, 1, "", "__new__"], [436, 3, 1, "", "__nonzero__"], [436, 3, 1, "", "__or__"], [436, 3, 1, "", "__pow__"], [436, 3, 1, "", "__repr__"], [436, 3, 1, "", "__setstate__"], [436, 3, 1, "", "__str__"], [436, 3, 1, "", "all"], [436, 3, 1, "", "allclose"], [436, 3, 1, "", "any"], [436, 2, 1, "", "arithmeticFaceValue"], [436, 2, 1, "", "cellVolumeAverage"], [436, 3, 1, "", "constrain"], [436, 2, 1, "", "constraintMask"], [436, 3, 1, "", "copy"], [436, 3, 1, "", "dot"], [436, 2, 1, "", "faceGrad"], [436, 2, 1, "", "faceGradAverage"], [436, 2, 1, "", "faceValue"], [436, 2, 1, "", "gaussGrad"], [436, 3, 1, "", "getsctype"], [436, 2, 1, "", "globalValue"], [436, 2, 1, "", "grad"], [436, 2, 1, "", "harmonicFaceValue"], [436, 3, 1, "", "inBaseUnits"], [436, 3, 1, "", "inUnitsOf"], [436, 2, 1, "", "leastSquaresGrad"], [436, 2, 1, "", "mag"], [436, 3, 1, "", "max"], [436, 3, 1, "", "min"], [436, 2, 1, "", "minmodFaceValue"], [436, 2, 1, "", "old"], [436, 3, 1, "", "rdot"], [436, 3, 1, "", "release"], [436, 3, 1, "", "setValue"], [436, 2, 1, "", "shape"], [436, 3, 1, "", "std"], [436, 2, 1, "", "unit"], [436, 3, 1, "", "updateOld"], [436, 2, 1, "", "value"]], "fipy.variables.meshVariable": [[441, 1, 1, "", "MeshVariable"]], "fipy.variables.meshVariable.MeshVariable": [[441, 3, 1, "", "__abs__"], [441, 3, 1, "", "__and__"], [441, 3, 1, "", "__array__"], [441, 3, 1, "", "__array_wrap__"], [441, 3, 1, "", "__bool__"], [441, 3, 1, "", "__call__"], [441, 3, 1, "", "__eq__"], [441, 3, 1, "", "__ge__"], [441, 3, 1, "", "__getitem__"], [441, 3, 1, "", "__getstate__"], [441, 3, 1, "", "__gt__"], [441, 3, 1, "", "__hash__"], [441, 3, 1, "", "__invert__"], [441, 3, 1, "", "__le__"], [441, 3, 1, "", "__lt__"], [441, 3, 1, "", "__ne__"], [441, 3, 1, "", "__new__"], [441, 3, 1, "", "__nonzero__"], [441, 3, 1, "", "__or__"], [441, 3, 1, "", "__pow__"], [441, 3, 1, "", "__repr__"], [441, 3, 1, "", "__setstate__"], [441, 3, 1, "", "__str__"], [441, 3, 1, "", "all"], [441, 3, 1, "", "allclose"], [441, 3, 1, "", "any"], [441, 3, 1, "", "constrain"], [441, 2, 1, "", "constraintMask"], [441, 3, 1, "", "copy"], [441, 3, 1, "", "dot"], [441, 3, 1, "", "getsctype"], [441, 3, 1, "", "inBaseUnits"], [441, 3, 1, "", "inUnitsOf"], [441, 2, 1, "", "mag"], [441, 3, 1, "", "max"], [441, 3, 1, "", "min"], [441, 3, 1, "", "rdot"], [441, 3, 1, "", "release"], [441, 3, 1, "", "setValue"], [441, 2, 1, "", "shape"], [441, 3, 1, "", "std"], [441, 2, 1, "", "unit"], [441, 2, 1, "", "value"]], "fipy.variables.modularVariable": [[447, 1, 1, "", "ModularVariable"]], "fipy.variables.modularVariable.ModularVariable": [[447, 3, 1, "", "__abs__"], [447, 3, 1, "", "__and__"], [447, 3, 1, "", "__array__"], [447, 3, 1, "", "__array_wrap__"], [447, 3, 1, "", "__bool__"], [447, 3, 1, "", "__call__"], [447, 3, 1, "", "__eq__"], [447, 3, 1, "", "__ge__"], [447, 3, 1, "", "__getitem__"], [447, 3, 1, "", "__getstate__"], [447, 3, 1, "", "__gt__"], [447, 3, 1, "", "__hash__"], [447, 3, 1, "", "__invert__"], [447, 3, 1, "", "__le__"], [447, 3, 1, "", "__lt__"], [447, 3, 1, "", "__ne__"], [447, 3, 1, "", "__new__"], [447, 3, 1, "", "__nonzero__"], [447, 3, 1, "", "__or__"], [447, 3, 1, "", "__pow__"], [447, 3, 1, "", "__repr__"], [447, 3, 1, "", "__setstate__"], [447, 3, 1, "", "__str__"], [447, 3, 1, "", "all"], [447, 3, 1, "", "allclose"], [447, 3, 1, "", "any"], [447, 2, 1, "", "arithmeticFaceValue"], [447, 2, 1, "", "cellVolumeAverage"], [447, 3, 1, "", "constrain"], [447, 2, 1, "", "constraintMask"], [447, 3, 1, "", "copy"], [447, 3, 1, "", "dot"], [447, 2, 1, "", "faceGrad"], [447, 2, 1, "", "faceGradAverage"], [447, 2, 1, "", "faceGradNoMod"], [447, 2, 1, "", "faceValue"], [447, 2, 1, "", "gaussGrad"], [447, 3, 1, "", "getsctype"], [447, 2, 1, "", "globalValue"], [447, 2, 1, "", "grad"], [447, 2, 1, "", "harmonicFaceValue"], [447, 3, 1, "", "inBaseUnits"], [447, 3, 1, "", "inUnitsOf"], [447, 2, 1, "", "leastSquaresGrad"], [447, 2, 1, "", "mag"], [447, 3, 1, "", "max"], [447, 3, 1, "", "min"], [447, 2, 1, "", "minmodFaceValue"], [447, 2, 1, "", "old"], [447, 3, 1, "", "rdot"], [447, 3, 1, "", "release"], [447, 3, 1, "", "setValue"], [447, 2, 1, "", "shape"], [447, 3, 1, "", "std"], [447, 2, 1, "", "unit"], [447, 3, 1, "", "updateOld"], [447, 2, 1, "", "value"]], "fipy.variables.noiseVariable": [[448, 1, 1, "", "NoiseVariable"]], "fipy.variables.noiseVariable.NoiseVariable": [[448, 3, 1, "", "__abs__"], [448, 3, 1, "", "__and__"], [448, 3, 1, "", "__array__"], [448, 3, 1, "", "__array_wrap__"], [448, 3, 1, "", "__bool__"], [448, 3, 1, "", "__call__"], [448, 3, 1, "", "__eq__"], [448, 3, 1, "", "__ge__"], [448, 3, 1, "", "__getitem__"], [448, 3, 1, "", "__getstate__"], [448, 3, 1, "", "__gt__"], [448, 3, 1, "", "__hash__"], [448, 3, 1, "", "__invert__"], [448, 3, 1, "", "__le__"], [448, 3, 1, "", "__lt__"], [448, 3, 1, "", "__ne__"], [448, 3, 1, "", "__new__"], [448, 3, 1, "", "__nonzero__"], [448, 3, 1, "", "__or__"], [448, 3, 1, "", "__pow__"], [448, 3, 1, "", "__repr__"], [448, 3, 1, "", "__setstate__"], [448, 3, 1, "", "__str__"], [448, 3, 1, "", "all"], [448, 3, 1, "", "allclose"], [448, 3, 1, "", "any"], [448, 2, 1, "", "arithmeticFaceValue"], [448, 2, 1, "", "cellVolumeAverage"], [448, 3, 1, "", "constrain"], [448, 2, 1, "", "constraintMask"], [448, 3, 1, "", "copy"], [448, 3, 1, "", "dot"], [448, 2, 1, "", "faceGrad"], [448, 2, 1, "", "faceGradAverage"], [448, 2, 1, "", "faceValue"], [448, 2, 1, "", "gaussGrad"], [448, 3, 1, "", "getsctype"], [448, 2, 1, "", "globalValue"], [448, 2, 1, "", "grad"], [448, 2, 1, "", "harmonicFaceValue"], [448, 3, 1, "", "inBaseUnits"], [448, 3, 1, "", "inUnitsOf"], [448, 2, 1, "", "leastSquaresGrad"], [448, 2, 1, "", "mag"], [448, 3, 1, "", "max"], [448, 3, 1, "", "min"], [448, 2, 1, "", "minmodFaceValue"], [448, 2, 1, "", "old"], [448, 3, 1, "", "rdot"], [448, 3, 1, "", "release"], [448, 3, 1, "", "scramble"], [448, 3, 1, "", "setValue"], [448, 2, 1, "", "shape"], [448, 3, 1, "", "std"], [448, 2, 1, "", "unit"], [448, 3, 1, "", "updateOld"], [448, 2, 1, "", "value"]], "fipy.variables.scharfetterGummelFaceVariable": [[450, 1, 1, "", "ScharfetterGummelFaceVariable"]], "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable": [[450, 3, 1, "", "__abs__"], [450, 3, 1, "", "__and__"], [450, 3, 1, "", "__array__"], [450, 3, 1, "", "__array_wrap__"], [450, 3, 1, "", "__bool__"], [450, 3, 1, "", "__call__"], [450, 3, 1, "", "__eq__"], [450, 3, 1, "", "__ge__"], [450, 3, 1, "", "__getitem__"], [450, 3, 1, "", "__getstate__"], [450, 3, 1, "", "__gt__"], [450, 3, 1, "", "__hash__"], [450, 3, 1, "", "__invert__"], [450, 3, 1, "", "__le__"], [450, 3, 1, "", "__lt__"], [450, 3, 1, "", "__ne__"], [450, 3, 1, "", "__new__"], [450, 3, 1, "", "__nonzero__"], [450, 3, 1, "", "__or__"], [450, 3, 1, "", "__pow__"], [450, 3, 1, "", "__repr__"], [450, 3, 1, "", "__setstate__"], [450, 3, 1, "", "__str__"], [450, 3, 1, "", "all"], [450, 3, 1, "", "allclose"], [450, 3, 1, "", "any"], [450, 3, 1, "", "constrain"], [450, 2, 1, "", "constraintMask"], [450, 3, 1, "", "copy"], [450, 2, 1, "", "divergence"], [450, 3, 1, "", "dot"], [450, 3, 1, "", "getsctype"], [450, 3, 1, "", "inBaseUnits"], [450, 3, 1, "", "inUnitsOf"], [450, 2, 1, "", "mag"], [450, 3, 1, "", "max"], [450, 3, 1, "", "min"], [450, 3, 1, "", "rdot"], [450, 3, 1, "", "release"], [450, 3, 1, "", "setValue"], [450, 2, 1, "", "shape"], [450, 3, 1, "", "std"], [450, 2, 1, "", "unit"], [450, 2, 1, "", "value"]], "fipy.variables.surfactantConvectionVariable": [[451, 1, 1, "", "SurfactantConvectionVariable"]], "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable": [[451, 3, 1, "", "__abs__"], [451, 3, 1, "", "__and__"], [451, 3, 1, "", "__array__"], [451, 3, 1, "", "__array_wrap__"], [451, 3, 1, "", "__bool__"], [451, 3, 1, "", "__call__"], [451, 3, 1, "", "__eq__"], [451, 3, 1, "", "__ge__"], [451, 3, 1, "", "__getitem__"], [451, 3, 1, "", "__getstate__"], [451, 3, 1, "", "__gt__"], [451, 3, 1, "", "__hash__"], [451, 3, 1, "", "__invert__"], [451, 3, 1, "", "__le__"], [451, 3, 1, "", "__lt__"], [451, 3, 1, "", "__ne__"], [451, 3, 1, "", "__new__"], [451, 3, 1, "", "__nonzero__"], [451, 3, 1, "", "__or__"], [451, 3, 1, "", "__pow__"], [451, 3, 1, "", "__repr__"], [451, 3, 1, "", "__setstate__"], [451, 3, 1, "", "__str__"], [451, 3, 1, "", "all"], [451, 3, 1, "", "allclose"], [451, 3, 1, "", "any"], [451, 3, 1, "", "constrain"], [451, 2, 1, "", "constraintMask"], [451, 3, 1, "", "copy"], [451, 2, 1, "", "divergence"], [451, 3, 1, "", "dot"], [451, 3, 1, "", "getsctype"], [451, 3, 1, "", "inBaseUnits"], [451, 3, 1, "", "inUnitsOf"], [451, 2, 1, "", "mag"], [451, 3, 1, "", "max"], [451, 3, 1, "", "min"], [451, 3, 1, "", "rdot"], [451, 3, 1, "", "release"], [451, 3, 1, "", "setValue"], [451, 2, 1, "", "shape"], [451, 3, 1, "", "std"], [451, 2, 1, "", "unit"], [451, 2, 1, "", "value"]], "fipy.variables.surfactantVariable": [[452, 1, 1, "", "SurfactantVariable"]], "fipy.variables.surfactantVariable.SurfactantVariable": [[452, 3, 1, "", "__abs__"], [452, 3, 1, "", "__and__"], [452, 3, 1, "", "__array__"], [452, 3, 1, "", "__array_wrap__"], [452, 3, 1, "", "__bool__"], [452, 3, 1, "", "__call__"], [452, 3, 1, "", "__eq__"], [452, 3, 1, "", "__ge__"], [452, 3, 1, "", "__getitem__"], [452, 3, 1, "", "__getstate__"], [452, 3, 1, "", "__gt__"], [452, 3, 1, "", "__hash__"], [452, 3, 1, "", "__invert__"], [452, 3, 1, "", "__le__"], [452, 3, 1, "", "__lt__"], [452, 3, 1, "", "__ne__"], [452, 3, 1, "", "__new__"], [452, 3, 1, "", "__nonzero__"], [452, 3, 1, "", "__or__"], [452, 3, 1, "", "__pow__"], [452, 3, 1, "", "__repr__"], [452, 3, 1, "", "__setstate__"], [452, 3, 1, "", "__str__"], [452, 3, 1, "", "all"], [452, 3, 1, "", "allclose"], [452, 3, 1, "", "any"], [452, 2, 1, "", "arithmeticFaceValue"], [452, 2, 1, "", "cellVolumeAverage"], [452, 3, 1, "", "constrain"], [452, 2, 1, "", "constraintMask"], [452, 3, 1, "", "copy"], [452, 3, 1, "", "dot"], [452, 2, 1, "", "faceGrad"], [452, 2, 1, "", "faceGradAverage"], [452, 2, 1, "", "faceValue"], [452, 2, 1, "", "gaussGrad"], [452, 3, 1, "", "getsctype"], [452, 2, 1, "", "globalValue"], [452, 2, 1, "", "grad"], [452, 2, 1, "", "harmonicFaceValue"], [452, 3, 1, "", "inBaseUnits"], [452, 3, 1, "", "inUnitsOf"], [452, 2, 1, "", "interfaceVar"], [452, 2, 1, "", "leastSquaresGrad"], [452, 2, 1, "", "mag"], [452, 3, 1, "", "max"], [452, 3, 1, "", "min"], [452, 2, 1, "", "minmodFaceValue"], [452, 2, 1, "", "old"], [452, 3, 1, "", "rdot"], [452, 3, 1, "", "release"], [452, 3, 1, "", "setValue"], [452, 2, 1, "", "shape"], [452, 3, 1, "", "std"], [452, 2, 1, "", "unit"], [452, 3, 1, "", "updateOld"], [452, 2, 1, "", "value"]], "fipy.variables.uniformNoiseVariable": [[455, 1, 1, "", "UniformNoiseVariable"]], "fipy.variables.uniformNoiseVariable.UniformNoiseVariable": [[455, 3, 1, "", "__abs__"], [455, 3, 1, "", "__and__"], [455, 3, 1, "", "__array__"], [455, 3, 1, "", "__array_wrap__"], [455, 3, 1, "", "__bool__"], [455, 3, 1, "", "__call__"], [455, 3, 1, "", "__eq__"], [455, 3, 1, "", "__ge__"], [455, 3, 1, "", "__getitem__"], [455, 3, 1, "", "__getstate__"], [455, 3, 1, "", "__gt__"], [455, 3, 1, "", "__hash__"], [455, 3, 1, "", "__invert__"], [455, 3, 1, "", "__le__"], [455, 3, 1, "", "__lt__"], [455, 3, 1, "", "__ne__"], [455, 3, 1, "", "__new__"], [455, 3, 1, "", "__nonzero__"], [455, 3, 1, "", "__or__"], [455, 3, 1, "", "__pow__"], [455, 3, 1, "", "__repr__"], [455, 3, 1, "", "__setstate__"], [455, 3, 1, "", "__str__"], [455, 3, 1, "", "all"], [455, 3, 1, "", "allclose"], [455, 3, 1, "", "any"], [455, 2, 1, "", "arithmeticFaceValue"], [455, 2, 1, "", "cellVolumeAverage"], [455, 3, 1, "", "constrain"], [455, 2, 1, "", "constraintMask"], [455, 3, 1, "", "copy"], [455, 3, 1, "", "dot"], [455, 2, 1, "", "faceGrad"], [455, 2, 1, "", "faceGradAverage"], [455, 2, 1, "", "faceValue"], [455, 2, 1, "", "gaussGrad"], [455, 3, 1, "", "getsctype"], [455, 2, 1, "", "globalValue"], [455, 2, 1, "", "grad"], [455, 2, 1, "", "harmonicFaceValue"], [455, 3, 1, "", "inBaseUnits"], [455, 3, 1, "", "inUnitsOf"], [455, 2, 1, "", "leastSquaresGrad"], [455, 2, 1, "", "mag"], [455, 3, 1, "", "max"], [455, 3, 1, "", "min"], [455, 2, 1, "", "minmodFaceValue"], [455, 2, 1, "", "old"], [455, 3, 1, "", "rdot"], [455, 3, 1, "", "release"], [455, 3, 1, "", "scramble"], [455, 3, 1, "", "setValue"], [455, 2, 1, "", "shape"], [455, 3, 1, "", "std"], [455, 2, 1, "", "unit"], [455, 3, 1, "", "updateOld"], [455, 2, 1, "", "value"]], "fipy.variables.variable": [[456, 1, 1, "", "Variable"]], "fipy.variables.variable.Variable": [[456, 3, 1, "", "__abs__"], [456, 3, 1, "", "__and__"], [456, 3, 1, "", "__array__"], [456, 3, 1, "", "__array_wrap__"], [456, 3, 1, "", "__bool__"], [456, 3, 1, "", "__call__"], [456, 3, 1, "", "__eq__"], [456, 3, 1, "", "__ge__"], [456, 3, 1, "", "__getitem__"], [456, 3, 1, "", "__getstate__"], [456, 3, 1, "", "__gt__"], [456, 3, 1, "", "__hash__"], [456, 3, 1, "", "__invert__"], [456, 3, 1, "", "__le__"], [456, 3, 1, "", "__lt__"], [456, 3, 1, "", "__ne__"], [456, 3, 1, "", "__new__"], [456, 3, 1, "", "__nonzero__"], [456, 3, 1, "", "__or__"], [456, 3, 1, "", "__pow__"], [456, 3, 1, "", "__repr__"], [456, 3, 1, "", "__setstate__"], [456, 3, 1, "", "__str__"], [456, 3, 1, "", "all"], [456, 3, 1, "", "allclose"], [456, 3, 1, "", "any"], [456, 3, 1, "", "constrain"], [456, 3, 1, "", "copy"], [456, 3, 1, "", "getsctype"], [456, 3, 1, "", "inBaseUnits"], [456, 3, 1, "", "inUnitsOf"], [456, 2, 1, "", "mag"], [456, 3, 1, "", "max"], [456, 3, 1, "", "min"], [456, 3, 1, "", "release"], [456, 3, 1, "", "setValue"], [456, 2, 1, "", "shape"], [456, 3, 1, "", "std"], [456, 2, 1, "", "unit"], [456, 2, 1, "", "value"]], "fipy.viewers": [[457, 1, 1, "", "DummyViewer"], [457, 5, 1, "", "MeshDimensionError"], [457, 4, 1, "", "Viewer"], [458, 0, 0, "-", "matplotlibViewer"], [470, 0, 0, "-", "mayaviViewer"], [474, 0, 0, "-", "multiViewer"], [475, 0, 0, "-", "test"], [476, 0, 0, "-", "testinteractive"], [477, 0, 0, "-", "tsvViewer"], [478, 0, 0, "-", "viewer"], [479, 0, 0, "-", "vtkViewer"]], "fipy.viewers.DummyViewer": [[457, 3, 1, "", "plot"], [457, 3, 1, "", "plotMesh"], [457, 3, 1, "", "setLimits"], [457, 2, 1, "", "title"], [457, 2, 1, "", "vars"]], "fipy.viewers.MeshDimensionError": [[457, 6, 1, "", "__cause__"], [457, 6, 1, "", "__context__"], [457, 3, 1, "", "__delattr__"], [457, 3, 1, "", "__getattribute__"], [457, 3, 1, "", "__reduce__"], [457, 3, 1, "", "__repr__"], [457, 3, 1, "", "__setattr__"], [457, 3, 1, "", "__str__"], [457, 3, 1, "", "add_note"], [457, 3, 1, "", "with_traceback"]], "fipy.viewers.matplotlibViewer": [[458, 4, 1, "", "MatplotlibViewer"], [459, 0, 0, "-", "abstractMatplotlib2DViewer"], [460, 0, 0, "-", "abstractMatplotlibViewer"], [461, 0, 0, "-", "matplotlib1DViewer"], [462, 0, 0, "-", "matplotlib2DContourViewer"], [463, 0, 0, "-", "matplotlib2DGridContourViewer"], [464, 0, 0, "-", "matplotlib2DGridViewer"], [465, 0, 0, "-", "matplotlib2DViewer"], [466, 0, 0, "-", "matplotlibSparseMatrixViewer"], [467, 0, 0, "-", "matplotlibStreamViewer"], [468, 0, 0, "-", "matplotlibVectorViewer"], [469, 0, 0, "-", "test"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer": [[459, 1, 1, "", "AbstractMatplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer": [[459, 2, 1, "", "axes"], [459, 2, 1, "", "cmap"], [459, 2, 1, "", "colorbar"], [459, 2, 1, "", "fig"], [459, 2, 1, "", "id"], [459, 2, 1, "", "log"], [459, 3, 1, "", "plot"], [459, 3, 1, "", "plotMesh"], [459, 3, 1, "", "setLimits"], [459, 2, 1, "", "title"], [459, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer": [[460, 1, 1, "", "AbstractMatplotlibViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer": [[460, 2, 1, "", "axes"], [460, 2, 1, "", "cmap"], [460, 2, 1, "", "colorbar"], [460, 2, 1, "", "fig"], [460, 2, 1, "", "id"], [460, 2, 1, "", "log"], [460, 3, 1, "", "plot"], [460, 3, 1, "", "plotMesh"], [460, 3, 1, "", "setLimits"], [460, 2, 1, "", "title"], [460, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer": [[461, 1, 1, "", "Matplotlib1DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer": [[461, 2, 1, "", "axes"], [461, 2, 1, "", "cmap"], [461, 2, 1, "", "colorbar"], [461, 2, 1, "", "fig"], [461, 2, 1, "", "id"], [461, 2, 1, "", "lines"], [461, 2, 1, "", "log"], [461, 3, 1, "", "plot"], [461, 3, 1, "", "plotMesh"], [461, 3, 1, "", "setLimits"], [461, 2, 1, "", "title"], [461, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer": [[462, 1, 1, "", "Matplotlib2DContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer": [[462, 2, 1, "", "axes"], [462, 2, 1, "", "cmap"], [462, 2, 1, "", "colorbar"], [462, 2, 1, "", "fig"], [462, 2, 1, "", "id"], [462, 2, 1, "", "levels"], [462, 2, 1, "", "log"], [462, 3, 1, "", "plot"], [462, 3, 1, "", "plotMesh"], [462, 3, 1, "", "setLimits"], [462, 2, 1, "", "title"], [462, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer": [[463, 1, 1, "", "Matplotlib2DGridContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer": [[463, 2, 1, "", "axes"], [463, 2, 1, "", "cmap"], [463, 2, 1, "", "colorbar"], [463, 2, 1, "", "fig"], [463, 2, 1, "", "id"], [463, 2, 1, "", "levels"], [463, 2, 1, "", "log"], [463, 3, 1, "", "plot"], [463, 3, 1, "", "plotMesh"], [463, 3, 1, "", "setLimits"], [463, 2, 1, "", "title"], [463, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer": [[464, 1, 1, "", "Matplotlib2DGridViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer": [[464, 2, 1, "", "axes"], [464, 2, 1, "", "cmap"], [464, 2, 1, "", "colorbar"], [464, 2, 1, "", "fig"], [464, 2, 1, "", "id"], [464, 2, 1, "", "log"], [464, 3, 1, "", "plot"], [464, 3, 1, "", "plotMesh"], [464, 3, 1, "", "setLimits"], [464, 2, 1, "", "title"], [464, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer": [[465, 1, 1, "", "Matplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer": [[465, 2, 1, "", "axes"], [465, 2, 1, "", "cmap"], [465, 2, 1, "", "collection"], [465, 2, 1, "", "colorbar"], [465, 2, 1, "", "fig"], [465, 2, 1, "", "id"], [465, 2, 1, "", "log"], [465, 3, 1, "", "plot"], [465, 3, 1, "", "plotMesh"], [465, 3, 1, "", "setLimits"], [465, 2, 1, "", "title"], [465, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer": [[466, 1, 1, "", "MatplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer": [[467, 1, 1, "", "MatplotlibStreamViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer": [[467, 2, 1, "", "axes"], [467, 2, 1, "", "cmap"], [467, 2, 1, "", "colorbar"], [467, 2, 1, "", "fig"], [467, 2, 1, "", "id"], [467, 2, 1, "", "kwargs"], [467, 2, 1, "", "log"], [467, 3, 1, "", "plot"], [467, 3, 1, "", "plotMesh"], [467, 3, 1, "", "setLimits"], [467, 2, 1, "", "title"], [467, 2, 1, "", "vars"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer": [[468, 1, 1, "", "MatplotlibVectorViewer"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer": [[468, 2, 1, "", "axes"], [468, 2, 1, "", "cmap"], [468, 2, 1, "", "colorbar"], [468, 2, 1, "", "fig"], [468, 2, 1, "", "id"], [468, 2, 1, "", "log"], [468, 3, 1, "", "plot"], [468, 3, 1, "", "plotMesh"], [468, 3, 1, "", "setLimits"], [468, 2, 1, "", "title"], [468, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer": [[470, 1, 1, "", "MayaviClient"], [471, 0, 0, "-", "mayaviClient"], [472, 0, 0, "-", "mayaviDaemon"], [473, 0, 0, "-", "test"]], "fipy.viewers.mayaviViewer.MayaviClient": [[470, 2, 1, "", "fps"], [470, 3, 1, "", "plot"], [470, 3, 1, "", "plotMesh"], [470, 3, 1, "", "setLimits"], [470, 2, 1, "", "title"], [470, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviClient": [[471, 1, 1, "", "MayaviClient"]], "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient": [[471, 2, 1, "", "fps"], [471, 3, 1, "", "plot"], [471, 3, 1, "", "plotMesh"], [471, 3, 1, "", "setLimits"], [471, 2, 1, "", "title"], [471, 2, 1, "", "vars"]], "fipy.viewers.mayaviViewer.mayaviDaemon": [[472, 1, 1, "", "MayaviDaemon"], [472, 4, 1, "", "main"]], "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon": [[472, 3, 1, "", "parse_command_line"], [472, 3, 1, "", "setup_source"], [472, 3, 1, "", "update_pipeline"], [472, 3, 1, "", "view_data"]], "fipy.viewers.multiViewer": [[474, 1, 1, "", "MultiViewer"]], "fipy.viewers.multiViewer.MultiViewer": [[474, 3, 1, "", "plot"], [474, 3, 1, "", "plotMesh"], [474, 3, 1, "", "setLimits"], [474, 2, 1, "", "title"], [474, 2, 1, "", "vars"]], "fipy.viewers.tsvViewer": [[477, 1, 1, "", "TSVViewer"]], "fipy.viewers.tsvViewer.TSVViewer": [[477, 3, 1, "", "plot"], [477, 3, 1, "", "plotMesh"], [477, 3, 1, "", "setLimits"], [477, 2, 1, "", "title"], [477, 2, 1, "", "vars"]], "fipy.viewers.viewer": [[478, 1, 1, "", "AbstractViewer"]], "fipy.viewers.viewer.AbstractViewer": [[478, 3, 1, "", "plot"], [478, 3, 1, "", "plotMesh"], [478, 3, 1, "", "setLimits"], [478, 2, 1, "", "title"], [478, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer": [[479, 1, 1, "", "VTKCellViewer"], [479, 1, 1, "", "VTKFaceViewer"], [479, 4, 1, "", "VTKViewer"], [480, 0, 0, "-", "test"], [481, 0, 0, "-", "vtkCellViewer"], [482, 0, 0, "-", "vtkFaceViewer"], [483, 0, 0, "-", "vtkViewer"]], "fipy.viewers.vtkViewer.VTKCellViewer": [[479, 3, 1, "", "plot"], [479, 3, 1, "", "plotMesh"], [479, 3, 1, "", "setLimits"], [479, 2, 1, "", "title"], [479, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.VTKFaceViewer": [[479, 3, 1, "", "plot"], [479, 3, 1, "", "plotMesh"], [479, 3, 1, "", "setLimits"], [479, 2, 1, "", "title"], [479, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[481, 1, 1, "", "VTKCellViewer"]], "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer": [[481, 3, 1, "", "plot"], [481, 3, 1, "", "plotMesh"], [481, 3, 1, "", "setLimits"], [481, 2, 1, "", "title"], [481, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[482, 1, 1, "", "VTKFaceViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer": [[482, 3, 1, "", "plot"], [482, 3, 1, "", "plotMesh"], [482, 3, 1, "", "setLimits"], [482, 2, 1, "", "title"], [482, 2, 1, "", "vars"]], "fipy.viewers.vtkViewer.vtkViewer": [[483, 1, 1, "", "VTKViewer"]], "fipy.viewers.vtkViewer.vtkViewer.VTKViewer": [[483, 3, 1, "", "plot"], [483, 3, 1, "", "plotMesh"], [483, 3, 1, "", "setLimits"], [483, 2, 1, "", "title"], [483, 2, 1, "", "vars"]], "package": [[493, 0, 0, "-", "subpackage"]], "package.subpackage": [[494, 0, 0, "-", "base"], [495, 0, 0, "-", "object"]], "package.subpackage.base": [[494, 1, 1, "", "Base"]], "package.subpackage.base.Base": [[494, 3, 1, "", "method1"], [494, 3, 1, "", "method2"]], "package.subpackage.object": [[495, 1, 1, "", "Object"]], "package.subpackage.object.Object": [[495, 3, 1, "", "method1"], [495, 3, 1, "", "method2"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:function", "5": "py:exception", "6": "py:attribute", "7": "std:cmdoption", "8": "std:envvar"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"], "7": ["std", "cmdoption", "program option"], "8": ["std", "envvar", "environment variable"]}, "titleterms": {"git": [0, 9, 11], "practic": 0, "branch": [0, 9, 11], "merg": 0, "chang": [0, 2, 8], "from": 0, "master": 0, "submit": 0, "code": [0, 16], "review": 0, "refactor": 0, "complet": 0, "continu": 0, "integr": 0, "conda": [0, 11], "lockfil": 0, "make": [0, 8], "releas": 0, "sourc": [0, 8, 21, 68, 487], "upload": 0, "updat": [0, 7, 186, 187, 188, 189], "forg": 0, "feedstock": 0, "announc": 0, "fipi": [1, 7, 8, 11, 17, 20, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 486], "packag": [1, 11, 13, 492, 493, 494, 495], "document": [1, 496], "log": [2, 17, 409, 410], "version": [2, 29, 416], "3": 2, "1": 2, "1050": 2, "gecf1f67d8": 2, "pull": 2, "fix": [2, 17], "4": 2, "2022": 2, "06": 2, "15": 2, "2": [2, 17], "2020": 2, "08": 2, "01": 2, "02": 2, "14": 2, "2019": 2, "28": 2, "04": 2, "22": 2, "2017": 2, "17": 2, "2016": 2, "12": 2, "24": 2, "2015": 2, "2013": 2, "09": 2, "30": 2, "0": 2, "2012": 2, "10": 2, "03": 2, "16": 2, "2011": 2, "20": 2, "2010": 2, "05": 2, "2009": 2, "11": 2, "23": 2, "2008": 2, "2007": 2, "2006": 2, "2005": 2, "2004": 2, "contact": 3, "github": 3, "discuss": [3, 6], "issu": 3, "stackoverflow": 3, "mail": 3, "list": 3, "archiv": 3, "contributor": 4, "disclaim": 5, "effici": 6, "comparison": 6, "between": [6, 8], "cach": 6, "flag": [6, 17, 22], "pyspars": [6, 16, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309], "trilino": [6, 16, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "exampl": [7, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], "select": 7, "diffus": [7, 8, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 487], "convect": [7, 8, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 487], "phase": [7, 112, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178], "field": 7, "level": [7, 11, 21, 138], "set": [7, 11], "cahn": 7, "hilliard": 7, "fluid": 7, "flow": [7, 116, 117, 118], "reactiv": 7, "wet": 7, "frequent": 8, "ask": 8, "question": 8, "how": [8, 496], "do": 8, "i": 8, "repres": 8, "an": 8, "equat": [8, 17, 487, 488], "wai": 8, "model": 8, "anisotrop": 8, "process": 8, "more": 8, "gener": [8, 488], "coeffici": 8, "tensor": 8, "so": 8, "term": [8, 12, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 487], "take": 8, "form": 8, "partial_i": 8, "gamma_": 8, "ij": 8, "partial_j": 8, "phi": [8, 487], "doesn": 8, "t": [8, 15, 487], "involv": 8, "depend": 8, "variabl": [8, 17, 22, 105, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456], "transient": [8, 487], "what": 8, "my": 8, "where": 8, "put": 8, "m": 8, "solv": [8, 17], "can": 8, "see": 8, "export": 8, "data": 8, "save": 8, "plot": 8, "imag": 8, "onli": 8, "want": 8, "file": 8, "displai": 8, "screen": 8, "movi": 8, "why": 8, "viewer": [8, 18, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "look": 8, "iter": 8, "timestep": 8, "sweep": 8, "oh": 8, "distinct": 8, "cellvari": [8, 423], "facevari": [8, 431], "boundari": [8, 17, 487], "condit": [8, 17, 487], "doe": 8, "thi": 8, "error": 8, "messag": 8, "mean": 8, "": 8, "default": [8, 16, 17], "behavior": 8, "tell": 8, "run": [8, 17], "parallel": [8, 17, 158], "don": [8, 15], "script": [8, 21], "work": 8, "anymor": 8, "isn": 8, "answer": 8, "here": 8, "usag": [9, 11], "client": [9, 11], "develop": [10, 11, 21], "guidelin": 10, "object": [10, 21, 495], "orient": [10, 21], "design": [10, 21], "program": [10, 21], "style": 10, "test": [10, 17, 21, 37, 42, 69, 79, 87, 103, 104, 115, 118, 123, 130, 145, 151, 152, 157, 167, 172, 178, 182, 184, 185, 197, 204, 242, 325, 386, 392, 393, 394, 395, 396, 414, 453, 469, 473, 475, 480], "instal": [11, 13, 15], "pre": 11, "binder": 11, "recommend": 11, "method": [11, 487], "creat": 11, "environ": [11, 17, 22, 410], "enabl": 11, "obtain": 11, "requir": 11, "python": [11, 17, 21], "numpi": 11, "option": 11, "gmsh": [11, 17], "scipi": [11, 16, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323], "scikit": 11, "fmm": 11, "lsmlib": 11, "nix": [11, 13], "get": [11, 13], "start": [11, 13], "addit": [11, 13], "us": [11, 12, 13, 17], "pip": [11, 13], "public": 14, "present": 14, "overview": 15, "even": 15, "you": 15, "read": [15, 496], "manual": [15, 17, 486], "download": 15, "support": 15, "convent": 15, "notat": 15, "solver": [16, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353], "petsc": [16, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274], "pyamg": [16, 276, 277, 278, 279, 280, 281, 282, 283], "pyamgx": [16, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295], "converg": [16, 252], "residu": 16, "criteria": 16, "legaci": 16, "absolute_toler": 16, "divergence_toler": 16, "report": 16, "statu": 16, "diverg": 16, "command": [17, 22], "line": [17, 22, 139], "openmp": 17, "thread": 17, "v": 17, "mpi": 17, "rank": 17, "mesh": [17, 153, 154, 155, 156, 157, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], "coupl": [17, 74], "vector": [17, 415], "appli": 17, "valu": 17, "dirichlet": 17, "gradient": 17, "neumann": 17, "flux": 17, "outlet": 17, "inlet": 17, "spatial": 17, "vari": 17, "robin": [17, 67], "intern": 17, "under": 17, "matplotlib": 18, "mayavi": 18, "virtual": 19, "kinet": 19, "materi": 19, "laboratori": 19, "content": 20, "implement": 21, "numer": [21, 489, 490], "approach": 21, "structur": 21, "base": [21, 494], "open": 21, "high": 21, "languag": 21, "extern": 22, "benchmark": [24, 25, 26, 27, 28, 29], "size": 26, "step": 27, "util": 28, "cahnhilliard": [30, 31, 32, 33, 34, 35, 36, 37], "mesh2d": [31, 61, 110, 228], "mesh2dcoupl": 32, "mesh3d": 33, "sphere": [34, 156], "spheredaemon": 35, "tanh1d": 36, "chemotaxi": [38, 39, 40, 41, 42], "input": [39, 99, 111], "input2d": 40, "paramet": 41, "advect": [44, 45, 46, 47, 120, 121, 122, 123, 124], "explicitupwind": 45, "implicitupwind": 46, "vanleerupwind": 47, "exponential1d": [48, 49, 50, 51, 52], "cylindricalmesh1d": 49, "cylindricalmesh1dnonuniform": 50, "mesh1d": [51, 54, 56, 65, 77, 81, 89, 90, 91, 108, 122, 128, 170, 227], "tri2d": [52, 57, 62, 66, 80, 247], "exponential1dback": [53, 54], "exponential1dsourc": [55, 56, 57], "exponential2d": [58, 59, 60, 61, 62], "cylindricalmesh2d": 59, "cylindricalmesh2dnonuniform": 60, "peclet": 63, "powerlaw1d": [64, 65, 66], "anisotropi": [71, 160], "circl": [72, 121, 126, 148, 169], "circlequad": 73, "electrostat": 75, "explicit": [76, 77, 78, 79, 80], "mixedel": 78, "mesh20x20": [82, 92, 93, 94, 95, 96, 97, 165], "mesh20x20coupl": 83, "nthorder": [84, 85, 86, 87], "input4thorder1d": 85, "input4thorder_lin": 86, "steadyst": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "inputperiod": 90, "tri2dinput": [91, 97, 100], "gmshinput": 93, "isotropi": 94, "modifiedmeshinput": 95, "orthoerror": 96, "mesh50x50": [98, 99, 100], "othermesh": [101, 102], "prism": 102, "elphf": [106, 107, 108, 109, 110, 111, 112, 113, 114, 115], "mesh1ddimension": 109, "phasediffus": 113, "poisson": 114, "stokescav": 117, "levelset": [119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152], "trench": 124, "distancefunct": [125, 126, 127, 128, 129, 130], "interior": 127, "squar": [129, 150], "electrochem": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146], "adsorbingsurfactantequ": 132, "adsorpt": 133, "gapfilldistancevari": 134, "gapfillmesh": 135, "gold": 136, "howtowriteascript": 137, "matplotlibsurfactantview": 140, "mayavisurfactantview": 141, "metaliondiffusionequ": 142, "simpletrenchsystem": 143, "surfactantbulkdiffusionequ": 144, "trenchmesh": 146, "surfact": [147, 148, 149, 150, 151], "expandingcircl": 149, "gmshrefin": 154, "inputgrid2d": 155, "anisotropyold": 161, "binari": 162, "binarycoupl": 163, "imping": [164, 165, 166, 167], "mesh40x1": 166, "missorient": [168, 169, 170, 171, 172], "modcircl": 171, "polyxt": 173, "polyxtalcoupl": 174, "quaternari": 175, "simpl": 176, "symmetri": 177, "reactivewet": [179, 180, 181, 182], "liquidvapor1d": 180, "liquidvapor2d": 181, "riemann": [183, 184], "update0_1to1_0": 187, "update1_0to2_0": 188, "update2_0to3_0": 189, "boundarycondit": [191, 192, 193, 194, 195, 196, 197], "constraint": 193, "fixedflux": 194, "fixedvalu": 195, "nthorderboundarycondit": 196, "matric": [198, 199, 200, 201, 202, 203, 204, 205], "offsetsparsematrix": 199, "petscmatrix": 200, "pysparsematrix": 201, "scipymatrix": 202, "sparsematrix": 203, "trilinosmatrix": 205, "abstractmesh": 207, "builder": [208, 209, 210, 211, 212, 213, 214], "abstractgridbuild": 209, "grid1dbuild": 210, "grid2dbuild": 211, "grid3dbuild": 212, "periodicgrid1dbuild": 213, "utilityclass": 214, "cylindricalgrid1d": 215, "cylindricalgrid2d": 216, "cylindricalnonuniformgrid1d": 217, "cylindricalnonuniformgrid2d": 218, "cylindricaluniformgrid1d": 219, "cylindricaluniformgrid2d": 220, "factorymesh": 221, "gmshmesh": 222, "grid1d": 223, "grid2d": 224, "grid3d": 225, "nonuniformgrid1d": 229, "nonuniformgrid2d": 230, "nonuniformgrid3d": 231, "periodicgrid1d": 232, "periodicgrid2d": 233, "periodicgrid3d": 234, "represent": [235, 236, 237, 238], "abstractrepresent": 236, "gridrepresent": 237, "meshrepresent": 238, "skewedgrid2d": 239, "sphericalnonuniformgrid1d": 240, "sphericaluniformgrid1d": 241, "topologi": [243, 244, 245, 246], "abstracttopologi": 244, "gridtopologi": 245, "meshtopologi": 246, "uniformgrid": 248, "uniformgrid1d": 249, "uniformgrid2d": 250, "comm": [254, 255, 256, 257, 328, 329, 330, 331, 398, 399, 400], "parallelpetsccommwrapp": 255, "petsccommwrapp": 256, "serialpetsccommwrapp": 257, "dummysolv": 258, "linearbicgsolv": 259, "linearcgssolv": [260, 277, 297, 313, 333], "lineargmressolv": [261, 278, 289, 298, 314, 334], "linearlusolv": [262, 280, 290, 301, 315, 335], "linearpcgsolv": [263, 281, 291, 302, 316, 336], "petscconverg": 264, "petsckrylovsolv": 265, "petscsolv": 266, "precondition": [267, 268, 269, 270, 271, 272, 273, 274, 275, 282, 283, 292, 304, 305, 306, 307, 317, 318, 319, 320, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349], "defaultprecondition": 268, "icprecondition": [269, 339], "iluprecondition": [270, 318, 340], "jacobiprecondition": [271, 305, 319, 341], "luprecondition": 272, "petscprecondition": 273, "ssorprecondition": [274, 307], "lineargeneralsolv": 279, "smoothedaggregationprecondition": 283, "aggregationamgsolv": 285, "classicalamgsolv": 286, "linearbicgstabsolv": [287, 312, 332], "linearfgmressolv": 288, "pyamgxsolv": 293, "pyamgxconverg": 294, "smoother": 295, "linearinitialsolv": 299, "linearjorsolv": 300, "linearrhssolv": 303, "pysparseprecondition": 306, "pysparseconverg": 308, "pysparsesolv": 309, "pysparsematrixsolv": 310, "scipyprecondition": 320, "scipyconverg": 321, "scipykrylovsolv": 322, "scipysolv": 323, "aztecconverg": 327, "epetracommwrapp": 329, "parallelepetracommwrapp": 330, "serialepetracommwrapp": 331, "domdecompprecondition": 338, "multilevelddmlprecondition": 342, "multilevelddprecondition": 343, "multilevelnssaprecondition": 344, "multilevelprecondition": 345, "multilevelsaprecondition": 346, "multilevelsgsprecondition": 347, "multilevelsolversmootherprecondition": 348, "trilinosprecondition": 349, "trilinosaztecoosolv": 350, "trilinosmltest": 351, "trilinosnonlinearsolv": 352, "trilinossolv": 353, "stepper": [354, 355, 356, 357], "pidstepp": 355, "pseudorkqsstepp": 356, "abstractbinaryterm": 359, "abstractconvectionterm": 360, "abstractdiffusionterm": 361, "abstractupwindconvectionterm": 362, "advectionterm": 363, "asymmetricconvectionterm": 364, "binaryterm": 365, "cellterm": 366, "centraldiffconvectionterm": 367, "coupledbinaryterm": 368, "diffusionterm": 369, "diffusiontermcorrect": 370, "diffusiontermnocorrect": 371, "explicitdiffusionterm": 372, "explicitsourceterm": 373, "explicitupwindconvectionterm": 374, "exponentialconvectionterm": 375, "faceterm": 376, "firstorderadvectionterm": 377, "hybridconvectionterm": 378, "implicitdiffusionterm": 379, "implicitsourceterm": 380, "nondiffusionterm": 381, "powerlawconvectionterm": 382, "residualterm": 383, "sourceterm": 384, "transientterm": 387, "unaryterm": 388, "upwindconvectionterm": 389, "vanleerconvectionterm": 390, "testfipi": 391, "doctestplu": 393, "lateimporttest": 394, "testprogram": 396, "tool": [397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416], "commwrapp": 399, "dummycomm": 400, "debug": 401, "decor": 402, "dimens": [403, 404, 405, 406], "dictwithdefault": 404, "numberdict": 405, "physicalfield": 406, "dump": 407, "inlin": 408, "numerix": 411, "parser": 412, "sharedtempfil": 413, "addoverfacesvari": 418, "arithmeticcelltofacevari": 419, "betanoisevari": 420, "binaryoperatorvari": 421, "celltofacevari": 422, "constant": 424, "constraintmask": 425, "coupledcellvari": 426, "distancevari": 427, "exponentialnoisevari": 428, "facegradcontributionsvari": 429, "facegradvari": 430, "gammanoisevari": 432, "gausscellgradvari": 433, "gaussiannoisevari": 434, "harmoniccelltofacevari": 435, "histogramvari": 436, "interfaceareavari": 437, "interfaceflagvari": 438, "leastsquarescellgradvari": 439, "levelsetdiffusionvari": 440, "meshvari": 441, "minmodcelltofacevari": 442, "modcellgradvari": 443, "modcelltofacevari": 444, "modfacegradvari": 445, "modphysicalfield": 446, "modularvari": 447, "noisevari": 448, "operatorvari": 449, "scharfettergummelfacevari": 450, "surfactantconvectionvari": 451, "surfactantvari": 452, "unaryoperatorvari": 454, "uniformnoisevari": 455, "matplotlibview": [458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469], "abstractmatplotlib2dview": 459, "abstractmatplotlibview": 460, "matplotlib1dview": 461, "matplotlib2dcontourview": 462, "matplotlib2dgridcontourview": 463, "matplotlib2dgridview": 464, "matplotlib2dview": 465, "matplotlibsparsematrixview": 466, "matplotlibstreamview": 467, "matplotlibvectorview": 468, "mayaviview": [470, 471, 472, 473], "mayavicli": 471, "mayavidaemon": 472, "multiview": 474, "testinteract": 476, "tsvviewer": 477, "vtkviewer": [479, 480, 481, 482, 483], "vtkcellview": 481, "vtkfaceview": 482, "glossari": 484, "introduct": 485, "finit": 487, "volum": 487, "cell": 487, "center": 487, "fvm": 487, "cc": 487, "vertex": 487, "vc": 487, "discret": 487, "partial": 487, "rho": 487, "nabla": 487, "cdot": 487, "left": 487, "vec": 487, "u": 487, "right": 487, "gamma_1": 487, "higher": 487, "order": 487, "linear": 487, "conserv": 488, "theoret": 489, "background": 489, "scheme": 490, "refer": 491, "subpackag": [493, 494, 495], "modul": 496}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinxcontrib.bibtex": 9, "sphinx": 58}, "alltitles": {"Git practices": [[0, "git-practices"]], "Branches": [[0, "branches"]], "Merging changes from master to the branch": [[0, "merging-changes-from-master-to-the-branch"]], "Submit branch for code review": [[0, "submit-branch-for-code-review"]], "Refactoring complete: merge branch to master": [[0, "refactoring-complete-merge-branch-to-master"]], "Continuous Integration": [[0, "continuous-integration"]], "Conda Lockfiles": [[0, "conda-lockfiles"]], "Making a Release": [[0, "making-a-release"]], "Source": [[0, "source"]], "Release from master": [[0, "release-from-master"]], "Upload": [[0, "upload"]], "Update conda-forge feedstock": [[0, "update-conda-forge-feedstock"]], "Announce": [[0, "announce"]], "fipy Package Documentation": [[1, "fipy-package-documentation"]], "Change Log": [[2, "change-log"]], "Version 3.1.3+1050.gecf1f67d8": [[2, "version-release"]], "Pulls": [[2, "pulls"], [2, "id7"], [2, "id52"], [2, "id61"], [2, "id67"], [2, "id80"], [2, "id98"], [2, "id171"]], "Fixes": [[2, "fixes"], [2, "id25"], [2, "id57"], [2, "id65"], [2, "id76"], [2, "id86"], [2, "id130"], [2, "id169"], [2, "id206"], [2, "id231"], [2, "id241"], [2, "id304"], [2, "id308"], [2, "id367"], [2, "id391"], [2, "id399"], [2, "id407"], [2, "id416"], [2, "id423"], [2, "id427"], [2, "id439"], [2, "id441"], [2, "id484"], [2, "id500"], [2, "id519"]], "Version 3.4.3 - 2022-06-15": [[2, "version-3-4-3-2022-06-15"]], "Version 3.4.2.1 - 2020-08-01": [[2, "version-3-4-2-1-2020-08-01"]], "Version 3.4.1 - 2020-02-14": [[2, "version-3-4-1-2020-02-14"]], "Version 3.4 - 2020-02-06": [[2, "version-3-4-2020-02-06"]], "Version 3.3 - 2019-06-28": [[2, "version-3-3-2019-06-28"]], "Version 3.2 - 2019-04-22": [[2, "version-3-2-2019-04-22"]], "Version 3.1.3 - 2017-01-17": [[2, "version-3-1-3-2017-01-17"]], "Version 3.1.2 - 2016-12-24": [[2, "version-3-1-2-2016-12-24"]], "Version 3.1.1 - 2015-12-17": [[2, "version-3-1-1-2015-12-17"]], "Version 3.1 - 2013-09-30": [[2, "version-3-1-2013-09-30"]], "Version 3.0.1 - 2012-10-03": [[2, "version-3-0-1-2012-10-03"]], "Version 3.0 - 2012-08-16": [[2, "version-3-0-2012-08-16"]], "Version 2.1.3 - 2012-01-17": [[2, "version-2-1-3-2012-01-17"]], "Version 2.1.2 - 2011-04-20": [[2, "version-2-1-2-2011-04-20"]], "Version 2.1.1 - 2010-10-05": [[2, "version-2-1-1-2010-10-05"]], "Version 2.1 - 2010-04-01": [[2, "version-2-1-2010-04-01"]], "Version 2.0.3 - 2010-03-17": [[2, "version-2-0-3-2010-03-17"]], "Version 2.0.2 - 2009-06-11": [[2, "version-2-0-2-2009-06-11"]], "Version 2.0.1 - 2009-04-23": [[2, "version-2-0-1-2009-04-23"]], "Version 2.0 - 2009-02-09": [[2, "version-2-0-2009-02-09"]], "Version 1.2.3 - 2009-01-0": [[2, "version-1-2-3-2009-01-0"]], "Version 1.2.2 - 2008-12-30": [[2, "version-1-2-2-2008-12-30"]], "Version 1.2.1 - 2008-02-08": [[2, "version-1-2-1-2008-02-08"]], "Version 1.2 - 2007-02-12": [[2, "version-1-2-2007-02-12"]], "Version 1.1 - 2006-06-06": [[2, "version-1-1-2006-06-06"]], "Version 1.0 - 2005-09-16": [[2, "version-1-0-2005-09-16"]], "Version 0.1.1": [[2, "version-0-1-1"]], "Version 0.1 - 2004-11-05": [[2, "version-0-1-2004-11-05"]], "Contact": [[3, "contact"]], "GitHub Discussions": [[3, "github-discussions"]], "GitHub Issues": [[3, "github-issues"]], "StackOverflow": [[3, "stackoverflow"]], "Mailing List": [[3, "mailing-list"]], "List Archive": [[3, "list-archive"]], "Contributors": [[4, "contributors"]], "Disclaimer": [[5, "disclaimer"]], "Efficiency": [[6, "efficiency"]], "Efficiency comparison between --no-cache and --cache flags": [[6, "efficiency-comparison-between-no-cache-and-cache-flags"]], "Efficiency discussion of Pysparse and Trilinos": [[6, "efficiency-discussion-of-pysparse-and-trilinos"]], "Examples": [[7, "examples"]], "Selected Examples": [[7, "selected-examples"]], "Diffusion Examples": [[7, "diffusion-examples"]], "Convection Examples": [[7, "convection-examples"]], "Phase Field Examples": [[7, "phase-field-examples"]], "Level Set Examples": [[7, "level-set-examples"]], "Cahn-Hilliard Examples": [[7, "cahn-hilliard-examples"]], "Fluid Flow Examples": [[7, "fluid-flow-examples"]], "Reactive Wetting Examples": [[7, "reactive-wetting-examples"]], "Updating FiPy": [[7, "updating-fipy"]], "Frequently Asked Questions": [[8, "frequently-asked-questions"]], "How do I represent an equation in FiPy?": [[8, "how-do-i-represent-an-equation-in-fipy"]], "Is there a way to model an anisotropic diffusion process or more generally to represent the diffusion coefficient as a tensor so that the diffusion term takes the form \\partial_i \\Gamma_{ij}\\partial_j \\phi?": [[8, "is-there-a-way-to-model-an-anisotropic-diffusion-process-or-more-generally-to-represent-the-diffusion-coefficient-as-a-tensor-so-that-the-diffusion-term-takes-the-form-partial-i-gamma-ij-partial-j-phi"]], "How do I represent a \u2026 term that doesn\u2019t involve the dependent variable?": [[8, "how-do-i-represent-a-term-that-doesn-t-involve-the-dependent-variable"]], "How do I represent a diffusive source?": [[8, "how-do-i-represent-a-diffusive-source"]], "How do I represent a convective source?": [[8, "how-do-i-represent-a-convective-source"]], "How do I represent a transient source?": [[8, "how-do-i-represent-a-transient-source"]], "What if my term involves the dependent variable, but not where FiPy puts it?": [[8, "what-if-my-term-involves-the-dependent-variable-but-not-where-fipy-puts-it"]], "What if the coefficient of a term depends on the variable that I\u2019m solving for?": [[8, "what-if-the-coefficient-of-a-term-depends-on-the-variable-that-i-m-solving-for"]], "How can I see what I\u2019m doing?": [[8, "how-can-i-see-what-i-m-doing"]], "How do I export data?": [[8, "how-do-i-export-data"]], "How do I save a plot image?": [[8, "how-do-i-save-a-plot-image"]], "What if I only want the saved file, with no display on screen?": [[8, "what-if-i-only-want-the-saved-file-with-no-display-on-screen"]], "How do I make a movie?": [[8, "how-do-i-make-a-movie"]], "Why doesn\u2019t the Viewer look the way I want?": [[8, "why-doesn-t-the-viewer-look-the-way-i-want"]], "Iterations, timesteps, and sweeps? Oh, my!": [[8, "iterations-timesteps-and-sweeps-oh-my"]], "Why the distinction between CellVariable and FaceVariable coefficients?": [[8, "why-the-distinction-between-cellvariable-and-facevariable-coefficients"]], "How do I represent boundary conditions?": [[8, "how-do-i-represent-boundary-conditions"]], "What does this error message mean?": [[8, "what-does-this-error-message-mean"]], "How do I change FiPy\u2019s default behavior?": [[8, "how-do-i-change-fipy-s-default-behavior"]], "How can I tell if I\u2019m running in parallel?": [[8, "how-can-i-tell-if-i-m-running-in-parallel"]], "Why don\u2019t my scripts work anymore?": [[8, "why-don-t-my-scripts-work-anymore"]], "What if my question isn\u2019t answered here?": [[8, "what-if-my-question-isn-t-answered-here"]], "Git usage": [[9, "git-usage"], [11, "git-usage"]], "Git client": [[9, "git-client"], [11, "git-client"]], "Git branches": [[9, "git-branches"], [11, "git-branches"]], "Development Guidelines": [[10, "development-guidelines"]], "Object Oriented Design": [[10, "object-oriented-design"]], "Programming Style": [[10, "programming-style"]], "Testing": [[10, "testing"]], "Installation": [[11, "installation"]], "Pre-Installed on Binder": [[11, "pre-installed-on-binder"]], "Recommended Method": [[11, "recommended-method"]], "Install conda": [[11, "install-conda"]], "Create a conda environment": [[11, "create-a-conda-environment"]], "Install FiPy": [[11, "install-fipy"]], "Enable conda environment": [[11, "enable-conda-environment"]], "Obtaining FiPy": [[11, "obtaining-fipy"]], "Installing FiPy": [[11, "installing-fipy"]], "Required Packages": [[11, "required-packages"]], "Python": [[11, "python"]], "NumPy": [[11, "numpy"]], "Optional Packages": [[11, "optional-packages"]], "Gmsh": [[11, "gmsh"]], "SciPy": [[11, "scipy"], [16, "scipy"]], "Level Set Packages": [[11, "level-set-packages"]], "Scikit-fmm": [[11, "scikit-fmm"]], "LSMLIB": [[11, "lsmlib"]], "Development Environment": [[11, "development-environment"]], "Nix": [[11, "nix"]], "Nix Installation": [[11, "nix-installation"], [13, "nix-installation"]], "Getting Started with Nix": [[11, "getting-started-with-nix"], [13, "getting-started-with-nix"]], "Installing": [[11, "installing"], [13, "installing"]], "Additional Packages": [[11, "additional-packages"], [13, "additional-packages"]], "Using Pip": [[11, "using-pip"], [13, "using-pip"]], "Terms of Use": [[12, "terms-of-use"]], "Publications": [[14, "publications"]], "Presentations": [[14, "presentations"]], "Overview": [[15, "overview"]], "Even if you don\u2019t read manuals\u2026": [[15, "even-if-you-don-t-read-manuals"]], "Download and Installation": [[15, "download-and-installation"]], "Support": [[15, "support"]], "Conventions and Notation": [[15, "conventions-and-notation"]], "Solvers": [[16, "solvers"]], "PETSc": [[16, "petsc"]], "Pysparse": [[16, "pysparse"]], "PyAMG": [[16, "pyamg"]], "pyamgx": [[16, "pyamgx"]], "Trilinos": [[16, "trilinos"]], "Convergence": [[16, "convergence"]], "Residual Criteria": [[16, "id25"]], "default": [[16, "default"]], "legacy": [[16, "legacy"]], "absolute_tolerance": [[16, "absolute-tolerance"]], "divergence_tolerance": [[16, "divergence-tolerance"]], "Reporting": [[16, "reporting"]], "Convergence Status Codes": [[16, "id26"]], "Divergence Status Codes": [[16, "id27"]], "Using FiPy": [[17, "using-fipy"]], "Logging": [[17, "logging"]], "Testing FiPy": [[17, "testing-fipy"]], "Parallel Tests": [[17, "parallel-tests"]], "Command-line Flags and Environment Variables": [[17, "command-line-flags-and-environment-variables"]], "Command-line Flags": [[17, "command-line-flags"]], "Environment Variables": [[17, "environment-variables"]], "Solving in Parallel": [[17, "solving-in-parallel"]], "OpenMP Threads vs. MPI Ranks": [[17, "openmp-threads-vs-mpi-ranks"]], "Meshing with Gmsh": [[17, "meshing-with-gmsh"]], "Coupled and Vector Equations": [[17, "coupled-and-vector-equations"]], "Boundary Conditions": [[17, "boundary-conditions"], [487, "boundary-conditions"]], "Default boundary conditions": [[17, "default-boundary-conditions"]], "Applying fixed value (Dirichlet) boundary conditions": [[17, "applying-fixed-value-dirichlet-boundary-conditions"]], "Applying fixed gradient boundary conditions (Neumann)": [[17, "applying-fixed-gradient-boundary-conditions-neumann"]], "Applying fixed flux boundary conditions": [[17, "applying-fixed-flux-boundary-conditions"]], "Applying outlet or inlet boundary conditions": [[17, "applying-outlet-or-inlet-boundary-conditions"]], "Applying spatially varying boundary conditions": [[17, "applying-spatially-varying-boundary-conditions"]], "Applying Robin boundary conditions": [[17, "applying-robin-boundary-conditions"]], "Applying internal \u201cboundary\u201d conditions": [[17, "applying-internal-boundary-conditions"]], "Internal fixed value": [[17, "internal-fixed-value"]], "Internal fixed gradient": [[17, "internal-fixed-gradient"]], "Internal Robin condition": [[17, "internal-robin-condition"]], "Running under Python 2": [[17, "running-under-python-2"]], "Manual": [[17, "manual"]], "Viewers": [[18, "viewers"]], "Matplotlib": [[18, "matplotlib"]], "Mayavi": [[18, "mayavi"]], "Virtual Kinetics of Materials Laboratory": [[19, "virtual-kinetics-of-materials-laboratory"]], "FiPy Contents": [[20, "fipy-contents"]], "Design and Implementation": [[21, "design-and-implementation"]], "Design": [[21, "design"]], "Numerical Approach": [[21, "numerical-approach"]], "Object Oriented Structure": [[21, "object-oriented-structure"]], "Test Based Development": [[21, "test-based-development"]], "Open Source": [[21, "open-source"]], "High-Level Scripting Language": [[21, "high-level-scripting-language"]], "Python Programming Language": [[21, "python-programming-language"]], "Implementation": [[21, "implementation"]], "External Command-line Flags": [[22, "external-command-line-flags"]], "External Environment Variables": [[22, "external-environment-variables"]], "examples": [[23, "module-examples"]], "examples.benchmarking": [[24, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[25, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[26, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[27, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[28, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[29, "module-examples.benchmarking.versions"]], "examples.cahnHilliard": [[30, "module-examples.cahnHilliard"]], "examples.cahnHilliard.mesh2D": [[31, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnHilliard.mesh2DCoupled": [[32, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnHilliard.mesh3D": [[33, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnHilliard.sphere": [[34, "module-examples.cahnHilliard.sphere"]], "examples.cahnHilliard.sphereDaemon": [[35, "module-examples.cahnHilliard.sphereDaemon"]], "examples.cahnHilliard.tanh1D": [[36, "module-examples.cahnHilliard.tanh1D"]], "examples.cahnHilliard.test": [[37, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[38, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[39, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2D": [[40, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[41, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[42, "module-examples.chemotaxis.test"]], "examples.convection": [[43, "module-examples.convection"]], "examples.convection.advection": [[44, "module-examples.convection.advection"]], "examples.convection.advection.explicitUpwind": [[45, "module-examples.convection.advection.explicitUpwind"]], "examples.convection.advection.implicitUpwind": [[46, "module-examples.convection.advection.implicitUpwind"]], "examples.convection.advection.vanLeerUpwind": [[47, "module-examples.convection.advection.vanLeerUpwind"]], "examples.convection.exponential1D": [[48, "module-examples.convection.exponential1D"]], "examples.convection.exponential1D.cylindricalMesh1D": [[49, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1D.cylindricalMesh1DNonUniform": [[50, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1D.mesh1D": [[51, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1D.tri2D": [[52, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1DBack": [[53, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1DBack.mesh1D": [[54, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1DSource": [[55, "module-examples.convection.exponential1DSource"]], "examples.convection.exponential1DSource.mesh1D": [[56, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1DSource.tri2D": [[57, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2D": [[58, "module-examples.convection.exponential2D"]], "examples.convection.exponential2D.cylindricalMesh2D": [[59, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2D.cylindricalMesh2DNonUniform": [[60, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2D.mesh2D": [[61, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2D.tri2D": [[62, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[63, "module-examples.convection.peclet"]], "examples.convection.powerLaw1D": [[64, "module-examples.convection.powerLaw1D"]], "examples.convection.powerLaw1D.mesh1D": [[65, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerLaw1D.tri2D": [[66, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[67, "module-examples.convection.robin"]], "examples.convection.source": [[68, "module-examples.convection.source"]], "examples.convection.test": [[69, "module-examples.convection.test"]], "examples.diffusion": [[70, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[71, "module-examples.diffusion.anisotropy"]], "examples.diffusion.circle": [[72, "module-examples.diffusion.circle"]], "examples.diffusion.circleQuad": [[73, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[74, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[75, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[76, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1D": [[77, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[78, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[79, "module-examples.diffusion.explicit.test"]], "examples.diffusion.explicit.tri2D": [[80, "module-examples.diffusion.explicit.tri2D"]], "examples.diffusion.mesh1D": [[81, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[82, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20Coupled": [[83, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthOrder": [[84, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthOrder.input4thOrder1D": [[85, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthOrder.input4thOrder_line": [[86, "module-examples.diffusion.nthOrder.input4thOrder_line"]], "examples.diffusion.nthOrder.test": [[87, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadyState": [[88, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadyState.mesh1D": [[89, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadyState.mesh1D.inputPeriodic": [[90, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadyState.mesh1D.tri2Dinput": [[91, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"]], "examples.diffusion.steadyState.mesh20x20": [[92, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadyState.mesh20x20.gmshinput": [[93, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadyState.mesh20x20.isotropy": [[94, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadyState.mesh20x20.modifiedMeshInput": [[95, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadyState.mesh20x20.orthoerror": [[96, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadyState.mesh20x20.tri2Dinput": [[97, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"]], "examples.diffusion.steadyState.mesh50x50": [[98, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadyState.mesh50x50.input": [[99, "module-examples.diffusion.steadyState.mesh50x50.input"]], "examples.diffusion.steadyState.mesh50x50.tri2Dinput": [[100, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"]], "examples.diffusion.steadyState.otherMeshes": [[101, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadyState.otherMeshes.prism": [[102, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadyState.test": [[103, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[104, "module-examples.diffusion.test"]], "examples.diffusion.variable": [[105, "module-examples.diffusion.variable"]], "examples.elphf": [[106, "module-examples.elphf"]], "examples.elphf.diffusion": [[107, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1D": [[108, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1Ddimensional": [[109, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2D": [[110, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[111, "module-examples.elphf.input"]], "examples.elphf.phase": [[112, "module-examples.elphf.phase"]], "examples.elphf.phaseDiffusion": [[113, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[114, "module-examples.elphf.poisson"]], "examples.elphf.test": [[115, "module-examples.elphf.test"]], "examples.flow": [[116, "module-examples.flow"]], "examples.flow.stokesCavity": [[117, "module-examples.flow.stokesCavity"]], "examples.flow.test": [[118, "module-examples.flow.test"]], "examples.levelSet": [[119, "module-examples.levelSet"]], "examples.levelSet.advection": [[120, "module-examples.levelSet.advection"]], "examples.levelSet.advection.circle": [[121, "module-examples.levelSet.advection.circle"]], "examples.levelSet.advection.mesh1D": [[122, "module-examples.levelSet.advection.mesh1D"]], "examples.levelSet.advection.test": [[123, "module-examples.levelSet.advection.test"]], "examples.levelSet.advection.trench": [[124, "module-examples.levelSet.advection.trench"]], "examples.levelSet.distanceFunction": [[125, "module-examples.levelSet.distanceFunction"]], "examples.levelSet.distanceFunction.circle": [[126, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelSet.distanceFunction.interior": [[127, "module-examples.levelSet.distanceFunction.interior"]], "examples.levelSet.distanceFunction.mesh1D": [[128, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelSet.distanceFunction.square": [[129, "module-examples.levelSet.distanceFunction.square"]], "examples.levelSet.distanceFunction.test": [[130, "module-examples.levelSet.distanceFunction.test"]], "examples.levelSet.electroChem": [[131, "module-examples.levelSet.electroChem"]], "examples.levelSet.electroChem.adsorbingSurfactantEquation": [[132, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelSet.electroChem.adsorption": [[133, "module-examples.levelSet.electroChem.adsorption"]], "examples.levelSet.electroChem.gapFillDistanceVariable": [[134, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelSet.electroChem.gapFillMesh": [[135, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelSet.electroChem.gold": [[136, "module-examples.levelSet.electroChem.gold"]], "examples.levelSet.electroChem.howToWriteAScript": [[137, "module-examples.levelSet.electroChem.howToWriteAScript"]], "examples.levelSet.electroChem.leveler": [[138, "module-examples.levelSet.electroChem.leveler"]], "examples.levelSet.electroChem.lines": [[139, "module-examples.levelSet.electroChem.lines"]], "examples.levelSet.electroChem.matplotlibSurfactantViewer": [[140, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "examples.levelSet.electroChem.mayaviSurfactantViewer": [[141, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "examples.levelSet.electroChem.metalIonDiffusionEquation": [[142, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelSet.electroChem.simpleTrenchSystem": [[143, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "examples.levelSet.electroChem.surfactantBulkDiffusionEquation": [[144, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelSet.electroChem.test": [[145, "module-examples.levelSet.electroChem.test"]], "examples.levelSet.electroChem.trenchMesh": [[146, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelSet.surfactant": [[147, "module-examples.levelSet.surfactant"]], "examples.levelSet.surfactant.circle": [[148, "module-examples.levelSet.surfactant.circle"]], "examples.levelSet.surfactant.expandingCircle": [[149, "module-examples.levelSet.surfactant.expandingCircle"]], "examples.levelSet.surfactant.square": [[150, "module-examples.levelSet.surfactant.square"]], "examples.levelSet.surfactant.test": [[151, "module-examples.levelSet.surfactant.test"]], "examples.levelSet.test": [[152, "module-examples.levelSet.test"]], "examples.meshing": [[153, "module-examples.meshing"]], "examples.meshing.gmshRefinement": [[154, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputGrid2D": [[155, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[156, "module-examples.meshing.sphere"]], "examples.meshing.test": [[157, "module-examples.meshing.test"]], "examples.parallel": [[158, "module-examples.parallel"]], "examples.phase": [[159, "module-examples.phase"]], "examples.phase.anisotropy": [[160, "module-examples.phase.anisotropy"]], "examples.phase.anisotropyOLD": [[161, "module-examples.phase.anisotropyOLD"]], "examples.phase.binary": [[162, "module-examples.phase.binary"]], "examples.phase.binaryCoupled": [[163, "module-examples.phase.binaryCoupled"]], "examples.phase.impingement": [[164, "module-examples.phase.impingement"]], "examples.phase.impingement.mesh20x20": [[165, "module-examples.phase.impingement.mesh20x20"]], "examples.phase.impingement.mesh40x1": [[166, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[167, "module-examples.phase.impingement.test"]], "examples.phase.missOrientation": [[168, "module-examples.phase.missOrientation"]], "examples.phase.missOrientation.circle": [[169, "module-examples.phase.missOrientation.circle"]], "examples.phase.missOrientation.mesh1D": [[170, "module-examples.phase.missOrientation.mesh1D"]], "examples.phase.missOrientation.modCircle": [[171, "module-examples.phase.missOrientation.modCircle"]], "examples.phase.missOrientation.test": [[172, "module-examples.phase.missOrientation.test"]], "examples.phase.polyxtal": [[173, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalCoupled": [[174, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[175, "module-examples.phase.quaternary"]], "examples.phase.simple": [[176, "module-examples.phase.simple"]], "examples.phase.symmetry": [[177, "module-examples.phase.symmetry"]], "examples.phase.test": [[178, "module-examples.phase.test"]], "examples.reactiveWetting": [[179, "module-examples.reactiveWetting"]], "examples.reactiveWetting.liquidVapor1D": [[180, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactiveWetting.liquidVapor2D": [[181, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactiveWetting.test": [[182, "module-examples.reactiveWetting.test"]], "examples.riemann": [[183, "module-examples.riemann"]], "examples.riemann.test": [[184, "module-examples.riemann.test"]], "examples.test": [[185, "module-examples.test"]], "examples.updating": [[186, "module-examples.updating"]], "examples.updating.update0_1to1_0": [[187, "module-examples.updating.update0_1to1_0"]], "examples.updating.update1_0to2_0": [[188, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[189, "module-examples.updating.update2_0to3_0"]], "fipy": [[190, "module-fipy"]], "fipy.boundaryConditions": [[191, "module-fipy.boundaryConditions"]], "fipy.boundaryConditions.boundaryCondition": [[192, "module-fipy.boundaryConditions.boundaryCondition"]], "fipy.boundaryConditions.constraint": [[193, "module-fipy.boundaryConditions.constraint"]], "fipy.boundaryConditions.fixedFlux": [[194, "module-fipy.boundaryConditions.fixedFlux"]], "fipy.boundaryConditions.fixedValue": [[195, "module-fipy.boundaryConditions.fixedValue"]], "fipy.boundaryConditions.nthOrderBoundaryCondition": [[196, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryConditions.test": [[197, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[198, "module-fipy.matrices"]], "fipy.matrices.offsetSparseMatrix": [[199, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.petscMatrix": [[200, "module-fipy.matrices.petscMatrix"]], "fipy.matrices.pysparseMatrix": [[201, "module-fipy.matrices.pysparseMatrix"]], "fipy.matrices.scipyMatrix": [[202, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparseMatrix": [[203, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[204, "module-fipy.matrices.test"]], "fipy.matrices.trilinosMatrix": [[205, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[206, "module-fipy.meshes"]], "fipy.meshes.abstractMesh": [[207, "module-fipy.meshes.abstractMesh"]], "fipy.meshes.builders": [[208, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractGridBuilder": [[209, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1DBuilder": [[210, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2DBuilder": [[211, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3DBuilder": [[212, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicGrid1DBuilder": [[213, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityClasses": [[214, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalGrid1D": [[215, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalGrid2D": [[216, "module-fipy.meshes.cylindricalGrid2D"]], "fipy.meshes.cylindricalNonUniformGrid1D": [[217, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "fipy.meshes.cylindricalNonUniformGrid2D": [[218, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "fipy.meshes.cylindricalUniformGrid1D": [[219, "module-fipy.meshes.cylindricalUniformGrid1D"]], "fipy.meshes.cylindricalUniformGrid2D": [[220, "module-fipy.meshes.cylindricalUniformGrid2D"]], "fipy.meshes.factoryMeshes": [[221, "module-fipy.meshes.factoryMeshes"]], "fipy.meshes.gmshMesh": [[222, "module-fipy.meshes.gmshMesh"]], "fipy.meshes.grid1D": [[223, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2D": [[224, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3D": [[225, "module-fipy.meshes.grid3D"]], "fipy.meshes.mesh": [[226, "module-fipy.meshes.mesh"]], "fipy.meshes.mesh1D": [[227, "module-fipy.meshes.mesh1D"]], "fipy.meshes.mesh2D": [[228, "module-fipy.meshes.mesh2D"]], "fipy.meshes.nonUniformGrid1D": [[229, "module-fipy.meshes.nonUniformGrid1D"]], "fipy.meshes.nonUniformGrid2D": [[230, "module-fipy.meshes.nonUniformGrid2D"]], "fipy.meshes.nonUniformGrid3D": [[231, "module-fipy.meshes.nonUniformGrid3D"]], "fipy.meshes.periodicGrid1D": [[232, "module-fipy.meshes.periodicGrid1D"]], "fipy.meshes.periodicGrid2D": [[233, "module-fipy.meshes.periodicGrid2D"]], "fipy.meshes.periodicGrid3D": [[234, "module-fipy.meshes.periodicGrid3D"]], "fipy.meshes.representations": [[235, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractRepresentation": [[236, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridRepresentation": [[237, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshRepresentation": [[238, "module-fipy.meshes.representations.meshRepresentation"]], "fipy.meshes.skewedGrid2D": [[239, "module-fipy.meshes.skewedGrid2D"]], "fipy.meshes.sphericalNonUniformGrid1D": [[240, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "fipy.meshes.sphericalUniformGrid1D": [[241, "module-fipy.meshes.sphericalUniformGrid1D"]], "fipy.meshes.test": [[242, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[243, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstractTopology": [[244, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridTopology": [[245, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshTopology": [[246, "module-fipy.meshes.topologies.meshTopology"]], "fipy.meshes.tri2D": [[247, "module-fipy.meshes.tri2D"]], "fipy.meshes.uniformGrid": [[248, "module-fipy.meshes.uniformGrid"]], "fipy.meshes.uniformGrid1D": [[249, "module-fipy.meshes.uniformGrid1D"]], "fipy.meshes.uniformGrid2D": [[250, "module-fipy.meshes.uniformGrid2D"]], "fipy.solvers": [[251, "module-fipy.solvers"]], "fipy.solvers.convergence": [[252, "module-fipy.solvers.convergence"]], "fipy.solvers.petsc": [[253, "module-fipy.solvers.petsc"]], "fipy.solvers.petsc.comms": [[254, "module-fipy.solvers.petsc.comms"]], "fipy.solvers.petsc.comms.parallelPETScCommWrapper": [[255, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"]], "fipy.solvers.petsc.comms.petscCommWrapper": [[256, "module-fipy.solvers.petsc.comms.petscCommWrapper"]], "fipy.solvers.petsc.comms.serialPETScCommWrapper": [[257, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"]], "fipy.solvers.petsc.dummySolver": [[258, "module-fipy.solvers.petsc.dummySolver"]], "fipy.solvers.petsc.linearBicgSolver": [[259, "module-fipy.solvers.petsc.linearBicgSolver"]], "fipy.solvers.petsc.linearCGSSolver": [[260, "module-fipy.solvers.petsc.linearCGSSolver"]], "fipy.solvers.petsc.linearGMRESSolver": [[261, "module-fipy.solvers.petsc.linearGMRESSolver"]], "fipy.solvers.petsc.linearLUSolver": [[262, "module-fipy.solvers.petsc.linearLUSolver"]], "fipy.solvers.petsc.linearPCGSolver": [[263, "module-fipy.solvers.petsc.linearPCGSolver"]], "fipy.solvers.petsc.petscConvergence": [[264, "module-fipy.solvers.petsc.petscConvergence"]], "fipy.solvers.petsc.petscKrylovSolver": [[265, "module-fipy.solvers.petsc.petscKrylovSolver"]], "fipy.solvers.petsc.petscSolver": [[266, "module-fipy.solvers.petsc.petscSolver"]], "fipy.solvers.petsc.preconditioners": [[267, "module-fipy.solvers.petsc.preconditioners"]], "fipy.solvers.petsc.preconditioners.defaultPreconditioner": [[268, "module-fipy.solvers.petsc.preconditioners.defaultPreconditioner"]], "fipy.solvers.petsc.preconditioners.icPreconditioner": [[269, "module-fipy.solvers.petsc.preconditioners.icPreconditioner"]], "fipy.solvers.petsc.preconditioners.iluPreconditioner": [[270, "module-fipy.solvers.petsc.preconditioners.iluPreconditioner"]], "fipy.solvers.petsc.preconditioners.jacobiPreconditioner": [[271, "module-fipy.solvers.petsc.preconditioners.jacobiPreconditioner"]], "fipy.solvers.petsc.preconditioners.luPreconditioner": [[272, "module-fipy.solvers.petsc.preconditioners.luPreconditioner"]], "fipy.solvers.petsc.preconditioners.petscPreconditioner": [[273, "module-fipy.solvers.petsc.preconditioners.petscPreconditioner"]], "fipy.solvers.petsc.preconditioners.ssorPreconditioner": [[274, "module-fipy.solvers.petsc.preconditioners.ssorPreconditioner"]], "fipy.solvers.preconditioner": [[275, "module-fipy.solvers.preconditioner"]], "fipy.solvers.pyAMG": [[276, "module-fipy.solvers.pyAMG"]], "fipy.solvers.pyAMG.linearCGSSolver": [[277, "module-fipy.solvers.pyAMG.linearCGSSolver"]], "fipy.solvers.pyAMG.linearGMRESSolver": [[278, "module-fipy.solvers.pyAMG.linearGMRESSolver"]], "fipy.solvers.pyAMG.linearGeneralSolver": [[279, "module-fipy.solvers.pyAMG.linearGeneralSolver"]], "fipy.solvers.pyAMG.linearLUSolver": [[280, "module-fipy.solvers.pyAMG.linearLUSolver"]], "fipy.solvers.pyAMG.linearPCGSolver": [[281, "module-fipy.solvers.pyAMG.linearPCGSolver"]], "fipy.solvers.pyAMG.preconditioners": [[282, "module-fipy.solvers.pyAMG.preconditioners"]], "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner": [[283, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[284, "module-fipy.solvers.pyamgx"]], "fipy.solvers.pyamgx.aggregationAMGSolver": [[285, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "fipy.solvers.pyamgx.classicalAMGSolver": [[286, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "fipy.solvers.pyamgx.linearBiCGStabSolver": [[287, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "fipy.solvers.pyamgx.linearFGMRESSolver": [[288, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "fipy.solvers.pyamgx.linearGMRESSolver": [[289, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "fipy.solvers.pyamgx.linearLUSolver": [[290, "module-fipy.solvers.pyamgx.linearLUSolver"]], "fipy.solvers.pyamgx.linearPCGSolver": [[291, "module-fipy.solvers.pyamgx.linearPCGSolver"]], "fipy.solvers.pyamgx.preconditioners": [[292, "module-fipy.solvers.pyamgx.preconditioners"]], "fipy.solvers.pyamgx.pyAMGXSolver": [[293, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "fipy.solvers.pyamgx.pyamgxConvergence": [[294, "module-fipy.solvers.pyamgx.pyamgxConvergence"]], "fipy.solvers.pyamgx.smoothers": [[295, "module-fipy.solvers.pyamgx.smoothers"]], "fipy.solvers.pysparse": [[296, "module-fipy.solvers.pysparse"]], "fipy.solvers.pysparse.linearCGSSolver": [[297, "module-fipy.solvers.pysparse.linearCGSSolver"]], "fipy.solvers.pysparse.linearGMRESSolver": [[298, "module-fipy.solvers.pysparse.linearGMRESSolver"]], "fipy.solvers.pysparse.linearInitialSolver": [[299, "module-fipy.solvers.pysparse.linearInitialSolver"]], "fipy.solvers.pysparse.linearJORSolver": [[300, "module-fipy.solvers.pysparse.linearJORSolver"]], "fipy.solvers.pysparse.linearLUSolver": [[301, "module-fipy.solvers.pysparse.linearLUSolver"]], "fipy.solvers.pysparse.linearPCGSolver": [[302, "module-fipy.solvers.pysparse.linearPCGSolver"]], "fipy.solvers.pysparse.linearRHSSolver": [[303, "module-fipy.solvers.pysparse.linearRHSSolver"]], "fipy.solvers.pysparse.preconditioners": [[304, "module-fipy.solvers.pysparse.preconditioners"]], "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner": [[305, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.pysparsePreconditioner": [[306, "module-fipy.solvers.pysparse.preconditioners.pysparsePreconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorPreconditioner": [[307, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"]], "fipy.solvers.pysparse.pysparseConvergence": [[308, "module-fipy.solvers.pysparse.pysparseConvergence"]], "fipy.solvers.pysparse.pysparseSolver": [[309, "module-fipy.solvers.pysparse.pysparseSolver"]], "fipy.solvers.pysparseMatrixSolver": [[310, "module-fipy.solvers.pysparseMatrixSolver"]], "fipy.solvers.scipy": [[311, "module-fipy.solvers.scipy"]], "fipy.solvers.scipy.linearBicgstabSolver": [[312, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "fipy.solvers.scipy.linearCGSSolver": [[313, "module-fipy.solvers.scipy.linearCGSSolver"]], "fipy.solvers.scipy.linearGMRESSolver": [[314, "module-fipy.solvers.scipy.linearGMRESSolver"]], "fipy.solvers.scipy.linearLUSolver": [[315, "module-fipy.solvers.scipy.linearLUSolver"]], "fipy.solvers.scipy.linearPCGSolver": [[316, "module-fipy.solvers.scipy.linearPCGSolver"]], "fipy.solvers.scipy.preconditioners": [[317, "module-fipy.solvers.scipy.preconditioners"]], "fipy.solvers.scipy.preconditioners.iluPreconditioner": [[318, "module-fipy.solvers.scipy.preconditioners.iluPreconditioner"]], "fipy.solvers.scipy.preconditioners.jacobiPreconditioner": [[319, "module-fipy.solvers.scipy.preconditioners.jacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners.scipyPreconditioner": [[320, "module-fipy.solvers.scipy.preconditioners.scipyPreconditioner"]], "fipy.solvers.scipy.scipyConvergence": [[321, "module-fipy.solvers.scipy.scipyConvergence"]], "fipy.solvers.scipy.scipyKrylovSolver": [[322, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "fipy.solvers.scipy.scipySolver": [[323, "module-fipy.solvers.scipy.scipySolver"]], "fipy.solvers.solver": [[324, "module-fipy.solvers.solver"]], "fipy.solvers.test": [[325, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[326, "module-fipy.solvers.trilinos"]], "fipy.solvers.trilinos.aztecConvergence": [[327, "module-fipy.solvers.trilinos.aztecConvergence"]], "fipy.solvers.trilinos.comms": [[328, "module-fipy.solvers.trilinos.comms"]], "fipy.solvers.trilinos.comms.epetraCommWrapper": [[329, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper": [[330, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"]], "fipy.solvers.trilinos.comms.serialEpetraCommWrapper": [[331, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "fipy.solvers.trilinos.linearBicgstabSolver": [[332, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "fipy.solvers.trilinos.linearCGSSolver": [[333, "module-fipy.solvers.trilinos.linearCGSSolver"]], "fipy.solvers.trilinos.linearGMRESSolver": [[334, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "fipy.solvers.trilinos.linearLUSolver": [[335, "module-fipy.solvers.trilinos.linearLUSolver"]], "fipy.solvers.trilinos.linearPCGSolver": [[336, "module-fipy.solvers.trilinos.linearPCGSolver"]], "fipy.solvers.trilinos.preconditioners": [[337, "module-fipy.solvers.trilinos.preconditioners"]], "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner": [[338, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icPreconditioner": [[339, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "fipy.solvers.trilinos.preconditioners.iluPreconditioner": [[340, "module-fipy.solvers.trilinos.preconditioners.iluPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner": [[341, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner": [[342, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner": [[343, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner": [[344, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner": [[345, "module-fipy.solvers.trilinos.preconditioners.multilevelPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner": [[346, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner": [[347, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner": [[348, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner": [[349, "module-fipy.solvers.trilinos.preconditioners.trilinosPreconditioner"]], "fipy.solvers.trilinos.trilinosAztecOOSolver": [[350, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "fipy.solvers.trilinos.trilinosMLTest": [[351, "module-fipy.solvers.trilinos.trilinosMLTest"]], "fipy.solvers.trilinos.trilinosNonlinearSolver": [[352, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "fipy.solvers.trilinos.trilinosSolver": [[353, "module-fipy.solvers.trilinos.trilinosSolver"]], "fipy.steppers": [[354, "module-fipy.steppers"]], "fipy.steppers.pidStepper": [[355, "module-fipy.steppers.pidStepper"]], "fipy.steppers.pseudoRKQSStepper": [[356, "module-fipy.steppers.pseudoRKQSStepper"]], "fipy.steppers.stepper": [[357, "module-fipy.steppers.stepper"]], "fipy.terms": [[358, "module-fipy.terms"]], "fipy.terms.abstractBinaryTerm": [[359, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractConvectionTerm": [[360, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractDiffusionTerm": [[361, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractUpwindConvectionTerm": [[362, "module-fipy.terms.abstractUpwindConvectionTerm"]], "fipy.terms.advectionTerm": [[363, "module-fipy.terms.advectionTerm"]], "fipy.terms.asymmetricConvectionTerm": [[364, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryTerm": [[365, "module-fipy.terms.binaryTerm"]], "fipy.terms.cellTerm": [[366, "module-fipy.terms.cellTerm"]], "fipy.terms.centralDiffConvectionTerm": [[367, "module-fipy.terms.centralDiffConvectionTerm"]], "fipy.terms.coupledBinaryTerm": [[368, "module-fipy.terms.coupledBinaryTerm"]], "fipy.terms.diffusionTerm": [[369, "module-fipy.terms.diffusionTerm"]], "fipy.terms.diffusionTermCorrection": [[370, "module-fipy.terms.diffusionTermCorrection"]], "fipy.terms.diffusionTermNoCorrection": [[371, "module-fipy.terms.diffusionTermNoCorrection"]], "fipy.terms.explicitDiffusionTerm": [[372, "module-fipy.terms.explicitDiffusionTerm"]], "fipy.terms.explicitSourceTerm": [[373, "module-fipy.terms.explicitSourceTerm"]], "fipy.terms.explicitUpwindConvectionTerm": [[374, "module-fipy.terms.explicitUpwindConvectionTerm"]], "fipy.terms.exponentialConvectionTerm": [[375, "module-fipy.terms.exponentialConvectionTerm"]], "fipy.terms.faceTerm": [[376, "module-fipy.terms.faceTerm"]], "fipy.terms.firstOrderAdvectionTerm": [[377, "module-fipy.terms.firstOrderAdvectionTerm"]], "fipy.terms.hybridConvectionTerm": [[378, "module-fipy.terms.hybridConvectionTerm"]], "fipy.terms.implicitDiffusionTerm": [[379, "module-fipy.terms.implicitDiffusionTerm"]], "fipy.terms.implicitSourceTerm": [[380, "module-fipy.terms.implicitSourceTerm"]], "fipy.terms.nonDiffusionTerm": [[381, "module-fipy.terms.nonDiffusionTerm"]], "fipy.terms.powerLawConvectionTerm": [[382, "module-fipy.terms.powerLawConvectionTerm"]], "fipy.terms.residualTerm": [[383, "module-fipy.terms.residualTerm"]], "fipy.terms.sourceTerm": [[384, "module-fipy.terms.sourceTerm"]], "fipy.terms.term": [[385, "module-fipy.terms.term"]], "fipy.terms.test": [[386, "module-fipy.terms.test"]], "fipy.terms.transientTerm": [[387, "module-fipy.terms.transientTerm"]], "fipy.terms.unaryTerm": [[388, "module-fipy.terms.unaryTerm"]], "fipy.terms.upwindConvectionTerm": [[389, "module-fipy.terms.upwindConvectionTerm"]], "fipy.terms.vanLeerConvectionTerm": [[390, "module-fipy.terms.vanLeerConvectionTerm"]], "fipy.testFiPy": [[391, "module-fipy.testFiPy"]], "fipy.tests": [[392, "module-fipy.tests"]], "fipy.tests.doctestPlus": [[393, "module-fipy.tests.doctestPlus"]], "fipy.tests.lateImportTest": [[394, "module-fipy.tests.lateImportTest"]], "fipy.tests.test": [[395, "module-fipy.tests.test"]], "fipy.tests.testProgram": [[396, "module-fipy.tests.testProgram"]], "fipy.tools": [[397, "module-fipy.tools"]], "fipy.tools.comms": [[398, "module-fipy.tools.comms"]], "fipy.tools.comms.commWrapper": [[399, "module-fipy.tools.comms.commWrapper"]], "fipy.tools.comms.dummyComm": [[400, "module-fipy.tools.comms.dummyComm"]], "fipy.tools.debug": [[401, "module-fipy.tools.debug"]], "fipy.tools.decorators": [[402, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[403, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.DictWithDefault": [[404, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.NumberDict": [[405, "module-fipy.tools.dimensions.NumberDict"]], "fipy.tools.dimensions.physicalField": [[406, "module-fipy.tools.dimensions.physicalField"]], "fipy.tools.dump": [[407, "module-fipy.tools.dump"]], "fipy.tools.inline": [[408, "module-fipy.tools.inline"]], "fipy.tools.logging": [[409, "module-fipy.tools.logging"]], "fipy.tools.logging.environment": [[410, "module-fipy.tools.logging.environment"]], "fipy.tools.numerix": [[411, "module-fipy.tools.numerix"]], "fipy.tools.parser": [[412, "module-fipy.tools.parser"]], "fipy.tools.sharedtempfile": [[413, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[414, "module-fipy.tools.test"]], "fipy.tools.vector": [[415, "module-fipy.tools.vector"]], "fipy.tools.version": [[416, "module-fipy.tools.version"]], "fipy.variables": [[417, "module-fipy.variables"]], "fipy.variables.addOverFacesVariable": [[418, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticCellToFaceVariable": [[419, "module-fipy.variables.arithmeticCellToFaceVariable"]], "fipy.variables.betaNoiseVariable": [[420, "module-fipy.variables.betaNoiseVariable"]], "fipy.variables.binaryOperatorVariable": [[421, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.cellToFaceVariable": [[422, "module-fipy.variables.cellToFaceVariable"]], "fipy.variables.cellVariable": [[423, "module-fipy.variables.cellVariable"]], "fipy.variables.constant": [[424, "module-fipy.variables.constant"]], "fipy.variables.constraintMask": [[425, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledCellVariable": [[426, "module-fipy.variables.coupledCellVariable"]], "fipy.variables.distanceVariable": [[427, "module-fipy.variables.distanceVariable"]], "fipy.variables.exponentialNoiseVariable": [[428, "module-fipy.variables.exponentialNoiseVariable"]], "fipy.variables.faceGradContributionsVariable": [[429, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.faceGradVariable": [[430, "module-fipy.variables.faceGradVariable"]], "fipy.variables.faceVariable": [[431, "module-fipy.variables.faceVariable"]], "fipy.variables.gammaNoiseVariable": [[432, "module-fipy.variables.gammaNoiseVariable"]], "fipy.variables.gaussCellGradVariable": [[433, "module-fipy.variables.gaussCellGradVariable"]], "fipy.variables.gaussianNoiseVariable": [[434, "module-fipy.variables.gaussianNoiseVariable"]], "fipy.variables.harmonicCellToFaceVariable": [[435, "module-fipy.variables.harmonicCellToFaceVariable"]], "fipy.variables.histogramVariable": [[436, "module-fipy.variables.histogramVariable"]], "fipy.variables.interfaceAreaVariable": [[437, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceFlagVariable": [[438, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastSquaresCellGradVariable": [[439, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelSetDiffusionVariable": [[440, "module-fipy.variables.levelSetDiffusionVariable"]], "fipy.variables.meshVariable": [[441, "module-fipy.variables.meshVariable"]], "fipy.variables.minmodCellToFaceVariable": [[442, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modCellGradVariable": [[443, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modCellToFaceVariable": [[444, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modFaceGradVariable": [[445, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modPhysicalField": [[446, "module-fipy.variables.modPhysicalField"]], "fipy.variables.modularVariable": [[447, "module-fipy.variables.modularVariable"]], "fipy.variables.noiseVariable": [[448, "module-fipy.variables.noiseVariable"]], "fipy.variables.operatorVariable": [[449, "module-fipy.variables.operatorVariable"]], "fipy.variables.scharfetterGummelFaceVariable": [[450, "module-fipy.variables.scharfetterGummelFaceVariable"]], "fipy.variables.surfactantConvectionVariable": [[451, "module-fipy.variables.surfactantConvectionVariable"]], "fipy.variables.surfactantVariable": [[452, "module-fipy.variables.surfactantVariable"]], "fipy.variables.test": [[453, "module-fipy.variables.test"]], "fipy.variables.unaryOperatorVariable": [[454, "module-fipy.variables.unaryOperatorVariable"]], "fipy.variables.uniformNoiseVariable": [[455, "module-fipy.variables.uniformNoiseVariable"]], "fipy.variables.variable": [[456, "module-fipy.variables.variable"]], "fipy.viewers": [[457, "module-fipy.viewers"]], "fipy.viewers.matplotlibViewer": [[458, "module-fipy.viewers.matplotlibViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer": [[459, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer": [[460, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"]], "fipy.viewers.matplotlibViewer.matplotlib1DViewer": [[461, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer": [[462, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer": [[463, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer": [[464, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"]], "fipy.viewers.matplotlibViewer.matplotlib2DViewer": [[465, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"]], "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer": [[466, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibViewer.matplotlibStreamViewer": [[467, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"]], "fipy.viewers.matplotlibViewer.matplotlibVectorViewer": [[468, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"]], "fipy.viewers.matplotlibViewer.test": [[469, "module-fipy.viewers.matplotlibViewer.test"]], "fipy.viewers.mayaviViewer": [[470, "module-fipy.viewers.mayaviViewer"]], "fipy.viewers.mayaviViewer.mayaviClient": [[471, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fipy.viewers.mayaviViewer.mayaviDaemon": [[472, "module-fipy.viewers.mayaviViewer.mayaviDaemon"]], "fipy.viewers.mayaviViewer.test": [[473, "module-fipy.viewers.mayaviViewer.test"]], "fipy.viewers.multiViewer": [[474, "module-fipy.viewers.multiViewer"]], "fipy.viewers.test": [[475, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[476, "module-fipy.viewers.testinteractive"]], "fipy.viewers.tsvViewer": [[477, "module-fipy.viewers.tsvViewer"]], "fipy.viewers.viewer": [[478, "module-fipy.viewers.viewer"]], "fipy.viewers.vtkViewer": [[479, "module-fipy.viewers.vtkViewer"]], "fipy.viewers.vtkViewer.test": [[480, "module-fipy.viewers.vtkViewer.test"]], "fipy.viewers.vtkViewer.vtkCellViewer": [[481, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "fipy.viewers.vtkViewer.vtkFaceViewer": [[482, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "fipy.viewers.vtkViewer.vtkViewer": [[483, "module-fipy.viewers.vtkViewer.vtkViewer"]], "Glossary": [[484, "glossary"]], "Introduction": [[485, "introduction"]], "FiPy Manual": [[486, "fipy-manual"]], "Finite Volume Method": [[487, "finite-volume-method"]], "Cell Centered FVM (CC-FVM)": [[487, "cell-centered-fvm-cc-fvm"]], "Vertex Centered FVM (VC-FVM)": [[487, "vertex-centered-fvm-vc-fvm"]], "Discretization": [[487, "discretization"]], "Transient Term \\partial (\\rho \\phi) / \\partial t": [[487, "transient-term-partial-rho-phi-partial-t"]], "Convection Term \\nabla \\cdot \\left( \\vec{u} \\phi \\right)": [[487, "convection-term-nabla-cdot-left-vec-u-phi-right"]], "Diffusion Term \\nabla \\cdot \\left( \\Gamma_1 \\nabla \\phi \\right)": [[487, "diffusion-term-nabla-cdot-left-gamma-1-nabla-phi-right"]], "Higher Order Diffusion": [[487, "higher-order-diffusion"]], "Source Term": [[487, "source-term"]], "Linear Equations": [[487, "linear-equations"]], "General Conservation Equation": [[488, "general-conservation-equation"]], "Theoretical and Numerical Background": [[489, "theoretical-and-numerical-background"]], "Numerical Schemes": [[490, "numerical-schemes"]], "References": [[491, "references"]], "package": [[492, "module-package"]], "package.subpackage": [[493, "module-package.subpackage"]], "package.subpackage.base": [[494, "module-package.subpackage.base"]], "package.subpackage.object": [[495, "module-package.subpackage.object"]], "How to Read the Modules Documentation": [[496, "how-to-read-the-modules-documentation"]]}, "indexentries": {"path": [[10, "index-1"]], "pep 8": [[10, "index-0"]], "python enhancement proposals": [[10, "index-0"], [484, "index-0"]], "environment variable": [[10, "index-1"], [16, "index-0"], [17, "envvar-FIPY_CACHE"], [17, "envvar-FIPY_DEFAULT_CRITERION"], [17, "envvar-FIPY_DISPLAY_MATRIX"], [17, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [17, "envvar-FIPY_INLINE"], [17, "envvar-FIPY_INLINE_COMMENT"], [17, "envvar-FIPY_LOG_CONFIG"], [17, "envvar-FIPY_SOLVERS"], [17, "envvar-FIPY_VERBOSE_SOLVER"], [17, "envvar-FIPY_VIEWER"], [17, "envvar-PETSC_OPTIONS"], [17, "index-0"], [17, "index-1"], [17, "index-2"], [22, "envvar-DYLD_LIBRARY_PATH"], [22, "envvar-LD_LIBRARY_PATH"], [189, "index-0"]], "fipy_solvers": [[16, "index-0"], [17, "envvar-FIPY_SOLVERS"], [17, "index-1"]], "--cache": [[17, "cmdoption-cache"]], "--inline": [[17, "cmdoption-inline"]], "--lsmlib": [[17, "cmdoption-lsmlib"]], "--no-cache": [[17, "cmdoption-no-cache"]], "--no-pysparse": [[17, "cmdoption-no-pysparse"]], "--pyamg": [[17, "cmdoption-pyamg"]], "--pyamgx": [[17, "cmdoption-pyamgx"]], "--pysparse": [[17, "cmdoption-pysparse"]], "--scipy": [[17, "cmdoption-scipy"]], "--skfmm": [[17, "cmdoption-skfmm"]], "--trilinos": [[17, "cmdoption-trilinos"]], "fipy_cache": [[17, "envvar-FIPY_CACHE"]], "fipy_default_criterion": [[17, "envvar-FIPY_DEFAULT_CRITERION"]], "fipy_display_matrix": [[17, "envvar-FIPY_DISPLAY_MATRIX"]], "fipy_include_numerix_all": [[17, "envvar-FIPY_INCLUDE_NUMERIX_ALL"], [189, "index-0"]], "fipy_inline": [[17, "envvar-FIPY_INLINE"]], "fipy_inline_comment": [[17, "envvar-FIPY_INLINE_COMMENT"]], "fipy_log_config": [[17, "envvar-FIPY_LOG_CONFIG"], [17, "index-0"], [17, "index-2"]], "fipy_verbose_solver": [[17, "envvar-FIPY_VERBOSE_SOLVER"]], "fipy_viewer": [[17, "envvar-FIPY_VIEWER"]], "petsc_options": [[17, "envvar-PETSC_OPTIONS"]], "command line option": [[17, "cmdoption-cache"], [17, "cmdoption-inline"], [17, "cmdoption-lsmlib"], [17, "cmdoption-no-cache"], [17, "cmdoption-no-pysparse"], [17, "cmdoption-pyamg"], [17, "cmdoption-pyamgx"], [17, "cmdoption-pysparse"], [17, "cmdoption-scipy"], [17, "cmdoption-skfmm"], [17, "cmdoption-trilinos"], [22, "cmdoption-home"], [22, "cmdoption-prefix"]], "--home": [[22, "cmdoption-home"]], "--prefix": [[22, "cmdoption-prefix"]], "dyld_library_path": [[22, "envvar-DYLD_LIBRARY_PATH"]], "ld_library_path": [[22, "envvar-LD_LIBRARY_PATH"]], "examples": [[23, "module-examples"]], "module": [[23, "module-examples"], [24, "module-examples.benchmarking"], [25, "module-examples.benchmarking.benchmarker"], [26, "module-examples.benchmarking.size"], [27, "module-examples.benchmarking.steps"], [28, "module-examples.benchmarking.utils"], [29, "module-examples.benchmarking.versions"], [30, "module-examples.cahnHilliard"], [31, "module-examples.cahnHilliard.mesh2D"], [32, "module-examples.cahnHilliard.mesh2DCoupled"], [33, "module-examples.cahnHilliard.mesh3D"], [34, "module-examples.cahnHilliard.sphere"], [35, "module-examples.cahnHilliard.sphereDaemon"], [36, "index-5"], [36, "module-examples.cahnHilliard.tanh1D"], [37, "module-examples.cahnHilliard.test"], [38, "module-examples.chemotaxis"], [39, "module-examples.chemotaxis.input"], [40, "module-examples.chemotaxis.input2D"], [41, "module-examples.chemotaxis.parameters"], [42, "module-examples.chemotaxis.test"], [43, "module-examples.convection"], [44, "module-examples.convection.advection"], [45, "module-examples.convection.advection.explicitUpwind"], [46, "module-examples.convection.advection.implicitUpwind"], [47, "module-examples.convection.advection.vanLeerUpwind"], [48, "module-examples.convection.exponential1D"], [49, "index-2"], [49, "module-examples.convection.exponential1D.cylindricalMesh1D"], [50, "index-1"], [50, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"], [51, "index-2"], [51, "module-examples.convection.exponential1D.mesh1D"], [52, "module-examples.convection.exponential1D.tri2D"], [53, "module-examples.convection.exponential1DBack"], [54, "module-examples.convection.exponential1DBack.mesh1D"], [55, "module-examples.convection.exponential1DSource"], [56, "index-4"], [56, "module-examples.convection.exponential1DSource.mesh1D"], [57, "module-examples.convection.exponential1DSource.tri2D"], [58, "module-examples.convection.exponential2D"], [59, "index-2"], [59, "module-examples.convection.exponential2D.cylindricalMesh2D"], [60, "index-1"], [60, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"], [61, "module-examples.convection.exponential2D.mesh2D"], [62, "module-examples.convection.exponential2D.tri2D"], [63, "module-examples.convection.peclet"], [64, "module-examples.convection.powerLaw1D"], [65, "module-examples.convection.powerLaw1D.mesh1D"], [66, "module-examples.convection.powerLaw1D.tri2D"], [67, "module-examples.convection.robin"], [68, "module-examples.convection.source"], [69, "module-examples.convection.test"], [70, "module-examples.diffusion"], [71, "module-examples.diffusion.anisotropy"], [72, "index-3"], [72, "module-examples.diffusion.circle"], [73, "index-3"], [73, "module-examples.diffusion.circleQuad"], [74, "module-examples.diffusion.coupled"], [75, "module-examples.diffusion.electrostatics"], [76, "module-examples.diffusion.explicit"], [77, "module-examples.diffusion.explicit.mesh1D"], [78, "module-examples.diffusion.explicit.mixedelement"], [79, "module-examples.diffusion.explicit.test"], [80, "module-examples.diffusion.explicit.tri2D"], [81, "index-1"], [81, "module-examples.diffusion.mesh1D"], [82, "index-1"], [82, "module-examples.diffusion.mesh20x20"], [83, "index-1"], [83, "module-examples.diffusion.mesh20x20Coupled"], [84, "module-examples.diffusion.nthOrder"], [85, "index-3"], [85, "module-examples.diffusion.nthOrder.input4thOrder1D"], [86, "module-examples.diffusion.nthOrder.input4thOrder_line"], [87, "module-examples.diffusion.nthOrder.test"], [88, "module-examples.diffusion.steadyState"], [89, "module-examples.diffusion.steadyState.mesh1D"], [90, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"], [91, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"], [92, "module-examples.diffusion.steadyState.mesh20x20"], [93, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"], [94, "module-examples.diffusion.steadyState.mesh20x20.isotropy"], [95, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"], [96, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"], [97, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"], [98, "module-examples.diffusion.steadyState.mesh50x50"], [99, "module-examples.diffusion.steadyState.mesh50x50.input"], [100, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"], [101, "module-examples.diffusion.steadyState.otherMeshes"], [102, "module-examples.diffusion.steadyState.otherMeshes.prism"], [103, "module-examples.diffusion.steadyState.test"], [104, "module-examples.diffusion.test"], [105, "module-examples.diffusion.variable"], [106, "module-examples.elphf"], [107, "module-examples.elphf.diffusion"], [108, "module-examples.elphf.diffusion.mesh1D"], [109, "module-examples.elphf.diffusion.mesh1Ddimensional"], [110, "module-examples.elphf.diffusion.mesh2D"], [111, "module-examples.elphf.input"], [112, "module-examples.elphf.phase"], [113, "module-examples.elphf.phaseDiffusion"], [114, "module-examples.elphf.poisson"], [115, "module-examples.elphf.test"], [116, "module-examples.flow"], [117, "index-2"], [117, "module-examples.flow.stokesCavity"], [118, "module-examples.flow.test"], [119, "module-examples.levelSet"], [120, "module-examples.levelSet.advection"], [121, "module-examples.levelSet.advection.circle"], [122, "module-examples.levelSet.advection.mesh1D"], [123, "module-examples.levelSet.advection.test"], [124, "module-examples.levelSet.advection.trench"], [125, "module-examples.levelSet.distanceFunction"], [126, "module-examples.levelSet.distanceFunction.circle"], [127, "module-examples.levelSet.distanceFunction.interior"], [128, "module-examples.levelSet.distanceFunction.mesh1D"], [129, "module-examples.levelSet.distanceFunction.square"], [130, "module-examples.levelSet.distanceFunction.test"], [131, "module-examples.levelSet.electroChem"], [132, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"], [133, "module-examples.levelSet.electroChem.adsorption"], [134, "module-examples.levelSet.electroChem.gapFillDistanceVariable"], [135, "module-examples.levelSet.electroChem.gapFillMesh"], [136, "index-1"], [136, "module-examples.levelSet.electroChem.gold"], [137, "index-0"], [137, "module-examples.levelSet.electroChem.howToWriteAScript"], [138, "index-1"], [138, "module-examples.levelSet.electroChem.leveler"], [139, "module-examples.levelSet.electroChem.lines"], [140, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"], [141, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"], [142, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"], [143, "index-1"], [143, "module-examples.levelSet.electroChem.simpleTrenchSystem"], [144, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"], [145, "module-examples.levelSet.electroChem.test"], [146, "module-examples.levelSet.electroChem.trenchMesh"], [147, "module-examples.levelSet.surfactant"], [148, "module-examples.levelSet.surfactant.circle"], [149, "module-examples.levelSet.surfactant.expandingCircle"], [150, "module-examples.levelSet.surfactant.square"], [151, "module-examples.levelSet.surfactant.test"], [152, "module-examples.levelSet.test"], [153, "module-examples.meshing"], [154, "module-examples.meshing.gmshRefinement"], [155, "module-examples.meshing.inputGrid2D"], [156, "module-examples.meshing.sphere"], [157, "module-examples.meshing.test"], [158, "module-examples.parallel"], [159, "module-examples.phase"], [160, "module-examples.phase.anisotropy"], [161, "index-4"], [161, "module-examples.phase.anisotropyOLD"], [162, "index-7"], [162, "module-examples.phase.binary"], [163, "index-5"], [163, "index-6"], [163, "module-examples.phase.binaryCoupled"], [164, "module-examples.phase.impingement"], [165, "index-0"], [165, "index-6"], [165, "index-8"], [165, "module-examples.phase.impingement.mesh20x20"], [166, "index-4"], [166, "module-examples.phase.impingement.mesh40x1"], [167, "module-examples.phase.impingement.test"], [168, "module-examples.phase.missOrientation"], [169, "module-examples.phase.missOrientation.circle"], [170, "module-examples.phase.missOrientation.mesh1D"], [171, "module-examples.phase.missOrientation.modCircle"], [172, "module-examples.phase.missOrientation.test"], [173, "module-examples.phase.polyxtal"], [174, "module-examples.phase.polyxtalCoupled"], [175, "index-4"], [175, "module-examples.phase.quaternary"], [176, "index-2"], [176, "index-8"], [176, "module-examples.phase.simple"], [177, "module-examples.phase.symmetry"], [178, "module-examples.phase.test"], [179, "module-examples.reactiveWetting"], [180, "module-examples.reactiveWetting.liquidVapor1D"], [181, "module-examples.reactiveWetting.liquidVapor2D"], [182, "module-examples.reactiveWetting.test"], [183, "module-examples.riemann"], [184, "module-examples.riemann.test"], [185, "module-examples.test"], [186, "module-examples.updating"], [187, "index-5"], [187, "module-examples.updating.update0_1to1_0"], [188, "module-examples.updating.update1_0to2_0"], [189, "module-examples.updating.update2_0to3_0"], [190, "module-fipy"], [191, "module-fipy.boundaryConditions"], [192, "module-fipy.boundaryConditions.boundaryCondition"], [193, "module-fipy.boundaryConditions.constraint"], [194, "module-fipy.boundaryConditions.fixedFlux"], [195, "module-fipy.boundaryConditions.fixedValue"], [196, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"], [197, "module-fipy.boundaryConditions.test"], [198, "module-fipy.matrices"], [199, "module-fipy.matrices.offsetSparseMatrix"], [200, "module-fipy.matrices.petscMatrix"], [201, "module-fipy.matrices.pysparseMatrix"], [202, "module-fipy.matrices.scipyMatrix"], [203, "module-fipy.matrices.sparseMatrix"], [204, "module-fipy.matrices.test"], [205, "module-fipy.matrices.trilinosMatrix"], [206, "module-fipy.meshes"], [207, "module-fipy.meshes.abstractMesh"], [208, "module-fipy.meshes.builders"], [209, "module-fipy.meshes.builders.abstractGridBuilder"], [210, "module-fipy.meshes.builders.grid1DBuilder"], [211, "module-fipy.meshes.builders.grid2DBuilder"], [212, "module-fipy.meshes.builders.grid3DBuilder"], [213, "module-fipy.meshes.builders.periodicGrid1DBuilder"], [214, "module-fipy.meshes.builders.utilityClasses"], [215, "module-fipy.meshes.cylindricalGrid1D"], [216, "module-fipy.meshes.cylindricalGrid2D"], [217, "module-fipy.meshes.cylindricalNonUniformGrid1D"], [218, "module-fipy.meshes.cylindricalNonUniformGrid2D"], [219, "module-fipy.meshes.cylindricalUniformGrid1D"], [220, "module-fipy.meshes.cylindricalUniformGrid2D"], [221, "module-fipy.meshes.factoryMeshes"], [222, "module-fipy.meshes.gmshMesh"], [223, "module-fipy.meshes.grid1D"], [224, "module-fipy.meshes.grid2D"], [225, "module-fipy.meshes.grid3D"], [226, "module-fipy.meshes.mesh"], [227, "module-fipy.meshes.mesh1D"], [228, "module-fipy.meshes.mesh2D"], [229, "module-fipy.meshes.nonUniformGrid1D"], [230, "module-fipy.meshes.nonUniformGrid2D"], [231, "module-fipy.meshes.nonUniformGrid3D"], [232, "module-fipy.meshes.periodicGrid1D"], [233, "module-fipy.meshes.periodicGrid2D"], [234, "module-fipy.meshes.periodicGrid3D"], [235, "module-fipy.meshes.representations"], [236, "module-fipy.meshes.representations.abstractRepresentation"], [237, "module-fipy.meshes.representations.gridRepresentation"], [238, "module-fipy.meshes.representations.meshRepresentation"], [239, "module-fipy.meshes.skewedGrid2D"], [240, "module-fipy.meshes.sphericalNonUniformGrid1D"], [241, "module-fipy.meshes.sphericalUniformGrid1D"], [242, "module-fipy.meshes.test"], [243, "module-fipy.meshes.topologies"], [244, "module-fipy.meshes.topologies.abstractTopology"], [245, "module-fipy.meshes.topologies.gridTopology"], [246, "module-fipy.meshes.topologies.meshTopology"], [247, "module-fipy.meshes.tri2D"], [248, "module-fipy.meshes.uniformGrid"], [249, "module-fipy.meshes.uniformGrid1D"], [250, "module-fipy.meshes.uniformGrid2D"], [251, "module-fipy.solvers"], [252, "module-fipy.solvers.convergence"], [253, "module-fipy.solvers.petsc"], [254, "module-fipy.solvers.petsc.comms"], [255, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"], [256, "module-fipy.solvers.petsc.comms.petscCommWrapper"], [257, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"], [258, "module-fipy.solvers.petsc.dummySolver"], [259, "module-fipy.solvers.petsc.linearBicgSolver"], [260, "module-fipy.solvers.petsc.linearCGSSolver"], [261, "module-fipy.solvers.petsc.linearGMRESSolver"], [262, "module-fipy.solvers.petsc.linearLUSolver"], [263, "module-fipy.solvers.petsc.linearPCGSolver"], [264, "module-fipy.solvers.petsc.petscConvergence"], [265, "module-fipy.solvers.petsc.petscKrylovSolver"], [266, "module-fipy.solvers.petsc.petscSolver"], [267, "module-fipy.solvers.petsc.preconditioners"], [268, "module-fipy.solvers.petsc.preconditioners.defaultPreconditioner"], [269, "module-fipy.solvers.petsc.preconditioners.icPreconditioner"], [270, "module-fipy.solvers.petsc.preconditioners.iluPreconditioner"], [271, "module-fipy.solvers.petsc.preconditioners.jacobiPreconditioner"], [272, "module-fipy.solvers.petsc.preconditioners.luPreconditioner"], [273, "module-fipy.solvers.petsc.preconditioners.petscPreconditioner"], [274, "module-fipy.solvers.petsc.preconditioners.ssorPreconditioner"], [275, "module-fipy.solvers.preconditioner"], [276, "module-fipy.solvers.pyAMG"], [277, "module-fipy.solvers.pyAMG.linearCGSSolver"], [278, "module-fipy.solvers.pyAMG.linearGMRESSolver"], [279, "module-fipy.solvers.pyAMG.linearGeneralSolver"], [280, "module-fipy.solvers.pyAMG.linearLUSolver"], [281, "module-fipy.solvers.pyAMG.linearPCGSolver"], [282, "module-fipy.solvers.pyAMG.preconditioners"], [283, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"], [284, "module-fipy.solvers.pyamgx"], [285, "module-fipy.solvers.pyamgx.aggregationAMGSolver"], [286, "module-fipy.solvers.pyamgx.classicalAMGSolver"], [287, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"], [288, "module-fipy.solvers.pyamgx.linearFGMRESSolver"], [289, "module-fipy.solvers.pyamgx.linearGMRESSolver"], [290, "module-fipy.solvers.pyamgx.linearLUSolver"], [291, "module-fipy.solvers.pyamgx.linearPCGSolver"], [292, "module-fipy.solvers.pyamgx.preconditioners"], [293, "module-fipy.solvers.pyamgx.pyAMGXSolver"], [294, "module-fipy.solvers.pyamgx.pyamgxConvergence"], [295, "module-fipy.solvers.pyamgx.smoothers"], [296, "module-fipy.solvers.pysparse"], [297, "module-fipy.solvers.pysparse.linearCGSSolver"], [298, "module-fipy.solvers.pysparse.linearGMRESSolver"], [299, "module-fipy.solvers.pysparse.linearInitialSolver"], [300, "module-fipy.solvers.pysparse.linearJORSolver"], [301, "module-fipy.solvers.pysparse.linearLUSolver"], [302, "module-fipy.solvers.pysparse.linearPCGSolver"], [303, "module-fipy.solvers.pysparse.linearRHSSolver"], [304, "module-fipy.solvers.pysparse.preconditioners"], [305, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"], [306, "module-fipy.solvers.pysparse.preconditioners.pysparsePreconditioner"], [307, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"], [308, "module-fipy.solvers.pysparse.pysparseConvergence"], [309, "module-fipy.solvers.pysparse.pysparseSolver"], [310, "module-fipy.solvers.pysparseMatrixSolver"], [311, "module-fipy.solvers.scipy"], [312, "module-fipy.solvers.scipy.linearBicgstabSolver"], [313, "module-fipy.solvers.scipy.linearCGSSolver"], [314, "module-fipy.solvers.scipy.linearGMRESSolver"], [315, "module-fipy.solvers.scipy.linearLUSolver"], [316, "module-fipy.solvers.scipy.linearPCGSolver"], [317, "module-fipy.solvers.scipy.preconditioners"], [318, "module-fipy.solvers.scipy.preconditioners.iluPreconditioner"], [319, "module-fipy.solvers.scipy.preconditioners.jacobiPreconditioner"], [320, "module-fipy.solvers.scipy.preconditioners.scipyPreconditioner"], [321, "module-fipy.solvers.scipy.scipyConvergence"], [322, "module-fipy.solvers.scipy.scipyKrylovSolver"], [323, "module-fipy.solvers.scipy.scipySolver"], [324, "module-fipy.solvers.solver"], [325, "module-fipy.solvers.test"], [326, "module-fipy.solvers.trilinos"], [327, "module-fipy.solvers.trilinos.aztecConvergence"], [328, "module-fipy.solvers.trilinos.comms"], [329, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"], [330, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"], [331, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"], [332, "module-fipy.solvers.trilinos.linearBicgstabSolver"], [333, "module-fipy.solvers.trilinos.linearCGSSolver"], [334, "module-fipy.solvers.trilinos.linearGMRESSolver"], [335, "module-fipy.solvers.trilinos.linearLUSolver"], [336, "module-fipy.solvers.trilinos.linearPCGSolver"], [337, "module-fipy.solvers.trilinos.preconditioners"], [338, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"], [339, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"], [340, "module-fipy.solvers.trilinos.preconditioners.iluPreconditioner"], [341, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"], [342, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"], [343, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"], [344, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"], [345, "module-fipy.solvers.trilinos.preconditioners.multilevelPreconditioner"], [346, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"], [347, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"], [348, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"], [349, "module-fipy.solvers.trilinos.preconditioners.trilinosPreconditioner"], [350, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"], [351, "module-fipy.solvers.trilinos.trilinosMLTest"], [352, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"], [353, "module-fipy.solvers.trilinos.trilinosSolver"], [354, "module-fipy.steppers"], [355, "module-fipy.steppers.pidStepper"], [356, "module-fipy.steppers.pseudoRKQSStepper"], [357, "module-fipy.steppers.stepper"], [358, "module-fipy.terms"], [359, "module-fipy.terms.abstractBinaryTerm"], [360, "module-fipy.terms.abstractConvectionTerm"], [361, "module-fipy.terms.abstractDiffusionTerm"], [362, "module-fipy.terms.abstractUpwindConvectionTerm"], [363, "module-fipy.terms.advectionTerm"], [364, "module-fipy.terms.asymmetricConvectionTerm"], [365, "module-fipy.terms.binaryTerm"], [366, "module-fipy.terms.cellTerm"], [367, "module-fipy.terms.centralDiffConvectionTerm"], [368, "module-fipy.terms.coupledBinaryTerm"], [369, "module-fipy.terms.diffusionTerm"], [370, "module-fipy.terms.diffusionTermCorrection"], [371, "module-fipy.terms.diffusionTermNoCorrection"], [372, "module-fipy.terms.explicitDiffusionTerm"], [373, "module-fipy.terms.explicitSourceTerm"], [374, "module-fipy.terms.explicitUpwindConvectionTerm"], [375, "module-fipy.terms.exponentialConvectionTerm"], [376, "module-fipy.terms.faceTerm"], [377, "module-fipy.terms.firstOrderAdvectionTerm"], [378, "module-fipy.terms.hybridConvectionTerm"], [379, "module-fipy.terms.implicitDiffusionTerm"], [380, "module-fipy.terms.implicitSourceTerm"], [381, "module-fipy.terms.nonDiffusionTerm"], [382, "module-fipy.terms.powerLawConvectionTerm"], [383, "module-fipy.terms.residualTerm"], [384, "module-fipy.terms.sourceTerm"], [385, "module-fipy.terms.term"], [386, "module-fipy.terms.test"], [387, "module-fipy.terms.transientTerm"], [388, "module-fipy.terms.unaryTerm"], [389, "module-fipy.terms.upwindConvectionTerm"], [390, "module-fipy.terms.vanLeerConvectionTerm"], [391, "module-fipy.testFiPy"], [392, "module-fipy.tests"], [393, "module-fipy.tests.doctestPlus"], [394, "module-fipy.tests.lateImportTest"], [395, "module-fipy.tests.test"], [396, "module-fipy.tests.testProgram"], [397, "module-fipy.tools"], [398, "module-fipy.tools.comms"], [399, "module-fipy.tools.comms.commWrapper"], [400, "module-fipy.tools.comms.dummyComm"], [401, "module-fipy.tools.debug"], [402, "module-fipy.tools.decorators"], [403, "module-fipy.tools.dimensions"], [404, "module-fipy.tools.dimensions.DictWithDefault"], [405, "module-fipy.tools.dimensions.NumberDict"], [406, "module-fipy.tools.dimensions.physicalField"], [407, "module-fipy.tools.dump"], [408, "module-fipy.tools.inline"], [409, "module-fipy.tools.logging"], [410, "module-fipy.tools.logging.environment"], [411, "module-fipy.tools.numerix"], [412, "module-fipy.tools.parser"], [413, "module-fipy.tools.sharedtempfile"], [414, "module-fipy.tools.test"], [415, "module-fipy.tools.vector"], [416, "module-fipy.tools.version"], [417, "module-fipy.variables"], [418, "module-fipy.variables.addOverFacesVariable"], [419, "module-fipy.variables.arithmeticCellToFaceVariable"], [420, "module-fipy.variables.betaNoiseVariable"], [421, "module-fipy.variables.binaryOperatorVariable"], [422, "module-fipy.variables.cellToFaceVariable"], [423, "module-fipy.variables.cellVariable"], [424, "module-fipy.variables.constant"], [425, "module-fipy.variables.constraintMask"], [426, "module-fipy.variables.coupledCellVariable"], [427, "module-fipy.variables.distanceVariable"], [428, "module-fipy.variables.exponentialNoiseVariable"], [429, "module-fipy.variables.faceGradContributionsVariable"], [430, "module-fipy.variables.faceGradVariable"], [431, "module-fipy.variables.faceVariable"], [432, "module-fipy.variables.gammaNoiseVariable"], [433, "module-fipy.variables.gaussCellGradVariable"], [434, "module-fipy.variables.gaussianNoiseVariable"], [435, "module-fipy.variables.harmonicCellToFaceVariable"], [436, "module-fipy.variables.histogramVariable"], [437, "module-fipy.variables.interfaceAreaVariable"], [438, "module-fipy.variables.interfaceFlagVariable"], [439, "module-fipy.variables.leastSquaresCellGradVariable"], [440, "module-fipy.variables.levelSetDiffusionVariable"], [441, "module-fipy.variables.meshVariable"], [442, "module-fipy.variables.minmodCellToFaceVariable"], [443, "module-fipy.variables.modCellGradVariable"], [444, "module-fipy.variables.modCellToFaceVariable"], [445, "module-fipy.variables.modFaceGradVariable"], [446, "module-fipy.variables.modPhysicalField"], [447, "module-fipy.variables.modularVariable"], [448, "module-fipy.variables.noiseVariable"], [449, "module-fipy.variables.operatorVariable"], [450, "module-fipy.variables.scharfetterGummelFaceVariable"], [451, "module-fipy.variables.surfactantConvectionVariable"], [452, "module-fipy.variables.surfactantVariable"], [453, "module-fipy.variables.test"], [454, "module-fipy.variables.unaryOperatorVariable"], [455, "module-fipy.variables.uniformNoiseVariable"], [456, "module-fipy.variables.variable"], [457, "module-fipy.viewers"], [458, "module-fipy.viewers.matplotlibViewer"], [459, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"], [460, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"], [461, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"], [462, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"], [463, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"], [464, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"], [465, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"], [466, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"], [467, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"], [468, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"], [469, "module-fipy.viewers.matplotlibViewer.test"], [470, "module-fipy.viewers.mayaviViewer"], [471, "module-fipy.viewers.mayaviViewer.mayaviClient"], [472, "module-fipy.viewers.mayaviViewer.mayaviDaemon"], [473, "module-fipy.viewers.mayaviViewer.test"], [474, "module-fipy.viewers.multiViewer"], [475, "module-fipy.viewers.test"], [476, "module-fipy.viewers.testinteractive"], [477, "module-fipy.viewers.tsvViewer"], [478, "module-fipy.viewers.viewer"], [479, "module-fipy.viewers.vtkViewer"], [480, "module-fipy.viewers.vtkViewer.test"], [481, "module-fipy.viewers.vtkViewer.vtkCellViewer"], [482, "module-fipy.viewers.vtkViewer.vtkFaceViewer"], [483, "module-fipy.viewers.vtkViewer.vtkViewer"], [492, "module-package"], [493, "module-package.subpackage"], [494, "module-package.subpackage.base"], [495, "module-package.subpackage.object"]], "examples.benchmarking": [[24, "module-examples.benchmarking"]], "examples.benchmarking.benchmarker": [[25, "module-examples.benchmarking.benchmarker"]], "examples.benchmarking.size": [[26, "module-examples.benchmarking.size"]], "examples.benchmarking.steps": [[27, "module-examples.benchmarking.steps"]], "examples.benchmarking.utils": [[28, "module-examples.benchmarking.utils"]], "examples.benchmarking.versions": [[29, "module-examples.benchmarking.versions"]], "examples.cahnhilliard": [[30, "module-examples.cahnHilliard"]], "examples.cahnhilliard.mesh2d": [[31, "module-examples.cahnHilliard.mesh2D"]], "examples.cahnhilliard.mesh2dcoupled": [[32, "module-examples.cahnHilliard.mesh2DCoupled"]], "examples.cahnhilliard.mesh3d": [[33, "module-examples.cahnHilliard.mesh3D"]], "examples.cahnhilliard.sphere": [[34, "module-examples.cahnHilliard.sphere"]], "examples.cahnhilliard.spheredaemon": [[35, "module-examples.cahnHilliard.sphereDaemon"]], "cellvariable": [[36, "index-1"], [56, "index-1"], [85, "index-1"], [117, "index-1"], [137, "index-5"], [161, "index-1"], [162, "index-1"], [163, "index-1"], [165, "index-2"], [166, "index-1"], [175, "index-1"], [176, "index-1"], [187, "index-2"], [187, "index-9"]], "defaultsolver": [[36, "index-3"]], "grid2d": [[36, "index-0"], [82, "index-0"], [83, "index-0"], [117, "index-0"], [126, "index-0"], [128, "index-0"], [137, "index-2"], [161, "index-0"], [165, "index-1"], [187, "index-0"]], "linearlusolver": [[36, "index-3"], [163, "index-7"], [187, "index-3"]], "nthorderboundarycondition": [[36, "index-2"], [85, "index-2"]], "examples.cahnhilliard.tanh1d": [[36, "module-examples.cahnHilliard.tanh1D"]], "exp": [[36, "index-4"], [49, "index-1"], [50, "index-0"], [51, "index-1"], [56, "index-3"], [59, "index-1"], [60, "index-0"], [137, "index-1"], [162, "index-4"], [163, "index-3"], [165, "index-5"], [166, "index-3"]], "fipy.viewers": [[36, "index-5"], [49, "index-2"], [50, "index-1"], [51, "index-2"], [56, "index-4"], [59, "index-2"], [60, "index-1"], [81, "index-1"], [82, "index-1"], [83, "index-1"], [85, "index-3"], [117, "index-2"], [161, "index-4"], [162, "index-7"], [163, "index-6"], [165, "index-6"], [166, "index-4"], [176, "index-2"], [187, "index-11"], [457, "module-fipy.viewers"]], "sqrt": [[36, "index-4"], [72, "index-3"], [73, "index-3"], [137, "index-1"], [165, "index-1"], [176, "index-3"]], "examples.cahnhilliard.test": [[37, "module-examples.cahnHilliard.test"]], "examples.chemotaxis": [[38, "module-examples.chemotaxis"]], "examples.chemotaxis.input": [[39, "module-examples.chemotaxis.input"]], "examples.chemotaxis.input2d": [[40, "module-examples.chemotaxis.input2D"]], "examples.chemotaxis.parameters": [[41, "module-examples.chemotaxis.parameters"]], "examples.chemotaxis.test": [[42, "module-examples.chemotaxis.test"]], "examples.convection": [[43, "module-examples.convection"]], "examples.convection.advection": [[44, "module-examples.convection.advection"]], "examples.convection.advection.explicitupwind": [[45, "module-examples.convection.advection.explicitUpwind"]], "examples.convection.advection.implicitupwind": [[46, "module-examples.convection.advection.implicitUpwind"]], "examples.convection.advection.vanleerupwind": [[47, "module-examples.convection.advection.vanLeerUpwind"]], "examples.convection.exponential1d": [[48, "module-examples.convection.exponential1D"]], "grid1d": [[49, "index-0"], [51, "index-0"], [56, "index-0"], [59, "index-0"], [85, "index-0"], [122, "index-0"], [162, "index-0"], [163, "index-0"], [166, "index-0"], [175, "index-0"], [176, "index-0"], [187, "index-7"]], "examples.convection.exponential1d.cylindricalmesh1d": [[49, "module-examples.convection.exponential1D.cylindricalMesh1D"]], "examples.convection.exponential1d.cylindricalmesh1dnonuniform": [[50, "module-examples.convection.exponential1D.cylindricalMesh1DNonUniform"]], "examples.convection.exponential1d.mesh1d": [[51, "module-examples.convection.exponential1D.mesh1D"]], "examples.convection.exponential1d.tri2d": [[52, "module-examples.convection.exponential1D.tri2D"]], "examples.convection.exponential1dback": [[53, "module-examples.convection.exponential1DBack"]], "examples.convection.exponential1dback.mesh1d": [[54, "module-examples.convection.exponential1DBack.mesh1D"]], "examples.convection.exponential1dsource": [[55, "module-examples.convection.exponential1DSource"]], "defaultasymmetricsolver": [[56, "index-2"], [175, "index-5"]], "examples.convection.exponential1dsource.mesh1d": [[56, "module-examples.convection.exponential1DSource.mesh1D"]], "examples.convection.exponential1dsource.tri2d": [[57, "module-examples.convection.exponential1DSource.tri2D"]], "examples.convection.exponential2d": [[58, "module-examples.convection.exponential2D"]], "examples.convection.exponential2d.cylindricalmesh2d": [[59, "module-examples.convection.exponential2D.cylindricalMesh2D"]], "examples.convection.exponential2d.cylindricalmesh2dnonuniform": [[60, "module-examples.convection.exponential2D.cylindricalMesh2DNonUniform"]], "examples.convection.exponential2d.mesh2d": [[61, "module-examples.convection.exponential2D.mesh2D"]], "examples.convection.exponential2d.tri2d": [[62, "module-examples.convection.exponential2D.tri2D"]], "examples.convection.peclet": [[63, "module-examples.convection.peclet"]], "examples.convection.powerlaw1d": [[64, "module-examples.convection.powerLaw1D"]], "examples.convection.powerlaw1d.mesh1d": [[65, "module-examples.convection.powerLaw1D.mesh1D"]], "examples.convection.powerlaw1d.tri2d": [[66, "module-examples.convection.powerLaw1D.tri2D"]], "examples.convection.robin": [[67, "module-examples.convection.robin"]], "examples.convection.source": [[68, "module-examples.convection.source"]], "examples.convection.test": [[69, "module-examples.convection.test"]], "examples.diffusion": [[70, "module-examples.diffusion"]], "examples.diffusion.anisotropy": [[71, "module-examples.diffusion.anisotropy"]], "arcsin; cos": [[72, "index-3"], [73, "index-3"]], "examples.diffusion.circle": [[72, "module-examples.diffusion.circle"]], "fipy.terms.implicitdiffusionterm.diffusionterm": [[72, "index-1"], [73, "index-1"]], "fipy.terms.transientterm.transientterm": [[72, "index-1"], [73, "index-1"]], "fipy.variables.cellvariable.cellvariable": [[72, "index-0"], [73, "index-0"]], "fipy.viewers.tsvviewer.tsvviewer": [[72, "index-2"], [73, "index-2"]], "object": [[72, "index-0"], [72, "index-1"], [72, "index-2"], [73, "index-0"], [73, "index-1"], [73, "index-2"]], "scipy": [[72, "index-3"], [73, "index-3"], [162, "index-6"], [163, "index-5"], [176, "index-8"], [484, "term-SciPy"]], "examples.diffusion.circlequad": [[73, "module-examples.diffusion.circleQuad"]], "examples.diffusion.coupled": [[74, "module-examples.diffusion.coupled"]], "examples.diffusion.electrostatics": [[75, "module-examples.diffusion.electrostatics"]], "examples.diffusion.explicit": [[76, "module-examples.diffusion.explicit"]], "examples.diffusion.explicit.mesh1d": [[77, "module-examples.diffusion.explicit.mesh1D"]], "examples.diffusion.explicit.mixedelement": [[78, "module-examples.diffusion.explicit.mixedelement"]], "examples.diffusion.explicit.test": [[79, "module-examples.diffusion.explicit.test"]], "examples.diffusion.explicit.tri2d": [[80, "module-examples.diffusion.explicit.tri2D"]], "explicitdiffusionterm": [[81, "index-0"], [161, "index-3"], [165, "index-4"], [166, "index-2"]], "facevariable": [[81, "index-2"]], "transientterm": [[81, "index-0"], [161, "index-3"], [165, "index-4"], [166, "index-2"], [176, "index-4"]], "examples.diffusion.mesh1d": [[81, "module-examples.diffusion.mesh1D"]], "examples.diffusion.mesh20x20": [[82, "module-examples.diffusion.mesh20x20"]], "examples.diffusion.mesh20x20coupled": [[83, "module-examples.diffusion.mesh20x20Coupled"]], "examples.diffusion.nthorder": [[84, "module-examples.diffusion.nthOrder"]], "examples.diffusion.nthorder.input4thorder1d": [[85, "module-examples.diffusion.nthOrder.input4thOrder1D"]], "examples.diffusion.nthorder.input4thorder_line": [[86, "module-examples.diffusion.nthOrder.input4thOrder_line"]], "examples.diffusion.nthorder.test": [[87, "module-examples.diffusion.nthOrder.test"]], "examples.diffusion.steadystate": [[88, "module-examples.diffusion.steadyState"]], "examples.diffusion.steadystate.mesh1d": [[89, "module-examples.diffusion.steadyState.mesh1D"]], "examples.diffusion.steadystate.mesh1d.inputperiodic": [[90, "module-examples.diffusion.steadyState.mesh1D.inputPeriodic"]], "examples.diffusion.steadystate.mesh1d.tri2dinput": [[91, "module-examples.diffusion.steadyState.mesh1D.tri2Dinput"]], "examples.diffusion.steadystate.mesh20x20": [[92, "module-examples.diffusion.steadyState.mesh20x20"]], "examples.diffusion.steadystate.mesh20x20.gmshinput": [[93, "module-examples.diffusion.steadyState.mesh20x20.gmshinput"]], "examples.diffusion.steadystate.mesh20x20.isotropy": [[94, "module-examples.diffusion.steadyState.mesh20x20.isotropy"]], "examples.diffusion.steadystate.mesh20x20.modifiedmeshinput": [[95, "module-examples.diffusion.steadyState.mesh20x20.modifiedMeshInput"]], "examples.diffusion.steadystate.mesh20x20.orthoerror": [[96, "module-examples.diffusion.steadyState.mesh20x20.orthoerror"]], "examples.diffusion.steadystate.mesh20x20.tri2dinput": [[97, "module-examples.diffusion.steadyState.mesh20x20.tri2Dinput"]], "examples.diffusion.steadystate.mesh50x50": [[98, "module-examples.diffusion.steadyState.mesh50x50"]], "examples.diffusion.steadystate.mesh50x50.input": [[99, "module-examples.diffusion.steadyState.mesh50x50.input"]], "examples.diffusion.steadystate.mesh50x50.tri2dinput": [[100, "module-examples.diffusion.steadyState.mesh50x50.tri2Dinput"]], "examples.diffusion.steadystate.othermeshes": [[101, "module-examples.diffusion.steadyState.otherMeshes"]], "examples.diffusion.steadystate.othermeshes.prism": [[102, "module-examples.diffusion.steadyState.otherMeshes.prism"]], "examples.diffusion.steadystate.test": [[103, "module-examples.diffusion.steadyState.test"]], "examples.diffusion.test": [[104, "module-examples.diffusion.test"]], "examples.diffusion.variable": [[105, "module-examples.diffusion.variable"]], "examples.elphf": [[106, "module-examples.elphf"]], "examples.elphf.diffusion": [[107, "module-examples.elphf.diffusion"]], "examples.elphf.diffusion.mesh1d": [[108, "module-examples.elphf.diffusion.mesh1D"]], "examples.elphf.diffusion.mesh1ddimensional": [[109, "module-examples.elphf.diffusion.mesh1Ddimensional"]], "examples.elphf.diffusion.mesh2d": [[110, "module-examples.elphf.diffusion.mesh2D"]], "examples.elphf.input": [[111, "module-examples.elphf.input"]], "examples.elphf.phase": [[112, "module-examples.elphf.phase"]], "examples.elphf.phasediffusion": [[113, "module-examples.elphf.phaseDiffusion"]], "examples.elphf.poisson": [[114, "module-examples.elphf.poisson"]], "examples.elphf.test": [[115, "module-examples.elphf.test"]], "examples.flow": [[116, "module-examples.flow"]], "rhsvector": [[117, "index-3"]], "cachematrix": [[117, "index-3"]], "cacherhsvector": [[117, "index-3"]], "examples.flow.stokescavity": [[117, "module-examples.flow.stokesCavity"]], "matrix": [[117, "index-3"]], "sweep": [[117, "index-3"], [163, "index-7"], [176, "index-7"]], "examples.flow.test": [[118, "module-examples.flow.test"]], "examples.levelset": [[119, "module-examples.levelSet"]], "examples.levelset.advection": [[120, "module-examples.levelSet.advection"]], "examples.levelset.advection.circle": [[121, "module-examples.levelSet.advection.circle"]], "examples.levelset.advection.mesh1d": [[122, "module-examples.levelSet.advection.mesh1D"]], "examples.levelset.advection.test": [[123, "module-examples.levelSet.advection.test"]], "examples.levelset.advection.trench": [[124, "module-examples.levelSet.advection.trench"]], "examples.levelset.distancefunction": [[125, "module-examples.levelSet.distanceFunction"]], "examples.levelset.distancefunction.circle": [[126, "module-examples.levelSet.distanceFunction.circle"]], "examples.levelset.distancefunction.interior": [[127, "module-examples.levelSet.distanceFunction.interior"]], "examples.levelset.distancefunction.mesh1d": [[128, "module-examples.levelSet.distanceFunction.mesh1D"]], "examples.levelset.distancefunction.square": [[129, "module-examples.levelSet.distanceFunction.square"]], "examples.levelset.distancefunction.test": [[130, "module-examples.levelSet.distanceFunction.test"]], "examples.levelset.electrochem": [[131, "module-examples.levelSet.electroChem"]], "examples.levelset.electrochem.adsorbingsurfactantequation": [[132, "module-examples.levelSet.electroChem.adsorbingSurfactantEquation"]], "examples.levelset.electrochem.adsorption": [[133, "module-examples.levelSet.electroChem.adsorption"]], "examples.levelset.electrochem.gapfilldistancevariable": [[134, "module-examples.levelSet.electroChem.gapFillDistanceVariable"]], "examples.levelset.electrochem.gapfillmesh": [[135, "module-examples.levelSet.electroChem.gapFillMesh"]], "examples.levelset.electrochem.gold": [[136, "module-examples.levelSet.electroChem.gold"]], "gmsh": [[136, "index-1"], [138, "index-1"], [143, "index-1"], [484, "term-Gmsh"]], "rungold": [[136, "index-0"]], "advectionterm": [[137, "index-6"]], "distancevariable": [[137, "index-3"]], "mayavisurfactantviewer": [[137, "index-7"]], "surfactantvariable": [[137, "index-4"]], "examples.levelset.electrochem.howtowriteascript": [[137, "module-examples.levelSet.electroChem.howToWriteAScript"]], "fipy.tools.parser": [[137, "index-0"], [165, "index-0"], [412, "module-fipy.tools.parser"]], "loadtxt": [[137, "index-8"], [161, "index-5"], [165, "index-7"], [166, "index-6"]], "examples.levelset.electrochem.leveler": [[138, "module-examples.levelSet.electroChem.leveler"]], "runleveler": [[138, "index-0"]], "examples.levelset.electrochem.lines": [[139, "module-examples.levelSet.electroChem.lines"]], "matplotlibsurfactantviewer (class in examples.levelset.electrochem.matplotlibsurfactantviewer)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer"]], "axes (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.axes"]], "cmap (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.cmap"]], "colorbar (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.colorbar"]], "examples.levelset.electrochem.matplotlibsurfactantviewer": [[140, "module-examples.levelSet.electroChem.matplotlibSurfactantViewer"]], "fig (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.fig"]], "id (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.id"]], "log (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.log"]], "plot() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plot"]], "plotmesh() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer method)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.title"]], "vars (examples.levelset.electrochem.matplotlibsurfactantviewer.matplotlibsurfactantviewer property)": [[140, "examples.levelSet.electroChem.matplotlibSurfactantViewer.MatplotlibSurfactantViewer.vars"]], "mayavisurfactantviewer (class in examples.levelset.electrochem.mayavisurfactantviewer)": [[141, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer"]], "examples.levelset.electrochem.mayavisurfactantviewer": [[141, "module-examples.levelSet.electroChem.mayaviSurfactantViewer"]], "plotmesh() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[141, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.plotMesh"]], "setlimits() (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer method)": [[141, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.setLimits"]], "title (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[141, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.title"]], "vars (examples.levelset.electrochem.mayavisurfactantviewer.mayavisurfactantviewer property)": [[141, "examples.levelSet.electroChem.mayaviSurfactantViewer.MayaviSurfactantViewer.vars"]], "examples.levelset.electrochem.metaliondiffusionequation": [[142, "module-examples.levelSet.electroChem.metalIonDiffusionEquation"]], "examples.levelset.electrochem.simpletrenchsystem": [[143, "module-examples.levelSet.electroChem.simpleTrenchSystem"]], "runsimpletrenchsystem": [[143, "index-0"]], "examples.levelset.electrochem.surfactantbulkdiffusionequation": [[144, "module-examples.levelSet.electroChem.surfactantBulkDiffusionEquation"]], "examples.levelset.electrochem.test": [[145, "module-examples.levelSet.electroChem.test"]], "examples.levelset.electrochem.trenchmesh": [[146, "module-examples.levelSet.electroChem.trenchMesh"]], "examples.levelset.surfactant": [[147, "module-examples.levelSet.surfactant"]], "examples.levelset.surfactant.circle": [[148, "module-examples.levelSet.surfactant.circle"]], "examples.levelset.surfactant.expandingcircle": [[149, "module-examples.levelSet.surfactant.expandingCircle"]], "examples.levelset.surfactant.square": [[150, "module-examples.levelSet.surfactant.square"]], "examples.levelset.surfactant.test": [[151, "module-examples.levelSet.surfactant.test"]], "examples.levelset.test": [[152, "module-examples.levelSet.test"]], "examples.meshing": [[153, "module-examples.meshing"]], "examples.meshing.gmshrefinement": [[154, "module-examples.meshing.gmshRefinement"]], "examples.meshing.inputgrid2d": [[155, "module-examples.meshing.inputGrid2D"]], "examples.meshing.sphere": [[156, "module-examples.meshing.sphere"]], "examples.meshing.test": [[157, "module-examples.meshing.test"]], "examples.parallel": [[158, "module-examples.parallel"]], "examples.phase": [[159, "module-examples.phase"]], ":math:`\\pi`": [[160, "index-0"], [161, "index-2"], [165, "index-3"], [166, "index-5"]], "arctan": [[160, "index-0"], [161, "index-2"]], "arctan2": [[160, "index-0"], [161, "index-2"]], "examples.phase.anisotropy": [[160, "module-examples.phase.anisotropy"]], "pi": [[160, "index-0"], [161, "index-2"], [165, "index-3"], [166, "index-5"]], "tan": [[160, "index-0"], [161, "index-2"]], "implicitsourceterm": [[161, "index-3"], [165, "index-4"], [166, "index-2"], [176, "index-5"]], "allclose": [[161, "index-5"], [175, "index-6"]], "examples.phase.anisotropyold": [[161, "module-examples.phase.anisotropyOLD"]], "powerlawconvectionterm": [[162, "index-3"], [175, "index-3"]], "variable": [[162, "index-2"], [163, "index-2"], [176, "index-6"]], "array": [[162, "index-5"], [163, "index-4"]], "examples.phase.binary": [[162, "module-examples.phase.binary"]], "log": [[162, "index-5"], [163, "index-4"], [175, "index-2"]], "examples.phase.binarycoupled": [[163, "module-examples.phase.binaryCoupled"]], "solve": [[163, "index-7"]], "examples.phase.impingement": [[164, "module-examples.phase.impingement"]], "modularvariable": [[165, "index-3"]], "examples.phase.impingement.mesh20x20": [[165, "module-examples.phase.impingement.mesh20x20"]], "fipy.tools.dump": [[165, "index-8"], [407, "module-fipy.tools.dump"]], "examples.phase.impingement.mesh40x1": [[166, "module-examples.phase.impingement.mesh40x1"]], "examples.phase.impingement.test": [[167, "module-examples.phase.impingement.test"]], "examples.phase.missorientation": [[168, "module-examples.phase.missOrientation"]], "examples.phase.missorientation.circle": [[169, "module-examples.phase.missOrientation.circle"]], "examples.phase.missorientation.mesh1d": [[170, "module-examples.phase.missOrientation.mesh1D"]], "examples.phase.missorientation.modcircle": [[171, "module-examples.phase.missOrientation.modCircle"]], "examples.phase.missorientation.test": [[172, "module-examples.phase.missOrientation.test"]], "examples.phase.polyxtal": [[173, "module-examples.phase.polyxtal"]], "examples.phase.polyxtalcoupled": [[174, "module-examples.phase.polyxtalCoupled"]], "examples.phase.quaternary": [[175, "module-examples.phase.quaternary"]], "viewers": [[175, "index-4"]], "examples.phase.simple": [[176, "module-examples.phase.simple"]], "tanh": [[176, "index-3"]], "examples.phase.symmetry": [[177, "module-examples.phase.symmetry"]], "examples.phase.test": [[178, "module-examples.phase.test"]], "examples.reactivewetting": [[179, "module-examples.reactiveWetting"]], "examples.reactivewetting.liquidvapor1d": [[180, "module-examples.reactiveWetting.liquidVapor1D"]], "examples.reactivewetting.liquidvapor2d": [[181, "module-examples.reactiveWetting.liquidVapor2D"]], "examples.reactivewetting.test": [[182, "module-examples.reactiveWetting.test"]], "examples.riemann": [[183, "module-examples.riemann"]], "examples.riemann.test": [[184, "module-examples.riemann.test"]], "examples.test": [[185, "module-examples.test"]], "examples.updating": [[186, "module-examples.updating"]], "exponentialconvectionterm": [[187, "index-3"]], "fixedflux": [[187, "index-1"]], "fixedvalue": [[187, "index-1"], [187, "index-8"]], "gist1dviewer": [[187, "index-10"]], "grid2dgistviewer": [[187, "index-6"]], "iterator": [[187, "index-4"]], "steadyconvectiondiffusionscequation": [[187, "index-3"]], "examples.updating.update0_1to1_0": [[187, "module-examples.updating.update0_1to1_0"]], "fipy.numerix": [[187, "index-5"]], "examples.updating.update1_0to2_0": [[188, "module-examples.updating.update1_0to2_0"]], "examples.updating.update2_0to3_0": [[189, "module-examples.updating.update2_0to3_0"]], "doctest_raw_input() (in module fipy)": [[190, "fipy.doctest_raw_input"]], "fipy": [[190, "module-fipy"], [484, "term-FiPy"]], "test() (in module fipy)": [[190, "fipy.test"]], "fipy.boundaryconditions": [[191, "module-fipy.boundaryConditions"]], "boundarycondition (class in fipy.boundaryconditions.boundarycondition)": [[192, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition"]], "__repr__() (fipy.boundaryconditions.boundarycondition.boundarycondition method)": [[192, "fipy.boundaryConditions.boundaryCondition.BoundaryCondition.__repr__"]], "fipy.boundaryconditions.boundarycondition": [[192, "module-fipy.boundaryConditions.boundaryCondition"]], "constraint (class in fipy.boundaryconditions.constraint)": [[193, "fipy.boundaryConditions.constraint.Constraint"]], "__repr__() (fipy.boundaryconditions.constraint.constraint method)": [[193, "fipy.boundaryConditions.constraint.Constraint.__repr__"]], "fipy.boundaryconditions.constraint": [[193, "module-fipy.boundaryConditions.constraint"]], "fixedflux (class in fipy.boundaryconditions.fixedflux)": [[194, "fipy.boundaryConditions.fixedFlux.FixedFlux"]], "__repr__() (fipy.boundaryconditions.fixedflux.fixedflux method)": [[194, "fipy.boundaryConditions.fixedFlux.FixedFlux.__repr__"]], "fipy.boundaryconditions.fixedflux": [[194, "module-fipy.boundaryConditions.fixedFlux"]], "fixedvalue (class in fipy.boundaryconditions.fixedvalue)": [[195, "fipy.boundaryConditions.fixedValue.FixedValue"]], "__repr__() (fipy.boundaryconditions.fixedvalue.fixedvalue method)": [[195, "fipy.boundaryConditions.fixedValue.FixedValue.__repr__"]], "fipy.boundaryconditions.fixedvalue": [[195, "module-fipy.boundaryConditions.fixedValue"]], "nthorderboundarycondition (class in fipy.boundaryconditions.nthorderboundarycondition)": [[196, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition"]], "__repr__() (fipy.boundaryconditions.nthorderboundarycondition.nthorderboundarycondition method)": [[196, "fipy.boundaryConditions.nthOrderBoundaryCondition.NthOrderBoundaryCondition.__repr__"]], "fipy.boundaryconditions.nthorderboundarycondition": [[196, "module-fipy.boundaryConditions.nthOrderBoundaryCondition"]], "fipy.boundaryconditions.test": [[197, "module-fipy.boundaryConditions.test"]], "fipy.matrices": [[198, "module-fipy.matrices"]], "offsetsparsematrix() (in module fipy.matrices.offsetsparsematrix)": [[199, "fipy.matrices.offsetSparseMatrix.OffsetSparseMatrix"]], "fipy.matrices.offsetsparsematrix": [[199, "module-fipy.matrices.offsetSparseMatrix"]], "fipy.matrices.petscmatrix": [[200, "module-fipy.matrices.petscMatrix"]], "fipy.matrices.pysparsematrix": [[201, "module-fipy.matrices.pysparseMatrix"]], "fipy.matrices.scipymatrix": [[202, "module-fipy.matrices.scipyMatrix"]], "fipy.matrices.sparsematrix": [[203, "module-fipy.matrices.sparseMatrix"]], "fipy.matrices.test": [[204, "module-fipy.matrices.test"]], "fipy.matrices.trilinosmatrix": [[205, "module-fipy.matrices.trilinosMatrix"]], "fipy.meshes": [[206, "module-fipy.meshes"]], "abstractmesh (class in fipy.meshes.abstractmesh)": [[207, "fipy.meshes.abstractMesh.AbstractMesh"]], "meshadditionerror": [[207, "fipy.meshes.abstractMesh.MeshAdditionError"], [226, "fipy.meshes.mesh.MeshAdditionError"]], "vtkcelldataset (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.abstractmesh.abstractmesh method)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.__add__"]], "__cause__ (fipy.meshes.abstractmesh.meshadditionerror attribute)": [[207, "fipy.meshes.abstractMesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.abstractmesh.meshadditionerror attribute)": [[207, "fipy.meshes.abstractMesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[207, "fipy.meshes.abstractMesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.abstractmesh.abstractmesh method)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.__div__"]], "__getattribute__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[207, "fipy.meshes.abstractMesh.MeshAdditionError.__getattribute__"]], "__getstate__() (fipy.meshes.abstractmesh.abstractmesh method)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.__getstate__"]], "__radd__() (fipy.meshes.abstractmesh.abstractmesh method)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.__radd__"]], "__reduce__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[207, "fipy.meshes.abstractMesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.abstractmesh.abstractmesh method)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.__repr__"]], "__repr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[207, "fipy.meshes.abstractMesh.MeshAdditionError.__repr__"]], "__setattr__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[207, "fipy.meshes.abstractMesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.abstractmesh.meshadditionerror method)": [[207, "fipy.meshes.abstractMesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.abstractmesh.abstractmesh method)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.__sub__"]], "__truediv__() (fipy.meshes.abstractmesh.abstractmesh method)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.__truediv__"]], "add_note() (fipy.meshes.abstractmesh.meshadditionerror method)": [[207, "fipy.meshes.abstractMesh.MeshAdditionError.add_note"]], "aspect2d (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.aspect2D"]], "cellcenters (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.cellCenters"]], "cellfaceids (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.cellFaceIDs"]], "facesback (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.facesBack"]], "facesbottom (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.facesBottom"]], "facesdown (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.facesDown"]], "facesfront (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.facesFront"]], "facesleft (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.facesLeft"]], "facesright (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.facesRight"]], "facestop (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.facesTop"]], "facesup (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.facesUp"]], "fipy.meshes.abstractmesh": [[207, "module-fipy.meshes.abstractMesh"]], "with_traceback() (fipy.meshes.abstractmesh.meshadditionerror method)": [[207, "fipy.meshes.abstractMesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.x"]], "y (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.y"]], "z (fipy.meshes.abstractmesh.abstractmesh property)": [[207, "fipy.meshes.abstractMesh.AbstractMesh.z"]], "fipy.meshes.builders": [[208, "module-fipy.meshes.builders"]], "fipy.meshes.builders.abstractgridbuilder": [[209, "module-fipy.meshes.builders.abstractGridBuilder"]], "fipy.meshes.builders.grid1dbuilder": [[210, "module-fipy.meshes.builders.grid1DBuilder"]], "fipy.meshes.builders.grid2dbuilder": [[211, "module-fipy.meshes.builders.grid2DBuilder"]], "fipy.meshes.builders.grid3dbuilder": [[212, "module-fipy.meshes.builders.grid3DBuilder"]], "fipy.meshes.builders.periodicgrid1dbuilder": [[213, "module-fipy.meshes.builders.periodicGrid1DBuilder"]], "fipy.meshes.builders.utilityclasses": [[214, "module-fipy.meshes.builders.utilityClasses"]], "fipy.meshes.cylindricalgrid1d": [[215, "module-fipy.meshes.cylindricalGrid1D"]], "fipy.meshes.cylindricalgrid2d": [[216, "module-fipy.meshes.cylindricalGrid2D"]], "cylindricalnonuniformgrid1d (class in fipy.meshes.cylindricalnonuniformgrid1d)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d method)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid1d": [[217, "module-fipy.meshes.cylindricalNonUniformGrid1D"]], "x (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid1d.cylindricalnonuniformgrid1d property)": [[217, "fipy.meshes.cylindricalNonUniformGrid1D.CylindricalNonUniformGrid1D.z"]], "cylindricalnonuniformgrid2d (class in fipy.meshes.cylindricalnonuniformgrid2d)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__getstate__"]], "__mul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d method)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.extrude"]], "facesback (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.facesUp"]], "fipy.meshes.cylindricalnonuniformgrid2d": [[218, "module-fipy.meshes.cylindricalNonUniformGrid2D"]], "x (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.x"]], "y (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.y"]], "z (fipy.meshes.cylindricalnonuniformgrid2d.cylindricalnonuniformgrid2d property)": [[218, "fipy.meshes.cylindricalNonUniformGrid2D.CylindricalNonUniformGrid2D.z"]], "cylindricaluniformgrid1d (class in fipy.meshes.cylindricaluniformgrid1d)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d method)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.facesUp"]], "fipy.meshes.cylindricaluniformgrid1d": [[219, "module-fipy.meshes.cylindricalUniformGrid1D"]], "x (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.x"]], "y (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.y"]], "z (fipy.meshes.cylindricaluniformgrid1d.cylindricaluniformgrid1d property)": [[219, "fipy.meshes.cylindricalUniformGrid1D.CylindricalUniformGrid1D.z"]], "cylindricaluniformgrid2d (class in fipy.meshes.cylindricaluniformgrid2d)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D"]], "vtkcelldataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__add__"]], "__div__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__getstate__"]], "__radd__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d method)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesRight"]], "facestop (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesTop"]], "facesup (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.facesUp"]], "fipy.meshes.cylindricaluniformgrid2d": [[220, "module-fipy.meshes.cylindricalUniformGrid2D"]], "x (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.x"]], "y (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.y"]], "z (fipy.meshes.cylindricaluniformgrid2d.cylindricaluniformgrid2d property)": [[220, "fipy.meshes.cylindricalUniformGrid2D.CylindricalUniformGrid2D.z"]], "cylindricalgrid1d() (in module fipy.meshes.factorymeshes)": [[221, "fipy.meshes.factoryMeshes.CylindricalGrid1D"]], "cylindricalgrid2d() (in module fipy.meshes.factorymeshes)": [[221, "fipy.meshes.factoryMeshes.CylindricalGrid2D"]], "grid1d() (in module fipy.meshes.factorymeshes)": [[221, "fipy.meshes.factoryMeshes.Grid1D"]], "grid2d() (in module fipy.meshes.factorymeshes)": [[221, "fipy.meshes.factoryMeshes.Grid2D"]], "grid3d() (in module fipy.meshes.factorymeshes)": [[221, "fipy.meshes.factoryMeshes.Grid3D"]], "sphericalgrid1d() (in module fipy.meshes.factorymeshes)": [[221, "fipy.meshes.factoryMeshes.SphericalGrid1D"]], "fipy.meshes.factorymeshes": [[221, "module-fipy.meshes.factoryMeshes"]], "gmsh2d (class in fipy.meshes.gmshmesh)": [[222, "fipy.meshes.gmshMesh.Gmsh2D"]], "gmsh2din3dspace (class in fipy.meshes.gmshmesh)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace"]], "gmsh3d (class in fipy.meshes.gmshmesh)": [[222, "fipy.meshes.gmshMesh.Gmsh3D"]], "gmshexception": [[222, "fipy.meshes.gmshMesh.GmshException"]], "gmshfile (class in fipy.meshes.gmshmesh)": [[222, "fipy.meshes.gmshMesh.GmshFile"]], "gmshgrid2d (class in fipy.meshes.gmshmesh)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D"]], "gmshgrid3d (class in fipy.meshes.gmshmesh)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D"]], "mshfile (class in fipy.meshes.gmshmesh)": [[222, "fipy.meshes.gmshMesh.MSHFile"]], "meshexporterror": [[222, "fipy.meshes.gmshMesh.MeshExportError"]], "posfile (class in fipy.meshes.gmshmesh)": [[222, "fipy.meshes.gmshMesh.POSFile"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.gmshmesh.gmsh2d method)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmsh3d method)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.__add__"]], "__add__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.__add__"]], "__cause__ (fipy.meshes.gmshmesh.gmshexception attribute)": [[222, "fipy.meshes.gmshMesh.GmshException.__cause__"]], "__cause__ (fipy.meshes.gmshmesh.meshexporterror attribute)": [[222, "fipy.meshes.gmshMesh.MeshExportError.__cause__"]], "__context__ (fipy.meshes.gmshmesh.gmshexception attribute)": [[222, "fipy.meshes.gmshMesh.GmshException.__context__"]], "__context__ (fipy.meshes.gmshmesh.meshexporterror attribute)": [[222, "fipy.meshes.gmshMesh.MeshExportError.__context__"]], "__delattr__() (fipy.meshes.gmshmesh.gmshexception method)": [[222, "fipy.meshes.gmshMesh.GmshException.__delattr__"]], "__delattr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[222, "fipy.meshes.gmshMesh.MeshExportError.__delattr__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2d method)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmsh3d method)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.__div__"]], "__div__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.__div__"]], "__getattribute__() (fipy.meshes.gmshmesh.gmshexception method)": [[222, "fipy.meshes.gmshMesh.GmshException.__getattribute__"]], "__getattribute__() (fipy.meshes.gmshmesh.meshexporterror method)": [[222, "fipy.meshes.gmshMesh.MeshExportError.__getattribute__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh2d method)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmsh3d method)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.__getstate__"]], "__getstate__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.__getstate__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.__mul__"]], "__mul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.__mul__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2d method)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmsh3d method)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.__radd__"]], "__radd__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.__radd__"]], "__reduce__() (fipy.meshes.gmshmesh.gmshexception method)": [[222, "fipy.meshes.gmshMesh.GmshException.__reduce__"]], "__reduce__() (fipy.meshes.gmshmesh.meshexporterror method)": [[222, "fipy.meshes.gmshMesh.MeshExportError.__reduce__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2d method)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmsh3d method)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshexception method)": [[222, "fipy.meshes.gmshMesh.GmshException.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.__repr__"]], "__repr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[222, "fipy.meshes.gmshMesh.MeshExportError.__repr__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2d method)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmsh3d method)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.__rmul__"]], "__setattr__() (fipy.meshes.gmshmesh.gmshexception method)": [[222, "fipy.meshes.gmshMesh.GmshException.__setattr__"]], "__setattr__() (fipy.meshes.gmshmesh.meshexporterror method)": [[222, "fipy.meshes.gmshMesh.MeshExportError.__setattr__"]], "__str__() (fipy.meshes.gmshmesh.gmshexception method)": [[222, "fipy.meshes.gmshMesh.GmshException.__str__"]], "__str__() (fipy.meshes.gmshmesh.meshexporterror method)": [[222, "fipy.meshes.gmshMesh.MeshExportError.__str__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2d method)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmsh3d method)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.__sub__"]], "__sub__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.__sub__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2d method)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmsh3d method)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.gmshmesh.gmshgrid3d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.__truediv__"]], "add_note() (fipy.meshes.gmshmesh.gmshexception method)": [[222, "fipy.meshes.gmshMesh.GmshException.add_note"]], "add_note() (fipy.meshes.gmshmesh.meshexporterror method)": [[222, "fipy.meshes.gmshMesh.MeshExportError.add_note"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.aspect2D"]], "aspect2d (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.aspect2D"]], "cellcenters (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.cellCenters"]], "cellcenters (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.cellFaceIDs"]], "extrude() (fipy.meshes.gmshmesh.gmsh2d method)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmsh2din3dspace method)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.extrude"]], "extrude() (fipy.meshes.gmshmesh.gmshgrid2d method)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.extrude"]], "facesback (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.facesBack"]], "facesback (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.facesBack"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.facesBottom"]], "facesbottom (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.facesBottom"]], "facesdown (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.facesDown"]], "facesdown (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.facesDown"]], "facesfront (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.facesFront"]], "facesfront (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.facesFront"]], "facesleft (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.facesLeft"]], "facesleft (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.facesLeft"]], "facesright (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.facesRight"]], "facesright (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.facesRight"]], "facestop (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.facesTop"]], "facestop (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.facesTop"]], "facesup (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.facesUp"]], "facesup (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.facesUp"]], "fipy.meshes.gmshmesh": [[222, "module-fipy.meshes.gmshMesh"]], "gmshversion() (in module fipy.meshes.gmshmesh)": [[222, "fipy.meshes.gmshMesh.gmshVersion"]], "makemapvariables() (fipy.meshes.gmshmesh.mshfile method)": [[222, "fipy.meshes.gmshMesh.MSHFile.makeMapVariables"]], "openmshfile() (in module fipy.meshes.gmshmesh)": [[222, "fipy.meshes.gmshMesh.openMSHFile"]], "openposfile() (in module fipy.meshes.gmshmesh)": [[222, "fipy.meshes.gmshMesh.openPOSFile"]], "read() (fipy.meshes.gmshmesh.mshfile method)": [[222, "fipy.meshes.gmshMesh.MSHFile.read"]], "with_traceback() (fipy.meshes.gmshmesh.gmshexception method)": [[222, "fipy.meshes.gmshMesh.GmshException.with_traceback"]], "with_traceback() (fipy.meshes.gmshmesh.meshexporterror method)": [[222, "fipy.meshes.gmshMesh.MeshExportError.with_traceback"]], "x (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.x"]], "x (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.x"]], "x (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.x"]], "x (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.x"]], "y (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.y"]], "y (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.y"]], "y (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.y"]], "y (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.y"]], "z (fipy.meshes.gmshmesh.gmsh2d property)": [[222, "fipy.meshes.gmshMesh.Gmsh2D.z"]], "z (fipy.meshes.gmshmesh.gmsh2din3dspace property)": [[222, "fipy.meshes.gmshMesh.Gmsh2DIn3DSpace.z"]], "z (fipy.meshes.gmshmesh.gmsh3d property)": [[222, "fipy.meshes.gmshMesh.Gmsh3D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid2d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid2D.z"]], "z (fipy.meshes.gmshmesh.gmshgrid3d property)": [[222, "fipy.meshes.gmshMesh.GmshGrid3D.z"]], "fipy.meshes.grid1d": [[223, "module-fipy.meshes.grid1D"]], "fipy.meshes.grid2d": [[224, "module-fipy.meshes.grid2D"]], "fipy.meshes.grid3d": [[225, "module-fipy.meshes.grid3D"]], "mesh (class in fipy.meshes.mesh)": [[226, "fipy.meshes.mesh.Mesh"]], "vtkcelldataset (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh.mesh method)": [[226, "fipy.meshes.mesh.Mesh.__add__"]], "__cause__ (fipy.meshes.mesh.meshadditionerror attribute)": [[226, "fipy.meshes.mesh.MeshAdditionError.__cause__"]], "__context__ (fipy.meshes.mesh.meshadditionerror attribute)": [[226, "fipy.meshes.mesh.MeshAdditionError.__context__"]], "__delattr__() (fipy.meshes.mesh.meshadditionerror method)": [[226, "fipy.meshes.mesh.MeshAdditionError.__delattr__"]], "__div__() (fipy.meshes.mesh.mesh method)": [[226, "fipy.meshes.mesh.Mesh.__div__"]], "__getattribute__() (fipy.meshes.mesh.meshadditionerror method)": [[226, "fipy.meshes.mesh.MeshAdditionError.__getattribute__"]], "__getstate__() (fipy.meshes.mesh.mesh method)": [[226, "fipy.meshes.mesh.Mesh.__getstate__"]], "__mul__() (fipy.meshes.mesh.mesh method)": [[226, "fipy.meshes.mesh.Mesh.__mul__"]], "__radd__() (fipy.meshes.mesh.mesh method)": [[226, "fipy.meshes.mesh.Mesh.__radd__"]], "__reduce__() (fipy.meshes.mesh.meshadditionerror method)": [[226, "fipy.meshes.mesh.MeshAdditionError.__reduce__"]], "__repr__() (fipy.meshes.mesh.mesh method)": [[226, "fipy.meshes.mesh.Mesh.__repr__"]], "__repr__() (fipy.meshes.mesh.meshadditionerror method)": [[226, "fipy.meshes.mesh.MeshAdditionError.__repr__"]], "__rmul__() (fipy.meshes.mesh.mesh method)": [[226, "fipy.meshes.mesh.Mesh.__rmul__"]], "__setattr__() (fipy.meshes.mesh.meshadditionerror method)": [[226, "fipy.meshes.mesh.MeshAdditionError.__setattr__"]], "__str__() (fipy.meshes.mesh.meshadditionerror method)": [[226, "fipy.meshes.mesh.MeshAdditionError.__str__"]], "__sub__() (fipy.meshes.mesh.mesh method)": [[226, "fipy.meshes.mesh.Mesh.__sub__"]], "__truediv__() (fipy.meshes.mesh.mesh method)": [[226, "fipy.meshes.mesh.Mesh.__truediv__"]], "add_note() (fipy.meshes.mesh.meshadditionerror method)": [[226, "fipy.meshes.mesh.MeshAdditionError.add_note"]], "aspect2d (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.aspect2D"]], "cellcenters (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.cellCenters"]], "cellfaceids (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.cellFaceIDs"]], "facesback (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.facesBack"]], "facesbottom (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.facesBottom"]], "facesdown (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.facesDown"]], "facesfront (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.facesFront"]], "facesleft (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.facesLeft"]], "facesright (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.facesRight"]], "facestop (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.facesTop"]], "facesup (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.facesUp"]], "fipy.meshes.mesh": [[226, "module-fipy.meshes.mesh"]], "with_traceback() (fipy.meshes.mesh.meshadditionerror method)": [[226, "fipy.meshes.mesh.MeshAdditionError.with_traceback"]], "x (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.x"]], "y (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.y"]], "z (fipy.meshes.mesh.mesh property)": [[226, "fipy.meshes.mesh.Mesh.z"]], "mesh1d (class in fipy.meshes.mesh1d)": [[227, "fipy.meshes.mesh1D.Mesh1D"]], "vtkcelldataset (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh1d.mesh1d method)": [[227, "fipy.meshes.mesh1D.Mesh1D.__add__"]], "__div__() (fipy.meshes.mesh1d.mesh1d method)": [[227, "fipy.meshes.mesh1D.Mesh1D.__div__"]], "__getstate__() (fipy.meshes.mesh1d.mesh1d method)": [[227, "fipy.meshes.mesh1D.Mesh1D.__getstate__"]], "__mul__() (fipy.meshes.mesh1d.mesh1d method)": [[227, "fipy.meshes.mesh1D.Mesh1D.__mul__"]], "__radd__() (fipy.meshes.mesh1d.mesh1d method)": [[227, "fipy.meshes.mesh1D.Mesh1D.__radd__"]], "__repr__() (fipy.meshes.mesh1d.mesh1d method)": [[227, "fipy.meshes.mesh1D.Mesh1D.__repr__"]], "__rmul__() (fipy.meshes.mesh1d.mesh1d method)": [[227, "fipy.meshes.mesh1D.Mesh1D.__rmul__"]], "__sub__() (fipy.meshes.mesh1d.mesh1d method)": [[227, "fipy.meshes.mesh1D.Mesh1D.__sub__"]], "__truediv__() (fipy.meshes.mesh1d.mesh1d method)": [[227, "fipy.meshes.mesh1D.Mesh1D.__truediv__"]], "aspect2d (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.aspect2D"]], "cellcenters (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.cellCenters"]], "cellfaceids (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.cellFaceIDs"]], "facesback (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.facesBack"]], "facesbottom (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.facesBottom"]], "facesdown (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.facesDown"]], "facesfront (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.facesFront"]], "facesleft (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.facesLeft"]], "facesright (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.facesRight"]], "facestop (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.facesTop"]], "facesup (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.facesUp"]], "fipy.meshes.mesh1d": [[227, "module-fipy.meshes.mesh1D"]], "x (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.x"]], "y (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.y"]], "z (fipy.meshes.mesh1d.mesh1d property)": [[227, "fipy.meshes.mesh1D.Mesh1D.z"]], "mesh2d (class in fipy.meshes.mesh2d)": [[228, "fipy.meshes.mesh2D.Mesh2D"]], "vtkcelldataset (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.mesh2d.mesh2d method)": [[228, "fipy.meshes.mesh2D.Mesh2D.__add__"]], "__div__() (fipy.meshes.mesh2d.mesh2d method)": [[228, "fipy.meshes.mesh2D.Mesh2D.__div__"]], "__getstate__() (fipy.meshes.mesh2d.mesh2d method)": [[228, "fipy.meshes.mesh2D.Mesh2D.__getstate__"]], "__mul__() (fipy.meshes.mesh2d.mesh2d method)": [[228, "fipy.meshes.mesh2D.Mesh2D.__mul__"]], "__radd__() (fipy.meshes.mesh2d.mesh2d method)": [[228, "fipy.meshes.mesh2D.Mesh2D.__radd__"]], "__repr__() (fipy.meshes.mesh2d.mesh2d method)": [[228, "fipy.meshes.mesh2D.Mesh2D.__repr__"]], "__rmul__() (fipy.meshes.mesh2d.mesh2d method)": [[228, "fipy.meshes.mesh2D.Mesh2D.__rmul__"]], "__sub__() (fipy.meshes.mesh2d.mesh2d method)": [[228, "fipy.meshes.mesh2D.Mesh2D.__sub__"]], "__truediv__() (fipy.meshes.mesh2d.mesh2d method)": [[228, "fipy.meshes.mesh2D.Mesh2D.__truediv__"]], "aspect2d (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.aspect2D"]], "cellcenters (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.cellCenters"]], "cellfaceids (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.cellFaceIDs"]], "extrude() (fipy.meshes.mesh2d.mesh2d method)": [[228, "fipy.meshes.mesh2D.Mesh2D.extrude"]], "facesback (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.facesBack"]], "facesbottom (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.facesBottom"]], "facesdown (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.facesDown"]], "facesfront (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.facesFront"]], "facesleft (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.facesLeft"]], "facesright (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.facesRight"]], "facestop (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.facesTop"]], "facesup (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.facesUp"]], "fipy.meshes.mesh2d": [[228, "module-fipy.meshes.mesh2D"]], "x (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.x"]], "y (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.y"]], "z (fipy.meshes.mesh2d.mesh2d property)": [[228, "fipy.meshes.mesh2D.Mesh2D.z"]], "nonuniformgrid1d (class in fipy.meshes.nonuniformgrid1d)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d method)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.facesUp"]], "fipy.meshes.nonuniformgrid1d": [[229, "module-fipy.meshes.nonUniformGrid1D"]], "x (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.x"]], "y (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.y"]], "z (fipy.meshes.nonuniformgrid1d.nonuniformgrid1d property)": [[229, "fipy.meshes.nonUniformGrid1D.NonUniformGrid1D.z"]], "nonuniformgrid2d (class in fipy.meshes.nonuniformgrid2d)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d method)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.extrude"]], "facesback (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.facesUp"]], "fipy.meshes.nonuniformgrid2d": [[230, "module-fipy.meshes.nonUniformGrid2D"]], "x (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.x"]], "y (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.y"]], "z (fipy.meshes.nonuniformgrid2d.nonuniformgrid2d property)": [[230, "fipy.meshes.nonUniformGrid2D.NonUniformGrid2D.z"]], "nonuniformgrid3d (class in fipy.meshes.nonuniformgrid3d)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D"]], "vtkcelldataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.VTKFaceDataSet"]], "__add__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__add__"]], "__div__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__div__"]], "__getstate__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__getstate__"]], "__mul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__mul__"]], "__radd__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__radd__"]], "__repr__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__repr__"]], "__rmul__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__rmul__"]], "__sub__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__sub__"]], "__truediv__() (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d method)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.__truediv__"]], "aspect2d (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.aspect2D"]], "cellcenters (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellCenters"]], "cellfaceids (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.cellFaceIDs"]], "facesback (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBack"]], "facesbottom (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesBottom"]], "facesdown (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesDown"]], "facesfront (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesFront"]], "facesleft (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesLeft"]], "facesright (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesRight"]], "facestop (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesTop"]], "facesup (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.facesUp"]], "fipy.meshes.nonuniformgrid3d": [[231, "module-fipy.meshes.nonUniformGrid3D"]], "x (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.x"]], "y (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.y"]], "z (fipy.meshes.nonuniformgrid3d.nonuniformgrid3d property)": [[231, "fipy.meshes.nonUniformGrid3D.NonUniformGrid3D.z"]], "periodicgrid1d (class in fipy.meshes.periodicgrid1d)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D"]], "vtkcelldataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__add__"]], "__div__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__div__"]], "__getstate__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__mul__"]], "__radd__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__radd__"]], "__repr__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid1d.periodicgrid1d method)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBack"]], "facesbottom (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesBottom"]], "facesdown (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesDown"]], "facesfront (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesFront"]], "facesleft (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesLeft"]], "facesright (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesRight"]], "facestop (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesTop"]], "facesup (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.facesUp"]], "fipy.meshes.periodicgrid1d": [[232, "module-fipy.meshes.periodicGrid1D"]], "x (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.x"]], "y (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.y"]], "z (fipy.meshes.periodicgrid1d.periodicgrid1d property)": [[232, "fipy.meshes.periodicGrid1D.PeriodicGrid1D.z"]], "periodicgrid2d (class in fipy.meshes.periodicgrid2d)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D"]], "periodicgrid2dleftright (class in fipy.meshes.periodicgrid2d)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight"]], "periodicgrid2dtopbottom (class in fipy.meshes.periodicgrid2d)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__add__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__div__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__mul__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__radd__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.cellFaceIDs"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2d method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dleftright method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.extrude"]], "extrude() (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom method)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.extrude"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBack"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesBottom"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesDown"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesFront"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesLeft"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesRight"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesTop"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.facesUp"]], "fipy.meshes.periodicgrid2d": [[233, "module-fipy.meshes.periodicGrid2D"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.x"]], "x (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.x"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.y"]], "y (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.y"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2d property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2D.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dleftright property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DLeftRight.z"]], "z (fipy.meshes.periodicgrid2d.periodicgrid2dtopbottom property)": [[233, "fipy.meshes.periodicGrid2D.PeriodicGrid2DTopBottom.z"]], "periodicgrid3d (class in fipy.meshes.periodicgrid3d)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D"]], "periodicgrid3dfrontback (class in fipy.meshes.periodicgrid3d)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack"]], "periodicgrid3dleftright (class in fipy.meshes.periodicgrid3d)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight"]], "periodicgrid3dleftrightfrontback (class in fipy.meshes.periodicgrid3d)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack"]], "periodicgrid3dleftrighttopbottom (class in fipy.meshes.periodicgrid3d)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom"]], "periodicgrid3dtopbottom (class in fipy.meshes.periodicgrid3d)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom"]], "periodicgrid3dtopbottomfrontback (class in fipy.meshes.periodicgrid3d)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKCellDataSet"]], "vtkcelldataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.VTKFaceDataSet"]], "vtkfacedataset (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.VTKFaceDataSet"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__add__"]], "__add__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__add__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__div__"]], "__div__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__div__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__getstate__"]], "__getstate__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__getstate__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__mul__"]], "__mul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__mul__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__radd__"]], "__radd__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__radd__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__repr__"]], "__repr__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__repr__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__rmul__"]], "__rmul__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__rmul__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__sub__"]], "__sub__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__sub__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3d method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftright method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.__truediv__"]], "__truediv__() (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback method)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.__truediv__"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.aspect2D"]], "aspect2d (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.aspect2D"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellCenters"]], "cellcenters (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellCenters"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.cellFaceIDs"]], "cellfaceids (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.cellFaceIDs"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBack"]], "facesback (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBack"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesBottom"]], "facesbottom (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesBottom"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesDown"]], "facesdown (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesDown"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesFront"]], "facesfront (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesFront"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesLeft"]], "facesleft (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesLeft"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesRight"]], "facesright (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesRight"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesTop"]], "facestop (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesTop"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.facesUp"]], "facesup (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.facesUp"]], "fipy.meshes.periodicgrid3d": [[234, "module-fipy.meshes.periodicGrid3D"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.x"]], "x (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.x"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.y"]], "y (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.y"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3d property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3D.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftright property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRight.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrightfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightFrontBack.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dleftrighttopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DLeftRightTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottom property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottom.z"]], "z (fipy.meshes.periodicgrid3d.periodicgrid3dtopbottomfrontback property)": [[234, "fipy.meshes.periodicGrid3D.PeriodicGrid3DTopBottomFrontBack.z"]], "fipy.meshes.representations": [[235, "module-fipy.meshes.representations"]], "fipy.meshes.representations.abstractrepresentation": [[236, "module-fipy.meshes.representations.abstractRepresentation"]], "fipy.meshes.representations.gridrepresentation": [[237, "module-fipy.meshes.representations.gridRepresentation"]], "fipy.meshes.representations.meshrepresentation": [[238, "module-fipy.meshes.representations.meshRepresentation"]], "skewedgrid2d (class in fipy.meshes.skewedgrid2d)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D"]], "vtkcelldataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__add__"]], "__div__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__div__"]], "__getstate__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__getstate__"]], "__mul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__mul__"]], "__radd__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__radd__"]], "__repr__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__repr__"]], "__rmul__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__rmul__"]], "__sub__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__sub__"]], "__truediv__() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.__truediv__"]], "aspect2d (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.aspect2D"]], "cellcenters (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.cellFaceIDs"]], "extrude() (fipy.meshes.skewedgrid2d.skewedgrid2d method)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.extrude"]], "facesback (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBack"]], "facesbottom (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesBottom"]], "facesdown (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesDown"]], "facesfront (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesFront"]], "facesleft (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesLeft"]], "facesright (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesRight"]], "facestop (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesTop"]], "facesup (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.facesUp"]], "fipy.meshes.skewedgrid2d": [[239, "module-fipy.meshes.skewedGrid2D"]], "physicalshape (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.physicalShape"]], "x (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.x"]], "y (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.y"]], "z (fipy.meshes.skewedgrid2d.skewedgrid2d property)": [[239, "fipy.meshes.skewedGrid2D.SkewedGrid2D.z"]], "sphericalnonuniformgrid1d (class in fipy.meshes.sphericalnonuniformgrid1d)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__getstate__"]], "__mul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__mul__"]], "__radd__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__repr__"]], "__rmul__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__rmul__"]], "__sub__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d method)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.cellFaceIDs"]], "facesback (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.facesUp"]], "fipy.meshes.sphericalnonuniformgrid1d": [[240, "module-fipy.meshes.sphericalNonUniformGrid1D"]], "x (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.x"]], "y (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.y"]], "z (fipy.meshes.sphericalnonuniformgrid1d.sphericalnonuniformgrid1d property)": [[240, "fipy.meshes.sphericalNonUniformGrid1D.SphericalNonUniformGrid1D.z"]], "sphericaluniformgrid1d (class in fipy.meshes.sphericaluniformgrid1d)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D"]], "vtkcelldataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__add__"]], "__div__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d method)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesDown"]], "facesfront (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesFront"]], "facesleft (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesLeft"]], "facesright (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesRight"]], "facestop (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesTop"]], "facesup (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.facesUp"]], "fipy.meshes.sphericaluniformgrid1d": [[241, "module-fipy.meshes.sphericalUniformGrid1D"]], "x (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.x"]], "y (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.y"]], "z (fipy.meshes.sphericaluniformgrid1d.sphericaluniformgrid1d property)": [[241, "fipy.meshes.sphericalUniformGrid1D.SphericalUniformGrid1D.z"]], "fipy.meshes.test": [[242, "module-fipy.meshes.test"]], "fipy.meshes.topologies": [[243, "module-fipy.meshes.topologies"]], "fipy.meshes.topologies.abstracttopology": [[244, "module-fipy.meshes.topologies.abstractTopology"]], "fipy.meshes.topologies.gridtopology": [[245, "module-fipy.meshes.topologies.gridTopology"]], "fipy.meshes.topologies.meshtopology": [[246, "module-fipy.meshes.topologies.meshTopology"]], "tri2d (class in fipy.meshes.tri2d)": [[247, "fipy.meshes.tri2D.Tri2D"]], "vtkcelldataset (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.tri2d.tri2d method)": [[247, "fipy.meshes.tri2D.Tri2D.__add__"]], "__div__() (fipy.meshes.tri2d.tri2d method)": [[247, "fipy.meshes.tri2D.Tri2D.__div__"]], "__getstate__() (fipy.meshes.tri2d.tri2d method)": [[247, "fipy.meshes.tri2D.Tri2D.__getstate__"]], "__mul__() (fipy.meshes.tri2d.tri2d method)": [[247, "fipy.meshes.tri2D.Tri2D.__mul__"]], "__radd__() (fipy.meshes.tri2d.tri2d method)": [[247, "fipy.meshes.tri2D.Tri2D.__radd__"]], "__repr__() (fipy.meshes.tri2d.tri2d method)": [[247, "fipy.meshes.tri2D.Tri2D.__repr__"]], "__rmul__() (fipy.meshes.tri2d.tri2d method)": [[247, "fipy.meshes.tri2D.Tri2D.__rmul__"]], "__sub__() (fipy.meshes.tri2d.tri2d method)": [[247, "fipy.meshes.tri2D.Tri2D.__sub__"]], "__truediv__() (fipy.meshes.tri2d.tri2d method)": [[247, "fipy.meshes.tri2D.Tri2D.__truediv__"]], "aspect2d (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.aspect2D"]], "cellcenters (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.cellCenters"]], "cellfaceids (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.cellFaceIDs"]], "extrude() (fipy.meshes.tri2d.tri2d method)": [[247, "fipy.meshes.tri2D.Tri2D.extrude"]], "facesback (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.facesBack"]], "facesbottom (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.facesBottom"]], "facesdown (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.facesDown"]], "facesfront (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.facesFront"]], "facesleft (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.facesLeft"]], "facesright (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.facesRight"]], "facestop (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.facesTop"]], "facesup (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.facesUp"]], "fipy.meshes.tri2d": [[247, "module-fipy.meshes.tri2D"]], "physicalshape (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.physicalShape"]], "x (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.x"]], "y (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.y"]], "z (fipy.meshes.tri2d.tri2d property)": [[247, "fipy.meshes.tri2D.Tri2D.z"]], "uniformgrid (class in fipy.meshes.uniformgrid)": [[248, "fipy.meshes.uniformGrid.UniformGrid"]], "vtkcelldataset (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid.uniformgrid method)": [[248, "fipy.meshes.uniformGrid.UniformGrid.__add__"]], "__div__() (fipy.meshes.uniformgrid.uniformgrid method)": [[248, "fipy.meshes.uniformGrid.UniformGrid.__div__"]], "__getstate__() (fipy.meshes.uniformgrid.uniformgrid method)": [[248, "fipy.meshes.uniformGrid.UniformGrid.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid.uniformgrid method)": [[248, "fipy.meshes.uniformGrid.UniformGrid.__radd__"]], "__repr__() (fipy.meshes.uniformgrid.uniformgrid method)": [[248, "fipy.meshes.uniformGrid.UniformGrid.__repr__"]], "__sub__() (fipy.meshes.uniformgrid.uniformgrid method)": [[248, "fipy.meshes.uniformGrid.UniformGrid.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid.uniformgrid method)": [[248, "fipy.meshes.uniformGrid.UniformGrid.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.facesBack"]], "facesbottom (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.facesBottom"]], "facesdown (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.facesDown"]], "facesfront (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.facesFront"]], "facesleft (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.facesLeft"]], "facesright (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.facesRight"]], "facestop (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.facesTop"]], "facesup (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.facesUp"]], "fipy.meshes.uniformgrid": [[248, "module-fipy.meshes.uniformGrid"]], "x (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.x"]], "y (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.y"]], "z (fipy.meshes.uniformgrid.uniformgrid property)": [[248, "fipy.meshes.uniformGrid.UniformGrid.z"]], "uniformgrid1d (class in fipy.meshes.uniformgrid1d)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D"]], "vtkcelldataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.__add__"]], "__div__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid1d.uniformgrid1d method)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.cellFaceIDs"]], "exteriorfaces (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.exteriorFaces"]], "facesback (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesDown"]], "facesfront (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesFront"]], "facesleft (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesLeft"]], "facesright (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesRight"]], "facestop (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesTop"]], "facesup (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.facesUp"]], "fipy.meshes.uniformgrid1d": [[249, "module-fipy.meshes.uniformGrid1D"]], "x (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.x"]], "y (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.y"]], "z (fipy.meshes.uniformgrid1d.uniformgrid1d property)": [[249, "fipy.meshes.uniformGrid1D.UniformGrid1D.z"]], "uniformgrid2d (class in fipy.meshes.uniformgrid2d)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D"]], "vtkcelldataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKCellDataSet"]], "vtkfacedataset (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.VTKFaceDataSet"]], "__add__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.__add__"]], "__div__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.__div__"]], "__getstate__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.__getstate__"]], "__radd__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.__radd__"]], "__repr__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.__repr__"]], "__sub__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.__sub__"]], "__truediv__() (fipy.meshes.uniformgrid2d.uniformgrid2d method)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.__truediv__"]], "aspect2d (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.aspect2D"]], "cellcenters (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellCenters"]], "cellfaceids (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.cellFaceIDs"]], "facesback (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBack"]], "facesbottom (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesBottom"]], "facesdown (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesDown"]], "facesfront (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesFront"]], "facesleft (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesLeft"]], "facesright (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesRight"]], "facestop (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesTop"]], "facesup (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.facesUp"]], "fipy.meshes.uniformgrid2d": [[250, "module-fipy.meshes.uniformGrid2D"]], "x (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.x"]], "y (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.y"]], "z (fipy.meshes.uniformgrid2d.uniformgrid2d property)": [[250, "fipy.meshes.uniformGrid2D.UniformGrid2D.z"]], "defaultasymmetricsolver (in module fipy.solvers)": [[251, "fipy.solvers.DefaultAsymmetricSolver"]], "defaultsolver (in module fipy.solvers)": [[251, "fipy.solvers.DefaultSolver"]], "dummysolver (in module fipy.solvers)": [[251, "fipy.solvers.DummySolver"]], "generalsolver (in module fipy.solvers)": [[251, "fipy.solvers.GeneralSolver"]], "serialsolvererror": [[251, "fipy.solvers.SerialSolverError"]], "__cause__ (fipy.solvers.serialsolvererror attribute)": [[251, "fipy.solvers.SerialSolverError.__cause__"]], "__context__ (fipy.solvers.serialsolvererror attribute)": [[251, "fipy.solvers.SerialSolverError.__context__"]], "__delattr__() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.__delattr__"]], "__getattribute__() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.__getattribute__"]], "__reduce__() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.__reduce__"]], "__repr__() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.__repr__"]], "__setattr__() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.__setattr__"]], "__str__() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.__str__"]], "add_note() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.add_note"]], "fipy.solvers": [[251, "module-fipy.solvers"]], "with_traceback() (fipy.solvers.serialsolvererror method)": [[251, "fipy.solvers.SerialSolverError.with_traceback"]], "absolutetoleranceconvergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.AbsoluteToleranceConvergence"]], "breakdowndivergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.BreakdownDivergence"]], "convergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.Convergence"]], "convergencebase (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.ConvergenceBase"]], "divergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.Divergence"]], "happybreakdownconvergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.HappyBreakdownConvergence"]], "illconditioneddivergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.IllConditionedDivergence"]], "illconditionedpreconditionerdivergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.IllConditionedPreconditionerDivergence"]], "iteratingconvergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.IteratingConvergence"]], "iterationconvergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.IterationConvergence"]], "iterationdivergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.IterationDivergence"]], "lossofaccuracyconvergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.LossOfAccuracyConvergence"]], "nulldivergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.NullDivergence"]], "outofrangedivergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.OutOfRangeDivergence"]], "preconditioningdivergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.PreconditioningDivergence"]], "rhszeroconvergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.RHSZeroConvergence"]], "relativetoleranceconvergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.RelativeToleranceConvergence"]], "stagnateddivergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.StagnatedDivergence"]], "tolerancedivergence (class in fipy.solvers.convergence)": [[252, "fipy.solvers.convergence.ToleranceDivergence"]], "__str__() (fipy.solvers.convergence.absolutetoleranceconvergence method)": [[252, "fipy.solvers.convergence.AbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.convergence.breakdowndivergence method)": [[252, "fipy.solvers.convergence.BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.convergence.convergence method)": [[252, "fipy.solvers.convergence.Convergence.__str__"]], "__str__() (fipy.solvers.convergence.convergencebase method)": [[252, "fipy.solvers.convergence.ConvergenceBase.__str__"]], "__str__() (fipy.solvers.convergence.divergence method)": [[252, "fipy.solvers.convergence.Divergence.__str__"]], "__str__() (fipy.solvers.convergence.happybreakdownconvergence method)": [[252, "fipy.solvers.convergence.HappyBreakdownConvergence.__str__"]], "__str__() (fipy.solvers.convergence.illconditioneddivergence method)": [[252, "fipy.solvers.convergence.IllConditionedDivergence.__str__"]], "__str__() (fipy.solvers.convergence.illconditionedpreconditionerdivergence method)": [[252, "fipy.solvers.convergence.IllConditionedPreconditionerDivergence.__str__"]], "__str__() (fipy.solvers.convergence.iteratingconvergence method)": [[252, "fipy.solvers.convergence.IteratingConvergence.__str__"]], "__str__() (fipy.solvers.convergence.iterationconvergence method)": [[252, "fipy.solvers.convergence.IterationConvergence.__str__"]], "__str__() (fipy.solvers.convergence.iterationdivergence method)": [[252, "fipy.solvers.convergence.IterationDivergence.__str__"]], "__str__() (fipy.solvers.convergence.lossofaccuracyconvergence method)": [[252, "fipy.solvers.convergence.LossOfAccuracyConvergence.__str__"]], "__str__() (fipy.solvers.convergence.nulldivergence method)": [[252, "fipy.solvers.convergence.NullDivergence.__str__"]], "__str__() (fipy.solvers.convergence.outofrangedivergence method)": [[252, "fipy.solvers.convergence.OutOfRangeDivergence.__str__"]], "__str__() (fipy.solvers.convergence.preconditioningdivergence method)": [[252, "fipy.solvers.convergence.PreconditioningDivergence.__str__"]], "__str__() (fipy.solvers.convergence.rhszeroconvergence method)": [[252, "fipy.solvers.convergence.RHSZeroConvergence.__str__"]], "__str__() (fipy.solvers.convergence.relativetoleranceconvergence method)": [[252, "fipy.solvers.convergence.RelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.convergence.stagnateddivergence method)": [[252, "fipy.solvers.convergence.StagnatedDivergence.__str__"]], "__str__() (fipy.solvers.convergence.tolerancedivergence method)": [[252, "fipy.solvers.convergence.ToleranceDivergence.__str__"]], "actual_code (fipy.solvers.convergence.convergencebase attribute)": [[252, "fipy.solvers.convergence.ConvergenceBase.actual_code"]], "criterion (fipy.solvers.convergence.convergencebase attribute)": [[252, "fipy.solvers.convergence.ConvergenceBase.criterion"]], "fipy.solvers.convergence": [[252, "module-fipy.solvers.convergence"]], "iterations (fipy.solvers.convergence.convergencebase attribute)": [[252, "fipy.solvers.convergence.ConvergenceBase.iterations"]], "residual (fipy.solvers.convergence.convergencebase attribute)": [[252, "fipy.solvers.convergence.ConvergenceBase.residual"]], "solver (fipy.solvers.convergence.convergencebase attribute)": [[252, "fipy.solvers.convergence.ConvergenceBase.solver"]], "status_code (fipy.solvers.convergence.convergencebase attribute)": [[252, "fipy.solvers.convergence.ConvergenceBase.status_code"]], "status_name (fipy.solvers.convergence.convergencebase attribute)": [[252, "fipy.solvers.convergence.ConvergenceBase.status_name"]], "tolerance_scale (fipy.solvers.convergence.convergencebase attribute)": [[252, "fipy.solvers.convergence.ConvergenceBase.tolerance_scale"]], "fipy.solvers.petsc": [[253, "module-fipy.solvers.petsc"]], "fipy.solvers.petsc.comms": [[254, "module-fipy.solvers.petsc.comms"]], "parallelpetsccommwrapper (class in fipy.solvers.petsc.comms.parallelpetsccommwrapper)": [[255, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.parallelpetsccommwrapper.parallelpetsccommwrapper method)": [[255, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.parallelpetsccommwrapper.parallelpetsccommwrapper method)": [[255, "fipy.solvers.petsc.comms.parallelPETScCommWrapper.ParallelPETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.parallelpetsccommwrapper": [[255, "module-fipy.solvers.petsc.comms.parallelPETScCommWrapper"]], "petsccommwrapper (class in fipy.solvers.petsc.comms.petsccommwrapper)": [[256, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.petsccommwrapper.petsccommwrapper method)": [[256, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.petsccommwrapper.petsccommwrapper method)": [[256, "fipy.solvers.petsc.comms.petscCommWrapper.PETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.petsccommwrapper": [[256, "module-fipy.solvers.petsc.comms.petscCommWrapper"]], "serialpetsccommwrapper (class in fipy.solvers.petsc.comms.serialpetsccommwrapper)": [[257, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper"]], "__getstate__() (fipy.solvers.petsc.comms.serialpetsccommwrapper.serialpetsccommwrapper method)": [[257, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.petsc.comms.serialpetsccommwrapper.serialpetsccommwrapper method)": [[257, "fipy.solvers.petsc.comms.serialPETScCommWrapper.SerialPETScCommWrapper.__repr__"]], "fipy.solvers.petsc.comms.serialpetsccommwrapper": [[257, "module-fipy.solvers.petsc.comms.serialPETScCommWrapper"]], "default_iterations (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[258, "fipy.solvers.petsc.dummySolver.DummySolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[258, "fipy.solvers.petsc.dummySolver.DummySolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[258, "fipy.solvers.petsc.dummySolver.DummySolver.DEFAULT_TOLERANCE"]], "dummysolver (class in fipy.solvers.petsc.dummysolver)": [[258, "fipy.solvers.petsc.dummySolver.DummySolver"]], "legacy_tolerance (fipy.solvers.petsc.dummysolver.dummysolver attribute)": [[258, "fipy.solvers.petsc.dummySolver.DummySolver.LEGACY_TOLERANCE"]], "__repr__() (fipy.solvers.petsc.dummysolver.dummysolver method)": [[258, "fipy.solvers.petsc.dummySolver.DummySolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.dummysolver.dummysolver property)": [[258, "fipy.solvers.petsc.dummySolver.DummySolver.default_tolerance"]], "fipy.solvers.petsc.dummysolver": [[258, "module-fipy.solvers.petsc.dummySolver"]], "default_iterations (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[259, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[259, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[259, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver attribute)": [[259, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.LEGACY_TOLERANCE"]], "linearbicgsolver (class in fipy.solvers.petsc.linearbicgsolver)": [[259, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver"]], "__repr__() (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver method)": [[259, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearbicgsolver.linearbicgsolver property)": [[259, "fipy.solvers.petsc.linearBicgSolver.LinearBicgSolver.default_tolerance"]], "fipy.solvers.petsc.linearbicgsolver": [[259, "module-fipy.solvers.petsc.linearBicgSolver"]], "default_iterations (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[260, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[260, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[260, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearcgssolver.linearcgssolver attribute)": [[260, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.petsc.linearcgssolver)": [[260, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.petsc.linearcgssolver.linearcgssolver method)": [[260, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearcgssolver.linearcgssolver property)": [[260, "fipy.solvers.petsc.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.petsc.linearcgssolver": [[260, "module-fipy.solvers.petsc.linearCGSSolver"]], "default_iterations (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[261, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[261, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[261, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.lineargmressolver.lineargmressolver attribute)": [[261, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.petsc.lineargmressolver)": [[261, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.petsc.lineargmressolver.lineargmressolver method)": [[261, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.lineargmressolver.lineargmressolver property)": [[261, "fipy.solvers.petsc.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.petsc.lineargmressolver": [[261, "module-fipy.solvers.petsc.linearGMRESSolver"]], "default_iterations (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[262, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[262, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[262, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearlusolver.linearlusolver attribute)": [[262, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.petsc.linearlusolver)": [[262, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.petsc.linearlusolver.linearlusolver method)": [[262, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearlusolver.linearlusolver property)": [[262, "fipy.solvers.petsc.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.petsc.linearlusolver": [[262, "module-fipy.solvers.petsc.linearLUSolver"]], "default_iterations (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver attribute)": [[263, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver attribute)": [[263, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver attribute)": [[263, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver attribute)": [[263, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.petsc.linearpcgsolver)": [[263, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver method)": [[263, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.linearpcgsolver.linearpcgsolver property)": [[263, "fipy.solvers.petsc.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.petsc.linearpcgsolver": [[263, "module-fipy.solvers.petsc.linearPCGSolver"]], "ksp_absolutetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_AbsoluteToleranceConvergence"]], "ksp_breakdownbicgdivergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownBICGDivergence"]], "ksp_breakdowndivergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownDivergence"]], "ksp_happybreakdownconvergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_HappyBreakdownConvergence"]], "ksp_indefinitematrixdivergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_IndefiniteMatrixDivergence"]], "ksp_indefinitepreconditionerdivergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_IndefinitePreconditionerDivergence"]], "ksp_iteratingconvergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_IteratingConvergence"]], "ksp_iterationconvergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_IterationConvergence"]], "ksp_iterationdivergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_IterationDivergence"]], "ksp_nanorinfdivergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_NanOrInfDivergence"]], "ksp_nonsymmetricdivergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_NonSymmetricDivergence"]], "ksp_normalabsolutetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_NormalAbsoluteToleranceConvergence"]], "ksp_normalrelativetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_NormalRelativeToleranceConvergence"]], "ksp_nulldivergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_NullDivergence"]], "ksp_preconditioningdivergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_PreconditioningDivergence"]], "ksp_relativetoleranceconvergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_RelativeToleranceConvergence"]], "ksp_tolerancedivergence (class in fipy.solvers.petsc.petscconvergence)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_ToleranceDivergence"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_absolutetoleranceconvergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_AbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_breakdownbicgdivergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownBICGDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_breakdowndivergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_happybreakdownconvergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_HappyBreakdownConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_indefinitematrixdivergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_IndefiniteMatrixDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_indefinitepreconditionerdivergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_IndefinitePreconditionerDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_iteratingconvergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_IteratingConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_iterationconvergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_IterationConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_iterationdivergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_IterationDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_nanorinfdivergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_NanOrInfDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_nonsymmetricdivergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_NonSymmetricDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_normalabsolutetoleranceconvergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_NormalAbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_normalrelativetoleranceconvergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_NormalRelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_nulldivergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_NullDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_preconditioningdivergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_PreconditioningDivergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_relativetoleranceconvergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_RelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.petsc.petscconvergence.ksp_tolerancedivergence method)": [[264, "fipy.solvers.petsc.petscConvergence.KSP_ToleranceDivergence.__str__"]], "fipy.solvers.petsc.petscconvergence": [[264, "module-fipy.solvers.petsc.petscConvergence"]], "default_iterations (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[265, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[265, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[265, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver attribute)": [[265, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.LEGACY_TOLERANCE"]], "petsckrylovsolver (class in fipy.solvers.petsc.petsckrylovsolver)": [[265, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver"]], "__repr__() (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver method)": [[265, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.petsckrylovsolver.petsckrylovsolver property)": [[265, "fipy.solvers.petsc.petscKrylovSolver.PETScKrylovSolver.default_tolerance"]], "fipy.solvers.petsc.petsckrylovsolver": [[265, "module-fipy.solvers.petsc.petscKrylovSolver"]], "default_iterations (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[266, "fipy.solvers.petsc.petscSolver.PETScSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[266, "fipy.solvers.petsc.petscSolver.PETScSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[266, "fipy.solvers.petsc.petscSolver.PETScSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.petsc.petscsolver.petscsolver attribute)": [[266, "fipy.solvers.petsc.petscSolver.PETScSolver.LEGACY_TOLERANCE"]], "petscsolver (class in fipy.solvers.petsc.petscsolver)": [[266, "fipy.solvers.petsc.petscSolver.PETScSolver"]], "__repr__() (fipy.solvers.petsc.petscsolver.petscsolver method)": [[266, "fipy.solvers.petsc.petscSolver.PETScSolver.__repr__"]], "default_tolerance (fipy.solvers.petsc.petscsolver.petscsolver property)": [[266, "fipy.solvers.petsc.petscSolver.PETScSolver.default_tolerance"]], "fipy.solvers.petsc.petscsolver": [[266, "module-fipy.solvers.petsc.petscSolver"]], "defaultpreconditioner (class in fipy.solvers.petsc.preconditioners)": [[267, "fipy.solvers.petsc.preconditioners.DefaultPreconditioner"]], "icpreconditioner (class in fipy.solvers.petsc.preconditioners)": [[267, "fipy.solvers.petsc.preconditioners.ICPreconditioner"]], "ilupreconditioner (class in fipy.solvers.petsc.preconditioners)": [[267, "fipy.solvers.petsc.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.petsc.preconditioners)": [[267, "fipy.solvers.petsc.preconditioners.JacobiPreconditioner"]], "lupreconditioner (class in fipy.solvers.petsc.preconditioners)": [[267, "fipy.solvers.petsc.preconditioners.LUPreconditioner"]], "ssorpreconditioner (class in fipy.solvers.petsc.preconditioners)": [[267, "fipy.solvers.petsc.preconditioners.SSORPreconditioner"]], "fipy.solvers.petsc.preconditioners": [[267, "module-fipy.solvers.petsc.preconditioners"]], "defaultpreconditioner (class in fipy.solvers.petsc.preconditioners.defaultpreconditioner)": [[268, "fipy.solvers.petsc.preconditioners.defaultPreconditioner.DefaultPreconditioner"]], "fipy.solvers.petsc.preconditioners.defaultpreconditioner": [[268, "module-fipy.solvers.petsc.preconditioners.defaultPreconditioner"]], "icpreconditioner (class in fipy.solvers.petsc.preconditioners.icpreconditioner)": [[269, "fipy.solvers.petsc.preconditioners.icPreconditioner.ICPreconditioner"]], "fipy.solvers.petsc.preconditioners.icpreconditioner": [[269, "module-fipy.solvers.petsc.preconditioners.icPreconditioner"]], "ilupreconditioner (class in fipy.solvers.petsc.preconditioners.ilupreconditioner)": [[270, "fipy.solvers.petsc.preconditioners.iluPreconditioner.ILUPreconditioner"]], "fipy.solvers.petsc.preconditioners.ilupreconditioner": [[270, "module-fipy.solvers.petsc.preconditioners.iluPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.petsc.preconditioners.jacobipreconditioner)": [[271, "fipy.solvers.petsc.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.petsc.preconditioners.jacobipreconditioner": [[271, "module-fipy.solvers.petsc.preconditioners.jacobiPreconditioner"]], "lupreconditioner (class in fipy.solvers.petsc.preconditioners.lupreconditioner)": [[272, "fipy.solvers.petsc.preconditioners.luPreconditioner.LUPreconditioner"]], "fipy.solvers.petsc.preconditioners.lupreconditioner": [[272, "module-fipy.solvers.petsc.preconditioners.luPreconditioner"]], "petscpreconditioner (class in fipy.solvers.petsc.preconditioners.petscpreconditioner)": [[273, "fipy.solvers.petsc.preconditioners.petscPreconditioner.PETScPreconditioner"]], "fipy.solvers.petsc.preconditioners.petscpreconditioner": [[273, "module-fipy.solvers.petsc.preconditioners.petscPreconditioner"]], "ssorpreconditioner (class in fipy.solvers.petsc.preconditioners.ssorpreconditioner)": [[274, "fipy.solvers.petsc.preconditioners.ssorPreconditioner.SSORPreconditioner"]], "fipy.solvers.petsc.preconditioners.ssorpreconditioner": [[274, "module-fipy.solvers.petsc.preconditioners.ssorPreconditioner"]], "matrixmodifyingpreconditioner (class in fipy.solvers.preconditioner)": [[275, "fipy.solvers.preconditioner.MatrixModifyingPreconditioner"]], "preconditioner (class in fipy.solvers.preconditioner)": [[275, "fipy.solvers.preconditioner.Preconditioner"]], "solvermodifyingpreconditioner (class in fipy.solvers.preconditioner)": [[275, "fipy.solvers.preconditioner.SolverModifyingPreconditioner"]], "fipy.solvers.preconditioner": [[275, "module-fipy.solvers.preconditioner"]], "fipy.solvers.pyamg": [[276, "module-fipy.solvers.pyAMG"]], "default_iterations (fipy.solvers.pyamg.linearcgssolver.linearcgssolver attribute)": [[277, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.linearcgssolver.linearcgssolver attribute)": [[277, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.linearcgssolver.linearcgssolver attribute)": [[277, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.linearcgssolver.linearcgssolver attribute)": [[277, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.pyamg.linearcgssolver)": [[277, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.pyamg.linearcgssolver.linearcgssolver method)": [[277, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.linearcgssolver.linearcgssolver property)": [[277, "fipy.solvers.pyAMG.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.pyamg.linearcgssolver": [[277, "module-fipy.solvers.pyAMG.linearCGSSolver"]], "default_iterations (fipy.solvers.pyamg.lineargmressolver.lineargmressolver attribute)": [[278, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.lineargmressolver.lineargmressolver attribute)": [[278, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.lineargmressolver.lineargmressolver attribute)": [[278, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.lineargmressolver.lineargmressolver attribute)": [[278, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.pyamg.lineargmressolver)": [[278, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamg.lineargmressolver.lineargmressolver method)": [[278, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.lineargmressolver.lineargmressolver property)": [[278, "fipy.solvers.pyAMG.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.pyamg.lineargmressolver": [[278, "module-fipy.solvers.pyAMG.linearGMRESSolver"]], "default_iterations (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver attribute)": [[279, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver attribute)": [[279, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver attribute)": [[279, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver attribute)": [[279, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.LEGACY_TOLERANCE"]], "lineargeneralsolver (class in fipy.solvers.pyamg.lineargeneralsolver)": [[279, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver"]], "__repr__() (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver method)": [[279, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.lineargeneralsolver.lineargeneralsolver property)": [[279, "fipy.solvers.pyAMG.linearGeneralSolver.LinearGeneralSolver.default_tolerance"]], "fipy.solvers.pyamg.lineargeneralsolver": [[279, "module-fipy.solvers.pyAMG.linearGeneralSolver"]], "default_iterations (fipy.solvers.pyamg.linearlusolver.linearlusolver attribute)": [[280, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.linearlusolver.linearlusolver attribute)": [[280, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.linearlusolver.linearlusolver attribute)": [[280, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.linearlusolver.linearlusolver attribute)": [[280, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.pyamg.linearlusolver)": [[280, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamg.linearlusolver.linearlusolver method)": [[280, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.linearlusolver.linearlusolver property)": [[280, "fipy.solvers.pyAMG.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.pyamg.linearlusolver": [[280, "module-fipy.solvers.pyAMG.linearLUSolver"]], "default_iterations (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver attribute)": [[281, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver attribute)": [[281, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver attribute)": [[281, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver attribute)": [[281, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.pyamg.linearpcgsolver)": [[281, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver method)": [[281, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamg.linearpcgsolver.linearpcgsolver property)": [[281, "fipy.solvers.pyAMG.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.pyamg.linearpcgsolver": [[281, "module-fipy.solvers.pyAMG.linearPCGSolver"]], "fipy.solvers.pyamg.preconditioners": [[282, "module-fipy.solvers.pyAMG.preconditioners"]], "smoothedaggregationpreconditioner (class in fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner)": [[283, "fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner.SmoothedAggregationPreconditioner"]], "fipy.solvers.pyamg.preconditioners.smoothedaggregationpreconditioner": [[283, "module-fipy.solvers.pyAMG.preconditioners.smoothedAggregationPreconditioner"]], "fipy.solvers.pyamgx": [[284, "module-fipy.solvers.pyamgx"]], "aggregationamgsolver (class in fipy.solvers.pyamgx.aggregationamgsolver)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver"]], "default_iterations (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver attribute)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.LEGACY_TOLERANCE"]], "__repr__() (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver method)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.aggregationamgsolver.aggregationamgsolver property)": [[285, "fipy.solvers.pyamgx.aggregationAMGSolver.AggregationAMGSolver.default_tolerance"]], "fipy.solvers.pyamgx.aggregationamgsolver": [[285, "module-fipy.solvers.pyamgx.aggregationAMGSolver"]], "classicalamgsolver (class in fipy.solvers.pyamgx.classicalamgsolver)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver"]], "default_iterations (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver attribute)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.LEGACY_TOLERANCE"]], "__repr__() (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver method)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.classicalamgsolver.classicalamgsolver property)": [[286, "fipy.solvers.pyamgx.classicalAMGSolver.ClassicalAMGSolver.default_tolerance"]], "fipy.solvers.pyamgx.classicalamgsolver": [[286, "module-fipy.solvers.pyamgx.classicalAMGSolver"]], "default_iterations (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver attribute)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.LEGACY_TOLERANCE"]], "linearbicgstabsolver (class in fipy.solvers.pyamgx.linearbicgstabsolver)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver"]], "__repr__() (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver method)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearbicgstabsolver.linearbicgstabsolver property)": [[287, "fipy.solvers.pyamgx.linearBiCGStabSolver.LinearBiCGStabSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearbicgstabsolver": [[287, "module-fipy.solvers.pyamgx.linearBiCGStabSolver"]], "default_iterations (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[288, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[288, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[288, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[288, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver attribute)": [[288, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.LEGACY_TOLERANCE"]], "linearfgmressolver (class in fipy.solvers.pyamgx.linearfgmressolver)": [[288, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver method)": [[288, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearfgmressolver.linearfgmressolver property)": [[288, "fipy.solvers.pyamgx.linearFGMRESSolver.LinearFGMRESSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearfgmressolver": [[288, "module-fipy.solvers.pyamgx.linearFGMRESSolver"]], "default_iterations (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver attribute)": [[289, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.pyamgx.lineargmressolver)": [[289, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver method)": [[289, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.lineargmressolver.lineargmressolver property)": [[289, "fipy.solvers.pyamgx.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.pyamgx.lineargmressolver": [[289, "module-fipy.solvers.pyamgx.linearGMRESSolver"]], "default_iterations (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[290, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[290, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[290, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearlusolver.linearlusolver attribute)": [[290, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.pyamgx.linearlusolver)": [[290, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pyamgx.linearlusolver.linearlusolver method)": [[290, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearlusolver.linearlusolver property)": [[290, "fipy.solvers.pyamgx.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearlusolver": [[290, "module-fipy.solvers.pyamgx.linearLUSolver"]], "default_iterations (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[291, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[291, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[291, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[291, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver attribute)": [[291, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.pyamgx.linearpcgsolver)": [[291, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver method)": [[291, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.linearpcgsolver.linearpcgsolver property)": [[291, "fipy.solvers.pyamgx.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.pyamgx.linearpcgsolver": [[291, "module-fipy.solvers.pyamgx.linearPCGSolver"]], "amgpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.AMGPreconditioner"]], "aggregationamgpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.AggregationAMGPreconditioner"]], "bicgstabpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.BiCGStabPreconditioner"]], "cgpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.CGPreconditioner"]], "dilupreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.DILUPreconditioner"]], "fgmrespreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.FGMRESPreconditioner"]], "gaussseidelpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.GaussSeidelPreconditioner"]], "ilupreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.JacobiPreconditioner"]], "polynomialpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.PolynomialPreconditioner"]], "pyamgxpreconditioner (class in fipy.solvers.pyamgx.preconditioners)": [[292, "fipy.solvers.pyamgx.preconditioners.PyAMGXPreconditioner"]], "fipy.solvers.pyamgx.preconditioners": [[292, "module-fipy.solvers.pyamgx.preconditioners"]], "default_iterations (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_PRECONDITIONER"]], "default_smoother (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_SMOOTHER"]], "default_tolerance (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver attribute)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.LEGACY_TOLERANCE"]], "pyamgxsolver (class in fipy.solvers.pyamgx.pyamgxsolver)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver"]], "__repr__() (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver method)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.__repr__"]], "default_tolerance (fipy.solvers.pyamgx.pyamgxsolver.pyamgxsolver property)": [[293, "fipy.solvers.pyamgx.pyAMGXSolver.PyAMGXSolver.default_tolerance"]], "fipy.solvers.pyamgx.pyamgxsolver": [[293, "module-fipy.solvers.pyamgx.pyAMGXSolver"]], "__str__() (fipy.solvers.pyamgx.pyamgxconvergence.pyamgx_breakdowndivergence method)": [[294, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.pyamgx.pyamgxconvergence.pyamgx_convergence method)": [[294, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_Convergence.__str__"]], "__str__() (fipy.solvers.pyamgx.pyamgxconvergence.pyamgx_iterationdivergence method)": [[294, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_IterationDivergence.__str__"]], "fipy.solvers.pyamgx.pyamgxconvergence": [[294, "module-fipy.solvers.pyamgx.pyamgxConvergence"]], "pyamgx_breakdowndivergence (class in fipy.solvers.pyamgx.pyamgxconvergence)": [[294, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_BreakdownDivergence"]], "pyamgx_convergence (class in fipy.solvers.pyamgx.pyamgxconvergence)": [[294, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_Convergence"]], "pyamgx_iterationdivergence (class in fipy.solvers.pyamgx.pyamgxconvergence)": [[294, "fipy.solvers.pyamgx.pyamgxConvergence.pyamgx_IterationDivergence"]], "smoother (class in fipy.solvers.pyamgx.smoothers)": [[295, "fipy.solvers.pyamgx.smoothers.Smoother"]], "fipy.solvers.pyamgx.smoothers": [[295, "module-fipy.solvers.pyamgx.smoothers"]], "fipy.solvers.pysparse": [[296, "module-fipy.solvers.pysparse"]], "default_iterations (fipy.solvers.pysparse.linearcgssolver.linearcgssolver attribute)": [[297, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearcgssolver.linearcgssolver attribute)": [[297, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearcgssolver.linearcgssolver attribute)": [[297, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearcgssolver.linearcgssolver attribute)": [[297, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.pysparse.linearcgssolver)": [[297, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.pysparse.linearcgssolver.linearcgssolver method)": [[297, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearcgssolver.linearcgssolver property)": [[297, "fipy.solvers.pysparse.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.pysparse.linearcgssolver": [[297, "module-fipy.solvers.pysparse.linearCGSSolver"]], "default_iterations (fipy.solvers.pysparse.lineargmressolver.lineargmressolver attribute)": [[298, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.lineargmressolver.lineargmressolver attribute)": [[298, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.lineargmressolver.lineargmressolver attribute)": [[298, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.lineargmressolver.lineargmressolver attribute)": [[298, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.pysparse.lineargmressolver)": [[298, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.pysparse.lineargmressolver.lineargmressolver method)": [[298, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.lineargmressolver.lineargmressolver property)": [[298, "fipy.solvers.pysparse.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.pysparse.lineargmressolver": [[298, "module-fipy.solvers.pysparse.linearGMRESSolver"]], "default_iterations (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver attribute)": [[299, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver attribute)": [[299, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver attribute)": [[299, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver attribute)": [[299, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.LEGACY_TOLERANCE"]], "linearinitialsolver (class in fipy.solvers.pysparse.linearinitialsolver)": [[299, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver"]], "__repr__() (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver method)": [[299, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearinitialsolver.linearinitialsolver property)": [[299, "fipy.solvers.pysparse.linearInitialSolver.LinearInitialSolver.default_tolerance"]], "fipy.solvers.pysparse.linearinitialsolver": [[299, "module-fipy.solvers.pysparse.linearInitialSolver"]], "default_iterations (fipy.solvers.pysparse.linearjorsolver.linearjorsolver attribute)": [[300, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearjorsolver.linearjorsolver attribute)": [[300, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearjorsolver.linearjorsolver attribute)": [[300, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearjorsolver.linearjorsolver attribute)": [[300, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.LEGACY_TOLERANCE"]], "linearjorsolver (class in fipy.solvers.pysparse.linearjorsolver)": [[300, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver"]], "__repr__() (fipy.solvers.pysparse.linearjorsolver.linearjorsolver method)": [[300, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearjorsolver.linearjorsolver property)": [[300, "fipy.solvers.pysparse.linearJORSolver.LinearJORSolver.default_tolerance"]], "fipy.solvers.pysparse.linearjorsolver": [[300, "module-fipy.solvers.pysparse.linearJORSolver"]], "default_iterations (fipy.solvers.pysparse.linearlusolver.linearlusolver attribute)": [[301, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearlusolver.linearlusolver attribute)": [[301, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearlusolver.linearlusolver attribute)": [[301, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearlusolver.linearlusolver attribute)": [[301, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.pysparse.linearlusolver)": [[301, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.pysparse.linearlusolver.linearlusolver method)": [[301, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearlusolver.linearlusolver property)": [[301, "fipy.solvers.pysparse.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.pysparse.linearlusolver": [[301, "module-fipy.solvers.pysparse.linearLUSolver"]], "default_iterations (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver attribute)": [[302, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver attribute)": [[302, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver attribute)": [[302, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver attribute)": [[302, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.pysparse.linearpcgsolver)": [[302, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver method)": [[302, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearpcgsolver.linearpcgsolver property)": [[302, "fipy.solvers.pysparse.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.pysparse.linearpcgsolver": [[302, "module-fipy.solvers.pysparse.linearPCGSolver"]], "default_iterations (fipy.solvers.pysparse.linearrhssolver.linearrhssolver attribute)": [[303, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.linearrhssolver.linearrhssolver attribute)": [[303, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.linearrhssolver.linearrhssolver attribute)": [[303, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.linearrhssolver.linearrhssolver attribute)": [[303, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.LEGACY_TOLERANCE"]], "linearrhssolver (class in fipy.solvers.pysparse.linearrhssolver)": [[303, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver"]], "__repr__() (fipy.solvers.pysparse.linearrhssolver.linearrhssolver method)": [[303, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.linearrhssolver.linearrhssolver property)": [[303, "fipy.solvers.pysparse.linearRHSSolver.LinearRHSSolver.default_tolerance"]], "fipy.solvers.pysparse.linearrhssolver": [[303, "module-fipy.solvers.pysparse.linearRHSSolver"]], "jacobipreconditioner (class in fipy.solvers.pysparse.preconditioners)": [[304, "fipy.solvers.pysparse.preconditioners.JacobiPreconditioner"]], "ssorpreconditioner (class in fipy.solvers.pysparse.preconditioners)": [[304, "fipy.solvers.pysparse.preconditioners.SSORPreconditioner"]], "fipy.solvers.pysparse.preconditioners": [[304, "module-fipy.solvers.pysparse.preconditioners"]], "jacobipreconditioner (class in fipy.solvers.pysparse.preconditioners.jacobipreconditioner)": [[305, "fipy.solvers.pysparse.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.pysparse.preconditioners.jacobipreconditioner": [[305, "module-fipy.solvers.pysparse.preconditioners.jacobiPreconditioner"]], "pysparsepreconditioner (class in fipy.solvers.pysparse.preconditioners.pysparsepreconditioner)": [[306, "fipy.solvers.pysparse.preconditioners.pysparsePreconditioner.PysparsePreconditioner"]], "fipy.solvers.pysparse.preconditioners.pysparsepreconditioner": [[306, "module-fipy.solvers.pysparse.preconditioners.pysparsePreconditioner"]], "ssorpreconditioner (class in fipy.solvers.pysparse.preconditioners.ssorpreconditioner)": [[307, "fipy.solvers.pysparse.preconditioners.ssorPreconditioner.SSORPreconditioner"]], "fipy.solvers.pysparse.preconditioners.ssorpreconditioner": [[307, "module-fipy.solvers.pysparse.preconditioners.ssorPreconditioner"]], "pysparse_absolutetoleranceconvergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_AbsoluteToleranceConvergence"]], "pysparse_illconditioneddivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedDivergence"]], "pysparse_illconditionedpreconditionerdivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedPreconditionerDivergence"]], "pysparse_iterationdivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IterationDivergence"]], "pysparse_nonposdefpreconditioningdivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_NonPosDefPreconditioningDivergence"]], "pysparse_outofrangedivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_OutOfRangeDivergence"]], "pysparse_rhszeroconvergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RHSZeroConvergence"]], "pysparse_relativetoleranceconvergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RelativeToleranceConvergence"]], "pysparse_stagnateddivergence (class in fipy.solvers.pysparse.pysparseconvergence)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_StagnatedDivergence"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_absolutetoleranceconvergence method)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_AbsoluteToleranceConvergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_illconditioneddivergence method)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_illconditionedpreconditionerdivergence method)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IllConditionedPreconditionerDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_iterationdivergence method)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_IterationDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_nonposdefpreconditioningdivergence method)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_NonPosDefPreconditioningDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_outofrangedivergence method)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_OutOfRangeDivergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_rhszeroconvergence method)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RHSZeroConvergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_relativetoleranceconvergence method)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_RelativeToleranceConvergence.__str__"]], "__str__() (fipy.solvers.pysparse.pysparseconvergence.pysparse_stagnateddivergence method)": [[308, "fipy.solvers.pysparse.pysparseConvergence.Pysparse_StagnatedDivergence.__str__"]], "fipy.solvers.pysparse.pysparseconvergence": [[308, "module-fipy.solvers.pysparse.pysparseConvergence"]], "default_iterations (fipy.solvers.pysparse.pysparsesolver.pysparsesolver attribute)": [[309, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.pysparse.pysparsesolver.pysparsesolver attribute)": [[309, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.pysparse.pysparsesolver.pysparsesolver attribute)": [[309, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.pysparse.pysparsesolver.pysparsesolver attribute)": [[309, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.LEGACY_TOLERANCE"]], "pysparsesolver (class in fipy.solvers.pysparse.pysparsesolver)": [[309, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver"]], "__repr__() (fipy.solvers.pysparse.pysparsesolver.pysparsesolver method)": [[309, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.__repr__"]], "default_tolerance (fipy.solvers.pysparse.pysparsesolver.pysparsesolver property)": [[309, "fipy.solvers.pysparse.pysparseSolver.PysparseSolver.default_tolerance"]], "fipy.solvers.pysparse.pysparsesolver": [[309, "module-fipy.solvers.pysparse.pysparseSolver"]], "fipy.solvers.pysparsematrixsolver": [[310, "module-fipy.solvers.pysparseMatrixSolver"]], "fipy.solvers.scipy": [[311, "module-fipy.solvers.scipy"]], "default_iterations (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[312, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[312, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[312, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver attribute)": [[312, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.LEGACY_TOLERANCE"]], "linearbicgstabsolver (class in fipy.solvers.scipy.linearbicgstabsolver)": [[312, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver method)": [[312, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearbicgstabsolver.linearbicgstabsolver property)": [[312, "fipy.solvers.scipy.linearBicgstabSolver.LinearBicgstabSolver.default_tolerance"]], "fipy.solvers.scipy.linearbicgstabsolver": [[312, "module-fipy.solvers.scipy.linearBicgstabSolver"]], "default_iterations (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[313, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[313, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[313, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearcgssolver.linearcgssolver attribute)": [[313, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.scipy.linearcgssolver)": [[313, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.scipy.linearcgssolver.linearcgssolver method)": [[313, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearcgssolver.linearcgssolver property)": [[313, "fipy.solvers.scipy.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.scipy.linearcgssolver": [[313, "module-fipy.solvers.scipy.linearCGSSolver"]], "default_iterations (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[314, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[314, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[314, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.lineargmressolver.lineargmressolver attribute)": [[314, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.scipy.lineargmressolver)": [[314, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.scipy.lineargmressolver.lineargmressolver method)": [[314, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.lineargmressolver.lineargmressolver property)": [[314, "fipy.solvers.scipy.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.scipy.lineargmressolver": [[314, "module-fipy.solvers.scipy.linearGMRESSolver"]], "default_iterations (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[315, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[315, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[315, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearlusolver.linearlusolver attribute)": [[315, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.scipy.linearlusolver)": [[315, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.scipy.linearlusolver.linearlusolver method)": [[315, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearlusolver.linearlusolver property)": [[315, "fipy.solvers.scipy.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.scipy.linearlusolver": [[315, "module-fipy.solvers.scipy.linearLUSolver"]], "default_iterations (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver attribute)": [[316, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver attribute)": [[316, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver attribute)": [[316, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver attribute)": [[316, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.scipy.linearpcgsolver)": [[316, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver method)": [[316, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.linearpcgsolver.linearpcgsolver property)": [[316, "fipy.solvers.scipy.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.scipy.linearpcgsolver": [[316, "module-fipy.solvers.scipy.linearPCGSolver"]], "ilupreconditioner (class in fipy.solvers.scipy.preconditioners)": [[317, "fipy.solvers.scipy.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.scipy.preconditioners)": [[317, "fipy.solvers.scipy.preconditioners.JacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners": [[317, "module-fipy.solvers.scipy.preconditioners"]], "ilupreconditioner (class in fipy.solvers.scipy.preconditioners.ilupreconditioner)": [[318, "fipy.solvers.scipy.preconditioners.iluPreconditioner.ILUPreconditioner"]], "fipy.solvers.scipy.preconditioners.ilupreconditioner": [[318, "module-fipy.solvers.scipy.preconditioners.iluPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.scipy.preconditioners.jacobipreconditioner)": [[319, "fipy.solvers.scipy.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.scipy.preconditioners.jacobipreconditioner": [[319, "module-fipy.solvers.scipy.preconditioners.jacobiPreconditioner"]], "scipypreconditioner (class in fipy.solvers.scipy.preconditioners.scipypreconditioner)": [[320, "fipy.solvers.scipy.preconditioners.scipyPreconditioner.ScipyPreconditioner"]], "fipy.solvers.scipy.preconditioners.scipypreconditioner": [[320, "module-fipy.solvers.scipy.preconditioners.scipyPreconditioner"]], "scipy_breakdowndivergence (class in fipy.solvers.scipy.scipyconvergence)": [[321, "fipy.solvers.scipy.scipyConvergence.SciPy_BreakdownDivergence"]], "scipy_convergence (class in fipy.solvers.scipy.scipyconvergence)": [[321, "fipy.solvers.scipy.scipyConvergence.SciPy_Convergence"]], "scipy_iterationdivergence (class in fipy.solvers.scipy.scipyconvergence)": [[321, "fipy.solvers.scipy.scipyConvergence.SciPy_IterationDivergence"]], "__str__() (fipy.solvers.scipy.scipyconvergence.scipy_breakdowndivergence method)": [[321, "fipy.solvers.scipy.scipyConvergence.SciPy_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.scipy.scipyconvergence.scipy_convergence method)": [[321, "fipy.solvers.scipy.scipyConvergence.SciPy_Convergence.__str__"]], "__str__() (fipy.solvers.scipy.scipyconvergence.scipy_iterationdivergence method)": [[321, "fipy.solvers.scipy.scipyConvergence.SciPy_IterationDivergence.__str__"]], "fipy.solvers.scipy.scipyconvergence": [[321, "module-fipy.solvers.scipy.scipyConvergence"]], "default_iterations (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[322, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[322, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[322, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver attribute)": [[322, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.LEGACY_TOLERANCE"]], "scipykrylovsolver (class in fipy.solvers.scipy.scipykrylovsolver)": [[322, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver"]], "__repr__() (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver method)": [[322, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.scipykrylovsolver.scipykrylovsolver property)": [[322, "fipy.solvers.scipy.scipyKrylovSolver.ScipyKrylovSolver.default_tolerance"]], "fipy.solvers.scipy.scipykrylovsolver": [[322, "module-fipy.solvers.scipy.scipyKrylovSolver"]], "default_iterations (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[323, "fipy.solvers.scipy.scipySolver.ScipySolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[323, "fipy.solvers.scipy.scipySolver.ScipySolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[323, "fipy.solvers.scipy.scipySolver.ScipySolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.scipy.scipysolver.scipysolver attribute)": [[323, "fipy.solvers.scipy.scipySolver.ScipySolver.LEGACY_TOLERANCE"]], "scipysolver (class in fipy.solvers.scipy.scipysolver)": [[323, "fipy.solvers.scipy.scipySolver.ScipySolver"]], "__repr__() (fipy.solvers.scipy.scipysolver.scipysolver method)": [[323, "fipy.solvers.scipy.scipySolver.ScipySolver.__repr__"]], "default_tolerance (fipy.solvers.scipy.scipysolver.scipysolver property)": [[323, "fipy.solvers.scipy.scipySolver.ScipySolver.default_tolerance"]], "fipy.solvers.scipy.scipysolver": [[323, "module-fipy.solvers.scipy.scipySolver"]], "breakdownwarning": [[324, "fipy.solvers.solver.BreakdownWarning"]], "default_iterations (fipy.solvers.solver.solver attribute)": [[324, "fipy.solvers.solver.Solver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.solver.solver attribute)": [[324, "fipy.solvers.solver.Solver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.solver.solver attribute)": [[324, "fipy.solvers.solver.Solver.DEFAULT_TOLERANCE"]], "illconditionedpreconditionerwarning": [[324, "fipy.solvers.solver.IllConditionedPreconditionerWarning"]], "illegalinputorbreakdownwarning": [[324, "fipy.solvers.solver.IllegalInputOrBreakdownWarning"]], "legacy_tolerance (fipy.solvers.solver.solver attribute)": [[324, "fipy.solvers.solver.Solver.LEGACY_TOLERANCE"]], "lossofprecisionwarning": [[324, "fipy.solvers.solver.LossOfPrecisionWarning"]], "matrixillconditionedwarning": [[324, "fipy.solvers.solver.MatrixIllConditionedWarning"]], "maximumiterationwarning": [[324, "fipy.solvers.solver.MaximumIterationWarning"]], "normalconvergence": [[324, "fipy.solvers.solver.NormalConvergence"]], "parameterwarning": [[324, "fipy.solvers.solver.ParameterWarning"]], "preconditionernotpositivedefinitewarning": [[324, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning"]], "preconditionerwarning": [[324, "fipy.solvers.solver.PreconditionerWarning"]], "scalarquantityoutofrangewarning": [[324, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning"]], "solver (class in fipy.solvers.solver)": [[324, "fipy.solvers.solver.Solver"]], "solverconvergencewarning": [[324, "fipy.solvers.solver.SolverConvergenceWarning"]], "stagnatedsolverwarning": [[324, "fipy.solvers.solver.StagnatedSolverWarning"]], "__cause__ (fipy.solvers.solver.breakdownwarning attribute)": [[324, "fipy.solvers.solver.BreakdownWarning.__cause__"]], "__cause__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[324, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.illegalinputorbreakdownwarning attribute)": [[324, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__cause__"]], "__cause__ (fipy.solvers.solver.lossofprecisionwarning attribute)": [[324, "fipy.solvers.solver.LossOfPrecisionWarning.__cause__"]], "__cause__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[324, "fipy.solvers.solver.MatrixIllConditionedWarning.__cause__"]], "__cause__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[324, "fipy.solvers.solver.MaximumIterationWarning.__cause__"]], "__cause__ (fipy.solvers.solver.normalconvergence attribute)": [[324, "fipy.solvers.solver.NormalConvergence.__cause__"]], "__cause__ (fipy.solvers.solver.parameterwarning attribute)": [[324, "fipy.solvers.solver.ParameterWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[324, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__cause__"]], "__cause__ (fipy.solvers.solver.preconditionerwarning attribute)": [[324, "fipy.solvers.solver.PreconditionerWarning.__cause__"]], "__cause__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[324, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__cause__"]], "__cause__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[324, "fipy.solvers.solver.SolverConvergenceWarning.__cause__"]], "__cause__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[324, "fipy.solvers.solver.StagnatedSolverWarning.__cause__"]], "__context__ (fipy.solvers.solver.breakdownwarning attribute)": [[324, "fipy.solvers.solver.BreakdownWarning.__context__"]], "__context__ (fipy.solvers.solver.illconditionedpreconditionerwarning attribute)": [[324, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.illegalinputorbreakdownwarning attribute)": [[324, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__context__"]], "__context__ (fipy.solvers.solver.lossofprecisionwarning attribute)": [[324, "fipy.solvers.solver.LossOfPrecisionWarning.__context__"]], "__context__ (fipy.solvers.solver.matrixillconditionedwarning attribute)": [[324, "fipy.solvers.solver.MatrixIllConditionedWarning.__context__"]], "__context__ (fipy.solvers.solver.maximumiterationwarning attribute)": [[324, "fipy.solvers.solver.MaximumIterationWarning.__context__"]], "__context__ (fipy.solvers.solver.normalconvergence attribute)": [[324, "fipy.solvers.solver.NormalConvergence.__context__"]], "__context__ (fipy.solvers.solver.parameterwarning attribute)": [[324, "fipy.solvers.solver.ParameterWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionernotpositivedefinitewarning attribute)": [[324, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__context__"]], "__context__ (fipy.solvers.solver.preconditionerwarning attribute)": [[324, "fipy.solvers.solver.PreconditionerWarning.__context__"]], "__context__ (fipy.solvers.solver.scalarquantityoutofrangewarning attribute)": [[324, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__context__"]], "__context__ (fipy.solvers.solver.solverconvergencewarning attribute)": [[324, "fipy.solvers.solver.SolverConvergenceWarning.__context__"]], "__context__ (fipy.solvers.solver.stagnatedsolverwarning attribute)": [[324, "fipy.solvers.solver.StagnatedSolverWarning.__context__"]], "__delattr__() (fipy.solvers.solver.breakdownwarning method)": [[324, "fipy.solvers.solver.BreakdownWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[324, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[324, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.lossofprecisionwarning method)": [[324, "fipy.solvers.solver.LossOfPrecisionWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[324, "fipy.solvers.solver.MatrixIllConditionedWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[324, "fipy.solvers.solver.MaximumIterationWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.normalconvergence method)": [[324, "fipy.solvers.solver.NormalConvergence.__delattr__"]], "__delattr__() (fipy.solvers.solver.parameterwarning method)": [[324, "fipy.solvers.solver.ParameterWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[324, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.preconditionerwarning method)": [[324, "fipy.solvers.solver.PreconditionerWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[324, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[324, "fipy.solvers.solver.SolverConvergenceWarning.__delattr__"]], "__delattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[324, "fipy.solvers.solver.StagnatedSolverWarning.__delattr__"]], "__getattribute__() (fipy.solvers.solver.breakdownwarning method)": [[324, "fipy.solvers.solver.BreakdownWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[324, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[324, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.lossofprecisionwarning method)": [[324, "fipy.solvers.solver.LossOfPrecisionWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[324, "fipy.solvers.solver.MatrixIllConditionedWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.maximumiterationwarning method)": [[324, "fipy.solvers.solver.MaximumIterationWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.normalconvergence method)": [[324, "fipy.solvers.solver.NormalConvergence.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.parameterwarning method)": [[324, "fipy.solvers.solver.ParameterWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[324, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.preconditionerwarning method)": [[324, "fipy.solvers.solver.PreconditionerWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[324, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.solverconvergencewarning method)": [[324, "fipy.solvers.solver.SolverConvergenceWarning.__getattribute__"]], "__getattribute__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[324, "fipy.solvers.solver.StagnatedSolverWarning.__getattribute__"]], "__reduce__() (fipy.solvers.solver.breakdownwarning method)": [[324, "fipy.solvers.solver.BreakdownWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[324, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[324, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.lossofprecisionwarning method)": [[324, "fipy.solvers.solver.LossOfPrecisionWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[324, "fipy.solvers.solver.MatrixIllConditionedWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.maximumiterationwarning method)": [[324, "fipy.solvers.solver.MaximumIterationWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.normalconvergence method)": [[324, "fipy.solvers.solver.NormalConvergence.__reduce__"]], "__reduce__() (fipy.solvers.solver.parameterwarning method)": [[324, "fipy.solvers.solver.ParameterWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[324, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.preconditionerwarning method)": [[324, "fipy.solvers.solver.PreconditionerWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[324, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.solverconvergencewarning method)": [[324, "fipy.solvers.solver.SolverConvergenceWarning.__reduce__"]], "__reduce__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[324, "fipy.solvers.solver.StagnatedSolverWarning.__reduce__"]], "__repr__() (fipy.solvers.solver.breakdownwarning method)": [[324, "fipy.solvers.solver.BreakdownWarning.__repr__"]], "__repr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[324, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[324, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__repr__"]], "__repr__() (fipy.solvers.solver.lossofprecisionwarning method)": [[324, "fipy.solvers.solver.LossOfPrecisionWarning.__repr__"]], "__repr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[324, "fipy.solvers.solver.MatrixIllConditionedWarning.__repr__"]], "__repr__() (fipy.solvers.solver.maximumiterationwarning method)": [[324, "fipy.solvers.solver.MaximumIterationWarning.__repr__"]], "__repr__() (fipy.solvers.solver.normalconvergence method)": [[324, "fipy.solvers.solver.NormalConvergence.__repr__"]], "__repr__() (fipy.solvers.solver.parameterwarning method)": [[324, "fipy.solvers.solver.ParameterWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[324, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__repr__"]], "__repr__() (fipy.solvers.solver.preconditionerwarning method)": [[324, "fipy.solvers.solver.PreconditionerWarning.__repr__"]], "__repr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[324, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__repr__"]], "__repr__() (fipy.solvers.solver.solver method)": [[324, "fipy.solvers.solver.Solver.__repr__"]], "__repr__() (fipy.solvers.solver.solverconvergencewarning method)": [[324, "fipy.solvers.solver.SolverConvergenceWarning.__repr__"]], "__repr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[324, "fipy.solvers.solver.StagnatedSolverWarning.__repr__"]], "__setattr__() (fipy.solvers.solver.breakdownwarning method)": [[324, "fipy.solvers.solver.BreakdownWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[324, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[324, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.lossofprecisionwarning method)": [[324, "fipy.solvers.solver.LossOfPrecisionWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[324, "fipy.solvers.solver.MatrixIllConditionedWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.maximumiterationwarning method)": [[324, "fipy.solvers.solver.MaximumIterationWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.normalconvergence method)": [[324, "fipy.solvers.solver.NormalConvergence.__setattr__"]], "__setattr__() (fipy.solvers.solver.parameterwarning method)": [[324, "fipy.solvers.solver.ParameterWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[324, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.preconditionerwarning method)": [[324, "fipy.solvers.solver.PreconditionerWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[324, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.solverconvergencewarning method)": [[324, "fipy.solvers.solver.SolverConvergenceWarning.__setattr__"]], "__setattr__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[324, "fipy.solvers.solver.StagnatedSolverWarning.__setattr__"]], "__str__() (fipy.solvers.solver.breakdownwarning method)": [[324, "fipy.solvers.solver.BreakdownWarning.__str__"]], "__str__() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[324, "fipy.solvers.solver.IllConditionedPreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[324, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.__str__"]], "__str__() (fipy.solvers.solver.lossofprecisionwarning method)": [[324, "fipy.solvers.solver.LossOfPrecisionWarning.__str__"]], "__str__() (fipy.solvers.solver.matrixillconditionedwarning method)": [[324, "fipy.solvers.solver.MatrixIllConditionedWarning.__str__"]], "__str__() (fipy.solvers.solver.maximumiterationwarning method)": [[324, "fipy.solvers.solver.MaximumIterationWarning.__str__"]], "__str__() (fipy.solvers.solver.normalconvergence method)": [[324, "fipy.solvers.solver.NormalConvergence.__str__"]], "__str__() (fipy.solvers.solver.parameterwarning method)": [[324, "fipy.solvers.solver.ParameterWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[324, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.__str__"]], "__str__() (fipy.solvers.solver.preconditionerwarning method)": [[324, "fipy.solvers.solver.PreconditionerWarning.__str__"]], "__str__() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[324, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.__str__"]], "__str__() (fipy.solvers.solver.solverconvergencewarning method)": [[324, "fipy.solvers.solver.SolverConvergenceWarning.__str__"]], "__str__() (fipy.solvers.solver.stagnatedsolverwarning method)": [[324, "fipy.solvers.solver.StagnatedSolverWarning.__str__"]], "add_note() (fipy.solvers.solver.breakdownwarning method)": [[324, "fipy.solvers.solver.BreakdownWarning.add_note"]], "add_note() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[324, "fipy.solvers.solver.IllConditionedPreconditionerWarning.add_note"]], "add_note() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[324, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.add_note"]], "add_note() (fipy.solvers.solver.lossofprecisionwarning method)": [[324, "fipy.solvers.solver.LossOfPrecisionWarning.add_note"]], "add_note() (fipy.solvers.solver.matrixillconditionedwarning method)": [[324, "fipy.solvers.solver.MatrixIllConditionedWarning.add_note"]], "add_note() (fipy.solvers.solver.maximumiterationwarning method)": [[324, "fipy.solvers.solver.MaximumIterationWarning.add_note"]], "add_note() (fipy.solvers.solver.normalconvergence method)": [[324, "fipy.solvers.solver.NormalConvergence.add_note"]], "add_note() (fipy.solvers.solver.parameterwarning method)": [[324, "fipy.solvers.solver.ParameterWarning.add_note"]], "add_note() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[324, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.add_note"]], "add_note() (fipy.solvers.solver.preconditionerwarning method)": [[324, "fipy.solvers.solver.PreconditionerWarning.add_note"]], "add_note() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[324, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.add_note"]], "add_note() (fipy.solvers.solver.solverconvergencewarning method)": [[324, "fipy.solvers.solver.SolverConvergenceWarning.add_note"]], "add_note() (fipy.solvers.solver.stagnatedsolverwarning method)": [[324, "fipy.solvers.solver.StagnatedSolverWarning.add_note"]], "default_tolerance (fipy.solvers.solver.solver property)": [[324, "fipy.solvers.solver.Solver.default_tolerance"]], "fipy.solvers.solver": [[324, "module-fipy.solvers.solver"]], "with_traceback() (fipy.solvers.solver.breakdownwarning method)": [[324, "fipy.solvers.solver.BreakdownWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.illconditionedpreconditionerwarning method)": [[324, "fipy.solvers.solver.IllConditionedPreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.illegalinputorbreakdownwarning method)": [[324, "fipy.solvers.solver.IllegalInputOrBreakdownWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.lossofprecisionwarning method)": [[324, "fipy.solvers.solver.LossOfPrecisionWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.matrixillconditionedwarning method)": [[324, "fipy.solvers.solver.MatrixIllConditionedWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.maximumiterationwarning method)": [[324, "fipy.solvers.solver.MaximumIterationWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.normalconvergence method)": [[324, "fipy.solvers.solver.NormalConvergence.with_traceback"]], "with_traceback() (fipy.solvers.solver.parameterwarning method)": [[324, "fipy.solvers.solver.ParameterWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionernotpositivedefinitewarning method)": [[324, "fipy.solvers.solver.PreconditionerNotPositiveDefiniteWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.preconditionerwarning method)": [[324, "fipy.solvers.solver.PreconditionerWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.scalarquantityoutofrangewarning method)": [[324, "fipy.solvers.solver.ScalarQuantityOutOfRangeWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.solverconvergencewarning method)": [[324, "fipy.solvers.solver.SolverConvergenceWarning.with_traceback"]], "with_traceback() (fipy.solvers.solver.stagnatedsolverwarning method)": [[324, "fipy.solvers.solver.StagnatedSolverWarning.with_traceback"]], "fipy.solvers.test": [[325, "module-fipy.solvers.test"]], "fipy.solvers.trilinos": [[326, "module-fipy.solvers.trilinos"]], "az_breakdowndivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[327, "fipy.solvers.trilinos.aztecConvergence.AZ_BreakdownDivergence"]], "az_illconditioneddivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[327, "fipy.solvers.trilinos.aztecConvergence.AZ_IllConditionedDivergence"]], "az_iterationdivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[327, "fipy.solvers.trilinos.aztecConvergence.AZ_IterationDivergence"]], "az_lossofaccuracyconvergence (class in fipy.solvers.trilinos.aztecconvergence)": [[327, "fipy.solvers.trilinos.aztecConvergence.AZ_LossOfAccuracyConvergence"]], "az_normalconvergence (class in fipy.solvers.trilinos.aztecconvergence)": [[327, "fipy.solvers.trilinos.aztecConvergence.AZ_NormalConvergence"]], "az_parameterdivergence (class in fipy.solvers.trilinos.aztecconvergence)": [[327, "fipy.solvers.trilinos.aztecConvergence.AZ_ParameterDivergence"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_breakdowndivergence method)": [[327, "fipy.solvers.trilinos.aztecConvergence.AZ_BreakdownDivergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_illconditioneddivergence method)": [[327, "fipy.solvers.trilinos.aztecConvergence.AZ_IllConditionedDivergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_iterationdivergence method)": [[327, "fipy.solvers.trilinos.aztecConvergence.AZ_IterationDivergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_lossofaccuracyconvergence method)": [[327, "fipy.solvers.trilinos.aztecConvergence.AZ_LossOfAccuracyConvergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_normalconvergence method)": [[327, "fipy.solvers.trilinos.aztecConvergence.AZ_NormalConvergence.__str__"]], "__str__() (fipy.solvers.trilinos.aztecconvergence.az_parameterdivergence method)": [[327, "fipy.solvers.trilinos.aztecConvergence.AZ_ParameterDivergence.__str__"]], "fipy.solvers.trilinos.aztecconvergence": [[327, "module-fipy.solvers.trilinos.aztecConvergence"]], "fipy.solvers.trilinos.comms": [[328, "module-fipy.solvers.trilinos.comms"]], "epetracommwrapper (class in fipy.solvers.trilinos.comms.epetracommwrapper)": [[329, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[329, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.epetracommwrapper.epetracommwrapper method)": [[329, "fipy.solvers.trilinos.comms.epetraCommWrapper.EpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.epetracommwrapper": [[329, "module-fipy.solvers.trilinos.comms.epetraCommWrapper"]], "maxall() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[330, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.MaxAll"]], "minall() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[330, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.MinAll"]], "parallelepetracommwrapper (class in fipy.solvers.trilinos.comms.parallelepetracommwrapper)": [[330, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[330, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[330, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.__repr__"]], "allgather() (fipy.solvers.trilinos.comms.parallelepetracommwrapper.parallelepetracommwrapper method)": [[330, "fipy.solvers.trilinos.comms.parallelEpetraCommWrapper.ParallelEpetraCommWrapper.allgather"]], "fipy.solvers.trilinos.comms.parallelepetracommwrapper": [[330, "module-fipy.solvers.trilinos.comms.parallelEpetraCommWrapper"]], "serialepetracommwrapper (class in fipy.solvers.trilinos.comms.serialepetracommwrapper)": [[331, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper"]], "__getstate__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[331, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__getstate__"]], "__repr__() (fipy.solvers.trilinos.comms.serialepetracommwrapper.serialepetracommwrapper method)": [[331, "fipy.solvers.trilinos.comms.serialEpetraCommWrapper.SerialEpetraCommWrapper.__repr__"]], "fipy.solvers.trilinos.comms.serialepetracommwrapper": [[331, "module-fipy.solvers.trilinos.comms.serialEpetraCommWrapper"]], "default_iterations (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[332, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[332, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[332, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver attribute)": [[332, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.LEGACY_TOLERANCE"]], "linearbicgstabsolver (class in fipy.solvers.trilinos.linearbicgstabsolver)": [[332, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver"]], "__repr__() (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver method)": [[332, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearbicgstabsolver.linearbicgstabsolver property)": [[332, "fipy.solvers.trilinos.linearBicgstabSolver.LinearBicgstabSolver.default_tolerance"]], "fipy.solvers.trilinos.linearbicgstabsolver": [[332, "module-fipy.solvers.trilinos.linearBicgstabSolver"]], "default_iterations (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[333, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[333, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[333, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearcgssolver.linearcgssolver attribute)": [[333, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.LEGACY_TOLERANCE"]], "linearcgssolver (class in fipy.solvers.trilinos.linearcgssolver)": [[333, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver"]], "__repr__() (fipy.solvers.trilinos.linearcgssolver.linearcgssolver method)": [[333, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearcgssolver.linearcgssolver property)": [[333, "fipy.solvers.trilinos.linearCGSSolver.LinearCGSSolver.default_tolerance"]], "fipy.solvers.trilinos.linearcgssolver": [[333, "module-fipy.solvers.trilinos.linearCGSSolver"]], "default_iterations (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[334, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[334, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[334, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.lineargmressolver.lineargmressolver attribute)": [[334, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.LEGACY_TOLERANCE"]], "lineargmressolver (class in fipy.solvers.trilinos.lineargmressolver)": [[334, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver"]], "__repr__() (fipy.solvers.trilinos.lineargmressolver.lineargmressolver method)": [[334, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.lineargmressolver.lineargmressolver property)": [[334, "fipy.solvers.trilinos.linearGMRESSolver.LinearGMRESSolver.default_tolerance"]], "fipy.solvers.trilinos.lineargmressolver": [[334, "module-fipy.solvers.trilinos.linearGMRESSolver"]], "default_iterations (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[335, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[335, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[335, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearlusolver.linearlusolver attribute)": [[335, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.LEGACY_TOLERANCE"]], "linearlusolver (class in fipy.solvers.trilinos.linearlusolver)": [[335, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver"]], "__repr__() (fipy.solvers.trilinos.linearlusolver.linearlusolver method)": [[335, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearlusolver.linearlusolver property)": [[335, "fipy.solvers.trilinos.linearLUSolver.LinearLUSolver.default_tolerance"]], "fipy.solvers.trilinos.linearlusolver": [[335, "module-fipy.solvers.trilinos.linearLUSolver"]], "default_iterations (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver attribute)": [[336, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver attribute)": [[336, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver attribute)": [[336, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver attribute)": [[336, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.LEGACY_TOLERANCE"]], "linearpcgsolver (class in fipy.solvers.trilinos.linearpcgsolver)": [[336, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver"]], "__repr__() (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver method)": [[336, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.linearpcgsolver.linearpcgsolver property)": [[336, "fipy.solvers.trilinos.linearPCGSolver.LinearPCGSolver.default_tolerance"]], "fipy.solvers.trilinos.linearpcgsolver": [[336, "module-fipy.solvers.trilinos.linearPCGSolver"]], "domdecomppreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[337, "fipy.solvers.trilinos.preconditioners.DomDecompPreconditioner"]], "icpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[337, "fipy.solvers.trilinos.preconditioners.ICPreconditioner"]], "ilupreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[337, "fipy.solvers.trilinos.preconditioners.ILUPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[337, "fipy.solvers.trilinos.preconditioners.JacobiPreconditioner"]], "multilevelddmlpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[337, "fipy.solvers.trilinos.preconditioners.MultilevelDDMLPreconditioner"]], "multilevelddpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[337, "fipy.solvers.trilinos.preconditioners.MultilevelDDPreconditioner"]], "multilevelnssapreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[337, "fipy.solvers.trilinos.preconditioners.MultilevelNSSAPreconditioner"]], "multilevelsapreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[337, "fipy.solvers.trilinos.preconditioners.MultilevelSAPreconditioner"]], "multilevelsgspreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[337, "fipy.solvers.trilinos.preconditioners.MultilevelSGSPreconditioner"]], "multilevelsolversmootherpreconditioner (class in fipy.solvers.trilinos.preconditioners)": [[337, "fipy.solvers.trilinos.preconditioners.MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners": [[337, "module-fipy.solvers.trilinos.preconditioners"]], "domdecomppreconditioner (class in fipy.solvers.trilinos.preconditioners.domdecomppreconditioner)": [[338, "fipy.solvers.trilinos.preconditioners.domDecompPreconditioner.DomDecompPreconditioner"]], "fipy.solvers.trilinos.preconditioners.domdecomppreconditioner": [[338, "module-fipy.solvers.trilinos.preconditioners.domDecompPreconditioner"]], "icpreconditioner (class in fipy.solvers.trilinos.preconditioners.icpreconditioner)": [[339, "fipy.solvers.trilinos.preconditioners.icPreconditioner.ICPreconditioner"]], "fipy.solvers.trilinos.preconditioners.icpreconditioner": [[339, "module-fipy.solvers.trilinos.preconditioners.icPreconditioner"]], "ilupreconditioner (class in fipy.solvers.trilinos.preconditioners.ilupreconditioner)": [[340, "fipy.solvers.trilinos.preconditioners.iluPreconditioner.ILUPreconditioner"]], "fipy.solvers.trilinos.preconditioners.ilupreconditioner": [[340, "module-fipy.solvers.trilinos.preconditioners.iluPreconditioner"]], "jacobipreconditioner (class in fipy.solvers.trilinos.preconditioners.jacobipreconditioner)": [[341, "fipy.solvers.trilinos.preconditioners.jacobiPreconditioner.JacobiPreconditioner"]], "fipy.solvers.trilinos.preconditioners.jacobipreconditioner": [[341, "module-fipy.solvers.trilinos.preconditioners.jacobiPreconditioner"]], "multilevelddmlpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner)": [[342, "fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner.MultilevelDDMLPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddmlpreconditioner": [[342, "module-fipy.solvers.trilinos.preconditioners.multilevelDDMLPreconditioner"]], "multilevelddpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner)": [[343, "fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner.MultilevelDDPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelddpreconditioner": [[343, "module-fipy.solvers.trilinos.preconditioners.multilevelDDPreconditioner"]], "multilevelnssapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner)": [[344, "fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner.MultilevelNSSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelnssapreconditioner": [[344, "module-fipy.solvers.trilinos.preconditioners.multilevelNSSAPreconditioner"]], "multilevelpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelpreconditioner)": [[345, "fipy.solvers.trilinos.preconditioners.multilevelPreconditioner.MultilevelPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelpreconditioner": [[345, "module-fipy.solvers.trilinos.preconditioners.multilevelPreconditioner"]], "multilevelsapreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner)": [[346, "fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner.MultilevelSAPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsapreconditioner": [[346, "module-fipy.solvers.trilinos.preconditioners.multilevelSAPreconditioner"]], "multilevelsgspreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner)": [[347, "fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner.MultilevelSGSPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsgspreconditioner": [[347, "module-fipy.solvers.trilinos.preconditioners.multilevelSGSPreconditioner"]], "multilevelsolversmootherpreconditioner (class in fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner)": [[348, "fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner.MultilevelSolverSmootherPreconditioner"]], "fipy.solvers.trilinos.preconditioners.multilevelsolversmootherpreconditioner": [[348, "module-fipy.solvers.trilinos.preconditioners.multilevelSolverSmootherPreconditioner"]], "trilinospreconditioner (class in fipy.solvers.trilinos.preconditioners.trilinospreconditioner)": [[349, "fipy.solvers.trilinos.preconditioners.trilinosPreconditioner.TrilinosPreconditioner"]], "fipy.solvers.trilinos.preconditioners.trilinospreconditioner": [[349, "module-fipy.solvers.trilinos.preconditioners.trilinosPreconditioner"]], "default_iterations (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[350, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[350, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[350, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver attribute)": [[350, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.LEGACY_TOLERANCE"]], "trilinosaztecoosolver (class in fipy.solvers.trilinos.trilinosaztecoosolver)": [[350, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver method)": [[350, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinosaztecoosolver.trilinosaztecoosolver property)": [[350, "fipy.solvers.trilinos.trilinosAztecOOSolver.TrilinosAztecOOSolver.default_tolerance"]], "fipy.solvers.trilinos.trilinosaztecoosolver": [[350, "module-fipy.solvers.trilinos.trilinosAztecOOSolver"]], "default_iterations (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[351, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[351, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[351, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinosmltest.trilinosmltest attribute)": [[351, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.LEGACY_TOLERANCE"]], "trilinosmltest (class in fipy.solvers.trilinos.trilinosmltest)": [[351, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest"]], "__repr__() (fipy.solvers.trilinos.trilinosmltest.trilinosmltest method)": [[351, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinosmltest.trilinosmltest property)": [[351, "fipy.solvers.trilinos.trilinosMLTest.TrilinosMLTest.default_tolerance"]], "fipy.solvers.trilinos.trilinosmltest": [[351, "module-fipy.solvers.trilinos.trilinosMLTest"]], "default_iterations (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[352, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[352, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[352, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver attribute)": [[352, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.LEGACY_TOLERANCE"]], "trilinosnonlinearsolver (class in fipy.solvers.trilinos.trilinosnonlinearsolver)": [[352, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver"]], "__repr__() (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver method)": [[352, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinosnonlinearsolver.trilinosnonlinearsolver property)": [[352, "fipy.solvers.trilinos.trilinosNonlinearSolver.TrilinosNonlinearSolver.default_tolerance"]], "fipy.solvers.trilinos.trilinosnonlinearsolver": [[352, "module-fipy.solvers.trilinos.trilinosNonlinearSolver"]], "default_iterations (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[353, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.DEFAULT_ITERATIONS"]], "default_preconditioner (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[353, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.DEFAULT_PRECONDITIONER"]], "default_tolerance (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[353, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.DEFAULT_TOLERANCE"]], "legacy_tolerance (fipy.solvers.trilinos.trilinossolver.trilinossolver attribute)": [[353, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.LEGACY_TOLERANCE"]], "trilinossolver (class in fipy.solvers.trilinos.trilinossolver)": [[353, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver"]], "__repr__() (fipy.solvers.trilinos.trilinossolver.trilinossolver method)": [[353, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.__repr__"]], "default_tolerance (fipy.solvers.trilinos.trilinossolver.trilinossolver property)": [[353, "fipy.solvers.trilinos.trilinosSolver.TrilinosSolver.default_tolerance"]], "fipy.solvers.trilinos.trilinossolver": [[353, "module-fipy.solvers.trilinos.trilinosSolver"]], "l1error() (in module fipy.steppers)": [[354, "fipy.steppers.L1error"]], "l2error() (in module fipy.steppers)": [[354, "fipy.steppers.L2error"]], "linferror() (in module fipy.steppers)": [[354, "fipy.steppers.LINFerror"]], "error() (in module fipy.steppers)": [[354, "fipy.steppers.error"]], "fipy.steppers": [[354, "module-fipy.steppers"]], "residual() (in module fipy.steppers)": [[354, "fipy.steppers.residual"]], "sweepmonotonic() (in module fipy.steppers)": [[354, "fipy.steppers.sweepMonotonic"]], "pidstepper (class in fipy.steppers.pidstepper)": [[355, "fipy.steppers.pidStepper.PIDStepper"]], "fipy.steppers.pidstepper": [[355, "module-fipy.steppers.pidStepper"]], "pseudorkqsstepper (class in fipy.steppers.pseudorkqsstepper)": [[356, "fipy.steppers.pseudoRKQSStepper.PseudoRKQSStepper"]], "fipy.steppers.pseudorkqsstepper": [[356, "module-fipy.steppers.pseudoRKQSStepper"]], "stepper (class in fipy.steppers.stepper)": [[357, "fipy.steppers.stepper.Stepper"]], "fipy.steppers.stepper": [[357, "module-fipy.steppers.stepper"]], "abstractbaseclasserror": [[358, "fipy.terms.AbstractBaseClassError"]], "explicitvariableerror": [[358, "fipy.terms.ExplicitVariableError"]], "incorrectsolutionvariable": [[358, "fipy.terms.IncorrectSolutionVariable"]], "solutionvariablenumbererror": [[358, "fipy.terms.SolutionVariableNumberError"]], "solutionvariablerequirederror": [[358, "fipy.terms.SolutionVariableRequiredError"]], "termmultiplyerror": [[358, "fipy.terms.TermMultiplyError"]], "transienttermerror": [[358, "fipy.terms.TransientTermError"]], "vectorcoefferror": [[358, "fipy.terms.VectorCoeffError"]], "__cause__ (fipy.terms.abstractbaseclasserror attribute)": [[358, "fipy.terms.AbstractBaseClassError.__cause__"]], "__cause__ (fipy.terms.explicitvariableerror attribute)": [[358, "fipy.terms.ExplicitVariableError.__cause__"]], "__cause__ (fipy.terms.incorrectsolutionvariable attribute)": [[358, "fipy.terms.IncorrectSolutionVariable.__cause__"]], "__cause__ (fipy.terms.solutionvariablenumbererror attribute)": [[358, "fipy.terms.SolutionVariableNumberError.__cause__"]], "__cause__ (fipy.terms.solutionvariablerequirederror attribute)": [[358, "fipy.terms.SolutionVariableRequiredError.__cause__"]], "__cause__ (fipy.terms.termmultiplyerror attribute)": [[358, "fipy.terms.TermMultiplyError.__cause__"]], "__cause__ (fipy.terms.transienttermerror attribute)": [[358, "fipy.terms.TransientTermError.__cause__"]], "__cause__ (fipy.terms.vectorcoefferror attribute)": [[358, "fipy.terms.VectorCoeffError.__cause__"]], "__context__ (fipy.terms.abstractbaseclasserror attribute)": [[358, "fipy.terms.AbstractBaseClassError.__context__"]], "__context__ (fipy.terms.explicitvariableerror attribute)": [[358, "fipy.terms.ExplicitVariableError.__context__"]], "__context__ (fipy.terms.incorrectsolutionvariable attribute)": [[358, "fipy.terms.IncorrectSolutionVariable.__context__"]], "__context__ (fipy.terms.solutionvariablenumbererror attribute)": [[358, "fipy.terms.SolutionVariableNumberError.__context__"]], "__context__ (fipy.terms.solutionvariablerequirederror attribute)": [[358, "fipy.terms.SolutionVariableRequiredError.__context__"]], "__context__ (fipy.terms.termmultiplyerror attribute)": [[358, "fipy.terms.TermMultiplyError.__context__"]], "__context__ (fipy.terms.transienttermerror attribute)": [[358, "fipy.terms.TransientTermError.__context__"]], "__context__ (fipy.terms.vectorcoefferror attribute)": [[358, "fipy.terms.VectorCoeffError.__context__"]], "__delattr__() (fipy.terms.abstractbaseclasserror method)": [[358, "fipy.terms.AbstractBaseClassError.__delattr__"]], "__delattr__() (fipy.terms.explicitvariableerror method)": [[358, "fipy.terms.ExplicitVariableError.__delattr__"]], "__delattr__() (fipy.terms.incorrectsolutionvariable method)": [[358, "fipy.terms.IncorrectSolutionVariable.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablenumbererror method)": [[358, "fipy.terms.SolutionVariableNumberError.__delattr__"]], "__delattr__() (fipy.terms.solutionvariablerequirederror method)": [[358, "fipy.terms.SolutionVariableRequiredError.__delattr__"]], "__delattr__() (fipy.terms.termmultiplyerror method)": [[358, "fipy.terms.TermMultiplyError.__delattr__"]], "__delattr__() (fipy.terms.transienttermerror method)": [[358, "fipy.terms.TransientTermError.__delattr__"]], "__delattr__() (fipy.terms.vectorcoefferror method)": [[358, "fipy.terms.VectorCoeffError.__delattr__"]], "__getattribute__() (fipy.terms.abstractbaseclasserror method)": [[358, "fipy.terms.AbstractBaseClassError.__getattribute__"]], "__getattribute__() (fipy.terms.explicitvariableerror method)": [[358, "fipy.terms.ExplicitVariableError.__getattribute__"]], "__getattribute__() (fipy.terms.incorrectsolutionvariable method)": [[358, "fipy.terms.IncorrectSolutionVariable.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablenumbererror method)": [[358, "fipy.terms.SolutionVariableNumberError.__getattribute__"]], "__getattribute__() (fipy.terms.solutionvariablerequirederror method)": [[358, "fipy.terms.SolutionVariableRequiredError.__getattribute__"]], "__getattribute__() (fipy.terms.termmultiplyerror method)": [[358, "fipy.terms.TermMultiplyError.__getattribute__"]], "__getattribute__() (fipy.terms.transienttermerror method)": [[358, "fipy.terms.TransientTermError.__getattribute__"]], "__getattribute__() (fipy.terms.vectorcoefferror method)": [[358, "fipy.terms.VectorCoeffError.__getattribute__"]], "__reduce__() (fipy.terms.abstractbaseclasserror method)": [[358, "fipy.terms.AbstractBaseClassError.__reduce__"]], "__reduce__() (fipy.terms.explicitvariableerror method)": [[358, "fipy.terms.ExplicitVariableError.__reduce__"]], "__reduce__() (fipy.terms.incorrectsolutionvariable method)": [[358, "fipy.terms.IncorrectSolutionVariable.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablenumbererror method)": [[358, "fipy.terms.SolutionVariableNumberError.__reduce__"]], "__reduce__() (fipy.terms.solutionvariablerequirederror method)": [[358, "fipy.terms.SolutionVariableRequiredError.__reduce__"]], "__reduce__() (fipy.terms.termmultiplyerror method)": [[358, "fipy.terms.TermMultiplyError.__reduce__"]], "__reduce__() (fipy.terms.transienttermerror method)": [[358, "fipy.terms.TransientTermError.__reduce__"]], "__reduce__() (fipy.terms.vectorcoefferror method)": [[358, "fipy.terms.VectorCoeffError.__reduce__"]], "__repr__() (fipy.terms.abstractbaseclasserror method)": [[358, "fipy.terms.AbstractBaseClassError.__repr__"]], "__repr__() (fipy.terms.explicitvariableerror method)": [[358, "fipy.terms.ExplicitVariableError.__repr__"]], "__repr__() (fipy.terms.incorrectsolutionvariable method)": [[358, "fipy.terms.IncorrectSolutionVariable.__repr__"]], "__repr__() (fipy.terms.solutionvariablenumbererror method)": [[358, "fipy.terms.SolutionVariableNumberError.__repr__"]], "__repr__() (fipy.terms.solutionvariablerequirederror method)": [[358, "fipy.terms.SolutionVariableRequiredError.__repr__"]], "__repr__() (fipy.terms.termmultiplyerror method)": [[358, "fipy.terms.TermMultiplyError.__repr__"]], "__repr__() (fipy.terms.transienttermerror method)": [[358, "fipy.terms.TransientTermError.__repr__"]], "__repr__() (fipy.terms.vectorcoefferror method)": [[358, "fipy.terms.VectorCoeffError.__repr__"]], "__setattr__() (fipy.terms.abstractbaseclasserror method)": [[358, "fipy.terms.AbstractBaseClassError.__setattr__"]], "__setattr__() (fipy.terms.explicitvariableerror method)": [[358, "fipy.terms.ExplicitVariableError.__setattr__"]], "__setattr__() (fipy.terms.incorrectsolutionvariable method)": [[358, "fipy.terms.IncorrectSolutionVariable.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablenumbererror method)": [[358, "fipy.terms.SolutionVariableNumberError.__setattr__"]], "__setattr__() (fipy.terms.solutionvariablerequirederror method)": [[358, "fipy.terms.SolutionVariableRequiredError.__setattr__"]], "__setattr__() (fipy.terms.termmultiplyerror method)": [[358, "fipy.terms.TermMultiplyError.__setattr__"]], "__setattr__() (fipy.terms.transienttermerror method)": [[358, "fipy.terms.TransientTermError.__setattr__"]], "__setattr__() (fipy.terms.vectorcoefferror method)": [[358, "fipy.terms.VectorCoeffError.__setattr__"]], "__str__() (fipy.terms.abstractbaseclasserror method)": [[358, "fipy.terms.AbstractBaseClassError.__str__"]], "__str__() (fipy.terms.explicitvariableerror method)": [[358, "fipy.terms.ExplicitVariableError.__str__"]], "__str__() (fipy.terms.incorrectsolutionvariable method)": [[358, "fipy.terms.IncorrectSolutionVariable.__str__"]], "__str__() (fipy.terms.solutionvariablenumbererror method)": [[358, "fipy.terms.SolutionVariableNumberError.__str__"]], "__str__() (fipy.terms.solutionvariablerequirederror method)": [[358, "fipy.terms.SolutionVariableRequiredError.__str__"]], "__str__() (fipy.terms.termmultiplyerror method)": [[358, "fipy.terms.TermMultiplyError.__str__"]], "__str__() (fipy.terms.transienttermerror method)": [[358, "fipy.terms.TransientTermError.__str__"]], "__str__() (fipy.terms.vectorcoefferror method)": [[358, "fipy.terms.VectorCoeffError.__str__"]], "add_note() (fipy.terms.abstractbaseclasserror method)": [[358, "fipy.terms.AbstractBaseClassError.add_note"]], "add_note() (fipy.terms.explicitvariableerror method)": [[358, "fipy.terms.ExplicitVariableError.add_note"]], "add_note() (fipy.terms.incorrectsolutionvariable method)": [[358, "fipy.terms.IncorrectSolutionVariable.add_note"]], "add_note() (fipy.terms.solutionvariablenumbererror method)": [[358, "fipy.terms.SolutionVariableNumberError.add_note"]], "add_note() (fipy.terms.solutionvariablerequirederror method)": [[358, "fipy.terms.SolutionVariableRequiredError.add_note"]], "add_note() (fipy.terms.termmultiplyerror method)": [[358, "fipy.terms.TermMultiplyError.add_note"]], "add_note() (fipy.terms.transienttermerror method)": [[358, "fipy.terms.TransientTermError.add_note"]], "add_note() (fipy.terms.vectorcoefferror method)": [[358, "fipy.terms.VectorCoeffError.add_note"]], "fipy.terms": [[358, "module-fipy.terms"]], "with_traceback() (fipy.terms.abstractbaseclasserror method)": [[358, "fipy.terms.AbstractBaseClassError.with_traceback"]], "with_traceback() (fipy.terms.explicitvariableerror method)": [[358, "fipy.terms.ExplicitVariableError.with_traceback"]], "with_traceback() (fipy.terms.incorrectsolutionvariable method)": [[358, "fipy.terms.IncorrectSolutionVariable.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablenumbererror method)": [[358, "fipy.terms.SolutionVariableNumberError.with_traceback"]], "with_traceback() (fipy.terms.solutionvariablerequirederror method)": [[358, "fipy.terms.SolutionVariableRequiredError.with_traceback"]], "with_traceback() (fipy.terms.termmultiplyerror method)": [[358, "fipy.terms.TermMultiplyError.with_traceback"]], "with_traceback() (fipy.terms.transienttermerror method)": [[358, "fipy.terms.TransientTermError.with_traceback"]], "with_traceback() (fipy.terms.vectorcoefferror method)": [[358, "fipy.terms.VectorCoeffError.with_traceback"]], "fipy.terms.abstractbinaryterm": [[359, "module-fipy.terms.abstractBinaryTerm"]], "fipy.terms.abstractconvectionterm": [[360, "module-fipy.terms.abstractConvectionTerm"]], "fipy.terms.abstractdiffusionterm": [[361, "module-fipy.terms.abstractDiffusionTerm"]], "fipy.terms.abstractupwindconvectionterm": [[362, "module-fipy.terms.abstractUpwindConvectionTerm"]], "advectionterm (class in fipy.terms.advectionterm)": [[363, "fipy.terms.advectionTerm.AdvectionTerm"]], "rhsvector (fipy.terms.advectionterm.advectionterm property)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.__eq__"]], "__hash__() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.__hash__"]], "__mul__() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.__mul__"]], "__neg__() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.__neg__"]], "__repr__() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.cacheRHSvector"]], "fipy.terms.advectionterm": [[363, "module-fipy.terms.advectionTerm"]], "justerrorvector() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.justResidualVector"]], "matrix (fipy.terms.advectionterm.advectionterm property)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.solve"]], "sweep() (fipy.terms.advectionterm.advectionterm method)": [[363, "fipy.terms.advectionTerm.AdvectionTerm.sweep"]], "fipy.terms.asymmetricconvectionterm": [[364, "module-fipy.terms.asymmetricConvectionTerm"]], "fipy.terms.binaryterm": [[365, "module-fipy.terms.binaryTerm"]], "cellterm (class in fipy.terms.cellterm)": [[366, "fipy.terms.cellTerm.CellTerm"]], "rhsvector (fipy.terms.cellterm.cellterm property)": [[366, "fipy.terms.cellTerm.CellTerm.RHSvector"]], "__eq__() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.__eq__"]], "__hash__() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.__hash__"]], "__mul__() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.__mul__"]], "__neg__() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.__neg__"]], "__repr__() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.__repr__"]], "__rmul__() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.__rmul__"]], "cachematrix() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.cacheRHSvector"]], "fipy.terms.cellterm": [[366, "module-fipy.terms.cellTerm"]], "justerrorvector() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.justErrorVector"]], "justresidualvector() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.justResidualVector"]], "matrix (fipy.terms.cellterm.cellterm property)": [[366, "fipy.terms.cellTerm.CellTerm.matrix"]], "residualvectorandnorm() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.residualVectorAndNorm"]], "solve() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.solve"]], "sweep() (fipy.terms.cellterm.cellterm method)": [[366, "fipy.terms.cellTerm.CellTerm.sweep"]], "centraldifferenceconvectionterm (class in fipy.terms.centraldiffconvectionterm)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm"]], "rhsvector (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__eq__"]], "__hash__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__hash__"]], "__mul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__mul__"]], "__neg__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__neg__"]], "__repr__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.cacheRHSvector"]], "fipy.terms.centraldiffconvectionterm": [[367, "module-fipy.terms.centralDiffConvectionTerm"]], "justerrorvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.justResidualVector"]], "matrix (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm property)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.solve"]], "sweep() (fipy.terms.centraldiffconvectionterm.centraldifferenceconvectionterm method)": [[367, "fipy.terms.centralDiffConvectionTerm.CentralDifferenceConvectionTerm.sweep"]], "fipy.terms.coupledbinaryterm": [[368, "module-fipy.terms.coupledBinaryTerm"]], "diffusionterm (class in fipy.terms.diffusionterm)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm"]], "rhsvector (fipy.terms.diffusionterm.diffusionterm property)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.diffusionterm.diffusionterm method)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm.__eq__"]], "__hash__() (fipy.terms.diffusionterm.diffusionterm method)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm.__hash__"]], "__repr__() (fipy.terms.diffusionterm.diffusionterm method)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.diffusionterm.diffusionterm method)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusionterm.diffusionterm method)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm.cacheRHSvector"]], "fipy.terms.diffusionterm": [[369, "module-fipy.terms.diffusionTerm"]], "justerrorvector() (fipy.terms.diffusionterm.diffusionterm method)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.diffusionterm.diffusionterm method)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm.justResidualVector"]], "matrix (fipy.terms.diffusionterm.diffusionterm property)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.diffusionterm.diffusionterm method)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.diffusionterm.diffusionterm method)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm.solve"]], "sweep() (fipy.terms.diffusionterm.diffusionterm method)": [[369, "fipy.terms.diffusionTerm.DiffusionTerm.sweep"]], "diffusiontermcorrection (class in fipy.terms.diffusiontermcorrection)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection"]], "rhsvector (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermcorrection": [[370, "module-fipy.terms.diffusionTermCorrection"]], "justerrorvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermcorrection.diffusiontermcorrection property)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.solve"]], "sweep() (fipy.terms.diffusiontermcorrection.diffusiontermcorrection method)": [[370, "fipy.terms.diffusionTermCorrection.DiffusionTermCorrection.sweep"]], "diffusiontermnocorrection (class in fipy.terms.diffusiontermnocorrection)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection"]], "rhsvector (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.RHSvector"]], "__eq__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__eq__"]], "__hash__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__hash__"]], "__repr__() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.__repr__"]], "cachematrix() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheMatrix"]], "cacherhsvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.cacheRHSvector"]], "fipy.terms.diffusiontermnocorrection": [[371, "module-fipy.terms.diffusionTermNoCorrection"]], "justerrorvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justErrorVector"]], "justresidualvector() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.justResidualVector"]], "matrix (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection property)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.matrix"]], "residualvectorandnorm() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.residualVectorAndNorm"]], "solve() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.solve"]], "sweep() (fipy.terms.diffusiontermnocorrection.diffusiontermnocorrection method)": [[371, "fipy.terms.diffusionTermNoCorrection.DiffusionTermNoCorrection.sweep"]], "explicitdiffusionterm (class in fipy.terms.explicitdiffusionterm)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm"]], "rhsvector (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__eq__"]], "__hash__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__hash__"]], "__repr__() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.__repr__"]], "cachematrix() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.cacheRHSvector"]], "fipy.terms.explicitdiffusionterm": [[372, "module-fipy.terms.explicitDiffusionTerm"]], "justerrorvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.justResidualVector"]], "matrix (fipy.terms.explicitdiffusionterm.explicitdiffusionterm property)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.solve"]], "sweep() (fipy.terms.explicitdiffusionterm.explicitdiffusionterm method)": [[372, "fipy.terms.explicitDiffusionTerm.ExplicitDiffusionTerm.sweep"]], "fipy.terms.explicitsourceterm": [[373, "module-fipy.terms.explicitSourceTerm"]], "explicitupwindconvectionterm (class in fipy.terms.explicitupwindconvectionterm)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm"]], "rhsvector (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.explicitupwindconvectionterm": [[374, "module-fipy.terms.explicitUpwindConvectionTerm"]], "justerrorvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm property)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.solve"]], "sweep() (fipy.terms.explicitupwindconvectionterm.explicitupwindconvectionterm method)": [[374, "fipy.terms.explicitUpwindConvectionTerm.ExplicitUpwindConvectionTerm.sweep"]], "exponentialconvectionterm (class in fipy.terms.exponentialconvectionterm)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm"]], "rhsvector (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__eq__"]], "__hash__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__hash__"]], "__mul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__mul__"]], "__neg__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__neg__"]], "__repr__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.cacheRHSvector"]], "fipy.terms.exponentialconvectionterm": [[375, "module-fipy.terms.exponentialConvectionTerm"]], "justerrorvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.justResidualVector"]], "matrix (fipy.terms.exponentialconvectionterm.exponentialconvectionterm property)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.solve"]], "sweep() (fipy.terms.exponentialconvectionterm.exponentialconvectionterm method)": [[375, "fipy.terms.exponentialConvectionTerm.ExponentialConvectionTerm.sweep"]], "faceterm (class in fipy.terms.faceterm)": [[376, "fipy.terms.faceTerm.FaceTerm"]], "rhsvector (fipy.terms.faceterm.faceterm property)": [[376, "fipy.terms.faceTerm.FaceTerm.RHSvector"]], "__eq__() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.__eq__"]], "__hash__() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.__hash__"]], "__mul__() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.__mul__"]], "__neg__() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.__neg__"]], "__repr__() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.__repr__"]], "__rmul__() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.__rmul__"]], "cachematrix() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.cacheRHSvector"]], "fipy.terms.faceterm": [[376, "module-fipy.terms.faceTerm"]], "justerrorvector() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.justResidualVector"]], "matrix (fipy.terms.faceterm.faceterm property)": [[376, "fipy.terms.faceTerm.FaceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.solve"]], "sweep() (fipy.terms.faceterm.faceterm method)": [[376, "fipy.terms.faceTerm.FaceTerm.sweep"]], "firstorderadvectionterm (class in fipy.terms.firstorderadvectionterm)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm"]], "rhsvector (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.RHSvector"]], "__eq__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__eq__"]], "__hash__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__hash__"]], "__mul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__mul__"]], "__neg__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__neg__"]], "__repr__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__repr__"]], "__rmul__() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.cacheRHSvector"]], "fipy.terms.firstorderadvectionterm": [[377, "module-fipy.terms.firstOrderAdvectionTerm"]], "justerrorvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.justResidualVector"]], "matrix (fipy.terms.firstorderadvectionterm.firstorderadvectionterm property)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.solve"]], "sweep() (fipy.terms.firstorderadvectionterm.firstorderadvectionterm method)": [[377, "fipy.terms.firstOrderAdvectionTerm.FirstOrderAdvectionTerm.sweep"]], "hybridconvectionterm (class in fipy.terms.hybridconvectionterm)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm"]], "rhsvector (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__eq__"]], "__hash__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__hash__"]], "__mul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__mul__"]], "__neg__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__neg__"]], "__repr__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.cacheRHSvector"]], "fipy.terms.hybridconvectionterm": [[378, "module-fipy.terms.hybridConvectionTerm"]], "justerrorvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.justResidualVector"]], "matrix (fipy.terms.hybridconvectionterm.hybridconvectionterm property)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.solve"]], "sweep() (fipy.terms.hybridconvectionterm.hybridconvectionterm method)": [[378, "fipy.terms.hybridConvectionTerm.HybridConvectionTerm.sweep"]], "implicitdiffusionterm (in module fipy.terms.implicitdiffusionterm)": [[379, "fipy.terms.implicitDiffusionTerm.ImplicitDiffusionTerm"]], "fipy.terms.implicitdiffusionterm": [[379, "module-fipy.terms.implicitDiffusionTerm"]], "implicitsourceterm (class in fipy.terms.implicitsourceterm)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm"]], "rhsvector (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.RHSvector"]], "__eq__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__eq__"]], "__hash__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__hash__"]], "__mul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__mul__"]], "__neg__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__neg__"]], "__repr__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__repr__"]], "__rmul__() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.__rmul__"]], "cachematrix() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.cacheRHSvector"]], "fipy.terms.implicitsourceterm": [[380, "module-fipy.terms.implicitSourceTerm"]], "justerrorvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.justResidualVector"]], "matrix (fipy.terms.implicitsourceterm.implicitsourceterm property)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.solve"]], "sweep() (fipy.terms.implicitsourceterm.implicitsourceterm method)": [[380, "fipy.terms.implicitSourceTerm.ImplicitSourceTerm.sweep"]], "fipy.terms.nondiffusionterm": [[381, "module-fipy.terms.nonDiffusionTerm"]], "powerlawconvectionterm (class in fipy.terms.powerlawconvectionterm)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm"]], "rhsvector (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.RHSvector"]], "__eq__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__eq__"]], "__hash__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__hash__"]], "__mul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__mul__"]], "__neg__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__neg__"]], "__repr__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.cacheRHSvector"]], "fipy.terms.powerlawconvectionterm": [[382, "module-fipy.terms.powerLawConvectionTerm"]], "justerrorvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.justResidualVector"]], "matrix (fipy.terms.powerlawconvectionterm.powerlawconvectionterm property)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.solve"]], "sweep() (fipy.terms.powerlawconvectionterm.powerlawconvectionterm method)": [[382, "fipy.terms.powerLawConvectionTerm.PowerLawConvectionTerm.sweep"]], "rhsvector (fipy.terms.residualterm.residualterm property)": [[383, "fipy.terms.residualTerm.ResidualTerm.RHSvector"]], "residualterm (class in fipy.terms.residualterm)": [[383, "fipy.terms.residualTerm.ResidualTerm"]], "__eq__() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.__eq__"]], "__hash__() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.__hash__"]], "__mul__() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.__mul__"]], "__neg__() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.__neg__"]], "__repr__() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.__repr__"]], "__rmul__() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.__rmul__"]], "cachematrix() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.cacheRHSvector"]], "fipy.terms.residualterm": [[383, "module-fipy.terms.residualTerm"]], "justerrorvector() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.justErrorVector"]], "justresidualvector() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.justResidualVector"]], "matrix (fipy.terms.residualterm.residualterm property)": [[383, "fipy.terms.residualTerm.ResidualTerm.matrix"]], "residualvectorandnorm() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.residualVectorAndNorm"]], "solve() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.solve"]], "sweep() (fipy.terms.residualterm.residualterm method)": [[383, "fipy.terms.residualTerm.ResidualTerm.sweep"]], "rhsvector (fipy.terms.sourceterm.sourceterm property)": [[384, "fipy.terms.sourceTerm.SourceTerm.RHSvector"]], "sourceterm (class in fipy.terms.sourceterm)": [[384, "fipy.terms.sourceTerm.SourceTerm"]], "__eq__() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.__eq__"]], "__hash__() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.__hash__"]], "__mul__() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.__mul__"]], "__neg__() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.__neg__"]], "__repr__() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.__repr__"]], "__rmul__() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.__rmul__"]], "cachematrix() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.cacheRHSvector"]], "fipy.terms.sourceterm": [[384, "module-fipy.terms.sourceTerm"]], "justerrorvector() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.justErrorVector"]], "justresidualvector() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.justResidualVector"]], "matrix (fipy.terms.sourceterm.sourceterm property)": [[384, "fipy.terms.sourceTerm.SourceTerm.matrix"]], "residualvectorandnorm() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.residualVectorAndNorm"]], "solve() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.solve"]], "sweep() (fipy.terms.sourceterm.sourceterm method)": [[384, "fipy.terms.sourceTerm.SourceTerm.sweep"]], "rhsvector (fipy.terms.term.term property)": [[385, "fipy.terms.term.Term.RHSvector"]], "term (class in fipy.terms.term)": [[385, "fipy.terms.term.Term"]], "__eq__() (fipy.terms.term.term method)": [[385, "fipy.terms.term.Term.__eq__"]], "__hash__() (fipy.terms.term.term method)": [[385, "fipy.terms.term.Term.__hash__"]], "__repr__() (fipy.terms.term.term method)": [[385, "fipy.terms.term.Term.__repr__"]], "cachematrix() (fipy.terms.term.term method)": [[385, "fipy.terms.term.Term.cacheMatrix"]], "cacherhsvector() (fipy.terms.term.term method)": [[385, "fipy.terms.term.Term.cacheRHSvector"]], "fipy.terms.term": [[385, "module-fipy.terms.term"]], "justerrorvector() (fipy.terms.term.term method)": [[385, "fipy.terms.term.Term.justErrorVector"]], "justresidualvector() (fipy.terms.term.term method)": [[385, "fipy.terms.term.Term.justResidualVector"]], "matrix (fipy.terms.term.term property)": [[385, "fipy.terms.term.Term.matrix"]], "residualvectorandnorm() (fipy.terms.term.term method)": [[385, "fipy.terms.term.Term.residualVectorAndNorm"]], "solve() (fipy.terms.term.term method)": [[385, "fipy.terms.term.Term.solve"]], "sweep() (fipy.terms.term.term method)": [[385, "fipy.terms.term.Term.sweep"]], "fipy.terms.test": [[386, "module-fipy.terms.test"]], "rhsvector (fipy.terms.transientterm.transientterm property)": [[387, "fipy.terms.transientTerm.TransientTerm.RHSvector"]], "transientterm (class in fipy.terms.transientterm)": [[387, "fipy.terms.transientTerm.TransientTerm"]], "__eq__() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.__eq__"]], "__hash__() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.__hash__"]], "__mul__() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.__mul__"]], "__neg__() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.__neg__"]], "__repr__() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.__repr__"]], "__rmul__() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.__rmul__"]], "cachematrix() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.cacheRHSvector"]], "fipy.terms.transientterm": [[387, "module-fipy.terms.transientTerm"]], "justerrorvector() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.justErrorVector"]], "justresidualvector() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.justResidualVector"]], "matrix (fipy.terms.transientterm.transientterm property)": [[387, "fipy.terms.transientTerm.TransientTerm.matrix"]], "residualvectorandnorm() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.residualVectorAndNorm"]], "solve() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.solve"]], "sweep() (fipy.terms.transientterm.transientterm method)": [[387, "fipy.terms.transientTerm.TransientTerm.sweep"]], "fipy.terms.unaryterm": [[388, "module-fipy.terms.unaryTerm"]], "rhsvector (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.RHSvector"]], "upwindconvectionterm (class in fipy.terms.upwindconvectionterm)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm"]], "__eq__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__eq__"]], "__hash__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__hash__"]], "__mul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__mul__"]], "__neg__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__neg__"]], "__repr__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.cacheRHSvector"]], "fipy.terms.upwindconvectionterm": [[389, "module-fipy.terms.upwindConvectionTerm"]], "justerrorvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.justResidualVector"]], "matrix (fipy.terms.upwindconvectionterm.upwindconvectionterm property)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.solve"]], "sweep() (fipy.terms.upwindconvectionterm.upwindconvectionterm method)": [[389, "fipy.terms.upwindConvectionTerm.UpwindConvectionTerm.sweep"]], "rhsvector (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.RHSvector"]], "vanleerconvectionterm (class in fipy.terms.vanleerconvectionterm)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm"]], "__eq__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__eq__"]], "__hash__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__hash__"]], "__mul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__mul__"]], "__neg__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__neg__"]], "__repr__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__repr__"]], "__rmul__() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.__rmul__"]], "cachematrix() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheMatrix"]], "cacherhsvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.cacheRHSvector"]], "fipy.terms.vanleerconvectionterm": [[390, "module-fipy.terms.vanLeerConvectionTerm"]], "justerrorvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justErrorVector"]], "justresidualvector() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.justResidualVector"]], "matrix (fipy.terms.vanleerconvectionterm.vanleerconvectionterm property)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.matrix"]], "residualvectorandnorm() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.residualVectorAndNorm"]], "solve() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.solve"]], "sweep() (fipy.terms.vanleerconvectionterm.vanleerconvectionterm method)": [[390, "fipy.terms.vanLeerConvectionTerm.VanLeerConvectionTerm.sweep"]], "fipy.testfipy": [[391, "module-fipy.testFiPy"]], "fipy.tests": [[392, "module-fipy.tests"]], "execbutnotest() (in module fipy.tests.doctestplus)": [[393, "fipy.tests.doctestPlus.execButNoTest"]], "fipy.tests.doctestplus": [[393, "module-fipy.tests.doctestPlus"]], "register_skipper() (in module fipy.tests.doctestplus)": [[393, "fipy.tests.doctestPlus.register_skipper"]], "report_skips() (in module fipy.tests.doctestplus)": [[393, "fipy.tests.doctestPlus.report_skips"]], "testmod() (in module fipy.tests.doctestplus)": [[393, "fipy.tests.doctestPlus.testmod"]], "fipy.tests.lateimporttest": [[394, "module-fipy.tests.lateImportTest"]], "deprecationerroringtestprogram (class in fipy.tests.test)": [[395, "fipy.tests.test.DeprecationErroringTestProgram"]], "finalize_options() (fipy.tests.test.test method)": [[395, "fipy.tests.test.test.finalize_options"]], "fipy.tests.test": [[395, "module-fipy.tests.test"]], "initialize_options() (fipy.tests.test.test method)": [[395, "fipy.tests.test.test.initialize_options"]], "test (class in fipy.tests.test)": [[395, "fipy.tests.test.test"]], "testprogram (class in fipy.tests.testprogram)": [[396, "fipy.tests.testProgram.TestProgram"]], "fipy.tests.testprogram": [[396, "module-fipy.tests.testProgram"]], "main (in module fipy.tests.testprogram)": [[396, "fipy.tests.testProgram.main"]], "physicalfield (class in fipy.tools)": [[397, "fipy.tools.PhysicalField"]], "sharedtemporaryfile() (in module fipy.tools)": [[397, "fipy.tools.SharedTemporaryFile"]], "__abs__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__abs__"]], "__add__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__add__"]], "__array__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__bool__"]], "__div__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__div__"]], "__eq__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__eq__"]], "__float__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__float__"]], "__ge__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__ge__"]], "__getitem__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__gt__"]], "__hash__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__hash__"]], "__le__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__le__"]], "__lt__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__lt__"]], "__mod__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__mod__"]], "__mul__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__mul__"]], "__ne__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__ne__"]], "__neg__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__pow__"]], "__radd__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__radd__"]], "__repr__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__repr__"]], "__rmul__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__rmul__"]], "__setitem__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__setitem__"]], "__str__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__str__"]], "__sub__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.__truediv__"]], "add() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.add"]], "allclose() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.allclose"]], "allequal() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.allequal"]], "arccos() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.arccos"]], "arccosh() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.arccosh"]], "arcsin() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.arcsin"]], "arctan() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.arctan"]], "arctan2() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.arctan2"]], "arctanh() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.arctanh"]], "ceil() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.ceil"]], "conjugate() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.conjugate"]], "converttounit() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.convertToUnit"]], "copy() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.copy"]], "cos() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.cos"]], "cosh() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.cosh"]], "divide() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.divide"]], "dot() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.dot"]], "fipy.tools": [[397, "module-fipy.tools"]], "floor() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.floor"]], "getsctype() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.getsctype"]], "inbaseunits() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.inRadians"]], "insiunits() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.inUnitsOf"]], "itemset() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.itemset"]], "log() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.log"]], "log10() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.log10"]], "multiply() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.multiply"]], "numericvalue (fipy.tools.physicalfield property)": [[397, "fipy.tools.PhysicalField.numericValue"]], "parallelcomm (in module fipy.tools)": [[397, "fipy.tools.parallelComm"]], "put() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.put"]], "reshape() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.reshape"]], "serialcomm (in module fipy.tools)": [[397, "fipy.tools.serialComm"]], "shape (fipy.tools.physicalfield property)": [[397, "fipy.tools.PhysicalField.shape"]], "sign() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.sign"]], "sin() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.sin"]], "sinh() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.sinh"]], "sqrt() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.sqrt"]], "subtract() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.subtract"]], "sum() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.sum"]], "take() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.take"]], "tan() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.tan"]], "tanh() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.tanh"]], "tostring() (fipy.tools.physicalfield method)": [[397, "fipy.tools.PhysicalField.tostring"]], "unit (fipy.tools.physicalfield property)": [[397, "fipy.tools.PhysicalField.unit"]], "fipy.tools.comms": [[398, "module-fipy.tools.comms"]], "commwrapper (class in fipy.tools.comms.commwrapper)": [[399, "fipy.tools.comms.commWrapper.CommWrapper"]], "__getstate__() (fipy.tools.comms.commwrapper.commwrapper method)": [[399, "fipy.tools.comms.commWrapper.CommWrapper.__getstate__"]], "__repr__() (fipy.tools.comms.commwrapper.commwrapper method)": [[399, "fipy.tools.comms.commWrapper.CommWrapper.__repr__"]], "fipy.tools.comms.commwrapper": [[399, "module-fipy.tools.comms.commWrapper"]], "dummycomm (class in fipy.tools.comms.dummycomm)": [[400, "fipy.tools.comms.dummyComm.DummyComm"]], "__getstate__() (fipy.tools.comms.dummycomm.dummycomm method)": [[400, "fipy.tools.comms.dummyComm.DummyComm.__getstate__"]], "__repr__() (fipy.tools.comms.dummycomm.dummycomm method)": [[400, "fipy.tools.comms.dummyComm.DummyComm.__repr__"]], "fipy.tools.comms.dummycomm": [[400, "module-fipy.tools.comms.dummyComm"]], "print() (in module fipy.tools.debug)": [[401, "fipy.tools.debug.PRINT"]], "fipy.tools.debug": [[401, "module-fipy.tools.debug"]], "deprecate() (in module fipy.tools.decorators)": [[402, "fipy.tools.decorators.deprecate"]], "fipy.tools.decorators": [[402, "module-fipy.tools.decorators"]], "fipy.tools.dimensions": [[403, "module-fipy.tools.dimensions"]], "fipy.tools.dimensions.dictwithdefault": [[404, "module-fipy.tools.dimensions.DictWithDefault"]], "fipy.tools.dimensions.numberdict": [[405, "module-fipy.tools.dimensions.NumberDict"]], "physicalfield (class in fipy.tools.dimensions.physicalfield)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField"]], "physicalunit (class in fipy.tools.dimensions.physicalfield)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit"]], "__abs__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__abs__"]], "__add__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__add__"]], "__array__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__array__"]], "__array_wrap__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__array_wrap__"]], "__bool__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__bool__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__div__"]], "__div__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__div__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__eq__"]], "__eq__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__eq__"]], "__float__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__float__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__ge__"]], "__ge__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ge__"]], "__getitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__getitem__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__gt__"]], "__gt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__gt__"]], "__hash__ (fipy.tools.dimensions.physicalfield.physicalunit attribute)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__hash__"]], "__hash__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__hash__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__le__"]], "__le__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__le__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__lt__"]], "__lt__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__lt__"]], "__mod__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__mod__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__mul__"]], "__mul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__mul__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__ne__"]], "__ne__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__ne__"]], "__neg__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__neg__"]], "__nonzero__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__nonzero__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__pow__"]], "__pow__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__pow__"]], "__radd__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__radd__"]], "__rdiv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rdiv__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__repr__"]], "__repr__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__repr__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__rmul__"]], "__rmul__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rmul__"]], "__rtruediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__rtruediv__"]], "__setitem__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__setitem__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__str__"]], "__str__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__str__"]], "__sub__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__sub__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.__truediv__"]], "__truediv__() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.__truediv__"]], "add() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.add"]], "allclose() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.allclose"]], "allequal() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.allequal"]], "arccos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.arccos"]], "arccosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.arccosh"]], "arcsin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.arcsin"]], "arctan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.arctan"]], "arctan2() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.arctan2"]], "arctanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.arctanh"]], "ceil() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.ceil"]], "conjugate() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.conjugate"]], "conversionfactorto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionFactorTo"]], "conversiontupleto() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.conversionTupleTo"]], "converttounit() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.convertToUnit"]], "copy() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.copy"]], "cos() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.cos"]], "cosh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.cosh"]], "divide() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.divide"]], "dot() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.dot"]], "fipy.tools.dimensions.physicalfield": [[406, "module-fipy.tools.dimensions.physicalField"]], "floor() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.floor"]], "getsctype() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.getsctype"]], "inbaseunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.inBaseUnits"]], "indimensionless() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.inDimensionless"]], "inradians() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.inRadians"]], "insiunits() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.inSIUnits"]], "inunitsof() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.inUnitsOf"]], "isangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.isAngle"]], "iscompatible() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.isCompatible"]], "isdimensionless() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionless"]], "isdimensionlessorangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.isDimensionlessOrAngle"]], "isinverseangle() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.isInverseAngle"]], "itemset() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.itemset"]], "log() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.log"]], "log10() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.log10"]], "multiply() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.multiply"]], "name() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.name"]], "numericvalue (fipy.tools.dimensions.physicalfield.physicalfield property)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.numericValue"]], "put() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.put"]], "reshape() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.reshape"]], "setname() (fipy.tools.dimensions.physicalfield.physicalunit method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalUnit.setName"]], "shape (fipy.tools.dimensions.physicalfield.physicalfield property)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.shape"]], "sign() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.sign"]], "sin() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.sin"]], "sinh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.sinh"]], "sqrt() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.sqrt"]], "subtract() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.subtract"]], "sum() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.sum"]], "take() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.take"]], "tan() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.tan"]], "tanh() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.tanh"]], "tostring() (fipy.tools.dimensions.physicalfield.physicalfield method)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.tostring"]], "unit (fipy.tools.dimensions.physicalfield.physicalfield property)": [[406, "fipy.tools.dimensions.physicalField.PhysicalField.unit"]], "read() (in module fipy.tools.dump)": [[407, "fipy.tools.dump.read"]], "write() (in module fipy.tools.dump)": [[407, "fipy.tools.dump.write"]], "fipy.tools.inline": [[408, "module-fipy.tools.inline"]], "fipy.tools.logging": [[409, "module-fipy.tools.logging"]], "conda_info() (in module fipy.tools.logging.environment)": [[410, "fipy.tools.logging.environment.conda_info"]], "fipy.tools.logging.environment": [[410, "module-fipy.tools.logging.environment"]], "package_info() (in module fipy.tools.logging.environment)": [[410, "fipy.tools.logging.environment.package_info"]], "platform_info() (in module fipy.tools.logging.environment)": [[410, "fipy.tools.logging.environment.platform_info"]], "l1norm() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.L1norm"]], "l2norm() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.L2norm"]], "linfnorm() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.LINFnorm"]], "all() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.all"]], "allclose() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.allclose"]], "allequal() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.allequal"]], "dot() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.dot"]], "fipy.tools.numerix": [[411, "module-fipy.tools.numerix"]], "getshape() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.getShape"]], "getunit() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.getUnit"]], "isclose() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.isclose"]], "nearest() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.nearest"]], "put() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.put"]], "rank() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.rank"]], "reshape() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.reshape"]], "sqrtdot() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.sqrtDot"]], "sum() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.sum"]], "take() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.take"]], "tostring() (in module fipy.tools.numerix)": [[411, "fipy.tools.numerix.tostring"]], "parse() (in module fipy.tools.parser)": [[412, "fipy.tools.parser.parse"]], "sharedtemporaryfile() (in module fipy.tools.sharedtempfile)": [[413, "fipy.tools.sharedtempfile.SharedTemporaryFile"]], "fipy.tools.sharedtempfile": [[413, "module-fipy.tools.sharedtempfile"]], "fipy.tools.test": [[414, "module-fipy.tools.test"]], "fipy.tools.vector": [[415, "module-fipy.tools.vector"]], "prune() (in module fipy.tools.vector)": [[415, "fipy.tools.vector.prune"]], "putadd() (in module fipy.tools.vector)": [[415, "fipy.tools.vector.putAdd"]], "fipy.tools.version": [[416, "module-fipy.tools.version"]], "fipy.variables": [[417, "module-fipy.variables"]], "fipy.variables.addoverfacesvariable": [[418, "module-fipy.variables.addOverFacesVariable"]], "fipy.variables.arithmeticcelltofacevariable": [[419, "module-fipy.variables.arithmeticCellToFaceVariable"]], "betanoisevariable (class in fipy.variables.betanoisevariable)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable"]], "__abs__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__abs__"]], "__and__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__and__"]], "__array__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__bool__"]], "__call__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__call__"]], "__eq__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__invert__"]], "__le__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__le__"]], "__lt__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__ne__"]], "__new__() (fipy.variables.betanoisevariable.betanoisevariable static method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__or__"]], "__pow__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.__str__"]], "all() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.all"]], "allclose() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.allclose"]], "any() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constrain"]], "constraintmask (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.constraintMask"]], "copy() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.copy"]], "dot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.dot"]], "facegrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.faceValue"]], "fipy.variables.betanoisevariable": [[420, "module-fipy.variables.betaNoiseVariable"]], "gaussgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.getsctype"]], "globalvalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.globalValue"]], "grad (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.mag"]], "max() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.max"]], "min() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.old"]], "rdot() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.rdot"]], "release() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.release"]], "scramble() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.scramble"]], "setvalue() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.setValue"]], "shape (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.shape"]], "std() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.std"]], "unit (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.unit"]], "updateold() (fipy.variables.betanoisevariable.betanoisevariable method)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.updateOld"]], "value (fipy.variables.betanoisevariable.betanoisevariable property)": [[420, "fipy.variables.betaNoiseVariable.BetaNoiseVariable.value"]], "fipy.variables.binaryoperatorvariable": [[421, "module-fipy.variables.binaryOperatorVariable"]], "fipy.variables.celltofacevariable": [[422, "module-fipy.variables.cellToFaceVariable"]], "cellvariable (class in fipy.variables.cellvariable)": [[423, "fipy.variables.cellVariable.CellVariable"]], "__abs__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__abs__"]], "__and__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__and__"]], "__array__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__array__"]], "__array_wrap__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__array_wrap__"]], "__bool__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__bool__"]], "__call__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__call__"]], "__eq__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__eq__"]], "__ge__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__ge__"]], "__getitem__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__getitem__"]], "__getstate__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__getstate__"]], "__gt__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__gt__"]], "__hash__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__hash__"]], "__invert__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__invert__"]], "__le__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__le__"]], "__lt__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__lt__"]], "__ne__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__ne__"]], "__new__() (fipy.variables.cellvariable.cellvariable static method)": [[423, "fipy.variables.cellVariable.CellVariable.__new__"]], "__nonzero__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__nonzero__"]], "__or__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__or__"]], "__pow__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__pow__"]], "__repr__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__repr__"]], "__setstate__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__setstate__"]], "__str__() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.__str__"]], "all() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.all"]], "allclose() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.allclose"]], "any() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.any"]], "arithmeticfacevalue (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.cellVolumeAverage"]], "constrain() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.constrain"]], "constraintmask (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.constraintMask"]], "copy() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.copy"]], "dot() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.dot"]], "facegrad (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.faceGrad"]], "facegradaverage (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.faceGradAverage"]], "facevalue (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.faceValue"]], "fipy.variables.cellvariable": [[423, "module-fipy.variables.cellVariable"]], "gaussgrad (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.gaussGrad"]], "getsctype() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.getsctype"]], "globalvalue (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.globalValue"]], "grad (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.grad"]], "harmonicfacevalue (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.inBaseUnits"]], "inunitsof() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.leastSquaresGrad"]], "mag (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.mag"]], "max() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.max"]], "min() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.min"]], "minmodfacevalue (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.minmodFaceValue"]], "old (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.old"]], "rdot() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.rdot"]], "release() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.release"]], "setvalue() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.setValue"]], "shape (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.shape"]], "std() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.std"]], "unit (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.unit"]], "updateold() (fipy.variables.cellvariable.cellvariable method)": [[423, "fipy.variables.cellVariable.CellVariable.updateOld"]], "value (fipy.variables.cellvariable.cellvariable property)": [[423, "fipy.variables.cellVariable.CellVariable.value"]], "fipy.variables.constant": [[424, "module-fipy.variables.constant"]], "fipy.variables.constraintmask": [[425, "module-fipy.variables.constraintMask"]], "fipy.variables.coupledcellvariable": [[426, "module-fipy.variables.coupledCellVariable"]], "distancevariable (class in fipy.variables.distancevariable)": [[427, "fipy.variables.distanceVariable.DistanceVariable"]], "__abs__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__abs__"]], "__and__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__and__"]], "__array__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__array__"]], "__array_wrap__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__array_wrap__"]], "__bool__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__bool__"]], "__call__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__call__"]], "__eq__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__eq__"]], "__ge__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__ge__"]], "__getitem__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__getitem__"]], "__getstate__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__getstate__"]], "__gt__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__gt__"]], "__hash__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__hash__"]], "__invert__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__invert__"]], "__le__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__le__"]], "__lt__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__lt__"]], "__ne__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__ne__"]], "__new__() (fipy.variables.distancevariable.distancevariable static method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__new__"]], "__nonzero__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__nonzero__"]], "__or__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__or__"]], "__pow__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__pow__"]], "__repr__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__repr__"]], "__setstate__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__setstate__"]], "__str__() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.__str__"]], "all() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.all"]], "allclose() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.allclose"]], "any() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.any"]], "arithmeticfacevalue (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.arithmeticFaceValue"]], "calcdistancefunction() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.calcDistanceFunction"]], "cellinterfaceareas (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.cellInterfaceAreas"]], "cellvolumeaverage (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.cellVolumeAverage"]], "constrain() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.constrain"]], "constraintmask (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.constraintMask"]], "copy() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.copy"]], "dot() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.dot"]], "extendvariable() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.extendVariable"]], "facegrad (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.faceGrad"]], "facegradaverage (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.faceGradAverage"]], "facevalue (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.faceValue"]], "fipy.variables.distancevariable": [[427, "module-fipy.variables.distanceVariable"]], "gaussgrad (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.gaussGrad"]], "getsctype() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.getsctype"]], "globalvalue (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.globalValue"]], "grad (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.grad"]], "harmonicfacevalue (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.leastSquaresGrad"]], "mag (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.mag"]], "max() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.max"]], "min() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.min"]], "minmodfacevalue (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.minmodFaceValue"]], "old (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.old"]], "rdot() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.rdot"]], "release() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.release"]], "setvalue() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.setValue"]], "shape (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.shape"]], "std() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.std"]], "unit (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.unit"]], "updateold() (fipy.variables.distancevariable.distancevariable method)": [[427, "fipy.variables.distanceVariable.DistanceVariable.updateOld"]], "value (fipy.variables.distancevariable.distancevariable property)": [[427, "fipy.variables.distanceVariable.DistanceVariable.value"]], "exponentialnoisevariable (class in fipy.variables.exponentialnoisevariable)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable"]], "__abs__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__abs__"]], "__and__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__and__"]], "__array__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__bool__"]], "__call__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__call__"]], "__eq__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__eq__"]], "__ge__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__gt__"]], "__hash__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__hash__"]], "__invert__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__invert__"]], "__le__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__le__"]], "__lt__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__lt__"]], "__ne__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__ne__"]], "__new__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable static method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__or__"]], "__pow__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__pow__"]], "__repr__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__setstate__"]], "__str__() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.__str__"]], "all() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.all"]], "allclose() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.allclose"]], "any() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constrain"]], "constraintmask (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.constraintMask"]], "copy() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.copy"]], "dot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.dot"]], "facegrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.faceValue"]], "fipy.variables.exponentialnoisevariable": [[428, "module-fipy.variables.exponentialNoiseVariable"]], "gaussgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.getsctype"]], "globalvalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.globalValue"]], "grad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.mag"]], "max() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.max"]], "min() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.min"]], "minmodfacevalue (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.minmodFaceValue"]], "old (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.old"]], "rdot() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.rdot"]], "release() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.release"]], "scramble() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.scramble"]], "setvalue() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.setValue"]], "shape (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.shape"]], "std() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.std"]], "unit (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.unit"]], "updateold() (fipy.variables.exponentialnoisevariable.exponentialnoisevariable method)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.updateOld"]], "value (fipy.variables.exponentialnoisevariable.exponentialnoisevariable property)": [[428, "fipy.variables.exponentialNoiseVariable.ExponentialNoiseVariable.value"]], "fipy.variables.facegradcontributionsvariable": [[429, "module-fipy.variables.faceGradContributionsVariable"]], "fipy.variables.facegradvariable": [[430, "module-fipy.variables.faceGradVariable"]], "facevariable (class in fipy.variables.facevariable)": [[431, "fipy.variables.faceVariable.FaceVariable"]], "__abs__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__abs__"]], "__and__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__and__"]], "__array__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__array__"]], "__array_wrap__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__bool__"]], "__call__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__call__"]], "__eq__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__eq__"]], "__ge__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__ge__"]], "__getitem__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__getitem__"]], "__getstate__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__getstate__"]], "__gt__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__gt__"]], "__hash__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__hash__"]], "__invert__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__invert__"]], "__le__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__le__"]], "__lt__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__lt__"]], "__ne__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__ne__"]], "__new__() (fipy.variables.facevariable.facevariable static method)": [[431, "fipy.variables.faceVariable.FaceVariable.__new__"]], "__nonzero__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__nonzero__"]], "__or__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__or__"]], "__pow__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__pow__"]], "__repr__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__repr__"]], "__setstate__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__setstate__"]], "__str__() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.__str__"]], "all() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.all"]], "allclose() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.allclose"]], "any() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.any"]], "constrain() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.constrain"]], "constraintmask (fipy.variables.facevariable.facevariable property)": [[431, "fipy.variables.faceVariable.FaceVariable.constraintMask"]], "copy() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.copy"]], "divergence (fipy.variables.facevariable.facevariable property)": [[431, "fipy.variables.faceVariable.FaceVariable.divergence"]], "dot() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.dot"]], "fipy.variables.facevariable": [[431, "module-fipy.variables.faceVariable"]], "getsctype() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.getsctype"]], "inbaseunits() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.inUnitsOf"]], "mag (fipy.variables.facevariable.facevariable property)": [[431, "fipy.variables.faceVariable.FaceVariable.mag"]], "max() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.max"]], "min() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.min"]], "rdot() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.rdot"]], "release() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.release"]], "setvalue() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.setValue"]], "shape (fipy.variables.facevariable.facevariable property)": [[431, "fipy.variables.faceVariable.FaceVariable.shape"]], "std() (fipy.variables.facevariable.facevariable method)": [[431, "fipy.variables.faceVariable.FaceVariable.std"]], "unit (fipy.variables.facevariable.facevariable property)": [[431, "fipy.variables.faceVariable.FaceVariable.unit"]], "value (fipy.variables.facevariable.facevariable property)": [[431, "fipy.variables.faceVariable.FaceVariable.value"]], "gammanoisevariable (class in fipy.variables.gammanoisevariable)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable"]], "__abs__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__abs__"]], "__and__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__and__"]], "__array__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__bool__"]], "__call__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__call__"]], "__eq__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__invert__"]], "__le__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__le__"]], "__lt__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__ne__"]], "__new__() (fipy.variables.gammanoisevariable.gammanoisevariable static method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__or__"]], "__pow__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.__str__"]], "all() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.all"]], "allclose() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.allclose"]], "any() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constrain"]], "constraintmask (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.constraintMask"]], "copy() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.copy"]], "dot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.dot"]], "facegrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.faceValue"]], "fipy.variables.gammanoisevariable": [[432, "module-fipy.variables.gammaNoiseVariable"]], "gaussgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.getsctype"]], "globalvalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.globalValue"]], "grad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.mag"]], "max() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.max"]], "min() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.old"]], "rdot() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.rdot"]], "release() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.release"]], "scramble() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.scramble"]], "setvalue() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.setValue"]], "shape (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.shape"]], "std() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.std"]], "unit (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.unit"]], "updateold() (fipy.variables.gammanoisevariable.gammanoisevariable method)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.updateOld"]], "value (fipy.variables.gammanoisevariable.gammanoisevariable property)": [[432, "fipy.variables.gammaNoiseVariable.GammaNoiseVariable.value"]], "fipy.variables.gausscellgradvariable": [[433, "module-fipy.variables.gaussCellGradVariable"]], "gaussiannoisevariable (class in fipy.variables.gaussiannoisevariable)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable"]], "__abs__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__abs__"]], "__and__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__and__"]], "__array__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__bool__"]], "__call__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__call__"]], "__eq__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__eq__"]], "__ge__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__gt__"]], "__hash__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__hash__"]], "__invert__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__invert__"]], "__le__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__le__"]], "__lt__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__lt__"]], "__ne__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__ne__"]], "__new__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable static method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__or__"]], "__pow__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__pow__"]], "__repr__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__setstate__"]], "__str__() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.__str__"]], "all() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.all"]], "allclose() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.allclose"]], "any() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constrain"]], "constraintmask (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.constraintMask"]], "copy() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.copy"]], "dot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.dot"]], "facegrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.faceValue"]], "fipy.variables.gaussiannoisevariable": [[434, "module-fipy.variables.gaussianNoiseVariable"]], "gaussgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.getsctype"]], "globalvalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.globalValue"]], "grad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.mag"]], "max() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.max"]], "min() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.min"]], "minmodfacevalue (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.minmodFaceValue"]], "old (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.old"]], "rdot() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.rdot"]], "release() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.release"]], "scramble() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.scramble"]], "setvalue() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.setValue"]], "shape (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.shape"]], "std() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.std"]], "unit (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.unit"]], "updateold() (fipy.variables.gaussiannoisevariable.gaussiannoisevariable method)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.updateOld"]], "value (fipy.variables.gaussiannoisevariable.gaussiannoisevariable property)": [[434, "fipy.variables.gaussianNoiseVariable.GaussianNoiseVariable.value"]], "fipy.variables.harmoniccelltofacevariable": [[435, "module-fipy.variables.harmonicCellToFaceVariable"]], "histogramvariable (class in fipy.variables.histogramvariable)": [[436, "fipy.variables.histogramVariable.HistogramVariable"]], "__abs__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__abs__"]], "__and__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__and__"]], "__array__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__array__"]], "__array_wrap__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__array_wrap__"]], "__bool__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__bool__"]], "__call__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__call__"]], "__eq__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__eq__"]], "__ge__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__ge__"]], "__getitem__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__getitem__"]], "__getstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__getstate__"]], "__gt__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__gt__"]], "__hash__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__hash__"]], "__invert__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__invert__"]], "__le__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__le__"]], "__lt__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__lt__"]], "__ne__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__ne__"]], "__new__() (fipy.variables.histogramvariable.histogramvariable static method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__new__"]], "__nonzero__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__nonzero__"]], "__or__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__or__"]], "__pow__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__pow__"]], "__repr__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__repr__"]], "__setstate__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__setstate__"]], "__str__() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.__str__"]], "all() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.all"]], "allclose() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.allclose"]], "any() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.any"]], "arithmeticfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.cellVolumeAverage"]], "constrain() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.constrain"]], "constraintmask (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.constraintMask"]], "copy() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.copy"]], "dot() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.dot"]], "facegrad (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.faceGrad"]], "facegradaverage (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.faceGradAverage"]], "facevalue (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.faceValue"]], "fipy.variables.histogramvariable": [[436, "module-fipy.variables.histogramVariable"]], "gaussgrad (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.gaussGrad"]], "getsctype() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.getsctype"]], "globalvalue (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.globalValue"]], "grad (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.grad"]], "harmonicfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.inBaseUnits"]], "inunitsof() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.leastSquaresGrad"]], "mag (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.mag"]], "max() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.max"]], "min() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.min"]], "minmodfacevalue (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.minmodFaceValue"]], "old (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.old"]], "rdot() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.rdot"]], "release() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.release"]], "setvalue() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.setValue"]], "shape (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.shape"]], "std() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.std"]], "unit (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.unit"]], "updateold() (fipy.variables.histogramvariable.histogramvariable method)": [[436, "fipy.variables.histogramVariable.HistogramVariable.updateOld"]], "value (fipy.variables.histogramvariable.histogramvariable property)": [[436, "fipy.variables.histogramVariable.HistogramVariable.value"]], "fipy.variables.interfaceareavariable": [[437, "module-fipy.variables.interfaceAreaVariable"]], "fipy.variables.interfaceflagvariable": [[438, "module-fipy.variables.interfaceFlagVariable"]], "fipy.variables.leastsquarescellgradvariable": [[439, "module-fipy.variables.leastSquaresCellGradVariable"]], "fipy.variables.levelsetdiffusionvariable": [[440, "module-fipy.variables.levelSetDiffusionVariable"]], "meshvariable (class in fipy.variables.meshvariable)": [[441, "fipy.variables.meshVariable.MeshVariable"]], "__abs__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__abs__"]], "__and__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__and__"]], "__array__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__array__"]], "__array_wrap__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__array_wrap__"]], "__bool__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__bool__"]], "__call__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__call__"]], "__eq__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__eq__"]], "__ge__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__ge__"]], "__getitem__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__getitem__"]], "__getstate__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__getstate__"]], "__gt__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__gt__"]], "__hash__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__hash__"]], "__invert__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__invert__"]], "__le__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__le__"]], "__lt__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__lt__"]], "__ne__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__ne__"]], "__new__() (fipy.variables.meshvariable.meshvariable static method)": [[441, "fipy.variables.meshVariable.MeshVariable.__new__"]], "__nonzero__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__nonzero__"]], "__or__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__or__"]], "__pow__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__pow__"]], "__repr__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__repr__"]], "__setstate__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__setstate__"]], "__str__() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.__str__"]], "all() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.all"]], "allclose() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.allclose"]], "any() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.any"]], "constrain() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.constrain"]], "constraintmask (fipy.variables.meshvariable.meshvariable property)": [[441, "fipy.variables.meshVariable.MeshVariable.constraintMask"]], "copy() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.copy"]], "dot() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.dot"]], "fipy.variables.meshvariable": [[441, "module-fipy.variables.meshVariable"]], "getsctype() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.getsctype"]], "inbaseunits() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.inBaseUnits"]], "inunitsof() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.inUnitsOf"]], "mag (fipy.variables.meshvariable.meshvariable property)": [[441, "fipy.variables.meshVariable.MeshVariable.mag"]], "max() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.max"]], "min() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.min"]], "rdot() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.rdot"]], "release() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.release"]], "setvalue() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.setValue"]], "shape (fipy.variables.meshvariable.meshvariable property)": [[441, "fipy.variables.meshVariable.MeshVariable.shape"]], "std() (fipy.variables.meshvariable.meshvariable method)": [[441, "fipy.variables.meshVariable.MeshVariable.std"]], "unit (fipy.variables.meshvariable.meshvariable property)": [[441, "fipy.variables.meshVariable.MeshVariable.unit"]], "value (fipy.variables.meshvariable.meshvariable property)": [[441, "fipy.variables.meshVariable.MeshVariable.value"]], "fipy.variables.minmodcelltofacevariable": [[442, "module-fipy.variables.minmodCellToFaceVariable"]], "fipy.variables.modcellgradvariable": [[443, "module-fipy.variables.modCellGradVariable"]], "fipy.variables.modcelltofacevariable": [[444, "module-fipy.variables.modCellToFaceVariable"]], "fipy.variables.modfacegradvariable": [[445, "module-fipy.variables.modFaceGradVariable"]], "fipy.variables.modphysicalfield": [[446, "module-fipy.variables.modPhysicalField"]], "modularvariable (class in fipy.variables.modularvariable)": [[447, "fipy.variables.modularVariable.ModularVariable"]], "__abs__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__abs__"]], "__and__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__and__"]], "__array__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__array__"]], "__array_wrap__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__array_wrap__"]], "__bool__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__bool__"]], "__call__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__call__"]], "__eq__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__eq__"]], "__ge__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__ge__"]], "__getitem__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__getitem__"]], "__getstate__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__getstate__"]], "__gt__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__gt__"]], "__hash__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__hash__"]], "__invert__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__invert__"]], "__le__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__le__"]], "__lt__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__lt__"]], "__ne__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__ne__"]], "__new__() (fipy.variables.modularvariable.modularvariable static method)": [[447, "fipy.variables.modularVariable.ModularVariable.__new__"]], "__nonzero__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__nonzero__"]], "__or__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__or__"]], "__pow__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__pow__"]], "__repr__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__repr__"]], "__setstate__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__setstate__"]], "__str__() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.__str__"]], "all() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.all"]], "allclose() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.allclose"]], "any() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.any"]], "arithmeticfacevalue (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.cellVolumeAverage"]], "constrain() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.constrain"]], "constraintmask (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.constraintMask"]], "copy() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.copy"]], "dot() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.dot"]], "facegrad (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.faceGrad"]], "facegradaverage (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.faceGradAverage"]], "facegradnomod (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.faceGradNoMod"]], "facevalue (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.faceValue"]], "fipy.variables.modularvariable": [[447, "module-fipy.variables.modularVariable"]], "gaussgrad (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.gaussGrad"]], "getsctype() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.getsctype"]], "globalvalue (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.globalValue"]], "grad (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.grad"]], "harmonicfacevalue (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.inBaseUnits"]], "inunitsof() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.leastSquaresGrad"]], "mag (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.mag"]], "max() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.max"]], "min() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.min"]], "minmodfacevalue (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.minmodFaceValue"]], "old (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.old"]], "rdot() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.rdot"]], "release() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.release"]], "setvalue() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.setValue"]], "shape (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.shape"]], "std() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.std"]], "unit (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.unit"]], "updateold() (fipy.variables.modularvariable.modularvariable method)": [[447, "fipy.variables.modularVariable.ModularVariable.updateOld"]], "value (fipy.variables.modularvariable.modularvariable property)": [[447, "fipy.variables.modularVariable.ModularVariable.value"]], "noisevariable (class in fipy.variables.noisevariable)": [[448, "fipy.variables.noiseVariable.NoiseVariable"]], "__abs__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__abs__"]], "__and__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__and__"]], "__array__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__bool__"]], "__call__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__call__"]], "__eq__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__eq__"]], "__ge__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__ge__"]], "__getitem__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__getstate__"]], "__gt__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__gt__"]], "__hash__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__hash__"]], "__invert__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__invert__"]], "__le__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__le__"]], "__lt__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__lt__"]], "__ne__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__ne__"]], "__new__() (fipy.variables.noisevariable.noisevariable static method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__new__"]], "__nonzero__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__nonzero__"]], "__or__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__or__"]], "__pow__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__pow__"]], "__repr__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__repr__"]], "__setstate__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__setstate__"]], "__str__() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.__str__"]], "all() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.all"]], "allclose() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.allclose"]], "any() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.constrain"]], "constraintmask (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.constraintMask"]], "copy() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.copy"]], "dot() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.dot"]], "facegrad (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.faceValue"]], "fipy.variables.noisevariable": [[448, "module-fipy.variables.noiseVariable"]], "gaussgrad (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.getsctype"]], "globalvalue (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.globalValue"]], "grad (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.mag"]], "max() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.max"]], "min() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.min"]], "minmodfacevalue (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.minmodFaceValue"]], "old (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.old"]], "rdot() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.rdot"]], "release() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.release"]], "scramble() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.scramble"]], "setvalue() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.setValue"]], "shape (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.shape"]], "std() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.std"]], "unit (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.unit"]], "updateold() (fipy.variables.noisevariable.noisevariable method)": [[448, "fipy.variables.noiseVariable.NoiseVariable.updateOld"]], "value (fipy.variables.noisevariable.noisevariable property)": [[448, "fipy.variables.noiseVariable.NoiseVariable.value"]], "fipy.variables.operatorvariable": [[449, "module-fipy.variables.operatorVariable"]], "scharfettergummelfacevariable (class in fipy.variables.scharfettergummelfacevariable)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable"]], "__abs__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__abs__"]], "__and__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__and__"]], "__array__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array__"]], "__array_wrap__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__array_wrap__"]], "__bool__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__bool__"]], "__call__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__call__"]], "__eq__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__eq__"]], "__ge__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ge__"]], "__getitem__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getitem__"]], "__getstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__getstate__"]], "__gt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__gt__"]], "__hash__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__hash__"]], "__invert__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__invert__"]], "__le__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__le__"]], "__lt__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__lt__"]], "__ne__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__ne__"]], "__new__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable static method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__new__"]], "__nonzero__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__nonzero__"]], "__or__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__or__"]], "__pow__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__pow__"]], "__repr__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__repr__"]], "__setstate__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__setstate__"]], "__str__() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.__str__"]], "all() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.all"]], "allclose() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.allclose"]], "any() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.any"]], "constrain() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constrain"]], "constraintmask (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.constraintMask"]], "copy() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.copy"]], "divergence (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.divergence"]], "dot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.dot"]], "fipy.variables.scharfettergummelfacevariable": [[450, "module-fipy.variables.scharfetterGummelFaceVariable"]], "getsctype() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.getsctype"]], "inbaseunits() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inBaseUnits"]], "inunitsof() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.inUnitsOf"]], "mag (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.mag"]], "max() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.max"]], "min() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.min"]], "rdot() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.rdot"]], "release() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.release"]], "setvalue() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.setValue"]], "shape (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.shape"]], "std() (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable method)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.std"]], "unit (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.unit"]], "value (fipy.variables.scharfettergummelfacevariable.scharfettergummelfacevariable property)": [[450, "fipy.variables.scharfetterGummelFaceVariable.ScharfetterGummelFaceVariable.value"]], "surfactantconvectionvariable (class in fipy.variables.surfactantconvectionvariable)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable"]], "__abs__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__abs__"]], "__and__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__and__"]], "__array__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__bool__"]], "__call__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__call__"]], "__eq__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__eq__"]], "__ge__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__gt__"]], "__hash__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__hash__"]], "__invert__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__invert__"]], "__le__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__le__"]], "__lt__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__lt__"]], "__ne__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__ne__"]], "__new__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable static method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__or__"]], "__pow__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__pow__"]], "__repr__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__setstate__"]], "__str__() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.__str__"]], "all() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.all"]], "allclose() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.allclose"]], "any() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.any"]], "constrain() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constrain"]], "constraintmask (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.constraintMask"]], "copy() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.copy"]], "divergence (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.divergence"]], "dot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.dot"]], "fipy.variables.surfactantconvectionvariable": [[451, "module-fipy.variables.surfactantConvectionVariable"]], "getsctype() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.getsctype"]], "inbaseunits() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.inUnitsOf"]], "mag (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.mag"]], "max() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.max"]], "min() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.min"]], "rdot() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.rdot"]], "release() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.release"]], "setvalue() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.setValue"]], "shape (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.shape"]], "std() (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable method)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.std"]], "unit (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.unit"]], "value (fipy.variables.surfactantconvectionvariable.surfactantconvectionvariable property)": [[451, "fipy.variables.surfactantConvectionVariable.SurfactantConvectionVariable.value"]], "surfactantvariable (class in fipy.variables.surfactantvariable)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable"]], "__abs__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__abs__"]], "__and__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__and__"]], "__array__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__array__"]], "__array_wrap__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__array_wrap__"]], "__bool__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__bool__"]], "__call__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__call__"]], "__eq__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__eq__"]], "__ge__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__ge__"]], "__getitem__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__getitem__"]], "__getstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__getstate__"]], "__gt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__gt__"]], "__hash__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__hash__"]], "__invert__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__invert__"]], "__le__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__le__"]], "__lt__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__lt__"]], "__ne__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__ne__"]], "__new__() (fipy.variables.surfactantvariable.surfactantvariable static method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__new__"]], "__nonzero__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__nonzero__"]], "__or__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__or__"]], "__pow__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__pow__"]], "__repr__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__repr__"]], "__setstate__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__setstate__"]], "__str__() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.__str__"]], "all() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.all"]], "allclose() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.allclose"]], "any() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.any"]], "arithmeticfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.cellVolumeAverage"]], "constrain() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.constrain"]], "constraintmask (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.constraintMask"]], "copy() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.copy"]], "dot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.dot"]], "facegrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.faceGrad"]], "facegradaverage (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.faceGradAverage"]], "facevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.faceValue"]], "fipy.variables.surfactantvariable": [[452, "module-fipy.variables.surfactantVariable"]], "gaussgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.gaussGrad"]], "getsctype() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.getsctype"]], "globalvalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.globalValue"]], "grad (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.grad"]], "harmonicfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.inBaseUnits"]], "inunitsof() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.inUnitsOf"]], "interfacevar (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.interfaceVar"]], "leastsquaresgrad (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.leastSquaresGrad"]], "mag (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.mag"]], "max() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.max"]], "min() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.min"]], "minmodfacevalue (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.minmodFaceValue"]], "old (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.old"]], "rdot() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.rdot"]], "release() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.release"]], "setvalue() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.setValue"]], "shape (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.shape"]], "std() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.std"]], "unit (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.unit"]], "updateold() (fipy.variables.surfactantvariable.surfactantvariable method)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.updateOld"]], "value (fipy.variables.surfactantvariable.surfactantvariable property)": [[452, "fipy.variables.surfactantVariable.SurfactantVariable.value"]], "fipy.variables.test": [[453, "module-fipy.variables.test"]], "fipy.variables.unaryoperatorvariable": [[454, "module-fipy.variables.unaryOperatorVariable"]], "uniformnoisevariable (class in fipy.variables.uniformnoisevariable)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable"]], "__abs__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__abs__"]], "__and__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__and__"]], "__array__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array__"]], "__array_wrap__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__array_wrap__"]], "__bool__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__bool__"]], "__call__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__call__"]], "__eq__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__eq__"]], "__ge__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ge__"]], "__getitem__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getitem__"]], "__getstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__getstate__"]], "__gt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__gt__"]], "__hash__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__hash__"]], "__invert__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__invert__"]], "__le__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__le__"]], "__lt__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__lt__"]], "__ne__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__ne__"]], "__new__() (fipy.variables.uniformnoisevariable.uniformnoisevariable static method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__new__"]], "__nonzero__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__nonzero__"]], "__or__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__or__"]], "__pow__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__pow__"]], "__repr__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__repr__"]], "__setstate__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__setstate__"]], "__str__() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.__str__"]], "all() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.all"]], "allclose() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.allclose"]], "any() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.any"]], "arithmeticfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.arithmeticFaceValue"]], "cellvolumeaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.cellVolumeAverage"]], "constrain() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constrain"]], "constraintmask (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.constraintMask"]], "copy() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.copy"]], "dot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.dot"]], "facegrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGrad"]], "facegradaverage (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceGradAverage"]], "facevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.faceValue"]], "fipy.variables.uniformnoisevariable": [[455, "module-fipy.variables.uniformNoiseVariable"]], "gaussgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.gaussGrad"]], "getsctype() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.getsctype"]], "globalvalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.globalValue"]], "grad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.grad"]], "harmonicfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.harmonicFaceValue"]], "inbaseunits() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inBaseUnits"]], "inunitsof() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.inUnitsOf"]], "leastsquaresgrad (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.leastSquaresGrad"]], "mag (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.mag"]], "max() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.max"]], "min() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.min"]], "minmodfacevalue (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.minmodFaceValue"]], "old (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.old"]], "rdot() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.rdot"]], "release() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.release"]], "scramble() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.scramble"]], "setvalue() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.setValue"]], "shape (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.shape"]], "std() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.std"]], "unit (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.unit"]], "updateold() (fipy.variables.uniformnoisevariable.uniformnoisevariable method)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.updateOld"]], "value (fipy.variables.uniformnoisevariable.uniformnoisevariable property)": [[455, "fipy.variables.uniformNoiseVariable.UniformNoiseVariable.value"]], "variable (class in fipy.variables.variable)": [[456, "fipy.variables.variable.Variable"]], "__abs__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__abs__"]], "__and__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__and__"]], "__array__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__array__"]], "__array_wrap__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__array_wrap__"]], "__bool__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__bool__"]], "__call__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__call__"]], "__eq__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__eq__"]], "__ge__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__ge__"]], "__getitem__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__getitem__"]], "__getstate__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__getstate__"]], "__gt__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__gt__"]], "__hash__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__hash__"]], "__invert__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__invert__"]], "__le__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__le__"]], "__lt__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__lt__"]], "__ne__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__ne__"]], "__new__() (fipy.variables.variable.variable static method)": [[456, "fipy.variables.variable.Variable.__new__"]], "__nonzero__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__nonzero__"]], "__or__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__or__"]], "__pow__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__pow__"]], "__repr__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__repr__"]], "__setstate__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__setstate__"]], "__str__() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.__str__"]], "all() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.all"]], "allclose() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.allclose"]], "any() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.any"]], "constrain() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.constrain"]], "copy() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.copy"]], "fipy.variables.variable": [[456, "module-fipy.variables.variable"]], "getsctype() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.getsctype"]], "inbaseunits() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.inBaseUnits"]], "inunitsof() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.inUnitsOf"]], "mag (fipy.variables.variable.variable property)": [[456, "fipy.variables.variable.Variable.mag"]], "max() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.max"]], "min() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.min"]], "release() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.release"]], "setvalue() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.setValue"]], "shape (fipy.variables.variable.variable property)": [[456, "fipy.variables.variable.Variable.shape"]], "std() (fipy.variables.variable.variable method)": [[456, "fipy.variables.variable.Variable.std"]], "unit (fipy.variables.variable.variable property)": [[456, "fipy.variables.variable.Variable.unit"]], "value (fipy.variables.variable.variable property)": [[456, "fipy.variables.variable.Variable.value"]], "dummyviewer (class in fipy.viewers)": [[457, "fipy.viewers.DummyViewer"]], "meshdimensionerror": [[457, "fipy.viewers.MeshDimensionError"]], "viewer() (in module fipy.viewers)": [[457, "fipy.viewers.Viewer"]], "__cause__ (fipy.viewers.meshdimensionerror attribute)": [[457, "fipy.viewers.MeshDimensionError.__cause__"]], "__context__ (fipy.viewers.meshdimensionerror attribute)": [[457, "fipy.viewers.MeshDimensionError.__context__"]], "__delattr__() (fipy.viewers.meshdimensionerror method)": [[457, "fipy.viewers.MeshDimensionError.__delattr__"]], "__getattribute__() (fipy.viewers.meshdimensionerror method)": [[457, "fipy.viewers.MeshDimensionError.__getattribute__"]], "__reduce__() (fipy.viewers.meshdimensionerror method)": [[457, "fipy.viewers.MeshDimensionError.__reduce__"]], "__repr__() (fipy.viewers.meshdimensionerror method)": [[457, "fipy.viewers.MeshDimensionError.__repr__"]], "__setattr__() (fipy.viewers.meshdimensionerror method)": [[457, "fipy.viewers.MeshDimensionError.__setattr__"]], "__str__() (fipy.viewers.meshdimensionerror method)": [[457, "fipy.viewers.MeshDimensionError.__str__"]], "add_note() (fipy.viewers.meshdimensionerror method)": [[457, "fipy.viewers.MeshDimensionError.add_note"]], "plot() (fipy.viewers.dummyviewer method)": [[457, "fipy.viewers.DummyViewer.plot"]], "plotmesh() (fipy.viewers.dummyviewer method)": [[457, "fipy.viewers.DummyViewer.plotMesh"]], "setlimits() (fipy.viewers.dummyviewer method)": [[457, "fipy.viewers.DummyViewer.setLimits"]], "title (fipy.viewers.dummyviewer property)": [[457, "fipy.viewers.DummyViewer.title"]], "vars (fipy.viewers.dummyviewer property)": [[457, "fipy.viewers.DummyViewer.vars"]], "with_traceback() (fipy.viewers.meshdimensionerror method)": [[457, "fipy.viewers.MeshDimensionError.with_traceback"]], "matplotlibviewer() (in module fipy.viewers.matplotlibviewer)": [[458, "fipy.viewers.matplotlibViewer.MatplotlibViewer"]], "fipy.viewers.matplotlibviewer": [[458, "module-fipy.viewers.matplotlibViewer"]], "abstractmatplotlib2dviewer (class in fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer)": [[459, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer"]], "axes (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[459, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[459, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[459, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[459, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.fig"]], "fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer": [[459, "module-fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer"]], "id (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[459, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.id"]], "log (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[459, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[459, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[459, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer method)": [[459, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[459, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.abstractmatplotlib2dviewer.abstractmatplotlib2dviewer property)": [[459, "fipy.viewers.matplotlibViewer.abstractMatplotlib2DViewer.AbstractMatplotlib2DViewer.vars"]], "abstractmatplotlibviewer (class in fipy.viewers.matplotlibviewer.abstractmatplotlibviewer)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer"]], "axes (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.fig"]], "fipy.viewers.matplotlibviewer.abstractmatplotlibviewer": [[460, "module-fipy.viewers.matplotlibViewer.abstractMatplotlibViewer"]], "id (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.id"]], "log (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer method)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.title"]], "vars (fipy.viewers.matplotlibviewer.abstractmatplotlibviewer.abstractmatplotlibviewer property)": [[460, "fipy.viewers.matplotlibViewer.abstractMatplotlibViewer.AbstractMatplotlibViewer.vars"]], "matplotlib1dviewer (class in fipy.viewers.matplotlibviewer.matplotlib1dviewer)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib1dviewer": [[461, "module-fipy.viewers.matplotlibViewer.matplotlib1DViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.id"]], "lines (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.lines"]], "log (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer method)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib1dviewer.matplotlib1dviewer property)": [[461, "fipy.viewers.matplotlibViewer.matplotlib1DViewer.Matplotlib1DViewer.vars"]], "matplotlib2dcontourviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer": [[462, "module-fipy.viewers.matplotlibViewer.matplotlib2DContourViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.id"]], "levels (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.levels"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer method)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dcontourviewer.matplotlib2dcontourviewer property)": [[462, "fipy.viewers.matplotlibViewer.matplotlib2DContourViewer.Matplotlib2DContourViewer.vars"]], "matplotlib2dgridcontourviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer": [[463, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.id"]], "levels (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.levels"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer method)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dgridcontourviewer.matplotlib2dgridcontourviewer property)": [[463, "fipy.viewers.matplotlibViewer.matplotlib2DGridContourViewer.Matplotlib2DGridContourViewer.vars"]], "matplotlib2dgridviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dgridviewer)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dgridviewer": [[464, "module-fipy.viewers.matplotlibViewer.matplotlib2DGridViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer method)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dgridviewer.matplotlib2dgridviewer property)": [[464, "fipy.viewers.matplotlibViewer.matplotlib2DGridViewer.Matplotlib2DGridViewer.vars"]], "matplotlib2dviewer (class in fipy.viewers.matplotlibviewer.matplotlib2dviewer)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.cmap"]], "collection (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.collection"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlib2dviewer": [[465, "module-fipy.viewers.matplotlibViewer.matplotlib2DViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer method)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlib2dviewer.matplotlib2dviewer property)": [[465, "fipy.viewers.matplotlibViewer.matplotlib2DViewer.Matplotlib2DViewer.vars"]], "matplotlibsparsematrixviewer (class in fipy.viewers.matplotlibviewer.matplotlibsparsematrixviewer)": [[466, "fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer.MatplotlibSparseMatrixViewer"]], "fipy.viewers.matplotlibviewer.matplotlibsparsematrixviewer": [[466, "module-fipy.viewers.matplotlibViewer.matplotlibSparseMatrixViewer"]], "matplotlibstreamviewer (class in fipy.viewers.matplotlibviewer.matplotlibstreamviewer)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlibstreamviewer": [[467, "module-fipy.viewers.matplotlibViewer.matplotlibStreamViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.id"]], "kwargs (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.kwargs"]], "log (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer method)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlibstreamviewer.matplotlibstreamviewer property)": [[467, "fipy.viewers.matplotlibViewer.matplotlibStreamViewer.MatplotlibStreamViewer.vars"]], "matplotlibvectorviewer (class in fipy.viewers.matplotlibviewer.matplotlibvectorviewer)": [[468, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer"]], "axes (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.axes"]], "cmap (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.cmap"]], "colorbar (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.colorbar"]], "fig (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.fig"]], "fipy.viewers.matplotlibviewer.matplotlibvectorviewer": [[468, "module-fipy.viewers.matplotlibViewer.matplotlibVectorViewer"]], "id (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.id"]], "log (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.log"]], "plot() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[468, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.plot"]], "plotmesh() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[468, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.plotMesh"]], "setlimits() (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer method)": [[468, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.setLimits"]], "title (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.title"]], "vars (fipy.viewers.matplotlibviewer.matplotlibvectorviewer.matplotlibvectorviewer property)": [[468, "fipy.viewers.matplotlibViewer.matplotlibVectorViewer.MatplotlibVectorViewer.vars"]], "fipy.viewers.matplotlibviewer.test": [[469, "module-fipy.viewers.matplotlibViewer.test"]], "mayaviclient (class in fipy.viewers.mayaviviewer)": [[470, "fipy.viewers.mayaviViewer.MayaviClient"]], "fipy.viewers.mayaviviewer": [[470, "module-fipy.viewers.mayaviViewer"]], "fps (fipy.viewers.mayaviviewer.mayaviclient property)": [[470, "fipy.viewers.mayaviViewer.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient method)": [[470, "fipy.viewers.mayaviViewer.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient method)": [[470, "fipy.viewers.mayaviViewer.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient method)": [[470, "fipy.viewers.mayaviViewer.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient property)": [[470, "fipy.viewers.mayaviViewer.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient property)": [[470, "fipy.viewers.mayaviViewer.MayaviClient.vars"]], "mayaviclient (class in fipy.viewers.mayaviviewer.mayaviclient)": [[471, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient"]], "fipy.viewers.mayaviviewer.mayaviclient": [[471, "module-fipy.viewers.mayaviViewer.mayaviClient"]], "fps (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[471, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.fps"]], "plot() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[471, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plot"]], "plotmesh() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[471, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.plotMesh"]], "setlimits() (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient method)": [[471, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.setLimits"]], "title (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[471, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.title"]], "vars (fipy.viewers.mayaviviewer.mayaviclient.mayaviclient property)": [[471, "fipy.viewers.mayaviViewer.mayaviClient.MayaviClient.vars"]], "mayavidaemon (class in fipy.viewers.mayaviviewer.mayavidaemon)": [[472, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon"]], "fipy.viewers.mayaviviewer.mayavidaemon": [[472, "module-fipy.viewers.mayaviViewer.mayaviDaemon"]], "main() (in module fipy.viewers.mayaviviewer.mayavidaemon)": [[472, "fipy.viewers.mayaviViewer.mayaviDaemon.main"]], "parse_command_line() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[472, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.parse_command_line"]], "setup_source() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[472, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.setup_source"]], "update_pipeline() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[472, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.update_pipeline"]], "view_data() (fipy.viewers.mayaviviewer.mayavidaemon.mayavidaemon method)": [[472, "fipy.viewers.mayaviViewer.mayaviDaemon.MayaviDaemon.view_data"]], "fipy.viewers.mayaviviewer.test": [[473, "module-fipy.viewers.mayaviViewer.test"]], "multiviewer (class in fipy.viewers.multiviewer)": [[474, "fipy.viewers.multiViewer.MultiViewer"]], "fipy.viewers.multiviewer": [[474, "module-fipy.viewers.multiViewer"]], "plot() (fipy.viewers.multiviewer.multiviewer method)": [[474, "fipy.viewers.multiViewer.MultiViewer.plot"]], "plotmesh() (fipy.viewers.multiviewer.multiviewer method)": [[474, "fipy.viewers.multiViewer.MultiViewer.plotMesh"]], "setlimits() (fipy.viewers.multiviewer.multiviewer method)": [[474, "fipy.viewers.multiViewer.MultiViewer.setLimits"]], "title (fipy.viewers.multiviewer.multiviewer property)": [[474, "fipy.viewers.multiViewer.MultiViewer.title"]], "vars (fipy.viewers.multiviewer.multiviewer property)": [[474, "fipy.viewers.multiViewer.MultiViewer.vars"]], "fipy.viewers.test": [[475, "module-fipy.viewers.test"]], "fipy.viewers.testinteractive": [[476, "module-fipy.viewers.testinteractive"]], "tsvviewer (class in fipy.viewers.tsvviewer)": [[477, "fipy.viewers.tsvViewer.TSVViewer"]], "fipy.viewers.tsvviewer": [[477, "module-fipy.viewers.tsvViewer"]], "plot() (fipy.viewers.tsvviewer.tsvviewer method)": [[477, "fipy.viewers.tsvViewer.TSVViewer.plot"]], "plotmesh() (fipy.viewers.tsvviewer.tsvviewer method)": [[477, "fipy.viewers.tsvViewer.TSVViewer.plotMesh"]], "setlimits() (fipy.viewers.tsvviewer.tsvviewer method)": [[477, "fipy.viewers.tsvViewer.TSVViewer.setLimits"]], "title (fipy.viewers.tsvviewer.tsvviewer property)": [[477, "fipy.viewers.tsvViewer.TSVViewer.title"]], "vars (fipy.viewers.tsvviewer.tsvviewer property)": [[477, "fipy.viewers.tsvViewer.TSVViewer.vars"]], "abstractviewer (class in fipy.viewers.viewer)": [[478, "fipy.viewers.viewer.AbstractViewer"]], "fipy.viewers.viewer": [[478, "module-fipy.viewers.viewer"]], "plot() (fipy.viewers.viewer.abstractviewer method)": [[478, "fipy.viewers.viewer.AbstractViewer.plot"]], "plotmesh() (fipy.viewers.viewer.abstractviewer method)": [[478, "fipy.viewers.viewer.AbstractViewer.plotMesh"]], "setlimits() (fipy.viewers.viewer.abstractviewer method)": [[478, "fipy.viewers.viewer.AbstractViewer.setLimits"]], "title (fipy.viewers.viewer.abstractviewer property)": [[478, "fipy.viewers.viewer.AbstractViewer.title"]], "vars (fipy.viewers.viewer.abstractviewer property)": [[478, "fipy.viewers.viewer.AbstractViewer.vars"]], "vtkcellviewer (class in fipy.viewers.vtkviewer)": [[479, "fipy.viewers.vtkViewer.VTKCellViewer"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer)": [[479, "fipy.viewers.vtkViewer.VTKFaceViewer"]], "vtkviewer() (in module fipy.viewers.vtkviewer)": [[479, "fipy.viewers.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer": [[479, "module-fipy.viewers.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[479, "fipy.viewers.vtkViewer.VTKCellViewer.plot"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[479, "fipy.viewers.vtkViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[479, "fipy.viewers.vtkViewer.VTKCellViewer.plotMesh"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[479, "fipy.viewers.vtkViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer method)": [[479, "fipy.viewers.vtkViewer.VTKCellViewer.setLimits"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer method)": [[479, "fipy.viewers.vtkViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer property)": [[479, "fipy.viewers.vtkViewer.VTKCellViewer.title"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[479, "fipy.viewers.vtkViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer property)": [[479, "fipy.viewers.vtkViewer.VTKCellViewer.vars"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer property)": [[479, "fipy.viewers.vtkViewer.VTKFaceViewer.vars"]], "fipy.viewers.vtkviewer.test": [[480, "module-fipy.viewers.vtkViewer.test"]], "vtkcellviewer (class in fipy.viewers.vtkviewer.vtkcellviewer)": [[481, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer"]], "fipy.viewers.vtkviewer.vtkcellviewer": [[481, "module-fipy.viewers.vtkViewer.vtkCellViewer"]], "plot() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[481, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[481, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer method)": [[481, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[481, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkcellviewer.vtkcellviewer property)": [[481, "fipy.viewers.vtkViewer.vtkCellViewer.VTKCellViewer.vars"]], "vtkfaceviewer (class in fipy.viewers.vtkviewer.vtkfaceviewer)": [[482, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer"]], "fipy.viewers.vtkviewer.vtkfaceviewer": [[482, "module-fipy.viewers.vtkViewer.vtkFaceViewer"]], "plot() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[482, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[482, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer method)": [[482, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[482, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkfaceviewer.vtkfaceviewer property)": [[482, "fipy.viewers.vtkViewer.vtkFaceViewer.VTKFaceViewer.vars"]], "vtkviewer (class in fipy.viewers.vtkviewer.vtkviewer)": [[483, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer"]], "fipy.viewers.vtkviewer.vtkviewer": [[483, "module-fipy.viewers.vtkViewer.vtkViewer"]], "plot() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[483, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plot"]], "plotmesh() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[483, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.plotMesh"]], "setlimits() (fipy.viewers.vtkviewer.vtkviewer.vtkviewer method)": [[483, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.setLimits"]], "title (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[483, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.title"]], "vars (fipy.viewers.vtkviewer.vtkviewer.vtkviewer property)": [[483, "fipy.viewers.vtkViewer.vtkViewer.VTKViewer.vars"]], "appveyor": [[484, "term-AppVeyor"]], "azure": [[484, "term-Azure"]], "buildbot": [[484, "term-Buildbot"]], "circleci": [[484, "term-CircleCI"]], "continuous integration": [[484, "term-Continuous-Integration"]], "github actions": [[484, "term-GitHub-Actions"]], "ipython": [[484, "term-IPython"]], "json": [[484, "term-JSON"]], "mpi": [[484, "term-MPI"]], "matplotlib": [[484, "term-Matplotlib"]], "mayavi": [[484, "term-MayaVi"], [484, "term-Mayavi"]], "numpy": [[484, "term-NumPy"]], "numeric": [[484, "term-Numeric"]], "openmp": [[484, "term-OpenMP"]], "pep 3000": [[484, "index-0"]], "petsc": [[484, "term-PETSc"]], "pyamg": [[484, "term-PyAMG"]], "pypi": [[484, "term-PyPI"]], "pytrilinos": [[484, "term-PyTrilinos"]], "pyrex": [[484, "term-Pyrex"]], "pysparse": [[484, "term-Pysparse"]], "python": [[484, "term-Python"]], "python 3": [[484, "term-Python-3"]], "pyxviewer": [[484, "term-PyxViewer"]], "scientificpython": [[484, "term-ScientificPython"]], "sphinx": [[484, "term-Sphinx"]], "travisci": [[484, "term-TravisCI"]], "trilinos": [[484, "term-Trilinos"]], "weave": [[484, "term-Weave"]], "windows": [[484, "term-Windows"]], "conda": [[484, "term-conda"]], "linux": [[484, "term-linux"]], "macos": [[484, "term-macOS"]], "mpi4py": [[484, "term-mpi4py"]], "numarray": [[484, "term-numarray"]], "pandas": [[484, "term-pandas"]], "petsc4py": [[484, "term-petsc4py"]], "pip": [[484, "term-pip"]], "pyamgx": [[484, "term-pyamgx"]], "package": [[492, "module-package"]], "package.subpackage": [[493, "module-package.subpackage"]], "base (class in package.subpackage.base)": [[494, "package.subpackage.base.Base"]], "method1() (package.subpackage.base.base method)": [[494, "package.subpackage.base.Base.method1"]], "method2() (package.subpackage.base.base method)": [[494, "package.subpackage.base.Base.method2"]], "package.subpackage.base": [[494, "module-package.subpackage.base"]], "object (class in package.subpackage.object)": [[495, "package.subpackage.object.Object"]], "method1() (package.subpackage.object.object method)": [[495, "package.subpackage.object.Object.method1"]], "method2() (package.subpackage.object.object method)": [[495, "package.subpackage.object.Object.method2"]], "package.subpackage.object": [[495, "module-package.subpackage.object"]]}})